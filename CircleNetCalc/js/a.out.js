// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) return 0; }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;


var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}



// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');


var buffer = new ArrayBuffer(TOTAL_MEMORY);

HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 17584;
  /* global initializers */ __ATINIT__.push({ func: function() { ___cxx_global_var_init10() } }, { func: function() { __GLOBAL__sub_I_main_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([115,105,122,101,0,0,0,0,97,114,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,114,111,109,0,0,0,0,116,111,0,0,0,0,0,0,100,105,115,116,97,110,99,101,0,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,114,101,115,117,108,116,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,1,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,110,101,97,114,101,115,116,95,119,105,116,104,95,114,101,116,95,97,108,103,0,0,0,0,84,111,32,116,104,101,32,110,101,97,114,115,101,116,32,97,108,103,111,114,105,116,104,109,32,40,119,105,116,104,32,114,101,116,117,114,110,41,0,0,208,144,208,187,208,179,208,190,209,128,208,184,209,130,208,188,32,34,208,152,208,180,208,184,32,208,178,32,208,177,208,187,208,184,208,182,208,189,208,184,208,185,34,32,40,209,129,32,208,178,208,190,208,183,208,178,209,128,208,176,209,130,208,190,208,188,41,0,0,0,0,0,78,55,99,114,111,117,116,101,115,50,48,110,101,97,114,101,115,116,95,119,105,116,104,95,114,101,116,95,97,108,103,73,100,69,69,0,0,0,0,0,78,55,99,114,111,117,116,101,115,57,97,108,103,111,114,105,116,104,109,73,100,69,69,0,232,61,0,0,72,1,0,0,16,62,0,0,32,1,0,0,96,1,0,0,0,0,0,0,0,0,0,0,224,1,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,55,99,114,111,117,116,101,115,54,97,110,115,119,101,114,73,100,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,0,16,62,0,0,152,1,0,0,96,14,0,0,0,0,0,0,0,0,0,0,96,1,0,0,13,0,0,0,14,0,0,0,3,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,192,2,0,0,16,0,0,0,17,0,0,0,3,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,0,0,0,0,110,101,97,114,101,115,116,95,97,108,103,0,0,0,0,0,84,111,32,116,104,101,32,110,101,97,114,115,101,116,32,97,108,103,111,114,105,116,104,109,0,0,0,0,0,0,0,0,208,144,208,187,208,179,208,190,209,128,208,184,209,130,208,188,32,34,208,152,208,180,208,184,32,208,178,32,208,177,208,187,208,184,208,182,208,189,208,184,208,185,34,0,0,0,0,0,78,55,99,114,111,117,116,101,115,49,49,110,101,97,114,101,115,116,95,97,108,103,73,100,69,69,0,0,0,0,0,0,16,62,0,0,160,2,0,0,96,1,0,0,0,0,0,0,0,0,0,0,96,3,0,0,22,0,0,0,23,0,0,0,3,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,0,0,0,0,108,105,116,116,108,101,95,97,108,103,0,0,0,0,0,0,76,105,116,116,108,101,39,115,32,97,108,103,111,114,105,116,104,109,0,0,0,0,0,0,208,144,208,187,208,179,208,190,209,128,208,184,209,130,208,188,32,208,155,208,184,209,130,209,130,208,187,208,176,0,0,0,78,55,99,114,111,117,116,101,115,49,48,108,105,116,116,108,101,95,97,108,103,73,100,69,69,0,0,0,0,0,0,0,16,62,0,0,64,3,0,0,96,1,0,0,0,0,0,0,0,0,0,0,216,3,0,0,28,0,0,0,29,0,0,0,30,0,0,0,11,0,0,0,31,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,115,104,97,114,101,100,95,112,116,114,95,101,109,112,108,97,99,101,73,78,55,99,114,111,117,116,101,115,53,110,100,97,116,97,73,100,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,0,0,16,62,0,0,144,3,0,0,96,14,0,0,0,0,0,0,0,0,0,0,136,4,0,0,32,0,0,0,33,0,0,0,3,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,112,114,105,109,95,101,117,108,101,114,95,97,108,103,0,0,80,114,105,109,45,69,117,108,101,114,32,97,108,103,111,114,105,116,104,109,0,0,0,0,208,144,208,187,208,179,208,190,209,128,208,184,209,130,208,188,32,208,159,209,128,208,184,208,188,208,176,45,208,173,208,185,208,187,208,181,209,128,208,176,0,0,0,0,0,0,0,0,78,55,99,114,111,117,116,101,115,49,52,112,114,105,109,95,101,117,108,101,114,95,97,108,103,73,100,69,69,0,0,0,16,62,0,0,104,4,0,0,96,1,0,0,0,0,0,0,110,117,108,108,10,0,0,0,0,0,0,0,64,5,0,0,38,0,0,0,39,0,0,0,3,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,0,0,0,0,110,110,95,97,108,103,0,0,78,101,97,114,101,115,116,32,78,101,105,103,104,98,111,114,32,97,108,103,111,114,105,116,104,109,0,0,0,0,0,0,208,144,208,187,208,179,208,190,209,128,208,184,209,130,208,188,32,208,177,208,187,208,184,208,182,208,176,208,185,209,136,208,181,208,179,208,190,32,209,129,208,190,209,129,208,181,208,180,208,176,0,0,0,0,0,0,78,55,99,114,111,117,116,101,115,54,110,110,95,97,108,103,73,100,69,69,0,0,0,0,16,62,0,0,40,5,0,0,96,1,0,0,0,0,0,0,78,55,99,114,111,117,116,101,115,49,55,100,97,116,97,95,105,110,99,111,110,115,105,115,116,101,110,116,69,0,0,0,16,62,0,0,80,5,0,0,96,59,0,0,0,0,0,0,0,0,0,0,112,5,0,0,44,0,0,0,45,0,0,0,46,0,0,0,0,0,0,0,68,97,116,97,32,105,115,32,105,110,99,111,110,115,105,115,116,101,110,116,32,105,110,32,40,0,0,0,0,0,0,0,44,32,0,0,0,0,0,0,41,0,0,0,0,0,0,0,65,114,103,115,32,97,114,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,109,97,112,58,58,97,116,58,32,32,107,101,121,32,110,111,116,32,102,111,117,110,100,0,110,117,108,108,0,0,0,0,37,46,102,0,0,0,0,0,37,46,49,55,103,0,0,0,97,114,114,97,121,0,0,0,111,98,106,101,99,116,0,0,48,0,0,0,0,0,0,0,92,34,0,0,0,0,0,0,92,92,0,0,0,0,0,0,92,47,0,0,0,0,0,0,92,98,0,0,0,0,0,0,92,102,0,0,0,0,0,0,92,110,0,0,0,0,0,0,92,114,0,0,0,0,0,0,92,116,0,0,0,0,0,0,92,117,37,48,52,120,0,0,34,116,121,112,101,32,109,105,115,109,97,116,99,104,33,32,99,97,108,108,32,105,115,60,116,121,112,101,62,40,41,32,98,101,102,111,114,101,32,103,101,116,60,116,121,112,101,62,40,41,34,32,38,38,32,105,115,60,97,114,114,97,121,62,40,41,0,0,0,0,0,0,34,116,121,112,101,32,109,105,115,109,97,116,99,104,33,32,99,97,108,108,32,105,115,60,116,121,112,101,62,40,41,32,98,101,102,111,114,101,32,103,101,116,60,116,121,112,101,62,40,41,34,32,38,38,32,105,115,60,100,111,117,98,108,101,62,40,41,0,0,0,0,0,34,116,121,112,101,32,109,105,115,109,97,116,99,104,33,32,99,97,108,108,32,105,115,60,116,121,112,101,62,40,41,32,98,101,102,111,114,101,32,103,101,116,60,116,121,112,101,62,40,41,34,32,38,38,32,105,115,60,111,98,106,101,99,116,62,40,41,0,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,32,97,116,32,108,105,110,101,32,37,100,32,110,101,97,114,58,32,0,0,117,108,108,0,0,0,0,0,97,108,115,101,0,0,0,0,114,117,101,0,0,0,0,0,33,32,117,110,103,111,116,95,0,0,0,0,0,0,0,0,34,116,121,112,101,32,109,105,115,109,97,116,99,104,33,32,99,97,108,108,32,105,115,60,116,121,112,101,62,40,41,32,98,101,102,111,114,101,32,103,101,116,60,116,121,112,101,62,40,41,34,32,38,38,32,105,115,60,115,116,100,58,58,115,116,114,105,110,103,62,40,41], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([104,12,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,59,0,0,0,60,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,16,62,0,0,72,12,0,0,88,18,0,0,0,0,0,0,0,0,0,0,208,12,0,0,47,0,0,0,61,0,0,0,62,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,63,0,0,0,54,0,0,0,55,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,16,62,0,0,184,12,0,0,88,18,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,104,13,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,75,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,16,62,0,0,72,13,0,0,24,18,0,0,0,0,0,0,0,0,0,0,208,13,0,0,69,0,0,0,83,0,0,0,84,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,85,0,0,0,76,0,0,0,77,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,89,0,0,0,90,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,16,62,0,0,184,13,0,0,24,18,0,0,0,0,0,0,0,0,0,0,24,14,0,0,91,0,0,0,92,0,0,0,15,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,232,61,0,0,248,13,0,0,0,0,0,0,96,14,0,0,91,0,0,0,93,0,0,0,15,0,0,0,11,0,0,0,15,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,115,104,97,114,101,100,95,119,101,97,107,95,99,111,117,110,116,69,0,0,0,112,62,0,0,64,14,0,0,0,0,0,0,1,0,0,0,24,14,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,176,14,0,0,94,0,0,0,95,0,0,0,96,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,16,62,0,0,152,14,0,0,80,60,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,232,61,0,0,192,14,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,16,62,0,0,232,14,0,0,224,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,37,100,0,0,0,0,0,0,0,0,0,0,24,18,0,0,97,0,0,0,98,0,0,0,99,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,85,0,0,0,76,0,0,0,77,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,89,0,0,0,90,0,0,0,0,0,0,0,88,18,0,0,100,0,0,0,101,0,0,0,102,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,63,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,58,0,0,0,67,0,0,0,68,0,0,0,8,0,0,0,0,0,0,0,144,18,0,0,103,0,0,0,104,0,0,0,248,255,255,255,248,255,255,255,144,18,0,0,105,0,0,0,106,0,0,0,8,0,0,0,0,0,0,0,216,18,0,0,107,0,0,0,108,0,0,0,248,255,255,255,248,255,255,255,216,18,0,0,109,0,0,0,110,0,0,0,4,0,0,0,0,0,0,0,32,19,0,0,111,0,0,0,112,0,0,0,252,255,255,255,252,255,255,255,32,19,0,0,113,0,0,0,114,0,0,0,4,0,0,0,0,0,0,0,104,19,0,0,115,0,0,0,116,0,0,0,252,255,255,255,252,255,255,255,104,19,0,0,117,0,0,0,118,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,17,0,0,119,0,0,0,120,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,88,17,0,0,121,0,0,0,122,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,16,62,0,0,16,17,0,0,176,14,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,232,61,0,0,64,17,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,16,62,0,0,96,17,0,0,88,17,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,16,62,0,0,160,17,0,0,88,17,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,232,61,0,0,224,17,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,232,61,0,0,32,18,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,112,62,0,0,96,18,0,0,0,0,0,0,1,0,0,0,144,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,112,62,0,0,168,18,0,0,0,0,0,0,1,0,0,0,208,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,112,62,0,0,240,18,0,0,0,0,0,0,1,0,0,0,144,17,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,112,62,0,0,56,19,0,0,0,0,0,0,1,0,0,0,208,17,0,0,3,244,255,255,0,0,0,0,200,19,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,16,62,0,0,168,19,0,0,0,15,0,0,0,0,0,0,0,0,0,0,16,34,0,0,130,0,0,0,131,0,0,0,132,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,34,0,0,136,0,0,0,137,0,0,0,132,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,36,0,0,141,0,0,0,142,0,0,0,132,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,160,36,0,0,154,0,0,0,155,0,0,0,132,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,164,0,0,0,165,0,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,37,0,0,167,0,0,0,168,0,0,0,132,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,248,37,0,0,177,0,0,0,178,0,0,0,132,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,176,38,0,0,187,0,0,0,188,0,0,0,132,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,248,255,255,255,176,38,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,200,0,0,0,201,0,0,0,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,80,39,0,0,203,0,0,0,204,0,0,0,132,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,248,255,255,255,80,39,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,224,39,0,0,219,0,0,0,220,0,0,0,132,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,40,0,0,222,0,0,0,223,0,0,0,132,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,34,0,0,225,0,0,0,226,0,0,0,132,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,34,0,0,236,0,0,0,237,0,0,0,132,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,246,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,35,0,0,247,0,0,0,248,0,0,0,132,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,255,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,35,0,0,2,1,0,0,3,1,0,0,132,0,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,10,1,0,0,11,1,0,0,12,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,40,0,0,13,1,0,0,14,1,0,0,132,0,0,0,15,1,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,104,41,0,0,17,1,0,0,18,1,0,0,132,0,0,0,19,1,0,0,20,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,248,41,0,0,21,1,0,0,22,1,0,0,132,0,0,0,23,1,0,0,24,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,136,42,0,0,25,1,0,0,26,1,0,0,132,0,0,0,27,1,0,0,28,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,42,0,0,29,1,0,0,30,1,0,0,132,0,0,0,31,1,0,0,32,1,0,0,33,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,43,0,0,34,1,0,0,35,1,0,0,132,0,0,0,36,1,0,0,37,1,0,0,38,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,232,33,0,0,39,1,0,0,40,1,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,30,0,0,41,1,0,0,42,1,0,0,132,0,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,31,0,0,51,1,0,0,52,1,0,0,132,0,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,33,0,0,60,1,0,0,61,1,0,0,132,0,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,66,1,0,0,0,0,0,0,192,33,0,0,67,1,0,0,68,1,0,0,132,0,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,248,29,0,0,74,1,0,0,75,1,0,0,132,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,16,62,0,0,224,29,0,0,24,14,0,0,0,0,0,0,0,0,0,0,136,30,0,0,74,1,0,0,76,1,0,0,132,0,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,232,61,0,0,104,30,0,0,112,62,0,0,80,30,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,112,62,0,0,168,30,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,30,0,0,2,0,0,0,0,0,0,0,88,31,0,0,74,1,0,0,89,1,0,0,132,0,0,0,90,1,0,0,91,1,0,0,92,1,0,0,93,1,0,0,94,1,0,0,95,1,0,0,96,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,232,61,0,0,56,31,0,0,112,62,0,0,16,31,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,80,31,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,112,62,0,0,120,31,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,80,31,0,0,2,0,0,0,0,0,0,0,24,32,0,0,74,1,0,0,97,1,0,0,132,0,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,102,1,0,0,103,1,0,0,104,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,112,62,0,0,240,31,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,80,31,0,0,2,0,0,0,0,0,0,0,144,32,0,0,74,1,0,0,105,1,0,0,132,0,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,112,62,0,0,104,32,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,80,31,0,0,2,0,0,0,0,0,0,0,8,33,0,0,74,1,0,0,113,1,0,0,132,0,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,16,62,0,0,224,32,0,0,144,32,0,0,0,0,0,0,0,0,0,0,112,33,0,0,74,1,0,0,114,1,0,0,132,0,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,16,62,0,0,72,33,0,0,144,32,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,16,62,0,0,128,33,0,0,248,29,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,16,62,0,0,168,33,0,0,248,29,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,16,62,0,0,208,33,0,0,248,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,16,62,0,0,248,33,0,0,248,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,16,62,0,0,32,34,0,0,248,29,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,232,61,0,0,104,34,0,0,112,62,0,0,72,34,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,112,62,0,0,168,34,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,112,62,0,0,232,34,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,34,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,112,62,0,0,40,35,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,34,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,232,61,0,0,200,35,0,0,112,62,0,0,176,35,0,0,0,0,0,0,1,0,0,0,232,35,0,0,0,0,0,0,112,62,0,0,104,35,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,240,35,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,112,62,0,0,112,36,0,0,0,0,0,0,1,0,0,0,232,35,0,0,0,0,0,0,112,62,0,0,40,36,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,136,36,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,232,61,0,0,32,37,0,0,112,62,0,0,8,37,0,0,0,0,0,0,1,0,0,0,64,37,0,0,0,0,0,0,112,62,0,0,192,36,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,72,37,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,112,62,0,0,200,37,0,0,0,0,0,0,1,0,0,0,64,37,0,0,0,0,0,0,112,62,0,0,128,37,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,224,37,0,0,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,232,61,0,0,96,38,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,232,61,0,0,128,38,0,0,112,62,0,0,24,38,0,0,0,0,0,0,3,0,0,0,248,29,0,0,2,0,0,0,120,38,0,0,2,0,0,0,168,38,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,232,61,0,0,32,39,0,0,112,62,0,0,216,38,0,0,0,0,0,0,3,0,0,0,248,29,0,0,2,0,0,0,120,38,0,0,2,0,0,0,72,39,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,232,61,0,0,192,39,0,0,112,62,0,0,120,39,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,216,39,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,112,62,0,0,0,40,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,216,39,0,0,0,8,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,232,61,0,0,176,40,0,0,112,62,0,0,104,40,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,208,40,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,232,61,0,0,64,41,0,0,112,62,0,0,248,40,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,96,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,232,61,0,0,208,41,0,0,112,62,0,0,136,41,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,240,41,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,232,61,0,0,96,42,0,0,112,62,0,0,24,42,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,128,42,0,0,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,232,61,0,0,192,42,0,0,112,62,0,0,168,42,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,216,42,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,112,62,0,0,0,43,0,0,0,0,0,0,2,0,0,0,248,29,0,0,2,0,0,0,216,42,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+3076);
/* memory initializer */ allocate([117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,1,0,0,0,0,0,0,24,57,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,176,58,0,0,116,1,0,0,117,1,0,0,118,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,16,62,0,0,160,58,0,0,96,59,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,100,58,58,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,96,59,0,0,119,1,0,0,120,1,0,0,121,1,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,232,61,0,0,80,59,0,0,0,0,0,0,168,59,0,0,122,1,0,0,123,1,0,0,124,1,0,0,0,0,0,0,0,0,0,0,80,60,0,0,125,1,0,0,126,1,0,0,96,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,16,62,0,0,152,59,0,0,96,59,0,0,0,0,0,0,0,0,0,0,232,59,0,0,122,1,0,0,127,1,0,0,124,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,16,62,0,0,208,59,0,0,168,59,0,0,0,0,0,0,0,0,0,0,40,60,0,0,122,1,0,0,128,1,0,0,124,1,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,16,62,0,0,16,60,0,0,168,59,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,16,62,0,0,56,60,0,0,96,59,0,0,0,0,0,0,0,0,0,0,144,60,0,0,125,1,0,0,129,1,0,0,96,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,16,62,0,0,120,60,0,0,80,60,0,0,0,0,0,0,0,0,0,0,240,60,0,0,130,1,0,0,131,1,0,0,132,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,232,61,0,0,200,60,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,16,62,0,0,224,60,0,0,96,59,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,16,62,0,0,0,61,0,0,216,60,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,16,62,0,0,56,61,0,0,40,61,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,16,62,0,0,152,61,0,0,40,61,0,0,0,0,0,0,16,62,0,0,112,61,0,0,192,61,0,0,0,0,0,0,0,0,0,0,96,61,0,0,133,1,0,0,134,1,0,0,135,1,0,0,136,1,0,0,137,1,0,0,138,1,0,0,139,1,0,0,140,1,0,0,0,0,0,0,88,62,0,0,133,1,0,0,141,1,0,0,135,1,0,0,136,1,0,0,137,1,0,0,142,1,0,0,143,1,0,0,144,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,16,62,0,0,48,62,0,0,96,61,0,0,0,0,0,0,0,0,0,0,184,62,0,0,133,1,0,0,145,1,0,0,135,1,0,0,136,1,0,0,137,1,0,0,146,1,0,0,147,1,0,0,148,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,16,62,0,0,144,62,0,0,96,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,149,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+13316);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  function _llvm_ctpop_i32(x) {
      var ret = 0;
      while (x) {
        if (x&1) ret++;
        x >>>= 1;
      }
      return ret;
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function ___cxa_guard_abort() {}

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_dii(x) { Module["printErr"]("Invalid function pointer called with signature 'dii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_dii(index,a1,a2) {
  try {
    return Module["dynCall_dii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_id": nullFunc_id, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_iid": nullFunc_iid, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_dii": nullFunc_dii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_id": invoke_id, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_iid": invoke_iid, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_dii": invoke_dii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viiid": invoke_viiid, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_send": _send, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_vfprintf": _vfprintf, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_guard_acquire": ___cxa_guard_acquire, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_fwrite": _fwrite, "___cxa_free_exception": ___cxa_free_exception, "_calloc": _calloc, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "__reallyNegative": __reallyNegative, "_sbrk": _sbrk, "_uselocale": _uselocale, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_freelocale": _freelocale, "___setErrNo": ___setErrNo, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "___cxa_end_catch": ___cxa_end_catch, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_localeconv": _localeconv, "_mkport": _mkport, "_pthread_key_create": _pthread_key_create, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_sysconf": _sysconf, "_read": _read, "___cxa_rethrow": ___cxa_rethrow, "_abort": _abort, "_catclose": _catclose, "_llvm_ctpop_i32": _llvm_ctpop_i32, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "_catopen": _catopen, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_guard_abort": ___cxa_guard_abort, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_id=env.nullFunc_id;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_iid=env.nullFunc_iid;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_dii=env.nullFunc_dii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiid=env.nullFunc_viiid;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_id=env.invoke_id;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_iid=env.invoke_iid;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_dii=env.invoke_dii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiid=env.invoke_viiid;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _send=env._send;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _vfprintf=env._vfprintf;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _fwrite=env._fwrite;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var _calloc=env._calloc;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var __reallyNegative=env.__reallyNegative;
  var _sbrk=env._sbrk;
  var _uselocale=env._uselocale;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _freelocale=env._freelocale;
  var ___setErrNo=env.___setErrNo;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _localeconv=env._localeconv;
  var _mkport=env._mkport;
  var _pthread_key_create=env._pthread_key_create;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _sysconf=env._sysconf;
  var _read=env._read;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _llvm_ctpop_i32=env._llvm_ctpop_i32;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _catopen=env._catopen;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function __Z9read_jsonRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$json) {
 $agg$result = $agg$result|0;
 $json = $json|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $d = 0, $data = 0;
 var $err = 0, $i = 0, $j = 0, $obj = 0, $size = 0, $v = 0, $value = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $v = sp + 8|0;
 $err = sp + 104|0;
 $size = sp + 84|0;
 $40 = sp + 72|0;
 $data = sp + 60|0;
 $41 = sp + 48|0;
 $d = sp + 40|0;
 $36 = $json;
 __ZN8picojson5valueC2Ev($v);
 $42 = $36;
 __THREW__ = 0;
 invoke_viii(406,($err|0),($v|0),($42|0));
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $76 = ___cxa_find_matching_catch()|0;
  $77 = tempRet0;
  $37 = $76;
  $38 = $77;
 } else {
  $35 = $err;
  $45 = $35;
  $34 = $45;
  $46 = $34;
  $33 = $46;
  $47 = $33;
  $32 = $47;
  $48 = $32;
  $31 = $48;
  $49 = $31;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $51 & 1;
  $53 = ($52|0)!=(0);
  if ($53) {
   $27 = $46;
   $54 = $27;
   $26 = $54;
   $55 = $26;
   $25 = $55;
   $56 = $25;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $66 = $58;
  } else {
   $30 = $46;
   $59 = $30;
   $29 = $59;
   $60 = $29;
   $28 = $60;
   $61 = $28;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 >> 1;
   $66 = $64;
  }
  $65 = ($66|0)==(0);
  do {
   if ($65) {
    __THREW__ = 0;
    $80 = (invoke_ii(409,($v|0))|0);
    $81 = __THREW__; __THREW__ = 0;
    $82 = $81&1;
    if ($82) {
     label = 11;
    } else {
     $obj = $80;
     $83 = $obj;
     $19 = $40;
     $20 = 8;
     $84 = $19;
     $85 = $20;
     $17 = $84;
     $18 = $85;
     $86 = $17;
     $16 = $86;
     $87 = $16;
     $15 = $87;
     $88 = $15;
     $14 = $88;
     $89 = $18;
     $90 = $18;
     __THREW__ = 0;
     $91 = (invoke_ii(410,($90|0))|0);
     $92 = __THREW__; __THREW__ = 0;
     $93 = $92&1;
     if ($93) {
      label = 11;
     } else {
      __THREW__ = 0;
      invoke_viii(411,($86|0),($89|0),($91|0));
      $94 = __THREW__; __THREW__ = 0;
      $95 = $94&1;
      if ($95) {
       label = 11;
      } else {
       __THREW__ = 0;
       $96 = (invoke_iii(412,($83|0),($40|0))|0);
       $97 = __THREW__; __THREW__ = 0;
       $98 = $97&1;
       if (!($98)) {
        __THREW__ = 0;
        $99 = (invoke_ii(413,($96|0))|0);
        $100 = __THREW__; __THREW__ = 0;
        $101 = $100&1;
        if (!($101)) {
         $102 = +HEAPF64[$99>>3];
         $103 = (~~(($102))>>>0);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
         HEAP32[$size>>2] = $103;
         $104 = $obj;
         $12 = $41;
         $13 = 16;
         $105 = $12;
         $106 = $13;
         $10 = $105;
         $11 = $106;
         $107 = $10;
         $9 = $107;
         $108 = $9;
         $8 = $108;
         $109 = $8;
         $7 = $109;
         $110 = $11;
         $111 = $11;
         __THREW__ = 0;
         $112 = (invoke_ii(410,($111|0))|0);
         $113 = __THREW__; __THREW__ = 0;
         $114 = $113&1;
         if ($114) {
          label = 11;
          break;
         }
         __THREW__ = 0;
         invoke_viii(411,($107|0),($110|0),($112|0));
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          label = 11;
          break;
         }
         __THREW__ = 0;
         $117 = (invoke_iii(412,($104|0),($41|0))|0);
         $118 = __THREW__; __THREW__ = 0;
         $119 = $118&1;
         if (!($119)) {
          __THREW__ = 0;
          $120 = (invoke_ii(414,($117|0))|0);
          $121 = __THREW__; __THREW__ = 0;
          $122 = $121&1;
          if (!($122)) {
           __THREW__ = 0;
           invoke_vii(415,($data|0),($120|0));
           $123 = __THREW__; __THREW__ = 0;
           $124 = $123&1;
           if (!($124)) {
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($41);
            $6 = $size;
            $125 = $6;
            $5 = $125;
            $126 = $5;
            __THREW__ = 0;
            invoke_vii(416,($d|0),($126|0));
            $127 = __THREW__; __THREW__ = 0;
            $128 = $127&1;
            do {
             if ($128) {
              $179 = ___cxa_find_matching_catch()|0;
              $180 = tempRet0;
              $37 = $179;
              $38 = $180;
             } else {
              $i = 0;
              L31: while(1) {
               $129 = $i;
               $4 = $data;
               $130 = $4;
               $131 = (($130) + 4|0);
               $132 = HEAP32[$131>>2]|0;
               $133 = HEAP32[$130>>2]|0;
               $134 = $132;
               $135 = $133;
               $136 = (($134) - ($135))|0;
               $137 = (($136|0) / 16)&-1;
               $138 = ($129>>>0)<($137>>>0);
               if (!($138)) {
                break;
               }
               $139 = $i;
               __THREW__ = 0;
               $140 = (invoke_iii(417,($data|0),($139|0))|0);
               $141 = __THREW__; __THREW__ = 0;
               $142 = $141&1;
               if ($142) {
                label = 40;
                break;
               }
               __THREW__ = 0;
               $143 = (invoke_ii(418,($140|0))|0);
               $144 = __THREW__; __THREW__ = 0;
               $145 = $144&1;
               if ($145) {
                label = 40;
                break;
               }
               $col = $143;
               $j = 0;
               while(1) {
                $146 = $j;
                $147 = $col;
                $3 = $147;
                $148 = $3;
                $149 = (($148) + 4|0);
                $150 = HEAP32[$149>>2]|0;
                $151 = HEAP32[$148>>2]|0;
                $152 = $150;
                $153 = $151;
                $154 = (($152) - ($153))|0;
                $155 = (($154|0) / 16)&-1;
                $156 = ($146>>>0)<($155>>>0);
                if (!($156)) {
                 break;
                }
                $157 = $col;
                $158 = $j;
                __THREW__ = 0;
                $159 = (invoke_iii(419,($157|0),($158|0))|0);
                $160 = __THREW__; __THREW__ = 0;
                $161 = $160&1;
                if ($161) {
                 label = 40;
                 break L31;
                }
                __THREW__ = 0;
                $162 = (invoke_ii(413,($159|0))|0);
                $163 = __THREW__; __THREW__ = 0;
                $164 = $163&1;
                if ($164) {
                 label = 40;
                 break L31;
                }
                $165 = +HEAPF64[$162>>3];
                $value = $165;
                $2 = $d;
                $166 = $2;
                $167 = HEAP32[$166>>2]|0;
                $168 = $i;
                $169 = $j;
                $170 = $value;
                __THREW__ = 0;
                invoke_viiid(420,($167|0),($168|0),($169|0),(+$170));
                $171 = __THREW__; __THREW__ = 0;
                $172 = $171&1;
                if ($172) {
                 label = 40;
                 break L31;
                }
                $173 = $j;
                $174 = (($173) + 1)|0;
                $j = $174;
               }
               $183 = $i;
               $184 = (($183) + 1)|0;
               $i = $184;
              }
              if ((label|0) == 40) {
               $181 = ___cxa_find_matching_catch()|0;
               $182 = tempRet0;
               $37 = $181;
               $38 = $182;
               __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($d);
               break;
              }
              $0 = $agg$result;
              $1 = $d;
              $185 = $0;
              $186 = $1;
              $187 = HEAP32[$186>>2]|0;
              HEAP32[$185>>2] = $187;
              $188 = (($185) + 4|0);
              $189 = $1;
              $190 = (($189) + 4|0);
              $191 = HEAP32[$190>>2]|0;
              HEAP32[$188>>2] = $191;
              $192 = $1;
              HEAP32[$192>>2] = 0;
              $193 = $1;
              $194 = (($193) + 4|0);
              HEAP32[$194>>2] = 0;
              $39 = 1;
              __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($d);
              __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($data);
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($err);
              __ZN8picojson5valueD2Ev($v);
              STACKTOP = sp;return;
             }
            } while(0);
            __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($data);
            break;
           }
          }
         }
         $177 = ___cxa_find_matching_catch()|0;
         $178 = tempRet0;
         $37 = $177;
         $38 = $178;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($41);
         break;
        }
       }
       $175 = ___cxa_find_matching_catch()|0;
       $176 = tempRet0;
       $37 = $175;
       $38 = $176;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
      }
     }
    }
   } else {
    __THREW__ = 0;
    $67 = (invoke_iii(407,(2192|0),($err|0))|0);
    $68 = __THREW__; __THREW__ = 0;
    $69 = $68&1;
    if ($69) {
     label = 11;
    } else {
     $23 = $67;
     $24 = 408;
     $70 = $23;
     $71 = $24;
     __THREW__ = 0;
     (invoke_ii($71|0,($70|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 11;
     } else {
      $21 = $agg$result;
      $22 = 0;
      $74 = $21;
      HEAP32[$74>>2] = 0;
      $75 = (($74) + 4|0);
      HEAP32[$75>>2] = 0;
      $39 = 1;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($err);
      __ZN8picojson5valueD2Ev($v);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 11) {
   $78 = ___cxa_find_matching_catch()|0;
   $79 = tempRet0;
   $37 = $78;
   $38 = $79;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($err);
 }
 __ZN8picojson5valueD2Ev($v);
 $195 = $37;
 $196 = $38;
 ___resumeException($195|0);
 // unreachable;
}
function __ZN8picojson5valueC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN8picojson5parseERNS_5valueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result,$out,$s) {
 $agg$result = $agg$result|0;
 $out = $out|0;
 $s = $s|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $51 = sp + 20|0;
 $52 = sp + 16|0;
 $53 = sp + 12|0;
 $48 = $out;
 $49 = $s;
 $$expand_i1_val = 0;
 $50 = $$expand_i1_val;
 $47 = $agg$result;
 $57 = $47;
 $46 = $57;
 $58 = $46;
 $45 = $58;
 $59 = $45;
 $44 = $59;
 $60 = $44;
 $43 = $60;
 $42 = $58;
 $61 = $42;
 $41 = $61;
 $62 = $41;
 $40 = $62;
 $63 = $40;
 $__a$i$i$i = $63;
 $__i$i$i$i = 0;
 while(1) {
  $64 = $__i$i$i$i;
  $65 = ($64>>>0)<(3);
  if (!($65)) {
   break;
  }
  $66 = $__i$i$i$i;
  $67 = $__a$i$i$i;
  $68 = (($67) + ($66<<2)|0);
  HEAP32[$68>>2] = 0;
  $69 = $__i$i$i$i;
  $70 = (($69) + 1)|0;
  $__i$i$i$i = $70;
 }
 $71 = $48;
 $72 = $49;
 $39 = $72;
 $73 = $39;
 $38 = $73;
 $74 = $38;
 $37 = $74;
 $75 = $37;
 $36 = $75;
 $76 = $36;
 $35 = $76;
 $77 = $35;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $29 = $74;
  $82 = $29;
  $28 = $82;
  $83 = $28;
  $27 = $83;
  $84 = $27;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $93 = $86;
 } else {
  $34 = $74;
  $87 = $34;
  $33 = $87;
  $88 = $33;
  $32 = $88;
  $89 = $32;
  $90 = (($89) + 1|0);
  $31 = $90;
  $91 = $31;
  $30 = $91;
  $92 = $30;
  $93 = $92;
 }
 $25 = $51;
 $26 = $93;
 $94 = $25;
 $95 = $26;
 HEAP32[$94>>2] = $95;
 $96 = $49;
 $24 = $96;
 $97 = $24;
 $23 = $97;
 $98 = $23;
 $22 = $98;
 $99 = $22;
 $21 = $99;
 $100 = $21;
 $20 = $100;
 $101 = $20;
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 & 1;
 $105 = ($104|0)!=(0);
 if ($105) {
  $14 = $98;
  $106 = $14;
  $13 = $106;
  $107 = $13;
  $12 = $107;
  $108 = $12;
  $109 = (($108) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $137 = $110;
 } else {
  $19 = $98;
  $111 = $19;
  $18 = $111;
  $112 = $18;
  $17 = $112;
  $113 = $17;
  $114 = (($113) + 1|0);
  $16 = $114;
  $115 = $16;
  $15 = $115;
  $116 = $15;
  $137 = $116;
 }
 $9 = $97;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $7 = $118;
 $119 = $7;
 $6 = $119;
 $120 = $6;
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 if ($124) {
  $2 = $117;
  $125 = $2;
  $1 = $125;
  $126 = $1;
  $0 = $126;
  $127 = $0;
  $128 = (($127) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $138 = $129;
 } else {
  $5 = $117;
  $130 = $5;
  $4 = $130;
  $131 = $4;
  $3 = $131;
  $132 = $3;
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = $134 >> 1;
  $138 = $135;
 }
 $136 = (($137) + ($138)|0);
 $10 = $52;
 $11 = $136;
 $139 = $10;
 $140 = $11;
 HEAP32[$139>>2] = $140;
 __THREW__ = 0;
 invoke_viiiii(421,($53|0),($71|0),($51|0),($52|0),($agg$result|0));
 $141 = __THREW__; __THREW__ = 0;
 $142 = $141&1;
 if ($142) {
  $144 = ___cxa_find_matching_catch()|0;
  $145 = tempRet0;
  $54 = $144;
  $55 = $145;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
  $146 = $54;
  $147 = $55;
  ___resumeException($146|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 $50 = $$expand_i1_val2;
 $56 = 1;
 $$pre_trunc = $50;
 $143 = $$pre_trunc&1;
 if ($143) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = $__os;
 $25 = $__str;
 $26 = $24;
 $27 = $25;
 $23 = $27;
 $28 = $23;
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $20 = $30;
 $31 = $20;
 $19 = $31;
 $32 = $19;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 & 1;
 $36 = ($35|0)!=(0);
 if ($36) {
  $13 = $29;
  $37 = $13;
  $12 = $37;
  $38 = $12;
  $11 = $38;
  $39 = $11;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $48 = $41;
 } else {
  $18 = $29;
  $42 = $18;
  $17 = $42;
  $43 = $17;
  $16 = $43;
  $44 = $16;
  $45 = (($44) + 1|0);
  $15 = $45;
  $46 = $15;
  $14 = $46;
  $47 = $14;
  $48 = $47;
 }
 $10 = $48;
 $49 = $10;
 $50 = $25;
 $9 = $50;
 $51 = $9;
 $8 = $51;
 $52 = $8;
 $7 = $52;
 $53 = $7;
 $6 = $53;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 & 1;
 $58 = ($57|0)!=(0);
 if ($58) {
  $2 = $51;
  $59 = $2;
  $1 = $59;
  $60 = $1;
  $0 = $60;
  $61 = $0;
  $62 = (($61) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $70 = $63;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 } else {
  $5 = $51;
  $64 = $5;
  $4 = $64;
  $65 = $4;
  $3 = $65;
  $66 = $3;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 >> 1;
  $70 = $69;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 12|0;
 $8 = $__os;
 $9 = $8;
 $10 = $8;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $3 = $14;
 $4 = 10;
 $15 = $3;
 __ZNKSt3__18ios_base6getlocEv($5,$15);
 $2 = $5;
 $16 = $2;
 __THREW__ = 0;
 $17 = (invoke_iii(422,($16|0),(6720|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $6 = $29;
  $7 = $30;
  __ZNSt3__16localeD2Ev($5);
  $31 = $6;
  $32 = $7;
  ___resumeException($31|0);
  // unreachable;
 }
 $20 = $4;
 $0 = $17;
 $1 = $20;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 28|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $1;
 __THREW__ = 0;
 $26 = (invoke_iii($24|0,($21|0),($25|0))|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $6 = $29;
  $7 = $30;
  __ZNSt3__16localeD2Ev($5);
  $31 = $6;
  $32 = $7;
  ___resumeException($31|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($5);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($9,$26)|0);
  $33 = $8;
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($33)|0);
  $34 = $8;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function __ZN8picojson5value3getINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEERT_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__ZNK8picojson5value2isINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEEbv($3)|0);
 if ($4) {
  $10 = (($3) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($5|0),(1792|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  ___cxa_throw(($5|0),(15440|0),(381|0));
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 ___cxa_free_exception(($5|0));
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE2atERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__child = 0, $__parent = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__parent = sp + 12|0;
 $2 = $this;
 $3 = $__k;
 $6 = $2;
 $7 = $3;
 $8 = (__ZNKSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($6,$__parent,$7)|0);
 $__child = $8;
 $9 = $__child;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $19 = $__child;
  $20 = (($19) + 16|0);
  $21 = (($20) + 16|0);
  STACKTOP = sp;return ($21|0);
 }
 $11 = (___cxa_allocate_exception(8)|0);
 $0 = $11;
 $1 = 1504;
 $12 = $0;
 $13 = $1;
 __THREW__ = 0;
 invoke_vii(424,($12|0),($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if ($15) {
  $17 = ___cxa_find_matching_catch()|0;
  $18 = tempRet0;
  $4 = $17;
  $5 = $18;
  ___cxa_free_exception(($11|0));
  $22 = $4;
  $23 = $5;
  ___resumeException($22|0);
  // unreachable;
 } else {
  $16 = (15352 + 8|0);
  HEAP32[$12>>2] = $16;
  ___cxa_throw(($11|0),(15400|0),(378|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK8picojson5value3getIdEERKT_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__ZNK8picojson5value2isIdEEbv($3)|0);
 if ($4) {
  $10 = (($3) + 8|0);
  STACKTOP = sp;return ($10|0);
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($5|0),(1720|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  ___cxa_throw(($5|0),(15440|0),(381|0));
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 ___cxa_free_exception(($5|0));
 $11 = $1;
 $12 = $2;
 ___resumeException($11|0);
 // unreachable;
 return (0)|0;
}
function __ZNK8picojson5value3getINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEERKT_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__ZNK8picojson5value2isINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEEbv($3)|0);
 if ($4) {
  $10 = (($3) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($5|0),(1648|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  ___cxa_throw(($5|0),(15440|0),(381|0));
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 ___cxa_free_exception(($5|0));
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEEC2ERKS5_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 16|0;
 $6 = sp + 111|0;
 $11 = sp + 68|0;
 $12 = sp + 8|0;
 $15 = sp + 56|0;
 $16 = sp + 110|0;
 $17 = sp;
 $21 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $2 = $29;
 $30 = $2;
 $31 = (($30) + 8|0);
 $1 = $31;
 $32 = $1;
 $0 = $32;
 $33 = $0;
 $5 = $33;
 $34 = $5;
 ;HEAP8[$4+0>>0]=HEAP8[$6+0>>0]|0;
 $3 = $34;
 $19 = $28;
 $20 = $25;
 $35 = $19;
 $18 = $35;
 HEAP32[$35>>2] = 0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 8|0);
 ;HEAP8[$17+0>>0]=HEAP8[$21+0>>0]|0;
 $14 = $37;
 HEAP32[$15>>2] = 0;
 $38 = $14;
 $13 = $15;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 $7 = $17;
 ;HEAP8[$12+0>>0]=HEAP8[$16+0>>0]|0;
 $10 = $38;
 HEAP32[$11>>2] = $40;
 $41 = $10;
 $9 = $12;
 $8 = $11;
 $42 = $8;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $22 = $44;
 $45 = $22;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 16)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(425,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if (!($57)) {
  $58 = $24;
  $59 = HEAP32[$58>>2]|0;
  $60 = $24;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  __THREW__ = 0;
  invoke_viii(426,($28|0),($59|0),($62|0));
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if (!($64)) {
   STACKTOP = sp;return;
  }
 }
 $65 = ___cxa_find_matching_catch()|0;
 $66 = tempRet0;
 $26 = $65;
 $27 = $66;
 __ZNSt3__113__vector_baseIN8picojson5valueENS_9allocatorIS2_EEED2Ev($28);
 $67 = $26;
 $68 = $27;
 ___resumeException($67|0);
 // unreachable;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $1;
 $4 = $2;
 $0 = $3;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 16)&-1;
 $13 = ($4>>>0)>=($12>>>0);
 if ($13) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($3);
  // unreachable;
 } else {
  $14 = $2;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($14<<4)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN8picojson5value3getINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEERT_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__ZNK8picojson5value2isINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEEbv($3)|0);
 if ($4) {
  $10 = (($3) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($5|0),(1648|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  ___cxa_throw(($5|0),(15440|0),(381|0));
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 ___cxa_free_exception(($5|0));
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE2atEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__n;
 $3 = $1;
 $4 = $2;
 $0 = $3;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11|0) / 16)&-1;
 $13 = ($4>>>0)>=($12>>>0);
 if ($13) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($3);
  // unreachable;
 } else {
  $14 = $2;
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($14<<4)|0);
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZN7croutes5ndataIdE8add_nodeEiid($this,$from_node,$to_node,$distance) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 $distance = +$distance;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rev_dist = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $from_node;
 $2 = $to_node;
 $3 = $distance;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 __ZNK7croutes5ndataIdE12bounds_checkEii($6,$7,$8);
 $9 = $1;
 $10 = $2;
 $11 = ($9|0)>($10|0);
 if (!($11)) {
  $27 = $1;
  $28 = $2;
  $29 = (__ZN7croutes5ndataIdE2atEii($6,$27,$28)|0);
  $30 = $3;
  __ZN7croutes8net_bondIdE12set_distanceEd($29,$30);
  STACKTOP = sp;return;
 }
 $12 = $2;
 $13 = $1;
 $14 = (__ZN7croutes5ndataIdE2atEii($6,$12,$13)|0);
 $15 = (__ZN7croutes8net_bondIdE8distanceEv($14)|0);
 $16 = +HEAPF64[$15>>3];
 $rev_dist = $16;
 $17 = $rev_dist;
 $18 = $3;
 $19 = $17 != $18;
 if (!($19)) {
  $27 = $1;
  $28 = $2;
  $29 = (__ZN7croutes5ndataIdE2atEii($6,$27,$28)|0);
  $30 = $3;
  __ZN7croutes8net_bondIdE12set_distanceEd($29,$30);
  STACKTOP = sp;return;
 }
 $20 = (___cxa_allocate_exception(16)|0);
 $21 = $1;
 $22 = $2;
 __THREW__ = 0;
 invoke_viii(427,($20|0),($21|0),($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if (!($24)) {
  ___cxa_throw(($20|0),(1392|0),(44|0));
  // unreachable;
 }
 $25 = ___cxa_find_matching_catch()|0;
 $26 = tempRet0;
 $4 = $25;
 $5 = $26;
 ___cxa_free_exception(($20|0));
 $31 = $4;
 $32 = $5;
 ___resumeException($31|0);
 // unreachable;
}
function __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($1) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN8picojson5valueENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8picojson5valueD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 4)) {
  $6 = (($1) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($7);
   __ZdlPv($7);
  }
  STACKTOP = sp;return;
 } else if ((($2|0) == 3)) {
  $3 = (($1) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   __ZdlPv($4);
  }
  STACKTOP = sp;return;
 } else if ((($2|0) == 5)) {
  $9 = (($1) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($10);
   __ZdlPv($10);
  }
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _sum($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = 24;
 $8 = $7;
 $6 = $8;
 $9 = $6;
 $5 = $9;
 $10 = $5;
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $2 = $9;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $__a$i$i$i = $14;
 $__i$i$i$i = 0;
 while(1) {
  $15 = $__i$i$i$i;
  $16 = ($15>>>0)<(3);
  if (!($16)) {
   break;
  }
  $17 = $__i$i$i$i;
  $18 = $__a$i$i$i;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = 0;
  $20 = $__i$i$i$i;
  $21 = (($20) + 1)|0;
  $__i$i$i$i = $21;
 }
 (___cxa_atexit((428|0),(24|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function _calculate($data) {
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__annotator$i = 0, $__annotator$i22 = 0, $__begin = 0, $__begin2 = 0, $__begin5 = 0, $__end = 0, $__end3 = 0, $__end6 = 0, $__i$i$i$i = 0, $__range = 0;
 var $__range1 = 0, $__range4 = 0, $a = 0, $alg = 0, $alg_obj = 0, $algs = 0, $b = 0, $bond = 0, $json_bond = 0, $json_bundle = 0, $ndata = 0, $res = 0, $results_arr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp + 192|0;
 $29 = sp + 1317|0;
 $__annotator$i22 = sp + 1316|0;
 $50 = sp + 184|0;
 $55 = sp + 1315|0;
 $__annotator$i = sp + 1314|0;
 $88 = sp + 176|0;
 $90 = sp + 1313|0;
 $91 = sp + 1312|0;
 $111 = sp + 168|0;
 $114 = sp + 1311|0;
 $141 = sp + 1310|0;
 $142 = sp + 1309|0;
 $145 = sp + 160|0;
 $148 = sp + 1308|0;
 $152 = sp + 736|0;
 $155 = sp + 724|0;
 $195 = sp + 564|0;
 $198 = sp + 552|0;
 $203 = sp + 152|0;
 $205 = sp + 1307|0;
 $206 = sp + 1306|0;
 $210 = sp + 144|0;
 $212 = sp + 1305|0;
 $213 = sp + 1304|0;
 $ndata = sp + 448|0;
 $229 = sp + 436|0;
 $algs = sp + 404|0;
 $res = sp + 392|0;
 $a = sp + 368|0;
 $233 = sp + 360|0;
 $alg_obj = sp + 348|0;
 $results_arr = sp + 336|0;
 $__begin2 = sp + 328|0;
 $__end3 = sp + 324|0;
 $json_bundle = sp + 308|0;
 $__begin5 = sp + 296|0;
 $__end6 = sp + 288|0;
 $json_bond = sp + 268|0;
 $234 = sp + 256|0;
 $235 = sp + 128|0;
 $236 = sp + 244|0;
 $237 = sp + 112|0;
 $238 = sp + 232|0;
 $239 = sp + 96|0;
 $240 = sp + 80|0;
 $241 = sp + 64|0;
 $242 = sp + 220|0;
 $243 = sp + 48|0;
 $244 = sp + 208|0;
 $245 = sp + 32|0;
 $246 = sp + 16|0;
 $247 = sp + 196|0;
 $248 = sp;
 $228 = $data;
 $249 = $228;
 $250 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(2104,$249)|0);
 $225 = $250;
 $226 = 408;
 $251 = $225;
 $252 = $226;
 (FUNCTION_TABLE_ii[$252 & 1023]($251)|0);
 $253 = $228;
 $223 = $229;
 $224 = $253;
 $254 = $223;
 $255 = $224;
 $221 = $254;
 $222 = $255;
 $256 = $221;
 $220 = $256;
 $257 = $220;
 $219 = $257;
 $258 = $219;
 $218 = $258;
 $259 = $222;
 $260 = $222;
 $261 = (__ZNSt3__111char_traitsIcE6lengthEPKc($260)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($256,$259,$261);
 __THREW__ = 0;
 invoke_vii(429,($ndata|0),($229|0));
 $262 = __THREW__; __THREW__ = 0;
 $263 = $262&1;
 if ($263) {
  $270 = ___cxa_find_matching_catch()|0;
  $271 = tempRet0;
  $230 = $270;
  $231 = $271;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($229);
  $787 = $230;
  $788 = $231;
  ___resumeException($787|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($229);
 $216 = $ndata;
 $217 = 0;
 $264 = $216;
 $215 = $264;
 $265 = $215;
 $214 = $265;
 $266 = $214;
 $267 = HEAP32[$266>>2]|0;
 $268 = ($267|0)!=(0|0);
 $269 = $268 ^ 1;
 if ($269) {
  $227 = 5432;
  $232 = 1;
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($ndata);
  $786 = $227;
  STACKTOP = sp;return ($786|0);
 }
 __THREW__ = 0;
 $272 = (invoke_ii(430,40)|0);
 $273 = __THREW__; __THREW__ = 0;
 $274 = $273&1;
 do {
  if ($274) {
   label = 62;
  } else {
   __THREW__ = 0;
   invoke_vi(431,($272|0));
   $275 = __THREW__; __THREW__ = 0;
   $276 = $275&1;
   if ($276) {
    $533 = ___cxa_find_matching_catch()|0;
    $534 = tempRet0;
    $230 = $533;
    $231 = $534;
    __ZdlPv($272);
    break;
   }
   HEAP32[$algs>>2] = $272;
   $277 = (($algs) + 4|0);
   __THREW__ = 0;
   $278 = (invoke_ii(430,40)|0);
   $279 = __THREW__; __THREW__ = 0;
   $280 = $279&1;
   if ($280) {
    label = 62;
   } else {
    __THREW__ = 0;
    invoke_vi(432,($278|0));
    $281 = __THREW__; __THREW__ = 0;
    $282 = $281&1;
    if ($282) {
     $535 = ___cxa_find_matching_catch()|0;
     $536 = tempRet0;
     $230 = $535;
     $231 = $536;
     __ZdlPv($278);
     break;
    }
    HEAP32[$277>>2] = $278;
    $283 = (($277) + 4|0);
    __THREW__ = 0;
    $284 = (invoke_ii(430,40)|0);
    $285 = __THREW__; __THREW__ = 0;
    $286 = $285&1;
    if ($286) {
     label = 62;
    } else {
     __THREW__ = 0;
     invoke_vi(433,($284|0));
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     if ($288) {
      $537 = ___cxa_find_matching_catch()|0;
      $538 = tempRet0;
      $230 = $537;
      $231 = $538;
      __ZdlPv($284);
      break;
     }
     HEAP32[$283>>2] = $284;
     $289 = (($283) + 4|0);
     __THREW__ = 0;
     $290 = (invoke_ii(430,40)|0);
     $291 = __THREW__; __THREW__ = 0;
     $292 = $291&1;
     if ($292) {
      label = 62;
     } else {
      __THREW__ = 0;
      invoke_vi(434,($290|0));
      $293 = __THREW__; __THREW__ = 0;
      $294 = $293&1;
      if ($294) {
       $539 = ___cxa_find_matching_catch()|0;
       $540 = tempRet0;
       $230 = $539;
       $231 = $540;
       __ZdlPv($290);
       break;
      }
      HEAP32[$289>>2] = $290;
      $295 = (($289) + 4|0);
      __THREW__ = 0;
      $296 = (invoke_ii(430,40)|0);
      $297 = __THREW__; __THREW__ = 0;
      $298 = $297&1;
      if ($298) {
       label = 62;
      } else {
       __THREW__ = 0;
       invoke_vi(435,($296|0));
       $299 = __THREW__; __THREW__ = 0;
       $300 = $299&1;
       if ($300) {
        $541 = ___cxa_find_matching_catch()|0;
        $542 = tempRet0;
        $230 = $541;
        $231 = $542;
        __ZdlPv($296);
        break;
       }
       HEAP32[$295>>2] = $296;
       $211 = $res;
       $301 = $211;
       ;HEAP8[$210+0>>0]=HEAP8[$213+0>>0]|0;
       $209 = $212;
       __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($301,$212);
       $__range = $algs;
       $302 = $__range;
       $__begin = $302;
       $303 = $__range;
       $304 = (($303) + 20|0);
       $__end = $304;
       L30: while(1) {
        $305 = $__begin;
        $306 = $__end;
        $307 = ($305|0)!=($306|0);
        if (!($307)) {
         label = 125;
         break;
        }
        $308 = $__begin;
        $alg = $308;
        $309 = $alg;
        $310 = HEAP32[$309>>2]|0;
        $311 = HEAP32[$310>>2]|0;
        $312 = (($311) + 8|0);
        $313 = HEAP32[$312>>2]|0;
        $207 = $233;
        $208 = $ndata;
        $314 = $207;
        $315 = $208;
        $316 = HEAP32[$315>>2]|0;
        HEAP32[$314>>2] = $316;
        $317 = (($314) + 4|0);
        $318 = $208;
        $319 = (($318) + 4|0);
        $320 = HEAP32[$319>>2]|0;
        HEAP32[$317>>2] = $320;
        $321 = (($314) + 4|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ($322|0)!=(0|0);
        if ($323) {
         $324 = (($314) + 4|0);
         $325 = HEAP32[$324>>2]|0;
         __ZNSt3__119__shared_weak_count12__add_sharedEv($325);
        }
        __THREW__ = 0;
        invoke_viiii($313|0,($a|0),($310|0),($233|0),0);
        $326 = __THREW__; __THREW__ = 0;
        $327 = $326&1;
        if ($327) {
         label = 68;
         break;
        }
        __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($233);
        $204 = $alg_obj;
        $328 = $204;
        ;HEAP8[$203+0>>0]=HEAP8[$206+0>>0]|0;
        $202 = $205;
        __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($328,$205);
        $201 = $results_arr;
        $329 = $201;
        $200 = $329;
        $330 = $200;
        $199 = $330;
        HEAP32[$330>>2] = 0;
        $331 = (($330) + 4|0);
        HEAP32[$331>>2] = 0;
        $332 = (($330) + 8|0);
        $197 = $332;
        HEAP32[$198>>2] = 0;
        $333 = $197;
        $196 = $198;
        $334 = $196;
        $335 = HEAP32[$334>>2]|0;
        $194 = $333;
        HEAP32[$195>>2] = $335;
        $336 = $194;
        $193 = $336;
        $192 = $195;
        $337 = $192;
        $338 = HEAP32[$337>>2]|0;
        HEAP32[$336>>2] = $338;
        $191 = $a;
        $339 = $191;
        $340 = HEAP32[$339>>2]|0;
        __THREW__ = 0;
        $341 = (invoke_ii(436,($340|0))|0);
        $342 = __THREW__; __THREW__ = 0;
        $343 = $342&1;
        if ($343) {
         label = 69;
         break;
        }
        $__range1 = $341;
        $344 = $__range1;
        $190 = $344;
        $345 = $190;
        $346 = HEAP32[$345>>2]|0;
        $188 = $345;
        $189 = $346;
        $347 = $189;
        $186 = $__begin2;
        $187 = $347;
        $348 = $186;
        $349 = $187;
        HEAP32[$348>>2] = $349;
        $350 = $__range1;
        $185 = $350;
        $351 = $185;
        $352 = (($351) + 4|0);
        $353 = HEAP32[$352>>2]|0;
        $183 = $351;
        $184 = $353;
        $354 = $184;
        $181 = $__end3;
        $182 = $354;
        $355 = $181;
        $356 = $182;
        HEAP32[$355>>2] = $356;
        while(1) {
         $179 = $__begin2;
         $180 = $__end3;
         $357 = $179;
         $358 = $180;
         $177 = $357;
         $178 = $358;
         $359 = $177;
         $176 = $359;
         $360 = $176;
         $361 = HEAP32[$360>>2]|0;
         $362 = $178;
         $175 = $362;
         $363 = $175;
         $364 = HEAP32[$363>>2]|0;
         $365 = ($361|0)==($364|0);
         $366 = $365 ^ 1;
         if (!($366)) {
          break;
         }
         $174 = $__begin2;
         $367 = $174;
         $368 = HEAP32[$367>>2]|0;
         $b = $368;
         $158 = $json_bundle;
         $369 = $158;
         $157 = $369;
         $370 = $157;
         $156 = $370;
         HEAP32[$370>>2] = 0;
         $371 = (($370) + 4|0);
         HEAP32[$371>>2] = 0;
         $372 = (($370) + 8|0);
         $154 = $372;
         HEAP32[$155>>2] = 0;
         $373 = $154;
         $153 = $155;
         $374 = $153;
         $375 = HEAP32[$374>>2]|0;
         $151 = $373;
         HEAP32[$152>>2] = $375;
         $376 = $151;
         $150 = $376;
         $149 = $152;
         $377 = $149;
         $378 = HEAP32[$377>>2]|0;
         HEAP32[$376>>2] = $378;
         $379 = $b;
         $380 = HEAP32[$379>>2]|0;
         $__range4 = $380;
         $381 = $__range4;
         $98 = $381;
         $382 = $98;
         __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($__begin5,$382);
         $383 = $__range4;
         $97 = $383;
         $384 = $97;
         __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($__end6,$384);
         while(1) {
          $95 = $__begin5;
          $96 = $__end6;
          $385 = $95;
          $386 = $96;
          $93 = $385;
          $94 = $386;
          $387 = $93;
          $388 = (($387) + 4|0);
          $389 = HEAP32[$388>>2]|0;
          $390 = $94;
          $391 = (($390) + 4|0);
          $392 = HEAP32[$391>>2]|0;
          $393 = ($389|0)==($392|0);
          $394 = $393 ^ 1;
          if (!($394)) {
           break;
          }
          $92 = $__begin5;
          $395 = $92;
          $396 = (($395) + 4|0);
          $397 = HEAP32[$396>>2]|0;
          $bond = $397;
          $89 = $json_bond;
          $398 = $89;
          ;HEAP8[$88+0>>0]=HEAP8[$91+0>>0]|0;
          $87 = $90;
          __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($398,$90);
          $85 = $234;
          $86 = 40;
          $399 = $85;
          $400 = $86;
          $83 = $399;
          $84 = $400;
          $401 = $83;
          $82 = $401;
          $402 = $82;
          $81 = $402;
          $403 = $81;
          $80 = $403;
          $404 = $84;
          $405 = $84;
          __THREW__ = 0;
          $406 = (invoke_ii(410,($405|0))|0);
          $407 = __THREW__; __THREW__ = 0;
          $408 = $407&1;
          if ($408) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          invoke_viii(411,($401|0),($404|0),($406|0));
          $409 = __THREW__; __THREW__ = 0;
          $410 = $409&1;
          if ($410) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          $411 = (invoke_iii(437,($json_bond|0),($234|0))|0);
          $412 = __THREW__; __THREW__ = 0;
          $413 = $412&1;
          if ($413) {
           label = 72;
           break L30;
          }
          $414 = $bond;
          $415 = HEAP32[$414>>2]|0;
          __THREW__ = 0;
          $416 = (invoke_ii(438,($415|0))|0);
          $417 = __THREW__; __THREW__ = 0;
          $418 = $417&1;
          if ($418) {
           label = 72;
           break L30;
          }
          $419 = (+($416|0));
          __THREW__ = 0;
          invoke_vid(439,($235|0),(+$419));
          $420 = __THREW__; __THREW__ = 0;
          $421 = $420&1;
          if ($421) {
           label = 72;
           break L30;
          }
          __THREW__ = 0;
          (invoke_iii(440,($411|0),($235|0))|0);
          $422 = __THREW__; __THREW__ = 0;
          $423 = $422&1;
          if ($423) {
           label = 73;
           break L30;
          }
          __ZN8picojson5valueD2Ev($235);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($234);
          $78 = $236;
          $79 = 48;
          $424 = $78;
          $425 = $79;
          $76 = $424;
          $77 = $425;
          $426 = $76;
          $75 = $426;
          $427 = $75;
          $74 = $427;
          $428 = $74;
          $73 = $428;
          $429 = $77;
          $430 = $77;
          __THREW__ = 0;
          $431 = (invoke_ii(410,($430|0))|0);
          $432 = __THREW__; __THREW__ = 0;
          $433 = $432&1;
          if ($433) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          invoke_viii(411,($426|0),($429|0),($431|0));
          $434 = __THREW__; __THREW__ = 0;
          $435 = $434&1;
          if ($435) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          $436 = (invoke_iii(437,($json_bond|0),($236|0))|0);
          $437 = __THREW__; __THREW__ = 0;
          $438 = $437&1;
          if ($438) {
           label = 75;
           break L30;
          }
          $439 = $bond;
          $440 = HEAP32[$439>>2]|0;
          __THREW__ = 0;
          $441 = (invoke_ii(441,($440|0))|0);
          $442 = __THREW__; __THREW__ = 0;
          $443 = $442&1;
          if ($443) {
           label = 75;
           break L30;
          }
          $444 = (+($441|0));
          __THREW__ = 0;
          invoke_vid(439,($237|0),(+$444));
          $445 = __THREW__; __THREW__ = 0;
          $446 = $445&1;
          if ($446) {
           label = 75;
           break L30;
          }
          __THREW__ = 0;
          (invoke_iii(440,($436|0),($237|0))|0);
          $447 = __THREW__; __THREW__ = 0;
          $448 = $447&1;
          if ($448) {
           label = 76;
           break L30;
          }
          __ZN8picojson5valueD2Ev($237);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($236);
          $71 = $238;
          $72 = 56;
          $449 = $71;
          $450 = $72;
          $69 = $449;
          $70 = $450;
          $451 = $69;
          $68 = $451;
          $452 = $68;
          $67 = $452;
          $453 = $67;
          $66 = $453;
          $454 = $70;
          $455 = $70;
          __THREW__ = 0;
          $456 = (invoke_ii(410,($455|0))|0);
          $457 = __THREW__; __THREW__ = 0;
          $458 = $457&1;
          if ($458) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          invoke_viii(411,($451|0),($454|0),($456|0));
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           label = 71;
           break L30;
          }
          __THREW__ = 0;
          $461 = (invoke_iii(437,($json_bond|0),($238|0))|0);
          $462 = __THREW__; __THREW__ = 0;
          $463 = $462&1;
          if ($463) {
           label = 78;
           break L30;
          }
          $464 = $bond;
          $465 = HEAP32[$464>>2]|0;
          __THREW__ = 0;
          $466 = (invoke_ii(442,($465|0))|0);
          $467 = __THREW__; __THREW__ = 0;
          $468 = $467&1;
          if ($468) {
           label = 78;
           break L30;
          }
          $469 = +HEAPF64[$466>>3];
          __THREW__ = 0;
          invoke_vid(439,($239|0),(+$469));
          $470 = __THREW__; __THREW__ = 0;
          $471 = $470&1;
          if ($471) {
           label = 78;
           break L30;
          }
          __THREW__ = 0;
          (invoke_iii(440,($461|0),($239|0))|0);
          $472 = __THREW__; __THREW__ = 0;
          $473 = $472&1;
          if ($473) {
           label = 79;
           break L30;
          }
          __ZN8picojson5valueD2Ev($239);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($238);
          __THREW__ = 0;
          invoke_vii(443,($240|0),($json_bond|0));
          $474 = __THREW__; __THREW__ = 0;
          $475 = $474&1;
          if ($475) {
           label = 71;
           break L30;
          }
          $64 = $json_bundle;
          $65 = $240;
          $476 = $64;
          $477 = (($476) + 4|0);
          $478 = HEAP32[$477>>2]|0;
          $63 = $476;
          $479 = $63;
          $480 = (($479) + 8|0);
          $62 = $480;
          $481 = $62;
          $61 = $481;
          $482 = $61;
          $483 = HEAP32[$482>>2]|0;
          $484 = ($478>>>0)<($483>>>0);
          if ($484) {
           __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$476,1);
           $60 = $476;
           $485 = $60;
           $486 = (($485) + 8|0);
           $59 = $486;
           $487 = $59;
           $58 = $487;
           $488 = $58;
           $489 = (($476) + 4|0);
           $490 = HEAP32[$489>>2]|0;
           $56 = $490;
           $491 = $56;
           $492 = $65;
           $41 = $492;
           $493 = $41;
           $52 = $488;
           $53 = $491;
           $54 = $493;
           $494 = $52;
           $495 = $53;
           $496 = $54;
           $51 = $496;
           $497 = $51;
           ;HEAP8[$50+0>>0]=HEAP8[$55+0>>0]|0;
           $47 = $494;
           $48 = $495;
           $49 = $497;
           $498 = $47;
           $499 = $48;
           $500 = $49;
           $46 = $500;
           $501 = $46;
           $43 = $498;
           $44 = $499;
           $45 = $501;
           $502 = $44;
           $503 = ($502|0)==(0|0);
           if (!($503)) {
            $504 = $45;
            $42 = $504;
            $505 = $42;
            __THREW__ = 0;
            invoke_vii(444,($502|0),($505|0));
            $506 = __THREW__; __THREW__ = 0;
            $507 = $506&1;
            if ($507) {
             label = 81;
             break L30;
            }
           }
           __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
           $508 = (($476) + 4|0);
           $509 = HEAP32[$508>>2]|0;
           $510 = (($509) + 16|0);
           HEAP32[$508>>2] = $510;
          } else {
           $511 = $65;
           $57 = $511;
           $512 = $57;
           __THREW__ = 0;
           invoke_vii(445,($476|0),($512|0));
           $513 = __THREW__; __THREW__ = 0;
           $514 = $513&1;
           if ($514) {
            label = 81;
            break L30;
           }
          }
          __ZN8picojson5valueD2Ev($240);
          __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($json_bond);
          $40 = $__begin5;
          $515 = $40;
          $516 = (($515) + 4|0);
          $517 = HEAP32[$516>>2]|0;
          $518 = (($517) + 4|0);
          HEAP32[$516>>2] = $518;
          $519 = HEAP32[$515>>2]|0;
          $520 = HEAP32[$519>>2]|0;
          $521 = $518;
          $522 = $520;
          $523 = (($521) - ($522))|0;
          $524 = (($523|0) / 4)&-1;
          $525 = ($524|0)==(1024);
          if ($525) {
           $526 = HEAP32[$515>>2]|0;
           $527 = (($526) + 4|0);
           HEAP32[$515>>2] = $527;
           $528 = HEAP32[$515>>2]|0;
           $529 = HEAP32[$528>>2]|0;
           $530 = (($515) + 4|0);
           HEAP32[$530>>2] = $529;
          }
         }
         __THREW__ = 0;
         invoke_vii(446,($241|0),($json_bundle|0));
         $565 = __THREW__; __THREW__ = 0;
         $566 = $565&1;
         if ($566) {
          label = 70;
          break L30;
         }
         $38 = $results_arr;
         $39 = $241;
         $567 = $38;
         $568 = (($567) + 4|0);
         $569 = HEAP32[$568>>2]|0;
         $37 = $567;
         $570 = $37;
         $571 = (($570) + 8|0);
         $36 = $571;
         $572 = $36;
         $35 = $572;
         $573 = $35;
         $574 = HEAP32[$573>>2]|0;
         $575 = ($569>>>0)<($574>>>0);
         if ($575) {
          __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i22,$567,1);
          $34 = $567;
          $576 = $34;
          $577 = (($576) + 8|0);
          $33 = $577;
          $578 = $33;
          $32 = $578;
          $579 = $32;
          $580 = (($567) + 4|0);
          $581 = HEAP32[$580>>2]|0;
          $30 = $581;
          $582 = $30;
          $583 = $39;
          $15 = $583;
          $584 = $15;
          $26 = $579;
          $27 = $582;
          $28 = $584;
          $585 = $26;
          $586 = $27;
          $587 = $28;
          $25 = $587;
          $588 = $25;
          ;HEAP8[$24+0>>0]=HEAP8[$29+0>>0]|0;
          $21 = $585;
          $22 = $586;
          $23 = $588;
          $589 = $21;
          $590 = $22;
          $591 = $23;
          $20 = $591;
          $592 = $20;
          $17 = $589;
          $18 = $590;
          $19 = $592;
          $593 = $18;
          $594 = ($593|0)==(0|0);
          if (!($594)) {
           $595 = $19;
           $16 = $595;
           $596 = $16;
           __THREW__ = 0;
           invoke_vii(444,($593|0),($596|0));
           $597 = __THREW__; __THREW__ = 0;
           $598 = $597&1;
           if ($598) {
            label = 94;
            break L30;
           }
          }
          __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i22);
          $599 = (($567) + 4|0);
          $600 = HEAP32[$599>>2]|0;
          $601 = (($600) + 16|0);
          HEAP32[$599>>2] = $601;
         } else {
          $602 = $39;
          $31 = $602;
          $603 = $31;
          __THREW__ = 0;
          invoke_vii(445,($567|0),($603|0));
          $604 = __THREW__; __THREW__ = 0;
          $605 = $604&1;
          if ($605) {
           label = 94;
           break L30;
          }
         }
         __ZN8picojson5valueD2Ev($241);
         __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($json_bundle);
         $14 = $__begin2;
         $606 = $14;
         $607 = HEAP32[$606>>2]|0;
         $608 = (($607) + 4|0);
         HEAP32[$606>>2] = $608;
        }
        $12 = $242;
        $13 = 72;
        $611 = $12;
        $612 = $13;
        $10 = $611;
        $11 = $612;
        $613 = $10;
        $9 = $613;
        $614 = $9;
        $8 = $614;
        $615 = $8;
        $7 = $615;
        $616 = $11;
        $617 = $11;
        __THREW__ = 0;
        $618 = (invoke_ii(410,($617|0))|0);
        $619 = __THREW__; __THREW__ = 0;
        $620 = $619&1;
        if ($620) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        invoke_viii(411,($613|0),($616|0),($618|0));
        $621 = __THREW__; __THREW__ = 0;
        $622 = $621&1;
        if ($622) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        $623 = (invoke_iii(437,($alg_obj|0),($242|0))|0);
        $624 = __THREW__; __THREW__ = 0;
        $625 = $624&1;
        if ($625) {
         label = 117;
         break;
        }
        $626 = $alg;
        $627 = HEAP32[$626>>2]|0;
        $628 = HEAP32[$627>>2]|0;
        $629 = (($628) + 20|0);
        $630 = HEAP32[$629>>2]|0;
        __THREW__ = 0;
        $631 = (invoke_ii($630|0,($627|0))|0);
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         label = 117;
         break;
        }
        __THREW__ = 0;
        invoke_vii(447,($243|0),($631|0));
        $634 = __THREW__; __THREW__ = 0;
        $635 = $634&1;
        if ($635) {
         label = 117;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(440,($623|0),($243|0))|0);
        $636 = __THREW__; __THREW__ = 0;
        $637 = $636&1;
        if ($637) {
         label = 118;
         break;
        }
        __ZN8picojson5valueD2Ev($243);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($242);
        $5 = $244;
        $6 = 80;
        $638 = $5;
        $639 = $6;
        $3 = $638;
        $4 = $639;
        $640 = $3;
        $2 = $640;
        $641 = $2;
        $1 = $641;
        $642 = $1;
        $0 = $642;
        $643 = $4;
        $644 = $4;
        __THREW__ = 0;
        $645 = (invoke_ii(410,($644|0))|0);
        $646 = __THREW__; __THREW__ = 0;
        $647 = $646&1;
        if ($647) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        invoke_viii(411,($640|0),($643|0),($645|0));
        $648 = __THREW__; __THREW__ = 0;
        $649 = $648&1;
        if ($649) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        $650 = (invoke_iii(437,($alg_obj|0),($244|0))|0);
        $651 = __THREW__; __THREW__ = 0;
        $652 = $651&1;
        if ($652) {
         label = 120;
         break;
        }
        __THREW__ = 0;
        invoke_vii(446,($245|0),($results_arr|0));
        $653 = __THREW__; __THREW__ = 0;
        $654 = $653&1;
        if ($654) {
         label = 120;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(440,($650|0),($245|0))|0);
        $655 = __THREW__; __THREW__ = 0;
        $656 = $655&1;
        if ($656) {
         label = 121;
         break;
        }
        __ZN8picojson5valueD2Ev($245);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($244);
        $657 = $alg;
        $658 = HEAP32[$657>>2]|0;
        $659 = HEAP32[$658>>2]|0;
        $660 = (($659) + 12|0);
        $661 = HEAP32[$660>>2]|0;
        __THREW__ = 0;
        $662 = (invoke_ii($661|0,($658|0))|0);
        $663 = __THREW__; __THREW__ = 0;
        $664 = $663&1;
        if ($664) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        $665 = (invoke_iii(448,($res|0),($662|0))|0);
        $666 = __THREW__; __THREW__ = 0;
        $667 = $666&1;
        if ($667) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        invoke_vii(443,($246|0),($alg_obj|0));
        $668 = __THREW__; __THREW__ = 0;
        $669 = $668&1;
        if ($669) {
         label = 69;
         break;
        }
        __THREW__ = 0;
        (invoke_iii(440,($665|0),($246|0))|0);
        $670 = __THREW__; __THREW__ = 0;
        $671 = $670&1;
        if ($671) {
         label = 123;
         break;
        }
        __ZN8picojson5valueD2Ev($246);
        $672 = $alg;
        $673 = HEAP32[$672>>2]|0;
        $674 = ($673|0)==(0|0);
        if (!($674)) {
         $675 = HEAP32[$673>>2]|0;
         $676 = (($675) + 4|0);
         $677 = HEAP32[$676>>2]|0;
         FUNCTION_TABLE_vi[$677 & 1023]($673);
        }
        $678 = $alg;
        HEAP32[$678>>2] = 0;
        __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($results_arr);
        __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($alg_obj);
        __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($a);
        $679 = $__begin;
        $680 = (($679) + 4|0);
        $__begin = $680;
       }
       switch (label|0) {
        case 68: {
         $543 = ___cxa_find_matching_catch()|0;
         $544 = tempRet0;
         $230 = $543;
         $231 = $544;
         __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($233);
         break;
        }
        case 69: {
         $545 = ___cxa_find_matching_catch()|0;
         $546 = tempRet0;
         $230 = $545;
         $231 = $546;
         label = 124;
         break;
        }
        case 70: {
         $547 = ___cxa_find_matching_catch()|0;
         $548 = tempRet0;
         $230 = $547;
         $231 = $548;
         label = 95;
         break;
        }
        case 71: {
         $549 = ___cxa_find_matching_catch()|0;
         $550 = tempRet0;
         $230 = $549;
         $231 = $550;
         label = 82;
         break;
        }
        case 72: {
         $551 = ___cxa_find_matching_catch()|0;
         $552 = tempRet0;
         $230 = $551;
         $231 = $552;
         label = 74;
         break;
        }
        case 73: {
         $553 = ___cxa_find_matching_catch()|0;
         $554 = tempRet0;
         $230 = $553;
         $231 = $554;
         __ZN8picojson5valueD2Ev($235);
         label = 74;
         break;
        }
        case 75: {
         $555 = ___cxa_find_matching_catch()|0;
         $556 = tempRet0;
         $230 = $555;
         $231 = $556;
         label = 77;
         break;
        }
        case 76: {
         $557 = ___cxa_find_matching_catch()|0;
         $558 = tempRet0;
         $230 = $557;
         $231 = $558;
         __ZN8picojson5valueD2Ev($237);
         label = 77;
         break;
        }
        case 78: {
         $559 = ___cxa_find_matching_catch()|0;
         $560 = tempRet0;
         $230 = $559;
         $231 = $560;
         label = 80;
         break;
        }
        case 79: {
         $561 = ___cxa_find_matching_catch()|0;
         $562 = tempRet0;
         $230 = $561;
         $231 = $562;
         __ZN8picojson5valueD2Ev($239);
         label = 80;
         break;
        }
        case 81: {
         $563 = ___cxa_find_matching_catch()|0;
         $564 = tempRet0;
         $230 = $563;
         $231 = $564;
         __ZN8picojson5valueD2Ev($240);
         label = 82;
         break;
        }
        case 94: {
         $609 = ___cxa_find_matching_catch()|0;
         $610 = tempRet0;
         $230 = $609;
         $231 = $610;
         __ZN8picojson5valueD2Ev($241);
         label = 95;
         break;
        }
        case 117: {
         $681 = ___cxa_find_matching_catch()|0;
         $682 = tempRet0;
         $230 = $681;
         $231 = $682;
         label = 119;
         break;
        }
        case 118: {
         $683 = ___cxa_find_matching_catch()|0;
         $684 = tempRet0;
         $230 = $683;
         $231 = $684;
         __ZN8picojson5valueD2Ev($243);
         label = 119;
         break;
        }
        case 120: {
         $685 = ___cxa_find_matching_catch()|0;
         $686 = tempRet0;
         $230 = $685;
         $231 = $686;
         label = 122;
         break;
        }
        case 121: {
         $687 = ___cxa_find_matching_catch()|0;
         $688 = tempRet0;
         $230 = $687;
         $231 = $688;
         __ZN8picojson5valueD2Ev($245);
         label = 122;
         break;
        }
        case 123: {
         $689 = ___cxa_find_matching_catch()|0;
         $690 = tempRet0;
         $230 = $689;
         $231 = $690;
         __ZN8picojson5valueD2Ev($246);
         label = 124;
         break;
        }
        case 125: {
         __THREW__ = 0;
         invoke_vii(443,($248|0),($res|0));
         $691 = __THREW__; __THREW__ = 0;
         $692 = $691&1;
         if ($692) {
          $782 = ___cxa_find_matching_catch()|0;
          $783 = tempRet0;
          $230 = $782;
          $231 = $783;
          break;
         }
         __THREW__ = 0;
         invoke_viii(449,($247|0),($248|0),0);
         $693 = __THREW__; __THREW__ = 0;
         $694 = $693&1;
         if ($694) {
          $784 = ___cxa_find_matching_catch()|0;
          $785 = tempRet0;
          $230 = $784;
          $231 = $785;
          __ZN8picojson5valueD2Ev($248);
          break;
         }
         $146 = 24;
         $147 = $247;
         $695 = $146;
         $696 = $147;
         ;HEAP8[$145+0>>0]=HEAP8[$148+0>>0]|0;
         $143 = $695;
         $144 = $696;
         $697 = $143;
         $140 = $697;
         $698 = $140;
         $139 = $698;
         $138 = $698;
         $699 = $138;
         $137 = $699;
         $700 = $137;
         $136 = $700;
         $701 = $136;
         $702 = HEAP8[$701>>0]|0;
         $703 = $702&255;
         $704 = $703 & 1;
         $705 = ($704|0)!=(0);
         if ($705) {
          $131 = $698;
          $706 = $131;
          $130 = $706;
          $707 = $130;
          $129 = $707;
          $708 = $129;
          $709 = (($708) + 8|0);
          $710 = HEAP32[$709>>2]|0;
          HEAP8[$141>>0] = 0;
          __ZNSt3__111char_traitsIcE6assignERcRKc($710,$141);
          $122 = $698;
          $123 = 0;
          $711 = $122;
          $712 = $123;
          $121 = $711;
          $713 = $121;
          $120 = $713;
          $714 = $120;
          $715 = (($714) + 4|0);
          HEAP32[$715>>2] = $712;
         } else {
          $128 = $698;
          $716 = $128;
          $127 = $716;
          $717 = $127;
          $126 = $717;
          $718 = $126;
          $719 = (($718) + 1|0);
          $125 = $719;
          $720 = $125;
          $124 = $720;
          $721 = $124;
          HEAP8[$142>>0] = 0;
          __ZNSt3__111char_traitsIcE6assignERcRKc($721,$142);
          $134 = $698;
          $135 = 0;
          $722 = $134;
          $723 = $135;
          $724 = $723 << 1;
          $725 = $724&255;
          $133 = $722;
          $726 = $133;
          $132 = $726;
          $727 = $132;
          HEAP8[$727>>0] = $725;
         }
         $119 = $697;
         $728 = $119;
         __THREW__ = 0;
         invoke_vii(450,($728|0),0);
         $729 = __THREW__; __THREW__ = 0;
         $730 = $729&1;
         if ($730) {
          $731 = ___cxa_find_matching_catch(0|0)|0;
          $732 = tempRet0;
          ___clang_call_terminate($731);
          // unreachable;
         }
         $118 = $697;
         $733 = $118;
         $117 = $733;
         $734 = $117;
         $735 = $144;
         $116 = $735;
         $736 = $116;
         $115 = $736;
         $737 = $115;
         ;HEAP32[$734+0>>2]=HEAP32[$737+0>>2]|0;HEAP32[$734+4>>2]=HEAP32[$737+4>>2]|0;HEAP32[$734+8>>2]=HEAP32[$737+8>>2]|0;
         $738 = $144;
         $112 = $697;
         $113 = $738;
         $739 = $112;
         $740 = $113;
         ;HEAP8[$111+0>>0]=HEAP8[$114+0>>0]|0;
         $109 = $739;
         $110 = $740;
         $741 = $109;
         $108 = $741;
         $742 = $108;
         $107 = $742;
         $743 = $107;
         $106 = $743;
         $744 = $110;
         $104 = $744;
         $745 = $104;
         $103 = $745;
         $746 = $103;
         $102 = $746;
         $747 = $102;
         $105 = $747;
         $748 = $144;
         $101 = $748;
         $749 = $101;
         $100 = $749;
         $750 = $100;
         $99 = $750;
         $751 = $99;
         $__a$i$i$i = $751;
         $__i$i$i$i = 0;
         while(1) {
          $752 = $__i$i$i$i;
          $753 = ($752>>>0)<(3);
          if (!($753)) {
           break;
          }
          $754 = $__i$i$i$i;
          $755 = $__a$i$i$i;
          $756 = (($755) + ($754<<2)|0);
          HEAP32[$756>>2] = 0;
          $757 = $__i$i$i$i;
          $758 = (($757) + 1)|0;
          $__i$i$i$i = $758;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($247);
         __ZN8picojson5valueD2Ev($248);
         $173 = 24;
         $759 = $173;
         $172 = $759;
         $760 = $172;
         $171 = $760;
         $761 = $171;
         $170 = $761;
         $762 = $170;
         $169 = $762;
         $763 = $169;
         $168 = $763;
         $764 = $168;
         $765 = HEAP8[$764>>0]|0;
         $766 = $765&255;
         $767 = $766 & 1;
         $768 = ($767|0)!=(0);
         if ($768) {
          $162 = $761;
          $769 = $162;
          $161 = $769;
          $770 = $161;
          $160 = $770;
          $771 = $160;
          $772 = (($771) + 8|0);
          $773 = HEAP32[$772>>2]|0;
          $780 = $773;
         } else {
          $167 = $761;
          $774 = $167;
          $166 = $774;
          $775 = $166;
          $165 = $775;
          $776 = $165;
          $777 = (($776) + 1|0);
          $164 = $777;
          $778 = $164;
          $163 = $778;
          $779 = $163;
          $780 = $779;
         }
         $159 = $780;
         $781 = $159;
         $227 = $781;
         $232 = 1;
         __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($res);
         __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($ndata);
         $786 = $227;
         STACKTOP = sp;return ($786|0);
         break;
        }
       }
       if ((label|0) == 74) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($234);
        label = 82;
       }
       else if ((label|0) == 77) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($236);
        label = 82;
       }
       else if ((label|0) == 80) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($238);
        label = 82;
       }
       else if ((label|0) == 119) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($242);
        label = 124;
       }
       else if ((label|0) == 122) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($244);
        label = 124;
       }
       if ((label|0) == 82) {
        __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($json_bond);
        label = 95;
       }
       if ((label|0) == 95) {
        __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($json_bundle);
        label = 124;
       }
       if ((label|0) == 124) {
        __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEED2Ev($results_arr);
        __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($alg_obj);
        __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($a);
       }
       __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($res);
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $531 = ___cxa_find_matching_catch()|0;
  $532 = tempRet0;
  $230 = $531;
  $231 = $532;
 }
 __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($ndata);
 $787 = $230;
 $788 = $231;
 ___resumeException($787|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN7croutes6nn_algIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $24 = $21;
 __ZN7croutes9algorithmIdEC2Ev($24);
 $25 = (1184 + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = (($24) + 4|0);
 $19 = $26;
 $20 = 1224;
 $27 = $19;
 $28 = $20;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $14 = $31;
 $32 = $18;
 $33 = $18;
 __THREW__ = 0;
 $34 = (invoke_ii(410,($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_viii(411,($29|0),($32|0),($34|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
  } else {
   $39 = (($24) + 16|0);
   $12 = $39;
   $13 = 1232;
   $40 = $12;
   $41 = $13;
   $10 = $40;
   $11 = $41;
   $42 = $10;
   $9 = $42;
   $43 = $9;
   $8 = $43;
   $44 = $8;
   $7 = $44;
   $45 = $11;
   $46 = $11;
   __THREW__ = 0;
   $47 = (invoke_ii(410,($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(411,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 12;
    } else {
     $52 = (($24) + 28|0);
     $5 = $52;
     $6 = 1264;
     $53 = $5;
     $54 = $6;
     $3 = $53;
     $4 = $54;
     $55 = $3;
     $2 = $55;
     $56 = $2;
     $1 = $56;
     $57 = $1;
     $0 = $57;
     $58 = $4;
     $59 = $4;
     __THREW__ = 0;
     $60 = (invoke_ii(410,($59|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      __THREW__ = 0;
      invoke_viii(411,($55|0),($58|0),($60|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if (!($64)) {
       STACKTOP = sp;return;
      }
     }
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $22 = $69;
     $23 = $70;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    }
   }
   if ((label|0) == 12) {
    $67 = ___cxa_find_matching_catch()|0;
    $68 = tempRet0;
    $22 = $67;
    $23 = $68;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($26);
  }
 }
 if ((label|0) == 11) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $22 = $65;
  $23 = $66;
 }
 __ZN7croutes9algorithmIdED2Ev($24);
 $71 = $22;
 $72 = $23;
 ___resumeException($71|0);
 // unreachable;
}
function __ZN7croutes14prim_euler_algIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $24 = $21;
 __ZN7croutes9algorithmIdEC2Ev($24);
 $25 = (1000 + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = (($24) + 4|0);
 $19 = $26;
 $20 = 1040;
 $27 = $19;
 $28 = $20;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $14 = $31;
 $32 = $18;
 $33 = $18;
 __THREW__ = 0;
 $34 = (invoke_ii(410,($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_viii(411,($29|0),($32|0),($34|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
  } else {
   $39 = (($24) + 16|0);
   $12 = $39;
   $13 = 1056;
   $40 = $12;
   $41 = $13;
   $10 = $40;
   $11 = $41;
   $42 = $10;
   $9 = $42;
   $43 = $9;
   $8 = $43;
   $44 = $8;
   $7 = $44;
   $45 = $11;
   $46 = $11;
   __THREW__ = 0;
   $47 = (invoke_ii(410,($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(411,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 12;
    } else {
     $52 = (($24) + 28|0);
     $5 = $52;
     $6 = 1080;
     $53 = $5;
     $54 = $6;
     $3 = $53;
     $4 = $54;
     $55 = $3;
     $2 = $55;
     $56 = $2;
     $1 = $56;
     $57 = $1;
     $0 = $57;
     $58 = $4;
     $59 = $4;
     __THREW__ = 0;
     $60 = (invoke_ii(410,($59|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      __THREW__ = 0;
      invoke_viii(411,($55|0),($58|0),($60|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if (!($64)) {
       STACKTOP = sp;return;
      }
     }
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $22 = $69;
     $23 = $70;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    }
   }
   if ((label|0) == 12) {
    $67 = ___cxa_find_matching_catch()|0;
    $68 = tempRet0;
    $22 = $67;
    $23 = $68;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($26);
  }
 }
 if ((label|0) == 11) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $22 = $65;
  $23 = $66;
 }
 __ZN7croutes9algorithmIdED2Ev($24);
 $71 = $22;
 $72 = $23;
 ___resumeException($71|0);
 // unreachable;
}
function __ZN7croutes10little_algIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $24 = $21;
 __ZN7croutes9algorithmIdEC2Ev($24);
 $25 = (720 + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = (($24) + 4|0);
 $19 = $26;
 $20 = 760;
 $27 = $19;
 $28 = $20;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $14 = $31;
 $32 = $18;
 $33 = $18;
 __THREW__ = 0;
 $34 = (invoke_ii(410,($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_viii(411,($29|0),($32|0),($34|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
  } else {
   $39 = (($24) + 16|0);
   $12 = $39;
   $13 = 776;
   $40 = $12;
   $41 = $13;
   $10 = $40;
   $11 = $41;
   $42 = $10;
   $9 = $42;
   $43 = $9;
   $8 = $43;
   $44 = $8;
   $7 = $44;
   $45 = $11;
   $46 = $11;
   __THREW__ = 0;
   $47 = (invoke_ii(410,($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(411,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 12;
    } else {
     $52 = (($24) + 28|0);
     $5 = $52;
     $6 = 800;
     $53 = $5;
     $54 = $6;
     $3 = $53;
     $4 = $54;
     $55 = $3;
     $2 = $55;
     $56 = $2;
     $1 = $56;
     $57 = $1;
     $0 = $57;
     $58 = $4;
     $59 = $4;
     __THREW__ = 0;
     $60 = (invoke_ii(410,($59|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      __THREW__ = 0;
      invoke_viii(411,($55|0),($58|0),($60|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if (!($64)) {
       STACKTOP = sp;return;
      }
     }
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $22 = $69;
     $23 = $70;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    }
   }
   if ((label|0) == 12) {
    $67 = ___cxa_find_matching_catch()|0;
    $68 = tempRet0;
    $22 = $67;
    $23 = $68;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($26);
  }
 }
 if ((label|0) == 11) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $22 = $65;
  $23 = $66;
 }
 __ZN7croutes9algorithmIdED2Ev($24);
 $71 = $22;
 $72 = $23;
 ___resumeException($71|0);
 // unreachable;
}
function __ZN7croutes11nearest_algIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $24 = $21;
 __ZN7croutes9algorithmIdEC2Ev($24);
 $25 = (536 + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = (($24) + 4|0);
 $19 = $26;
 $20 = 576;
 $27 = $19;
 $28 = $20;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $14 = $31;
 $32 = $18;
 $33 = $18;
 __THREW__ = 0;
 $34 = (invoke_ii(410,($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_viii(411,($29|0),($32|0),($34|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
  } else {
   $39 = (($24) + 16|0);
   $12 = $39;
   $13 = 592;
   $40 = $12;
   $41 = $13;
   $10 = $40;
   $11 = $41;
   $42 = $10;
   $9 = $42;
   $43 = $9;
   $8 = $43;
   $44 = $8;
   $7 = $44;
   $45 = $11;
   $46 = $11;
   __THREW__ = 0;
   $47 = (invoke_ii(410,($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(411,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 12;
    } else {
     $52 = (($24) + 28|0);
     $5 = $52;
     $6 = 624;
     $53 = $5;
     $54 = $6;
     $3 = $53;
     $4 = $54;
     $55 = $3;
     $2 = $55;
     $56 = $2;
     $1 = $56;
     $57 = $1;
     $0 = $57;
     $58 = $4;
     $59 = $4;
     __THREW__ = 0;
     $60 = (invoke_ii(410,($59|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      __THREW__ = 0;
      invoke_viii(411,($55|0),($58|0),($60|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if (!($64)) {
       STACKTOP = sp;return;
      }
     }
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $22 = $69;
     $23 = $70;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    }
   }
   if ((label|0) == 12) {
    $67 = ___cxa_find_matching_catch()|0;
    $68 = tempRet0;
    $22 = $67;
    $23 = $68;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($26);
  }
 }
 if ((label|0) == 11) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $22 = $65;
  $23 = $66;
 }
 __ZN7croutes9algorithmIdED2Ev($24);
 $71 = $22;
 $72 = $23;
 ___resumeException($71|0);
 // unreachable;
}
function __ZN7croutes20nearest_with_ret_algIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = $this;
 $24 = $21;
 __ZN7croutes9algorithmIdEC2Ev($24);
 $25 = (112 + 8|0);
 HEAP32[$24>>2] = $25;
 $26 = (($24) + 4|0);
 $19 = $26;
 $20 = 152;
 $27 = $19;
 $28 = $20;
 $17 = $27;
 $18 = $28;
 $29 = $17;
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $14 = $31;
 $32 = $18;
 $33 = $18;
 __THREW__ = 0;
 $34 = (invoke_ii(410,($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  label = 11;
 } else {
  __THREW__ = 0;
  invoke_viii(411,($29|0),($32|0),($34|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if ($38) {
   label = 11;
  } else {
   $39 = (($24) + 16|0);
   $12 = $39;
   $13 = 176;
   $40 = $12;
   $41 = $13;
   $10 = $40;
   $11 = $41;
   $42 = $10;
   $9 = $42;
   $43 = $9;
   $8 = $43;
   $44 = $8;
   $7 = $44;
   $45 = $11;
   $46 = $11;
   __THREW__ = 0;
   $47 = (invoke_ii(410,($46|0))|0);
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(411,($42|0),($45|0),($47|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 12;
    } else {
     $52 = (($24) + 28|0);
     $5 = $52;
     $6 = 216;
     $53 = $5;
     $54 = $6;
     $3 = $53;
     $4 = $54;
     $55 = $3;
     $2 = $55;
     $56 = $2;
     $1 = $56;
     $57 = $1;
     $0 = $57;
     $58 = $4;
     $59 = $4;
     __THREW__ = 0;
     $60 = (invoke_ii(410,($59|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if (!($62)) {
      __THREW__ = 0;
      invoke_viii(411,($55|0),($58|0),($60|0));
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if (!($64)) {
       STACKTOP = sp;return;
      }
     }
     $69 = ___cxa_find_matching_catch()|0;
     $70 = tempRet0;
     $22 = $69;
     $23 = $70;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    }
   }
   if ((label|0) == 12) {
    $67 = ___cxa_find_matching_catch()|0;
    $68 = tempRet0;
    $22 = $67;
    $23 = $68;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($26);
  }
 }
 if ((label|0) == 11) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $22 = $65;
  $23 = $66;
 }
 __ZN7croutes9algorithmIdED2Ev($24);
 $71 = $22;
 $72 = $23;
 ___resumeException($71|0);
 // unreachable;
}
function __ZNK7croutes6answerIdE7bundlesEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixEOS6_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0;
 var $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 343|0;
 $20 = sp + 16|0;
 $23 = sp + 342|0;
 $46 = sp + 8|0;
 $49 = sp + 341|0;
 $60 = sp;
 $63 = sp + 340|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $73 = $this;
 $74 = $__k;
 $77 = $73;
 $78 = $74;
 $79 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($77,$__parent,$78)|0);
 $__child = $79;
 $80 = $__child;
 $81 = HEAP32[$80>>2]|0;
 $__r = $81;
 $82 = $__child;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $194 = $__r;
  $195 = (($194) + 16|0);
  $196 = (($195) + 16|0);
  STACKTOP = sp;return ($196|0);
 }
 $85 = $74;
 $72 = $85;
 $86 = $72;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyEOS6_($__h,$77,$86);
 $87 = HEAP32[$__parent>>2]|0;
 $88 = $__child;
 $39 = $__h;
 $89 = $39;
 $38 = $89;
 $90 = $38;
 $37 = $90;
 $91 = $37;
 $92 = HEAP32[$91>>2]|0;
 __THREW__ = 0;
 invoke_viiii(451,($77|0),($87|0),($88|0),($92|0));
 $93 = __THREW__; __THREW__ = 0;
 $94 = $93&1;
 if ($94) {
  $147 = ___cxa_find_matching_catch()|0;
  $148 = tempRet0;
  $75 = $147;
  $76 = $148;
  $71 = $__h;
  $149 = $71;
  $69 = $149;
  $70 = 0;
  $150 = $69;
  $68 = $150;
  $151 = $68;
  $67 = $151;
  $152 = $67;
  $153 = HEAP32[$152>>2]|0;
  $__tmp$i$i = $153;
  $154 = $70;
  $43 = $150;
  $155 = $43;
  $42 = $155;
  $156 = $42;
  HEAP32[$156>>2] = $154;
  $157 = $__tmp$i$i;
  $158 = ($157|0)!=(0|0);
  if ($158) {
   $41 = $150;
   $159 = $41;
   $40 = $159;
   $160 = $40;
   $161 = (($160) + 4|0);
   $162 = $__tmp$i$i;
   $65 = $161;
   $66 = $162;
   $163 = $65;
   $164 = (($163) + 5|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&1;
   if ($166) {
    $167 = HEAP32[$163>>2]|0;
    $168 = $66;
    $169 = (($168) + 16|0);
    $170 = (($169) + 16|0);
    $64 = $170;
    $171 = $64;
    $61 = $167;
    $62 = $171;
    $172 = $61;
    $173 = $62;
    ;HEAP8[$60+0>>0]=HEAP8[$63+0>>0]|0;
    $58 = $172;
    $59 = $173;
    $174 = $59;
    __ZN8picojson5valueD2Ev($174);
   }
   $175 = (($163) + 4|0);
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&1;
   if ($177) {
    $178 = HEAP32[$163>>2]|0;
    $179 = $66;
    $180 = (($179) + 16|0);
    $57 = $180;
    $181 = $57;
    $47 = $178;
    $48 = $181;
    $182 = $47;
    $183 = $48;
    ;HEAP8[$46+0>>0]=HEAP8[$49+0>>0]|0;
    $44 = $182;
    $45 = $183;
    $184 = $45;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($184);
   }
   $185 = $66;
   $186 = ($185|0)!=(0|0);
   if ($186) {
    $187 = HEAP32[$163>>2]|0;
    $188 = $66;
    $54 = $187;
    $55 = $188;
    $56 = 1;
    $189 = $54;
    $190 = $55;
    $191 = $56;
    $51 = $189;
    $52 = $190;
    $53 = $191;
    $192 = $52;
    $50 = $192;
    $193 = $50;
    __ZdlPv($193);
   }
  }
  $197 = $75;
  $198 = $76;
  ___resumeException($197|0);
  // unreachable;
 } else {
  $36 = $__h;
  $95 = $36;
  $35 = $95;
  $96 = $35;
  $34 = $96;
  $97 = $34;
  $98 = HEAP32[$97>>2]|0;
  $__t$i = $98;
  $33 = $95;
  $99 = $33;
  $32 = $99;
  $100 = $32;
  HEAP32[$100>>2] = 0;
  $101 = $__t$i;
  $__r = $101;
  $31 = $__h;
  $102 = $31;
  $29 = $102;
  $30 = 0;
  $103 = $29;
  $28 = $103;
  $104 = $28;
  $27 = $104;
  $105 = $27;
  $106 = HEAP32[$105>>2]|0;
  $__tmp$i$i1 = $106;
  $107 = $30;
  $3 = $103;
  $108 = $3;
  $2 = $108;
  $109 = $2;
  HEAP32[$109>>2] = $107;
  $110 = $__tmp$i$i1;
  $111 = ($110|0)!=(0|0);
  if ($111) {
   $1 = $103;
   $112 = $1;
   $0 = $112;
   $113 = $0;
   $114 = (($113) + 4|0);
   $115 = $__tmp$i$i1;
   $25 = $114;
   $26 = $115;
   $116 = $25;
   $117 = (($116) + 5|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&1;
   if ($119) {
    $120 = HEAP32[$116>>2]|0;
    $121 = $26;
    $122 = (($121) + 16|0);
    $123 = (($122) + 16|0);
    $24 = $123;
    $124 = $24;
    $21 = $120;
    $22 = $124;
    $125 = $21;
    $126 = $22;
    ;HEAP8[$20+0>>0]=HEAP8[$23+0>>0]|0;
    $18 = $125;
    $19 = $126;
    $127 = $19;
    __ZN8picojson5valueD2Ev($127);
   }
   $128 = (($116) + 4|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&1;
   if ($130) {
    $131 = HEAP32[$116>>2]|0;
    $132 = $26;
    $133 = (($132) + 16|0);
    $17 = $133;
    $134 = $17;
    $7 = $131;
    $8 = $134;
    $135 = $7;
    $136 = $8;
    ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
    $4 = $135;
    $5 = $136;
    $137 = $5;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($137);
   }
   $138 = $26;
   $139 = ($138|0)!=(0|0);
   if ($139) {
    $140 = HEAP32[$116>>2]|0;
    $141 = $26;
    $14 = $140;
    $15 = $141;
    $16 = 1;
    $142 = $14;
    $143 = $15;
    $144 = $16;
    $11 = $142;
    $12 = $143;
    $13 = $144;
    $145 = $12;
    $10 = $145;
    $146 = $10;
    __ZdlPv($146);
   }
  }
  $194 = $__r;
  $195 = (($194) + 16|0);
  $196 = (($195) + 16|0);
  STACKTOP = sp;return ($196|0);
 }
 return (0)|0;
}
function __ZN8picojson5valueaSERKS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $t = sp;
 $0 = $this;
 $1 = $x;
 $4 = $0;
 $5 = $1;
 $6 = ($4|0)!=($5|0);
 if (!($6)) {
  STACKTOP = sp;return ($4|0);
 }
 $7 = $1;
 __ZN8picojson5valueC2ERKS0_($t,$7);
 __THREW__ = 0;
 invoke_vii(452,($4|0),($t|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  $2 = $10;
  $3 = $11;
  __ZN8picojson5valueD2Ev($t);
  $12 = $2;
  $13 = $3;
  ___resumeException($12|0);
  // unreachable;
 } else {
  __ZN8picojson5valueD2Ev($t);
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZNK7croutes8net_bondIdE4fromEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN8picojson5valueC2Ed($this,$n) {
 $this = $this|0;
 $n = +$n;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $n;
 $10 = $6;
 HEAP32[$10>>2] = 2;
 $11 = $7;
 $5 = $11;
 $12 = $5;
 $4 = $12;
 $13 = $4;
 __THREW__ = 0;
 $14 = (invoke_id(453,(+$13))|0);
 $15 = tempRet0;
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $18 = ___cxa_find_matching_catch(0|0)|0;
  $19 = tempRet0;
  ___clang_call_terminate($18);
  // unreachable;
 }
 $20 = $15 & 2147483647;
 $21 = ($20>>>0)>(2146435072);
 $22 = ($14>>>0)>(0);
 $23 = ($20|0)==(2146435072);
 $24 = $23 & $22;
 $25 = $21 | $24;
 if (!($25)) {
  $26 = $7;
  $3 = $26;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  __THREW__ = 0;
  $29 = (invoke_id(453,(+$28))|0);
  $30 = tempRet0;
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   ___clang_call_terminate($33);
   // unreachable;
  }
  $35 = $30 & 2147483647;
  $36 = ($29|0)==(0);
  $37 = ($35|0)==(2146435072);
  $38 = $36 & $37;
  if (!($38)) {
   $47 = $7;
   $48 = (($10) + 8|0);
   HEAPF64[$48>>3] = $47;
   STACKTOP = sp;return;
  }
 }
 $39 = (___cxa_allocate_exception(8)|0);
 $0 = $39;
 $1 = 5432;
 $40 = $0;
 $41 = $1;
 __THREW__ = 0;
 invoke_vii(423,($40|0),($41|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $8 = $45;
  $9 = $46;
  ___cxa_free_exception(($39|0));
  $49 = $8;
  $50 = $9;
  ___resumeException($49|0);
  // unreachable;
 } else {
  $44 = (15456 + 8|0);
  HEAP32[$40>>2] = $44;
  ___cxa_throw(($39|0),(15504|0),(381|0));
  // unreachable;
 }
}
function __ZNK7croutes8net_bondIdE2toEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK7croutes8net_bondIdE8distanceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN8picojson5valueC2ERKNSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES0_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S0_EEEEEE($this,$o) {
 $this = $this|0;
 $o = $o|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__e$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $1 = sp + 56|0;
 $4 = sp + 296|0;
 $5 = sp + 292|0;
 $6 = sp + 48|0;
 $14 = sp + 40|0;
 $22 = sp + 32|0;
 $32 = sp + 196|0;
 $__e$i$i = sp + 184|0;
 $35 = sp + 180|0;
 $36 = sp + 176|0;
 $37 = sp + 172|0;
 $38 = sp + 24|0;
 $39 = sp + 16|0;
 $41 = sp + 8|0;
 $51 = sp + 128|0;
 $53 = sp;
 $59 = sp + 100|0;
 $62 = sp + 88|0;
 $63 = sp + 84|0;
 $66 = $this;
 $67 = $o;
 $70 = $66;
 HEAP32[$70>>2] = 5;
 $71 = (__Znwj(12)|0);
 $72 = $67;
 $60 = $71;
 $61 = $72;
 $73 = $60;
 $74 = $61;
 __THREW__ = 0;
 invoke_vii(454,($73|0),($74|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 do {
  if ($76) {
   $141 = ___cxa_find_matching_catch()|0;
   $142 = tempRet0;
   $eh$lpad$body$index2Z2D = $142;$eh$lpad$body$indexZ2D = $141;
  } else {
   $77 = $61;
   $58 = $77;
   $78 = $58;
   $57 = $78;
   $79 = $57;
   $56 = $79;
   $80 = $56;
   $81 = HEAP32[$80>>2]|0;
   $54 = $59;
   $55 = $81;
   $82 = $54;
   $83 = $55;
   HEAP32[$82>>2] = $83;
   ;HEAP8[$53+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$53+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$59+3>>0]|0;
   $52 = $62;
   $84 = $52;
   ;HEAP32[$84+0>>2]=HEAP32[$53+0>>2]|0;
   $85 = $61;
   $50 = $85;
   $86 = $50;
   $49 = $86;
   $87 = $49;
   $48 = $87;
   $88 = $48;
   $89 = (($88) + 4|0);
   $47 = $89;
   $90 = $47;
   $46 = $90;
   $91 = $46;
   $45 = $91;
   $92 = $45;
   $44 = $92;
   $93 = $44;
   $42 = $51;
   $43 = $93;
   $94 = $42;
   $95 = $43;
   HEAP32[$94>>2] = $95;
   ;HEAP8[$41+0>>0]=HEAP8[$51+0>>0]|0;HEAP8[$41+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$51+3>>0]|0;
   $40 = $63;
   $96 = $40;
   ;HEAP32[$96+0>>2]=HEAP32[$41+0>>2]|0;
   ;HEAP8[$38+0>>0]=HEAP8[$63+0>>0]|0;HEAP8[$38+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$63+3>>0]|0;
   ;HEAP8[$39+0>>0]=HEAP8[$62+0>>0]|0;HEAP8[$39+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$62+3>>0]|0;
   $34 = $73;
   $97 = $34;
   $33 = $97;
   $98 = $33;
   $31 = $98;
   $99 = $31;
   $30 = $99;
   $100 = $30;
   $29 = $100;
   $101 = $29;
   $102 = (($101) + 4|0);
   $28 = $102;
   $103 = $28;
   $27 = $103;
   $104 = $27;
   $26 = $104;
   $105 = $26;
   $25 = $105;
   $106 = $25;
   $23 = $32;
   $24 = $106;
   $107 = $23;
   $108 = $24;
   HEAP32[$107>>2] = $108;
   ;HEAP8[$22+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$22+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$32+3>>0]|0;
   $21 = $__e$i$i;
   $109 = $21;
   ;HEAP32[$109+0>>2]=HEAP32[$22+0>>2]|0;
   while(1) {
    $19 = $39;
    $20 = $38;
    $110 = $19;
    $111 = $20;
    $17 = $110;
    $18 = $111;
    $112 = $17;
    $113 = $18;
    $15 = $112;
    $16 = $113;
    $114 = $15;
    $115 = HEAP32[$114>>2]|0;
    $116 = $16;
    $117 = HEAP32[$116>>2]|0;
    $118 = ($115|0)==($117|0);
    $119 = $118 ^ 1;
    if (!($119)) {
     break;
    }
    ;HEAP32[$36+0>>2]=HEAP32[$__e$i$i+0>>2]|0;
    ;HEAP8[$14+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$36+3>>0]|0;
    $13 = $35;
    $120 = $13;
    ;HEAP32[$120+0>>2]=HEAP32[$14+0>>2]|0;
    $12 = $39;
    $121 = $12;
    $11 = $121;
    $122 = $11;
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + 16|0);
    $10 = $124;
    $125 = $10;
    $9 = $125;
    $126 = $9;
    ;HEAP8[$6+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$6+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$35+3>>0]|0;
    $2 = $97;
    $3 = $126;
    $127 = $2;
    ;HEAP32[$5+0>>2]=HEAP32[$6+0>>2]|0;
    $128 = $3;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$5+0>>2]|0;
    invoke_viiii(455,($4|0),($127|0),($$byval_copy|0),($128|0));
    $129 = __THREW__; __THREW__ = 0;
    $130 = $129&1;
    if ($130) {
     label = 6;
     break;
    }
    ;HEAP8[$1+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
    $0 = $37;
    $131 = $0;
    ;HEAP32[$131+0>>2]=HEAP32[$1+0>>2]|0;
    $8 = $39;
    $132 = $8;
    $7 = $132;
    $133 = $7;
    $134 = HEAP32[$133>>2]|0;
    $135 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($134)|0);
    HEAP32[$133>>2] = $135;
   }
   if ((label|0) == 6) {
    $136 = ___cxa_find_matching_catch()|0;
    $137 = tempRet0;
    $64 = $136;
    $65 = $137;
    __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($73);
    $138 = $64;
    $139 = $65;
    $eh$lpad$body$index2Z2D = $139;$eh$lpad$body$indexZ2D = $138;
    break;
   }
   $140 = (($70) + 8|0);
   HEAP32[$140>>2] = $71;
   STACKTOP = sp;return;
  }
 } while(0);
 $68 = $eh$lpad$body$indexZ2D;
 $69 = $eh$lpad$body$index2Z2D;
 __ZdlPv($71);
 $143 = $68;
 $144 = $69;
 ___resumeException($143|0);
 // unreachable;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN8picojson5valueC2ERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE($this,$a) {
 $this = $this|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $a;
 $4 = $0;
 HEAP32[$4>>2] = 4;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(415,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = (($4) + 8|0);
  HEAP32[$9>>2] = $5;
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $2 = $10;
 $3 = $11;
 __ZdlPv($5);
 $12 = $2;
 $13 = $3;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN8picojson5valueC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $4 = $0;
 HEAP32[$4>>2] = 3;
 $5 = (__Znwj(12)|0);
 $6 = $1;
 __THREW__ = 0;
 invoke_vii(456,($5|0),($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $9 = (($4) + 8|0);
  HEAP32[$9>>2] = $5;
  STACKTOP = sp;return;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $2 = $10;
 $3 = $11;
 __ZdlPv($5);
 $12 = $2;
 $13 = $3;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0;
 var $__r = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 339|0;
 $20 = sp + 16|0;
 $23 = sp + 338|0;
 $43 = sp + 8|0;
 $46 = sp + 337|0;
 $57 = sp;
 $60 = sp + 336|0;
 $__parent = sp + 56|0;
 $__h = sp + 36|0;
 $72 = $this;
 $73 = $__k;
 $76 = $72;
 $77 = $73;
 $78 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($76,$__parent,$77)|0);
 $__child = $78;
 $79 = $__child;
 $80 = HEAP32[$79>>2]|0;
 $__r = $80;
 $81 = $__child;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $192 = $__r;
  $193 = (($192) + 16|0);
  $194 = (($193) + 16|0);
  STACKTOP = sp;return ($194|0);
 }
 $84 = $73;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSC_($__h,$76,$84);
 $85 = HEAP32[$__parent>>2]|0;
 $86 = $__child;
 $71 = $__h;
 $87 = $71;
 $70 = $87;
 $88 = $70;
 $69 = $88;
 $89 = $69;
 $90 = HEAP32[$89>>2]|0;
 __THREW__ = 0;
 invoke_viiii(451,($76|0),($85|0),($86|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $145 = ___cxa_find_matching_catch()|0;
  $146 = tempRet0;
  $74 = $145;
  $75 = $146;
  $68 = $__h;
  $147 = $68;
  $66 = $147;
  $67 = 0;
  $148 = $66;
  $65 = $148;
  $149 = $65;
  $64 = $149;
  $150 = $64;
  $151 = HEAP32[$150>>2]|0;
  $__tmp$i$i = $151;
  $152 = $67;
  $40 = $148;
  $153 = $40;
  $39 = $153;
  $154 = $39;
  HEAP32[$154>>2] = $152;
  $155 = $__tmp$i$i;
  $156 = ($155|0)!=(0|0);
  if ($156) {
   $38 = $148;
   $157 = $38;
   $37 = $157;
   $158 = $37;
   $159 = (($158) + 4|0);
   $160 = $__tmp$i$i;
   $62 = $159;
   $63 = $160;
   $161 = $62;
   $162 = (($161) + 5|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&1;
   if ($164) {
    $165 = HEAP32[$161>>2]|0;
    $166 = $63;
    $167 = (($166) + 16|0);
    $168 = (($167) + 16|0);
    $61 = $168;
    $169 = $61;
    $58 = $165;
    $59 = $169;
    $170 = $58;
    $171 = $59;
    ;HEAP8[$57+0>>0]=HEAP8[$60+0>>0]|0;
    $55 = $170;
    $56 = $171;
    $172 = $56;
    __ZN8picojson5valueD2Ev($172);
   }
   $173 = (($161) + 4|0);
   $174 = HEAP8[$173>>0]|0;
   $175 = $174&1;
   if ($175) {
    $176 = HEAP32[$161>>2]|0;
    $177 = $63;
    $178 = (($177) + 16|0);
    $54 = $178;
    $179 = $54;
    $44 = $176;
    $45 = $179;
    $180 = $44;
    $181 = $45;
    ;HEAP8[$43+0>>0]=HEAP8[$46+0>>0]|0;
    $41 = $180;
    $42 = $181;
    $182 = $42;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
   }
   $183 = $63;
   $184 = ($183|0)!=(0|0);
   if ($184) {
    $185 = HEAP32[$161>>2]|0;
    $186 = $63;
    $51 = $185;
    $52 = $186;
    $53 = 1;
    $187 = $51;
    $188 = $52;
    $189 = $53;
    $48 = $187;
    $49 = $188;
    $50 = $189;
    $190 = $49;
    $47 = $190;
    $191 = $47;
    __ZdlPv($191);
   }
  }
  $195 = $74;
  $196 = $75;
  ___resumeException($195|0);
  // unreachable;
 } else {
  $36 = $__h;
  $93 = $36;
  $35 = $93;
  $94 = $35;
  $34 = $94;
  $95 = $34;
  $96 = HEAP32[$95>>2]|0;
  $__t$i = $96;
  $33 = $93;
  $97 = $33;
  $32 = $97;
  $98 = $32;
  HEAP32[$98>>2] = 0;
  $99 = $__t$i;
  $__r = $99;
  $31 = $__h;
  $100 = $31;
  $29 = $100;
  $30 = 0;
  $101 = $29;
  $28 = $101;
  $102 = $28;
  $27 = $102;
  $103 = $27;
  $104 = HEAP32[$103>>2]|0;
  $__tmp$i$i1 = $104;
  $105 = $30;
  $3 = $101;
  $106 = $3;
  $2 = $106;
  $107 = $2;
  HEAP32[$107>>2] = $105;
  $108 = $__tmp$i$i1;
  $109 = ($108|0)!=(0|0);
  if ($109) {
   $1 = $101;
   $110 = $1;
   $0 = $110;
   $111 = $0;
   $112 = (($111) + 4|0);
   $113 = $__tmp$i$i1;
   $25 = $112;
   $26 = $113;
   $114 = $25;
   $115 = (($114) + 5|0);
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&1;
   if ($117) {
    $118 = HEAP32[$114>>2]|0;
    $119 = $26;
    $120 = (($119) + 16|0);
    $121 = (($120) + 16|0);
    $24 = $121;
    $122 = $24;
    $21 = $118;
    $22 = $122;
    $123 = $21;
    $124 = $22;
    ;HEAP8[$20+0>>0]=HEAP8[$23+0>>0]|0;
    $18 = $123;
    $19 = $124;
    $125 = $19;
    __ZN8picojson5valueD2Ev($125);
   }
   $126 = (($114) + 4|0);
   $127 = HEAP8[$126>>0]|0;
   $128 = $127&1;
   if ($128) {
    $129 = HEAP32[$114>>2]|0;
    $130 = $26;
    $131 = (($130) + 16|0);
    $17 = $131;
    $132 = $17;
    $7 = $129;
    $8 = $132;
    $133 = $7;
    $134 = $8;
    ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
    $4 = $133;
    $5 = $134;
    $135 = $5;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($135);
   }
   $136 = $26;
   $137 = ($136|0)!=(0|0);
   if ($137) {
    $138 = HEAP32[$114>>2]|0;
    $139 = $26;
    $14 = $138;
    $15 = $139;
    $16 = 1;
    $140 = $14;
    $141 = $15;
    $142 = $16;
    $11 = $140;
    $12 = $141;
    $13 = $142;
    $143 = $12;
    $10 = $143;
    $144 = $10;
    __ZdlPv($144);
   }
  }
  $192 = $__r;
  $193 = (($192) + 16|0);
  $194 = (($193) + 16|0);
  STACKTOP = sp;return ($194|0);
 }
 return (0)|0;
}
function __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($1) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 __ZNSt3__119__shared_weak_count16__release_sharedEv($6);
 STACKTOP = sp;return;
}
function __ZNK8picojson5value9serializeEb($agg$result,$this,$prettify) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $prettify = $prettify|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $prettify&1;
 $1 = $2;
 $3 = $0;
 $4 = $1;
 $5 = $4&1;
 $6 = $5 ? 0 : -1;
 __ZNK8picojson5value10_serializeEi($agg$result,$3,$6);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init10() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = HEAP8[104>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $7 = 88;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $5 = $11;
 $12 = $5;
 $4 = $12;
 $13 = $4;
 $3 = $13;
 $2 = $11;
 $14 = $2;
 $1 = $14;
 $15 = $1;
 $0 = $15;
 $16 = $0;
 $__a$i$i$i = $16;
 $__i$i$i$i = 0;
 while(1) {
  $17 = $__i$i$i$i;
  $18 = ($17>>>0)<(3);
  if (!($18)) {
   break;
  }
  $19 = $__i$i$i$i;
  $20 = $__a$i$i$i;
  $21 = (($20) + ($19<<2)|0);
  HEAP32[$21>>2] = 0;
  $22 = $__i$i$i$i;
  $23 = (($22) + 1)|0;
  $__i$i$i$i = $23;
 }
 (___cxa_atexit((428|0),(88|0),(___dso_handle|0))|0);
 $24 = 104;
 $25 = $24;
 HEAP32[$25>>2] = 1;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = 0;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0;
 var $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp + 8|0;
 $22 = sp + 637|0;
 $__lhs_sz$i$i$i1 = sp + 400|0;
 $__rhs_sz$i$i$i2 = sp + 396|0;
 $92 = sp;
 $95 = sp + 636|0;
 $__lhs_sz$i$i$i = sp + 104|0;
 $__rhs_sz$i$i$i = sp + 100|0;
 $150 = $this;
 $151 = $__parent;
 $152 = $__k;
 $153 = $150;
 $148 = $153;
 $154 = $148;
 $147 = $154;
 $155 = $147;
 $156 = (($155) + 4|0);
 $146 = $156;
 $157 = $146;
 $145 = $157;
 $158 = $145;
 $144 = $158;
 $159 = $144;
 $143 = $159;
 $160 = $143;
 $161 = HEAP32[$160>>2]|0;
 $__nd = $161;
 $162 = $__nd;
 $163 = ($162|0)!=(0|0);
 if (!($163)) {
  $142 = $153;
  $444 = $142;
  $445 = (($444) + 4|0);
  $141 = $445;
  $446 = $141;
  $140 = $446;
  $447 = $140;
  $139 = $447;
  $448 = $139;
  $138 = $448;
  $449 = $138;
  $450 = $151;
  HEAP32[$450>>2] = $449;
  $451 = $151;
  $452 = HEAP32[$451>>2]|0;
  $149 = $452;
  $453 = $149;
  STACKTOP = sp;return ($453|0);
 }
 while(1) {
  $72 = $153;
  $164 = $72;
  $165 = (($164) + 8|0);
  $71 = $165;
  $166 = $71;
  $70 = $166;
  $167 = $70;
  $69 = $167;
  $168 = $69;
  $169 = $152;
  $170 = $__nd;
  $171 = (($170) + 16|0);
  $62 = $168;
  $63 = $169;
  $64 = $171;
  $172 = $63;
  $173 = $64;
  $60 = $172;
  $61 = $173;
  $174 = $60;
  $175 = $61;
  $58 = $174;
  $59 = $175;
  $176 = $58;
  $56 = $176;
  $177 = $56;
  $55 = $177;
  $178 = $55;
  $54 = $178;
  $179 = $54;
  $53 = $179;
  $180 = $53;
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 & 1;
  $184 = ($183|0)!=(0);
  if ($184) {
   $49 = $177;
   $185 = $49;
   $48 = $185;
   $186 = $48;
   $47 = $186;
   $187 = $47;
   $188 = (($187) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $196 = $189;
  } else {
   $52 = $177;
   $190 = $52;
   $51 = $190;
   $191 = $51;
   $50 = $191;
   $192 = $50;
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = $194 >> 1;
   $196 = $195;
  }
  HEAP32[$__lhs_sz$i$i$i1>>2] = $196;
  $197 = $59;
  $46 = $197;
  $198 = $46;
  $45 = $198;
  $199 = $45;
  $44 = $199;
  $200 = $44;
  $43 = $200;
  $201 = $43;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $39 = $198;
   $206 = $39;
   $38 = $206;
   $207 = $38;
   $37 = $207;
   $208 = $37;
   $209 = (($208) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $42 = $198;
   $211 = $42;
   $41 = $211;
   $212 = $41;
   $40 = $212;
   $213 = $40;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__rhs_sz$i$i$i2>>2] = $217;
  $36 = $176;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $34 = $219;
  $220 = $34;
  $33 = $220;
  $221 = $33;
  $32 = $221;
  $222 = $32;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $26 = $219;
   $227 = $26;
   $25 = $227;
   $228 = $25;
   $24 = $228;
   $229 = $24;
   $230 = (($229) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $31 = $219;
   $232 = $31;
   $30 = $232;
   $233 = $30;
   $29 = $233;
   $234 = $29;
   $235 = (($234) + 1|0);
   $28 = $235;
   $236 = $28;
   $27 = $236;
   $237 = $27;
   $238 = $237;
  }
  $23 = $238;
  $239 = $23;
  $240 = $59;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $11 = $242;
  $243 = $11;
  $10 = $243;
  $244 = $10;
  $9 = $244;
  $245 = $9;
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = $247 & 1;
  $249 = ($248|0)!=(0);
  if ($249) {
   $3 = $242;
   $250 = $3;
   $2 = $250;
   $251 = $2;
   $1 = $251;
   $252 = $1;
   $253 = (($252) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $261 = $254;
  } else {
   $8 = $242;
   $255 = $8;
   $7 = $255;
   $256 = $7;
   $6 = $256;
   $257 = $6;
   $258 = (($257) + 1|0);
   $5 = $258;
   $259 = $5;
   $4 = $259;
   $260 = $4;
   $261 = $260;
  }
  $0 = $261;
  $262 = $0;
  $20 = $__lhs_sz$i$i$i1;
  $21 = $__rhs_sz$i$i$i2;
  $263 = $20;
  $264 = $21;
  ;HEAP8[$19+0>>0]=HEAP8[$22+0>>0]|0;
  $17 = $263;
  $18 = $264;
  $265 = $18;
  $266 = $17;
  $14 = $19;
  $15 = $265;
  $16 = $266;
  $267 = $15;
  $268 = HEAP32[$267>>2]|0;
  $269 = $16;
  $270 = HEAP32[$269>>2]|0;
  $271 = ($268>>>0)<($270>>>0);
  if ($271) {
   $272 = $18;
   $275 = $272;
  } else {
   $273 = $17;
   $275 = $273;
  }
  $274 = HEAP32[$275>>2]|0;
  __THREW__ = 0;
  $276 = (invoke_iiii(457,($239|0),($262|0),($274|0))|0);
  $277 = __THREW__; __THREW__ = 0;
  $278 = $277&1;
  if ($278) {
   label = 26;
   break;
  }
  $__result$i$i$i3 = $276;
  $279 = $__result$i$i$i3;
  $280 = ($279|0)!=(0);
  do {
   if ($280) {
    $281 = $__result$i$i$i3;
    $57 = $281;
   } else {
    $282 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $283 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $284 = ($282>>>0)<($283>>>0);
    if ($284) {
     $57 = -1;
     break;
    }
    $285 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $286 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $287 = ($285>>>0)>($286>>>0);
    if ($287) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $290 = $57;
  $291 = ($290|0)<(0);
  if ($291) {
   $292 = $__nd;
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(0|0);
   if (!($294)) {
    label = 30;
    break;
   }
   $295 = $__nd;
   $296 = HEAP32[$295>>2]|0;
   $__nd = $296;
  } else {
   $67 = $153;
   $301 = $67;
   $302 = (($301) + 8|0);
   $66 = $302;
   $303 = $66;
   $65 = $303;
   $304 = $65;
   $68 = $304;
   $305 = $68;
   $306 = $__nd;
   $307 = (($306) + 16|0);
   $308 = $152;
   $135 = $305;
   $136 = $307;
   $137 = $308;
   $309 = $136;
   $310 = $137;
   $133 = $309;
   $134 = $310;
   $311 = $133;
   $312 = $134;
   $131 = $311;
   $132 = $312;
   $313 = $131;
   $129 = $313;
   $314 = $129;
   $128 = $314;
   $315 = $128;
   $127 = $315;
   $316 = $127;
   $126 = $316;
   $317 = $126;
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = $319 & 1;
   $321 = ($320|0)!=(0);
   if ($321) {
    $122 = $314;
    $322 = $122;
    $121 = $322;
    $323 = $121;
    $120 = $323;
    $324 = $120;
    $325 = (($324) + 4|0);
    $326 = HEAP32[$325>>2]|0;
    $333 = $326;
   } else {
    $125 = $314;
    $327 = $125;
    $124 = $327;
    $328 = $124;
    $123 = $328;
    $329 = $123;
    $330 = HEAP8[$329>>0]|0;
    $331 = $330&255;
    $332 = $331 >> 1;
    $333 = $332;
   }
   HEAP32[$__lhs_sz$i$i$i>>2] = $333;
   $334 = $132;
   $119 = $334;
   $335 = $119;
   $118 = $335;
   $336 = $118;
   $117 = $336;
   $337 = $117;
   $116 = $337;
   $338 = $116;
   $339 = HEAP8[$338>>0]|0;
   $340 = $339&255;
   $341 = $340 & 1;
   $342 = ($341|0)!=(0);
   if ($342) {
    $112 = $335;
    $343 = $112;
    $111 = $343;
    $344 = $111;
    $110 = $344;
    $345 = $110;
    $346 = (($345) + 4|0);
    $347 = HEAP32[$346>>2]|0;
    $354 = $347;
   } else {
    $115 = $335;
    $348 = $115;
    $114 = $348;
    $349 = $114;
    $113 = $349;
    $350 = $113;
    $351 = HEAP8[$350>>0]|0;
    $352 = $351&255;
    $353 = $352 >> 1;
    $354 = $353;
   }
   HEAP32[$__rhs_sz$i$i$i>>2] = $354;
   $109 = $313;
   $355 = $109;
   $108 = $355;
   $356 = $108;
   $107 = $356;
   $357 = $107;
   $106 = $357;
   $358 = $106;
   $105 = $358;
   $359 = $105;
   $360 = HEAP8[$359>>0]|0;
   $361 = $360&255;
   $362 = $361 & 1;
   $363 = ($362|0)!=(0);
   if ($363) {
    $99 = $356;
    $364 = $99;
    $98 = $364;
    $365 = $98;
    $97 = $365;
    $366 = $97;
    $367 = (($366) + 8|0);
    $368 = HEAP32[$367>>2]|0;
    $375 = $368;
   } else {
    $104 = $356;
    $369 = $104;
    $103 = $369;
    $370 = $103;
    $102 = $370;
    $371 = $102;
    $372 = (($371) + 1|0);
    $101 = $372;
    $373 = $101;
    $100 = $373;
    $374 = $100;
    $375 = $374;
   }
   $96 = $375;
   $376 = $96;
   $377 = $132;
   $86 = $377;
   $378 = $86;
   $85 = $378;
   $379 = $85;
   $84 = $379;
   $380 = $84;
   $83 = $380;
   $381 = $83;
   $82 = $381;
   $382 = $82;
   $383 = HEAP8[$382>>0]|0;
   $384 = $383&255;
   $385 = $384 & 1;
   $386 = ($385|0)!=(0);
   if ($386) {
    $76 = $379;
    $387 = $76;
    $75 = $387;
    $388 = $75;
    $74 = $388;
    $389 = $74;
    $390 = (($389) + 8|0);
    $391 = HEAP32[$390>>2]|0;
    $398 = $391;
   } else {
    $81 = $379;
    $392 = $81;
    $80 = $392;
    $393 = $80;
    $79 = $393;
    $394 = $79;
    $395 = (($394) + 1|0);
    $78 = $395;
    $396 = $78;
    $77 = $396;
    $397 = $77;
    $398 = $397;
   }
   $73 = $398;
   $399 = $73;
   $93 = $__lhs_sz$i$i$i;
   $94 = $__rhs_sz$i$i$i;
   $400 = $93;
   $401 = $94;
   ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;
   $90 = $400;
   $91 = $401;
   $402 = $91;
   $403 = $90;
   $87 = $92;
   $88 = $402;
   $89 = $403;
   $404 = $88;
   $405 = HEAP32[$404>>2]|0;
   $406 = $89;
   $407 = HEAP32[$406>>2]|0;
   $408 = ($405>>>0)<($407>>>0);
   if ($408) {
    $409 = $91;
    $412 = $409;
   } else {
    $410 = $90;
    $412 = $410;
   }
   $411 = HEAP32[$412>>2]|0;
   __THREW__ = 0;
   $413 = (invoke_iiii(457,($376|0),($399|0),($411|0))|0);
   $414 = __THREW__; __THREW__ = 0;
   $415 = $414&1;
   if ($415) {
    label = 55;
    break;
   }
   $__result$i$i$i = $413;
   $416 = $__result$i$i$i;
   $417 = ($416|0)!=(0);
   do {
    if ($417) {
     $418 = $__result$i$i$i;
     $130 = $418;
    } else {
     $419 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $420 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $421 = ($419>>>0)<($420>>>0);
     if ($421) {
      $130 = -1;
      break;
     }
     $422 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $423 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $424 = ($422>>>0)>($423>>>0);
     if ($424) {
      $130 = 1;
      break;
     } else {
      $130 = 0;
      break;
     }
    }
   } while(0);
   $427 = $130;
   $428 = ($427|0)<(0);
   if (!($428)) {
    label = 61;
    break;
   }
   $429 = $__nd;
   $430 = (($429) + 4|0);
   $431 = HEAP32[$430>>2]|0;
   $432 = ($431|0)!=(0|0);
   if (!($432)) {
    label = 59;
    break;
   }
   $433 = $__nd;
   $434 = (($433) + 4|0);
   $435 = HEAP32[$434>>2]|0;
   $__nd = $435;
  }
 }
 if ((label|0) == 26) {
  $288 = ___cxa_find_matching_catch(0|0)|0;
  $289 = tempRet0;
  ___clang_call_terminate($288);
  // unreachable;
 }
 else if ((label|0) == 30) {
  $297 = $__nd;
  $298 = $151;
  HEAP32[$298>>2] = $297;
  $299 = $151;
  $300 = HEAP32[$299>>2]|0;
  $149 = $300;
  $453 = $149;
  STACKTOP = sp;return ($453|0);
 }
 else if ((label|0) == 55) {
  $425 = ___cxa_find_matching_catch(0|0)|0;
  $426 = tempRet0;
  ___clang_call_terminate($425);
  // unreachable;
 }
 else if ((label|0) == 59) {
  $436 = $__nd;
  $437 = $151;
  HEAP32[$437>>2] = $436;
  $438 = $151;
  $439 = HEAP32[$438>>2]|0;
  $440 = (($439) + 4|0);
  $149 = $440;
  $453 = $149;
  STACKTOP = sp;return ($453|0);
 }
 else if ((label|0) == 61) {
  $441 = $__nd;
  $442 = $151;
  HEAP32[$442>>2] = $441;
  $443 = $151;
  $149 = $443;
  $453 = $149;
  STACKTOP = sp;return ($453|0);
 }
 return (0)|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 72|0;
 $8 = sp + 701|0;
 $18 = sp + 628|0;
 $19 = sp + 64|0;
 $22 = sp + 616|0;
 $23 = sp + 608|0;
 $24 = sp + 56|0;
 $35 = sp + 552|0;
 $50 = sp + 48|0;
 $55 = sp + 700|0;
 $63 = sp + 40|0;
 $66 = sp + 699|0;
 $77 = sp + 32|0;
 $80 = sp + 698|0;
 $96 = sp + 324|0;
 $97 = sp + 24|0;
 $100 = sp + 312|0;
 $101 = sp + 304|0;
 $102 = sp + 16|0;
 $107 = sp + 280|0;
 $122 = sp + 8|0;
 $125 = sp + 697|0;
 $136 = sp;
 $139 = sp + 696|0;
 $__h = sp + 96|0;
 $153 = sp + 88|0;
 $151 = $this;
 $152 = $__k;
 $157 = $151;
 $150 = $157;
 $158 = $150;
 $159 = (($158) + 4|0);
 $149 = $159;
 $160 = $149;
 $148 = $160;
 $161 = $148;
 $__na = $161;
 $162 = $__na;
 $114 = $162;
 $115 = 1;
 $163 = $114;
 $164 = $115;
 $111 = $163;
 $112 = $164;
 $113 = 0;
 $165 = $112;
 $166 = ($165*48)|0;
 $110 = $166;
 $167 = $110;
 $168 = (__Znwj($167)|0);
 $169 = $__na;
 $108 = $153;
 $109 = $169;
 $170 = $108;
 $171 = $109;
 HEAP32[$170>>2] = $171;
 $172 = (($170) + 4|0);
 HEAP8[$172>>0] = 0;
 $173 = (($170) + 5|0);
 HEAP8[$173>>0] = 0;
 $104 = $__h;
 $105 = $168;
 $106 = $153;
 $174 = $104;
 $175 = $105;
 $176 = $106;
 $103 = $176;
 $177 = $103;
 ;HEAP32[$107+0>>2]=HEAP32[$177+0>>2]|0;HEAP32[$107+4>>2]=HEAP32[$177+4>>2]|0;
 ;HEAP8[$102+0>>0]=HEAP8[$107+0>>0]|0;HEAP8[$102+1>>0]=HEAP8[$107+1>>0]|0;HEAP8[$102+2>>0]=HEAP8[$107+2>>0]|0;HEAP8[$102+3>>0]=HEAP8[$107+3>>0]|0;HEAP8[$102+4>>0]=HEAP8[$107+4>>0]|0;HEAP8[$102+5>>0]=HEAP8[$107+5>>0]|0;HEAP8[$102+6>>0]=HEAP8[$107+6>>0]|0;HEAP8[$102+7>>0]=HEAP8[$107+7>>0]|0;
 $99 = $174;
 HEAP32[$100>>2] = $175;
 $178 = $99;
 $98 = $100;
 $179 = $98;
 $180 = HEAP32[$179>>2]|0;
 $92 = $102;
 $181 = $92;
 ;HEAP32[$101+0>>2]=HEAP32[$181+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$181+4>>2]|0;
 ;HEAP8[$97+0>>0]=HEAP8[$101+0>>0]|0;HEAP8[$97+1>>0]=HEAP8[$101+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$101+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$101+3>>0]|0;HEAP8[$97+4>>0]=HEAP8[$101+4>>0]|0;HEAP8[$97+5>>0]=HEAP8[$101+5>>0]|0;HEAP8[$97+6>>0]=HEAP8[$101+6>>0]|0;HEAP8[$97+7>>0]=HEAP8[$101+7>>0]|0;
 $95 = $178;
 HEAP32[$96>>2] = $180;
 $182 = $95;
 $94 = $96;
 $183 = $94;
 $184 = HEAP32[$183>>2]|0;
 HEAP32[$182>>2] = $184;
 $185 = (($182) + 4|0);
 $93 = $97;
 $186 = $93;
 ;HEAP32[$185+0>>2]=HEAP32[$186+0>>2]|0;HEAP32[$185+4>>2]=HEAP32[$186+4>>2]|0;
 $187 = $__na;
 $91 = $__h;
 $188 = $91;
 $90 = $188;
 $189 = $90;
 $89 = $189;
 $190 = $89;
 $191 = HEAP32[$190>>2]|0;
 $192 = (($191) + 16|0);
 $56 = $192;
 $193 = $56;
 $194 = $152;
 $52 = $187;
 $53 = $193;
 $54 = $194;
 $195 = $52;
 $196 = $53;
 $197 = $54;
 $51 = $197;
 $198 = $51;
 ;HEAP8[$50+0>>0]=HEAP8[$55+0>>0]|0;
 $47 = $195;
 $48 = $196;
 $49 = $198;
 $199 = $47;
 $200 = $48;
 $201 = $49;
 $46 = $201;
 $202 = $46;
 $43 = $199;
 $44 = $200;
 $45 = $202;
 $203 = $44;
 $204 = ($203|0)==(0|0);
 do {
  if (!($204)) {
   $205 = $45;
   $42 = $205;
   $206 = $42;
   __THREW__ = 0;
   invoke_vii(456,($203|0),($206|0));
   $207 = __THREW__; __THREW__ = 0;
   $208 = $207&1;
   if (!($208)) {
    break;
   }
   $303 = ___cxa_find_matching_catch()|0;
   $304 = tempRet0;
   $154 = $303;
   $155 = $304;
   $147 = $__h;
   $305 = $147;
   $145 = $305;
   $146 = 0;
   $306 = $145;
   $144 = $306;
   $307 = $144;
   $143 = $307;
   $308 = $143;
   $309 = HEAP32[$308>>2]|0;
   $__tmp$i$i = $309;
   $310 = $146;
   $119 = $306;
   $311 = $119;
   $118 = $311;
   $312 = $118;
   HEAP32[$312>>2] = $310;
   $313 = $__tmp$i$i;
   $314 = ($313|0)!=(0|0);
   if ($314) {
    $117 = $306;
    $315 = $117;
    $116 = $315;
    $316 = $116;
    $317 = (($316) + 4|0);
    $318 = $__tmp$i$i;
    $141 = $317;
    $142 = $318;
    $319 = $141;
    $320 = (($319) + 5|0);
    $321 = HEAP8[$320>>0]|0;
    $322 = $321&1;
    if ($322) {
     $323 = HEAP32[$319>>2]|0;
     $324 = $142;
     $325 = (($324) + 16|0);
     $326 = (($325) + 16|0);
     $140 = $326;
     $327 = $140;
     $137 = $323;
     $138 = $327;
     $328 = $137;
     $329 = $138;
     ;HEAP8[$136+0>>0]=HEAP8[$139+0>>0]|0;
     $134 = $328;
     $135 = $329;
     $330 = $135;
     __ZN8picojson5valueD2Ev($330);
    }
    $331 = (($319) + 4|0);
    $332 = HEAP8[$331>>0]|0;
    $333 = $332&1;
    if ($333) {
     $334 = HEAP32[$319>>2]|0;
     $335 = $142;
     $336 = (($335) + 16|0);
     $133 = $336;
     $337 = $133;
     $123 = $334;
     $124 = $337;
     $338 = $123;
     $339 = $124;
     ;HEAP8[$122+0>>0]=HEAP8[$125+0>>0]|0;
     $120 = $338;
     $121 = $339;
     $340 = $121;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($340);
    }
    $341 = $142;
    $342 = ($341|0)!=(0|0);
    if ($342) {
     $343 = HEAP32[$319>>2]|0;
     $344 = $142;
     $130 = $343;
     $131 = $344;
     $132 = 1;
     $345 = $130;
     $346 = $131;
     $347 = $132;
     $127 = $345;
     $128 = $346;
     $129 = $347;
     $348 = $128;
     $126 = $348;
     $349 = $126;
     __ZdlPv($349);
    }
   }
   $350 = $154;
   $351 = $155;
   ___resumeException($350|0);
   // unreachable;
  }
 } while(0);
 $41 = $__h;
 $209 = $41;
 $40 = $209;
 $210 = $40;
 $39 = $210;
 $211 = $39;
 $212 = (($211) + 4|0);
 $213 = (($212) + 4|0);
 HEAP8[$213>>0] = 1;
 $214 = $__na;
 $38 = $__h;
 $215 = $38;
 $37 = $215;
 $216 = $37;
 $36 = $216;
 $217 = $36;
 $218 = HEAP32[$217>>2]|0;
 $219 = (($218) + 16|0);
 $220 = (($219) + 16|0);
 $0 = $220;
 $221 = $0;
 $6 = $214;
 $7 = $221;
 $222 = $6;
 $223 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $222;
 $4 = $223;
 $224 = $3;
 $225 = $4;
 $1 = $224;
 $2 = $225;
 $226 = $2;
 $227 = ($226|0)==(0|0);
 if (!($227)) {
  __ZN8picojson5valueC2Ev($226);
 }
 $11 = $__h;
 $228 = $11;
 $10 = $228;
 $229 = $10;
 $9 = $229;
 $230 = $9;
 $231 = (($230) + 4|0);
 $232 = (($231) + 5|0);
 HEAP8[$232>>0] = 1;
 $12 = $__h;
 $233 = $12;
 $33 = $agg$result;
 $34 = $233;
 $234 = $33;
 $235 = $34;
 $32 = $235;
 $236 = $32;
 $31 = $236;
 $237 = $31;
 $30 = $237;
 $238 = $30;
 $239 = HEAP32[$238>>2]|0;
 $__t$i$i = $239;
 $29 = $236;
 $240 = $29;
 $28 = $240;
 $241 = $28;
 HEAP32[$241>>2] = 0;
 $242 = $__t$i$i;
 $243 = $34;
 $27 = $243;
 $244 = $27;
 $26 = $244;
 $245 = $26;
 $25 = $245;
 $246 = $25;
 $247 = (($246) + 4|0);
 $13 = $247;
 $248 = $13;
 ;HEAP32[$35+0>>2]=HEAP32[$248+0>>2]|0;HEAP32[$35+4>>2]=HEAP32[$248+4>>2]|0;
 ;HEAP8[$24+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$24+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$35+3>>0]|0;HEAP8[$24+4>>0]=HEAP8[$35+4>>0]|0;HEAP8[$24+5>>0]=HEAP8[$35+5>>0]|0;HEAP8[$24+6>>0]=HEAP8[$35+6>>0]|0;HEAP8[$24+7>>0]=HEAP8[$35+7>>0]|0;
 $21 = $234;
 HEAP32[$22>>2] = $242;
 $249 = $21;
 $20 = $22;
 $250 = $20;
 $251 = HEAP32[$250>>2]|0;
 $14 = $24;
 $252 = $14;
 ;HEAP32[$23+0>>2]=HEAP32[$252+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$252+4>>2]|0;
 ;HEAP8[$19+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$23+3>>0]|0;HEAP8[$19+4>>0]=HEAP8[$23+4>>0]|0;HEAP8[$19+5>>0]=HEAP8[$23+5>>0]|0;HEAP8[$19+6>>0]=HEAP8[$23+6>>0]|0;HEAP8[$19+7>>0]=HEAP8[$23+7>>0]|0;
 $17 = $249;
 HEAP32[$18>>2] = $251;
 $253 = $17;
 $16 = $18;
 $254 = $16;
 $255 = HEAP32[$254>>2]|0;
 HEAP32[$253>>2] = $255;
 $256 = (($253) + 4|0);
 $15 = $19;
 $257 = $15;
 ;HEAP32[$256+0>>2]=HEAP32[$257+0>>2]|0;HEAP32[$256+4>>2]=HEAP32[$257+4>>2]|0;
 $156 = 1;
 $88 = $__h;
 $258 = $88;
 $86 = $258;
 $87 = 0;
 $259 = $86;
 $85 = $259;
 $260 = $85;
 $84 = $260;
 $261 = $84;
 $262 = HEAP32[$261>>2]|0;
 $__tmp$i$i1 = $262;
 $263 = $87;
 $60 = $259;
 $264 = $60;
 $59 = $264;
 $265 = $59;
 HEAP32[$265>>2] = $263;
 $266 = $__tmp$i$i1;
 $267 = ($266|0)!=(0|0);
 if (!($267)) {
  STACKTOP = sp;return;
 }
 $58 = $259;
 $268 = $58;
 $57 = $268;
 $269 = $57;
 $270 = (($269) + 4|0);
 $271 = $__tmp$i$i1;
 $82 = $270;
 $83 = $271;
 $272 = $82;
 $273 = (($272) + 5|0);
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&1;
 if ($275) {
  $276 = HEAP32[$272>>2]|0;
  $277 = $83;
  $278 = (($277) + 16|0);
  $279 = (($278) + 16|0);
  $81 = $279;
  $280 = $81;
  $78 = $276;
  $79 = $280;
  $281 = $78;
  $282 = $79;
  ;HEAP8[$77+0>>0]=HEAP8[$80+0>>0]|0;
  $75 = $281;
  $76 = $282;
  $283 = $76;
  __ZN8picojson5valueD2Ev($283);
 }
 $284 = (($272) + 4|0);
 $285 = HEAP8[$284>>0]|0;
 $286 = $285&1;
 if ($286) {
  $287 = HEAP32[$272>>2]|0;
  $288 = $83;
  $289 = (($288) + 16|0);
  $74 = $289;
  $290 = $74;
  $64 = $287;
  $65 = $290;
  $291 = $64;
  $292 = $65;
  ;HEAP8[$63+0>>0]=HEAP8[$66+0>>0]|0;
  $61 = $291;
  $62 = $292;
  $293 = $62;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
 }
 $294 = $83;
 $295 = ($294|0)!=(0|0);
 if ($295) {
  $296 = HEAP32[$272>>2]|0;
  $297 = $83;
  $71 = $296;
  $72 = $297;
  $73 = 1;
  $298 = $71;
  $299 = $72;
  $300 = $73;
  $68 = $298;
  $69 = $299;
  $70 = $300;
  $301 = $69;
  $67 = $301;
  $302 = $67;
  __ZdlPv($302);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = $this;
 $12 = $__parent;
 $13 = $__child;
 $14 = $__new_node;
 $15 = $11;
 $16 = $14;
 HEAP32[$16>>2] = 0;
 $17 = $14;
 $18 = (($17) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = $12;
 $20 = $14;
 $21 = (($20) + 8|0);
 HEAP32[$21>>2] = $19;
 $22 = $14;
 $23 = $13;
 HEAP32[$23>>2] = $22;
 $10 = $15;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $6 = $15;
  $28 = $6;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $0 = $15;
  $31 = $0;
  HEAP32[$31>>2] = $30;
 }
 $5 = $15;
 $32 = $5;
 $33 = (($32) + 4|0);
 $4 = $33;
 $34 = $4;
 $3 = $34;
 $35 = $3;
 $2 = $35;
 $36 = $2;
 $1 = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = $13;
 $40 = HEAP32[$39>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($38,$40);
 $9 = $15;
 $41 = $9;
 $42 = (($41) + 8|0);
 $8 = $42;
 $43 = $8;
 $7 = $43;
 $44 = $7;
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + 1)|0;
 HEAP32[$44>>2] = $46;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__root;
 $4 = $__x;
 $5 = $4;
 $6 = $3;
 $7 = ($5|0)==($6|0);
 $8 = $4;
 $9 = (($8) + 12|0);
 $10 = $7&1;
 HEAP8[$9>>0] = $10;
 while(1) {
  $11 = $4;
  $12 = $3;
  $13 = ($11|0)!=($12|0);
  if ($13) {
   $14 = $4;
   $15 = (($14) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18&1;
   $20 = $19 ^ 1;
   $131 = $20;
  } else {
   $131 = 0;
  }
  if (!($131)) {
   label = 21;
   break;
  }
  $21 = $4;
  $22 = (($21) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
  $24 = $2;
  $25 = $2;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = ($24|0)==($28|0);
  if ($29) {
   $30 = $4;
   $31 = (($30) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $__y = $36;
   $37 = $__y;
   $38 = ($37|0)!=(0|0);
   if (!($38)) {
    label = 9;
    break;
   }
   $39 = $__y;
   $40 = (($39) + 12|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&1;
   if ($42) {
    label = 9;
    break;
   }
   $43 = $4;
   $44 = (($43) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $4 = $45;
   $46 = $4;
   $47 = (($46) + 12|0);
   HEAP8[$47>>0] = 1;
   $48 = $4;
   $49 = (($48) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $4 = $50;
   $51 = $4;
   $52 = $3;
   $53 = ($51|0)==($52|0);
   $54 = $4;
   $55 = (($54) + 12|0);
   $56 = $53&1;
   HEAP8[$55>>0] = $56;
   $57 = $__y;
   $58 = (($57) + 12|0);
   HEAP8[$58>>0] = 1;
  } else {
   $81 = $4;
   $82 = (($81) + 8|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 8|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $__y1 = $86;
   $87 = $__y1;
   $88 = ($87|0)!=(0|0);
   if (!($88)) {
    label = 16;
    break;
   }
   $89 = $__y1;
   $90 = (($89) + 12|0);
   $91 = HEAP8[$90>>0]|0;
   $92 = $91&1;
   if ($92) {
    label = 16;
    break;
   }
   $93 = $4;
   $94 = (($93) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   $4 = $95;
   $96 = $4;
   $97 = (($96) + 12|0);
   HEAP8[$97>>0] = 1;
   $98 = $4;
   $99 = (($98) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   $4 = $100;
   $101 = $4;
   $102 = $3;
   $103 = ($101|0)==($102|0);
   $104 = $4;
   $105 = (($104) + 12|0);
   $106 = $103&1;
   HEAP8[$105>>0] = $106;
   $107 = $__y1;
   $108 = (($107) + 12|0);
   HEAP8[$108>>0] = 1;
  }
 }
 if ((label|0) == 9) {
  $59 = $4;
  $1 = $59;
  $60 = $1;
  $61 = $1;
  $62 = (($61) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = HEAP32[$63>>2]|0;
  $65 = ($60|0)==($64|0);
  if (!($65)) {
   $66 = $4;
   $67 = (($66) + 8|0);
   $68 = HEAP32[$67>>2]|0;
   $4 = $68;
   $69 = $4;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($69);
  }
  $70 = $4;
  $71 = (($70) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $4 = $72;
  $73 = $4;
  $74 = (($73) + 12|0);
  HEAP8[$74>>0] = 1;
  $75 = $4;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $4 = $77;
  $78 = $4;
  $79 = (($78) + 12|0);
  HEAP8[$79>>0] = 0;
  $80 = $4;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($80);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  $109 = $4;
  $0 = $109;
  $110 = $0;
  $111 = $0;
  $112 = (($111) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($110|0)==($114|0);
  if ($115) {
   $116 = $4;
   $117 = (($116) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $4 = $118;
   $119 = $4;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($119);
  }
  $120 = $4;
  $121 = (($120) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $4 = $122;
  $123 = $4;
  $124 = (($123) + 12|0);
  HEAP8[$124>>0] = 1;
  $125 = $4;
  $126 = (($125) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  $4 = $127;
  $128 = $4;
  $129 = (($128) + 12|0);
  HEAP8[$129>>0] = 0;
  $130 = $4;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($130);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $__y = $4;
 $5 = $__y;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = $1;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 8|0);
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__y;
 $22 = (($21) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $1;
 $0 = $23;
 $24 = $0;
 $25 = $0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = ($24|0)==($28|0);
 if ($29) {
  $30 = $__y;
  $31 = $1;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  HEAP32[$33>>2] = $30;
  $39 = $1;
  $40 = $__y;
  HEAP32[$40>>2] = $39;
  $41 = $__y;
  $42 = $1;
  $43 = (($42) + 8|0);
  HEAP32[$43>>2] = $41;
  STACKTOP = sp;return;
 } else {
  $34 = $__y;
  $35 = $1;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 4|0);
  HEAP32[$38>>2] = $34;
  $39 = $1;
  $40 = $__y;
  HEAP32[$40>>2] = $39;
  $41 = $__y;
  $42 = $1;
  $43 = (($42) + 8|0);
  HEAP32[$43>>2] = $41;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $__x;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $__y = $3;
 $4 = $__y;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 8|0);
  HEAP32[$14>>2] = $11;
 }
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $__y;
 $19 = (($18) + 8|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 $0 = $20;
 $21 = $0;
 $22 = $0;
 $23 = (($22) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = ($21|0)==($25|0);
 if ($26) {
  $27 = $__y;
  $28 = $1;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$30>>2] = $27;
  $36 = $1;
  $37 = $__y;
  $38 = (($37) + 4|0);
  HEAP32[$38>>2] = $36;
  $39 = $__y;
  $40 = $1;
  $41 = (($40) + 8|0);
  HEAP32[$41>>2] = $39;
  STACKTOP = sp;return;
 } else {
  $31 = $__y;
  $32 = $1;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 4|0);
  HEAP32[$35>>2] = $31;
  $36 = $1;
  $37 = $__y;
  $38 = (($37) + 4|0);
  HEAP32[$38>>2] = $36;
  $39 = $__y;
  $40 = $1;
  $41 = (($40) + 8|0);
  HEAP32[$41>>2] = $39;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 16)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 16)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 16)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIN8picojson5valueERNS_9allocatorIS2_EEEC2EjjS5_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if ($119) {
  label = 12;
 } else {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  __THREW__ = 0;
  invoke_vii(444,($118|0),($121|0));
  $122 = __THREW__; __THREW__ = 0;
  $123 = $122&1;
  if (!($123)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $124 = (($__v) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + 16|0);
  HEAP32[$124>>2] = $126;
  __THREW__ = 0;
  invoke_vii(458,($43|0),($__v|0));
  $127 = __THREW__; __THREW__ = 0;
  $128 = $127&1;
  if (!($128)) {
   __ZNSt3__114__split_bufferIN8picojson5valueERNS_9allocatorIS2_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $129 = ___cxa_find_matching_catch()|0;
 $130 = tempRet0;
 $41 = $129;
 $42 = $130;
 __ZNSt3__114__split_bufferIN8picojson5valueERNS_9allocatorIS2_EEED2Ev($__v);
 $131 = $41;
 $132 = $42;
 ___resumeException($131|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIN8picojson5valueERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<4;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<4)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<4)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 180|0;
 $__t$i1 = sp + 132|0;
 $__t$i = sp + 104|0;
 $32 = sp;
 $37 = sp + 204|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE17__annotate_deleteEv($49);
 $46 = $49;
 $50 = $46;
 $51 = (($50) + 8|0);
 $45 = $51;
 $52 = $45;
 $44 = $52;
 $53 = $44;
 $54 = HEAP32[$49>>2]|0;
 $55 = (($49) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $48;
 $58 = (($57) + 4|0);
 $39 = $53;
 $40 = $54;
 $41 = $56;
 $42 = $58;
 while(1) {
  $59 = $41;
  $60 = $40;
  $61 = ($59|0)!=($60|0);
  if (!($61)) {
   break;
  }
  $62 = $39;
  $63 = $42;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -16|0);
  $38 = $65;
  $66 = $38;
  $67 = $41;
  $68 = (($67) + -16|0);
  $41 = $68;
  $23 = $68;
  $69 = $23;
  $22 = $69;
  $70 = $22;
  $34 = $62;
  $35 = $66;
  $36 = $70;
  $71 = $34;
  $72 = $35;
  $73 = $36;
  $33 = $73;
  $74 = $33;
  ;HEAP8[$32+0>>0]=HEAP8[$37+0>>0]|0;
  $29 = $71;
  $30 = $72;
  $31 = $74;
  $75 = $29;
  $76 = $30;
  $77 = $31;
  $28 = $77;
  $78 = $28;
  $25 = $75;
  $26 = $76;
  $27 = $78;
  $79 = $26;
  $80 = ($79|0)==(0|0);
  if (!($80)) {
   $81 = $27;
   $24 = $81;
   $82 = $24;
   __ZN8picojson5valueC2ERKS0_($79,$82);
  }
  $83 = $42;
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + -16|0);
  HEAP32[$83>>2] = $85;
 }
 $86 = $48;
 $87 = (($86) + 4|0);
 $20 = $49;
 $21 = $87;
 $88 = $20;
 $19 = $88;
 $89 = $19;
 $90 = HEAP32[$89>>2]|0;
 HEAP32[$__t$i>>2] = $90;
 $91 = $21;
 $17 = $91;
 $92 = $17;
 $93 = HEAP32[$92>>2]|0;
 $94 = $20;
 HEAP32[$94>>2] = $93;
 $18 = $__t$i;
 $95 = $18;
 $96 = HEAP32[$95>>2]|0;
 $97 = $21;
 HEAP32[$97>>2] = $96;
 $98 = (($49) + 4|0);
 $99 = $48;
 $100 = (($99) + 8|0);
 $3 = $98;
 $4 = $100;
 $101 = $3;
 $2 = $101;
 $102 = $2;
 $103 = HEAP32[$102>>2]|0;
 HEAP32[$__t$i2>>2] = $103;
 $104 = $4;
 $0 = $104;
 $105 = $0;
 $106 = HEAP32[$105>>2]|0;
 $107 = $3;
 HEAP32[$107>>2] = $106;
 $1 = $__t$i2;
 $108 = $1;
 $109 = HEAP32[$108>>2]|0;
 $110 = $4;
 HEAP32[$110>>2] = $109;
 $7 = $49;
 $111 = $7;
 $112 = (($111) + 8|0);
 $6 = $112;
 $113 = $6;
 $5 = $113;
 $114 = $5;
 $115 = $48;
 $10 = $115;
 $116 = $10;
 $117 = (($116) + 12|0);
 $9 = $117;
 $118 = $9;
 $8 = $118;
 $119 = $8;
 $14 = $114;
 $15 = $119;
 $120 = $14;
 $13 = $120;
 $121 = $13;
 $122 = HEAP32[$121>>2]|0;
 HEAP32[$__t$i1>>2] = $122;
 $123 = $15;
 $11 = $123;
 $124 = $11;
 $125 = HEAP32[$124>>2]|0;
 $126 = $14;
 HEAP32[$126>>2] = $125;
 $12 = $__t$i1;
 $127 = $12;
 $128 = HEAP32[$127>>2]|0;
 $129 = $15;
 HEAP32[$129>>2] = $128;
 $130 = $48;
 $131 = (($130) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $48;
 HEAP32[$133>>2] = $132;
 $16 = $49;
 $134 = $16;
 $135 = (($134) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = HEAP32[$134>>2]|0;
 $138 = $136;
 $139 = $137;
 $140 = (($138) - ($139))|0;
 $141 = (($140|0) / 16)&-1;
 __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE14__annotate_newEj($49,$141);
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN8picojson5valueERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -16|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
  $59 = $15;
  __ZN8picojson5valueD2Ev($59);
 }
 $60 = HEAP32[$34>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $62 = $13;
 $63 = (($62) + 12|0);
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$34>>2]|0;
 $10 = $34;
 $69 = $10;
 $9 = $69;
 $70 = $9;
 $71 = (($70) + 12|0);
 $8 = $71;
 $72 = $8;
 $7 = $72;
 $73 = $7;
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$69>>2]|0;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 16)&-1;
 $4 = $67;
 $5 = $68;
 $6 = $79;
 $80 = $4;
 $81 = $5;
 $82 = $6;
 $1 = $80;
 $2 = $81;
 $3 = $82;
 $83 = $2;
 $0 = $83;
 $84 = $0;
 __ZdlPv($84);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN8picojson5valueC2ERKS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__e$i$i = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $1 = sp + 56|0;
 $4 = sp + 296|0;
 $5 = sp + 292|0;
 $6 = sp + 48|0;
 $14 = sp + 40|0;
 $22 = sp + 32|0;
 $32 = sp + 196|0;
 $__e$i$i = sp + 184|0;
 $35 = sp + 180|0;
 $36 = sp + 176|0;
 $37 = sp + 172|0;
 $38 = sp + 24|0;
 $39 = sp + 16|0;
 $41 = sp + 8|0;
 $51 = sp + 128|0;
 $53 = sp;
 $59 = sp + 100|0;
 $62 = sp + 88|0;
 $63 = sp + 84|0;
 $66 = $this;
 $67 = $x;
 $70 = $66;
 $71 = $67;
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$70>>2] = $72;
 $73 = HEAP32[$70>>2]|0;
 if ((($73|0) == 3)) {
  $74 = (__Znwj(12)|0);
  $75 = $67;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  __THREW__ = 0;
  invoke_vii(456,($74|0),($77|0));
  $78 = __THREW__; __THREW__ = 0;
  $79 = $78&1;
  if ($79) {
   $81 = ___cxa_find_matching_catch()|0;
   $82 = tempRet0;
   $68 = $81;
   $69 = $82;
   __ZdlPv($74);
   $169 = $68;
   $170 = $69;
   ___resumeException($169|0);
   // unreachable;
  } else {
   $80 = (($70) + 8|0);
   HEAP32[$80>>2] = $74;
   STACKTOP = sp;return;
  }
 } else if ((($73|0) == 4)) {
  $83 = (__Znwj(12)|0);
  $84 = $67;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  __THREW__ = 0;
  invoke_vii(415,($83|0),($86|0));
  $87 = __THREW__; __THREW__ = 0;
  $88 = $87&1;
  if ($88) {
   $90 = ___cxa_find_matching_catch()|0;
   $91 = tempRet0;
   $68 = $90;
   $69 = $91;
   __ZdlPv($83);
   $169 = $68;
   $170 = $69;
   ___resumeException($169|0);
   // unreachable;
  } else {
   $89 = (($70) + 8|0);
   HEAP32[$89>>2] = $83;
   STACKTOP = sp;return;
  }
 } else if ((($73|0) == 5)) {
  $92 = (__Znwj(12)|0);
  $93 = $67;
  $94 = (($93) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $60 = $92;
  $61 = $95;
  $96 = $60;
  $97 = $61;
  __THREW__ = 0;
  invoke_vii(454,($96|0),($97|0));
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  do {
   if ($99) {
    $164 = ___cxa_find_matching_catch()|0;
    $165 = tempRet0;
    $eh$lpad$body$index2Z2D = $165;$eh$lpad$body$indexZ2D = $164;
   } else {
    $100 = $61;
    $58 = $100;
    $101 = $58;
    $57 = $101;
    $102 = $57;
    $56 = $102;
    $103 = $56;
    $104 = HEAP32[$103>>2]|0;
    $54 = $59;
    $55 = $104;
    $105 = $54;
    $106 = $55;
    HEAP32[$105>>2] = $106;
    ;HEAP8[$53+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$53+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$59+3>>0]|0;
    $52 = $62;
    $107 = $52;
    ;HEAP32[$107+0>>2]=HEAP32[$53+0>>2]|0;
    $108 = $61;
    $50 = $108;
    $109 = $50;
    $49 = $109;
    $110 = $49;
    $48 = $110;
    $111 = $48;
    $112 = (($111) + 4|0);
    $47 = $112;
    $113 = $47;
    $46 = $113;
    $114 = $46;
    $45 = $114;
    $115 = $45;
    $44 = $115;
    $116 = $44;
    $42 = $51;
    $43 = $116;
    $117 = $42;
    $118 = $43;
    HEAP32[$117>>2] = $118;
    ;HEAP8[$41+0>>0]=HEAP8[$51+0>>0]|0;HEAP8[$41+1>>0]=HEAP8[$51+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$51+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$51+3>>0]|0;
    $40 = $63;
    $119 = $40;
    ;HEAP32[$119+0>>2]=HEAP32[$41+0>>2]|0;
    ;HEAP8[$38+0>>0]=HEAP8[$63+0>>0]|0;HEAP8[$38+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$63+3>>0]|0;
    ;HEAP8[$39+0>>0]=HEAP8[$62+0>>0]|0;HEAP8[$39+1>>0]=HEAP8[$62+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$62+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$62+3>>0]|0;
    $34 = $96;
    $120 = $34;
    $33 = $120;
    $121 = $33;
    $31 = $121;
    $122 = $31;
    $30 = $122;
    $123 = $30;
    $29 = $123;
    $124 = $29;
    $125 = (($124) + 4|0);
    $28 = $125;
    $126 = $28;
    $27 = $126;
    $127 = $27;
    $26 = $127;
    $128 = $26;
    $25 = $128;
    $129 = $25;
    $23 = $32;
    $24 = $129;
    $130 = $23;
    $131 = $24;
    HEAP32[$130>>2] = $131;
    ;HEAP8[$22+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$22+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$32+3>>0]|0;
    $21 = $__e$i$i;
    $132 = $21;
    ;HEAP32[$132+0>>2]=HEAP32[$22+0>>2]|0;
    while(1) {
     $19 = $39;
     $20 = $38;
     $133 = $19;
     $134 = $20;
     $17 = $133;
     $18 = $134;
     $135 = $17;
     $136 = $18;
     $15 = $135;
     $16 = $136;
     $137 = $15;
     $138 = HEAP32[$137>>2]|0;
     $139 = $16;
     $140 = HEAP32[$139>>2]|0;
     $141 = ($138|0)==($140|0);
     $142 = $141 ^ 1;
     if (!($142)) {
      break;
     }
     ;HEAP32[$36+0>>2]=HEAP32[$__e$i$i+0>>2]|0;
     ;HEAP8[$14+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$36+3>>0]|0;
     $13 = $35;
     $143 = $13;
     ;HEAP32[$143+0>>2]=HEAP32[$14+0>>2]|0;
     $12 = $39;
     $144 = $12;
     $11 = $144;
     $145 = $11;
     $146 = HEAP32[$145>>2]|0;
     $147 = (($146) + 16|0);
     $10 = $147;
     $148 = $10;
     $9 = $148;
     $149 = $9;
     ;HEAP8[$6+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$6+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$35+3>>0]|0;
     $2 = $120;
     $3 = $149;
     $150 = $2;
     ;HEAP32[$5+0>>2]=HEAP32[$6+0>>2]|0;
     $151 = $3;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$5+0>>2]|0;
     invoke_viiii(455,($4|0),($150|0),($$byval_copy|0),($151|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if ($153) {
      label = 14;
      break;
     }
     ;HEAP8[$1+0>>0]=HEAP8[$4+0>>0]|0;HEAP8[$1+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$4+3>>0]|0;
     $0 = $37;
     $154 = $0;
     ;HEAP32[$154+0>>2]=HEAP32[$1+0>>2]|0;
     $8 = $39;
     $155 = $8;
     $7 = $155;
     $156 = $7;
     $157 = HEAP32[$156>>2]|0;
     $158 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($157)|0);
     HEAP32[$156>>2] = $158;
    }
    if ((label|0) == 14) {
     $159 = ___cxa_find_matching_catch()|0;
     $160 = tempRet0;
     $64 = $159;
     $65 = $160;
     __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($96);
     $161 = $64;
     $162 = $65;
     $eh$lpad$body$index2Z2D = $162;$eh$lpad$body$indexZ2D = $161;
     break;
    }
    $163 = (($70) + 8|0);
    HEAP32[$163>>2] = $92;
    STACKTOP = sp;return;
   }
  } while(0);
  $68 = $eh$lpad$body$indexZ2D;
  $69 = $eh$lpad$body$index2Z2D;
  __ZdlPv($92);
  $169 = $68;
  $170 = $69;
  ___resumeException($169|0);
  // unreachable;
 } else {
  $166 = (($70) + 8|0);
  $167 = $67;
  $168 = (($167) + 8|0);
  ;HEAP32[$166+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$166+4>>2]=HEAP32[$168+4>>2]|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSG_($this,$__t) {
 $this = $this|0;
 $__t = $__t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 32|0;
 $3 = sp + 156|0;
 $7 = sp + 24|0;
 $10 = sp + 155|0;
 $11 = sp + 16|0;
 $19 = sp + 92|0;
 $20 = sp + 8|0;
 $23 = sp + 80|0;
 $24 = sp + 154|0;
 $25 = sp;
 $37 = sp + 153|0;
 $38 = sp + 152|0;
 $35 = $this;
 $36 = $__t;
 $39 = $35;
 HEAP32[$39>>2] = 0;
 $40 = (($39) + 4|0);
 $41 = $36;
 $34 = $41;
 $42 = $34;
 $43 = (($42) + 4|0);
 $33 = $43;
 $44 = $33;
 $32 = $44;
 $45 = $32;
 $2 = $45;
 $46 = $2;
 ;HEAP8[$1+0>>0]=HEAP8[$3+0>>0]|0;
 $0 = $46;
 ;HEAP8[$11+0>>0]=HEAP8[$37+0>>0]|0;
 $9 = $40;
 $47 = $9;
 $8 = $11;
 ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
 $6 = $47;
 $48 = $6;
 $5 = $7;
 $4 = $48;
 $49 = $4;
 HEAP32[$49>>2] = 0;
 $50 = (($39) + 8|0);
 $51 = $36;
 $14 = $51;
 $52 = $14;
 $53 = (($52) + 8|0);
 $13 = $53;
 $54 = $13;
 $12 = $54;
 ;HEAP8[$25+0>>0]=HEAP8[$38+0>>0]|0;
 $22 = $50;
 HEAP32[$23>>2] = 0;
 $55 = $22;
 $21 = $23;
 $56 = $21;
 $57 = HEAP32[$56>>2]|0;
 $15 = $25;
 ;HEAP8[$20+0>>0]=HEAP8[$24+0>>0]|0;
 $18 = $55;
 HEAP32[$19>>2] = $57;
 $58 = $18;
 $17 = $20;
 $16 = $19;
 $59 = $16;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$58>>2] = $60;
 $30 = $39;
 $61 = $30;
 $62 = (($61) + 4|0);
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $27 = $64;
 $65 = $27;
 $26 = $65;
 $66 = $26;
 $31 = $39;
 $67 = $31;
 HEAP32[$67>>2] = $66;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 80|0;
 $18 = $this;
 $19 = $__nd;
 $20 = $18;
 $21 = $19;
 $22 = ($21|0)!=(0|0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = $19;
 $24 = HEAP32[$23>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($20,$24);
 $25 = $19;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE($20,$27);
 $17 = $20;
 $28 = $17;
 $29 = (($28) + 4|0);
 $16 = $29;
 $30 = $16;
 $15 = $30;
 $31 = $15;
 $__na = $31;
 $32 = $__na;
 $33 = $19;
 $34 = (($33) + 16|0);
 $14 = $34;
 $35 = $14;
 $4 = $32;
 $5 = $35;
 $36 = $4;
 $37 = $5;
 ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
 $1 = $36;
 $2 = $37;
 $38 = $2;
 $0 = $38;
 $39 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($39);
 $40 = $__na;
 $41 = $19;
 $11 = $40;
 $12 = $41;
 $13 = 1;
 $42 = $11;
 $43 = $12;
 $44 = $13;
 $8 = $42;
 $9 = $43;
 $10 = $44;
 $45 = $9;
 $7 = $45;
 $46 = $7;
 __ZdlPv($46);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 __ZN8picojson5valueD2Ev($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__x;
 $4 = $3;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  while(1) {
   $11 = $1;
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(0|0);
   if (!($13)) {
    break;
   }
   $14 = $1;
   $15 = HEAP32[$14>>2]|0;
   $1 = $15;
  }
  $16 = $1;
  $2 = $16;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 } else {
  while(1) {
   $17 = $3;
   $0 = $17;
   $18 = $0;
   $19 = $0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($18|0)==($22|0);
   $24 = $23 ^ 1;
   if (!($24)) {
    break;
   }
   $25 = $3;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $3 = $27;
  }
  $28 = $3;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $2 = $30;
  $31 = $2;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE15__insert_uniqueIRKNS_4pairIKS7_S9_EEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEENS_21__tree_const_iteratorISA_SR_iEEOT_($agg$result,$this,$__p,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 300|0;
 $14 = sp + 8|0;
 $17 = sp + 305|0;
 $40 = sp;
 $43 = sp + 304|0;
 $__h = sp + 28|0;
 $66 = sp + 24|0;
 $64 = $this;
 $65 = $__v;
 $70 = $64;
 $71 = $65;
 $63 = $71;
 $72 = $63;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeIJRKNS_4pairIKS7_S9_EEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS5_ISQ_EEEEEEDpOT_($__h,$70,$72);
 ;HEAP32[$66+0>>2]=HEAP32[$__p+0>>2]|0;
 $62 = $__h;
 $73 = $62;
 $61 = $73;
 $74 = $61;
 $60 = $74;
 $75 = $60;
 $76 = HEAP32[$75>>2]|0;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$66+0>>2]|0;
 invoke_viiii(459,($agg$result|0),($70|0),($$byval_copy|0),($76|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if ($78) {
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  $67 = $91;
  $68 = $92;
  $51 = $__h;
  $93 = $51;
  $49 = $93;
  $50 = 0;
  $94 = $49;
  $48 = $94;
  $95 = $48;
  $47 = $95;
  $96 = $47;
  $97 = HEAP32[$96>>2]|0;
  $__tmp$i$i = $97;
  $98 = $50;
  $29 = $94;
  $99 = $29;
  $28 = $99;
  $100 = $28;
  HEAP32[$100>>2] = $98;
  $101 = $__tmp$i$i;
  $102 = ($101|0)!=(0|0);
  if ($102) {
   $27 = $94;
   $103 = $27;
   $26 = $103;
   $104 = $26;
   $105 = (($104) + 4|0);
   $106 = $__tmp$i$i;
   $45 = $105;
   $46 = $106;
   $107 = $45;
   $108 = (($107) + 4|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&1;
   if ($110) {
    $111 = HEAP32[$107>>2]|0;
    $112 = $46;
    $113 = (($112) + 16|0);
    $44 = $113;
    $114 = $44;
    $41 = $111;
    $42 = $114;
    $115 = $41;
    $116 = $42;
    ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
    $38 = $115;
    $39 = $116;
    $117 = $39;
    $37 = $117;
    $118 = $37;
    __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($118);
   }
   $119 = $46;
   $120 = ($119|0)!=(0|0);
   if ($120) {
    $121 = HEAP32[$107>>2]|0;
    $122 = $46;
    $34 = $121;
    $35 = $122;
    $36 = 1;
    $123 = $34;
    $124 = $35;
    $125 = $36;
    $31 = $123;
    $32 = $124;
    $33 = $125;
    $126 = $32;
    $30 = $126;
    $127 = $30;
    __ZdlPv($127);
   }
  }
  $163 = $67;
  $164 = $68;
  ___resumeException($163|0);
  // unreachable;
 }
 $79 = HEAP32[$agg$result>>2]|0;
 $59 = $__h;
 $80 = $59;
 $58 = $80;
 $81 = $58;
 $57 = $81;
 $82 = $57;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($79|0)==($83|0);
 if ($84) {
  $56 = $__h;
  $85 = $56;
  $55 = $85;
  $86 = $55;
  $54 = $86;
  $87 = $54;
  $88 = HEAP32[$87>>2]|0;
  $__t$i = $88;
  $53 = $85;
  $89 = $53;
  $52 = $89;
  $90 = $52;
  HEAP32[$90>>2] = 0;
 }
 $69 = 1;
 $25 = $__h;
 $128 = $25;
 $23 = $128;
 $24 = 0;
 $129 = $23;
 $22 = $129;
 $130 = $22;
 $21 = $130;
 $131 = $21;
 $132 = HEAP32[$131>>2]|0;
 $__tmp$i$i1 = $132;
 $133 = $24;
 $3 = $129;
 $134 = $3;
 $2 = $134;
 $135 = $2;
 HEAP32[$135>>2] = $133;
 $136 = $__tmp$i$i1;
 $137 = ($136|0)!=(0|0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $1 = $129;
 $138 = $1;
 $0 = $138;
 $139 = $0;
 $140 = (($139) + 4|0);
 $141 = $__tmp$i$i1;
 $19 = $140;
 $20 = $141;
 $142 = $19;
 $143 = (($142) + 4|0);
 $144 = HEAP8[$143>>0]|0;
 $145 = $144&1;
 if ($145) {
  $146 = HEAP32[$142>>2]|0;
  $147 = $20;
  $148 = (($147) + 16|0);
  $18 = $148;
  $149 = $18;
  $15 = $146;
  $16 = $149;
  $150 = $15;
  $151 = $16;
  ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
  $12 = $150;
  $13 = $151;
  $152 = $13;
  $11 = $152;
  $153 = $11;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($153);
 }
 $154 = $20;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  $156 = HEAP32[$142>>2]|0;
  $157 = $20;
  $8 = $156;
  $9 = $157;
  $10 = 1;
  $158 = $8;
  $159 = $9;
  $160 = $10;
  $5 = $158;
  $6 = $159;
  $7 = $160;
  $161 = $6;
  $4 = $161;
  $162 = $4;
  __ZdlPv($162);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__construct_nodeIJRKNS_4pairIKS7_S9_EEEEENS_10unique_ptrINS_11__tree_nodeISA_PvEENS_22__tree_node_destructorINS5_ISQ_EEEEEEDpOT_($agg$result,$this,$__args) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 32|0;
 $20 = sp + 487|0;
 $35 = sp + 24|0;
 $38 = sp + 486|0;
 $61 = sp + 16|0;
 $64 = sp + 485|0;
 $85 = sp + 156|0;
 $86 = sp + 8|0;
 $89 = sp + 144|0;
 $90 = sp + 136|0;
 $91 = sp;
 $96 = sp + 112|0;
 $111 = sp + 48|0;
 $108 = $this;
 $109 = $__args;
 $115 = $108;
 $107 = $115;
 $116 = $107;
 $117 = (($116) + 4|0);
 $106 = $117;
 $118 = $106;
 $105 = $118;
 $119 = $105;
 $__na = $119;
 $$expand_i1_val = 0;
 $110 = $$expand_i1_val;
 $120 = $__na;
 $103 = $120;
 $104 = 1;
 $121 = $103;
 $122 = $104;
 $100 = $121;
 $101 = $122;
 $102 = 0;
 $123 = $101;
 $124 = ($123*48)|0;
 $99 = $124;
 $125 = $99;
 $126 = (__Znwj($125)|0);
 $127 = $__na;
 $97 = $111;
 $98 = $127;
 $128 = $97;
 $129 = $98;
 HEAP32[$128>>2] = $129;
 $130 = (($128) + 4|0);
 HEAP8[$130>>0] = 0;
 $93 = $agg$result;
 $94 = $126;
 $95 = $111;
 $131 = $93;
 $132 = $94;
 $133 = $95;
 $92 = $133;
 $134 = $92;
 ;HEAP32[$96+0>>2]=HEAP32[$134+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$134+4>>2]|0;
 ;HEAP8[$91+0>>0]=HEAP8[$96+0>>0]|0;HEAP8[$91+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$96+3>>0]|0;HEAP8[$91+4>>0]=HEAP8[$96+4>>0]|0;HEAP8[$91+5>>0]=HEAP8[$96+5>>0]|0;HEAP8[$91+6>>0]=HEAP8[$96+6>>0]|0;HEAP8[$91+7>>0]=HEAP8[$96+7>>0]|0;
 $88 = $131;
 HEAP32[$89>>2] = $132;
 $135 = $88;
 $87 = $89;
 $136 = $87;
 $137 = HEAP32[$136>>2]|0;
 $81 = $91;
 $138 = $81;
 ;HEAP32[$90+0>>2]=HEAP32[$138+0>>2]|0;HEAP32[$90+4>>2]=HEAP32[$138+4>>2]|0;
 ;HEAP8[$86+0>>0]=HEAP8[$90+0>>0]|0;HEAP8[$86+1>>0]=HEAP8[$90+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$90+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$90+3>>0]|0;HEAP8[$86+4>>0]=HEAP8[$90+4>>0]|0;HEAP8[$86+5>>0]=HEAP8[$90+5>>0]|0;HEAP8[$86+6>>0]=HEAP8[$90+6>>0]|0;HEAP8[$86+7>>0]=HEAP8[$90+7>>0]|0;
 $84 = $135;
 HEAP32[$85>>2] = $137;
 $139 = $84;
 $83 = $85;
 $140 = $83;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$139>>2] = $141;
 $142 = (($139) + 4|0);
 $82 = $86;
 $143 = $82;
 ;HEAP32[$142+0>>2]=HEAP32[$143+0>>2]|0;HEAP32[$142+4>>2]=HEAP32[$143+4>>2]|0;
 $144 = $__na;
 $80 = $agg$result;
 $145 = $80;
 $79 = $145;
 $146 = $79;
 $78 = $146;
 $147 = $78;
 $148 = HEAP32[$147>>2]|0;
 $149 = (($148) + 16|0);
 $77 = $149;
 $150 = $77;
 $151 = $109;
 $76 = $151;
 $152 = $76;
 $17 = $144;
 $18 = $150;
 $19 = $152;
 $153 = $17;
 $154 = $18;
 $155 = $19;
 $16 = $155;
 $156 = $16;
 ;HEAP8[$15+0>>0]=HEAP8[$20+0>>0]|0;
 $12 = $153;
 $13 = $154;
 $14 = $156;
 $157 = $12;
 $158 = $13;
 $159 = $14;
 $11 = $159;
 $160 = $11;
 $8 = $157;
 $9 = $158;
 $10 = $160;
 $161 = $9;
 $162 = ($161|0)==(0|0);
 L1: do {
  if (!($162)) {
   $163 = $10;
   $7 = $163;
   $164 = $7;
   $5 = $161;
   $6 = $164;
   $165 = $5;
   $166 = $6;
   $4 = $166;
   $167 = $4;
   $0 = $165;
   $1 = $167;
   $168 = $0;
   $169 = $1;
   __THREW__ = 0;
   invoke_vii(456,($168|0),($169|0));
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   do {
    if ($171) {
     $187 = ___cxa_find_matching_catch()|0;
     $188 = tempRet0;
     $eh$lpad$body$index2Z2D = $188;$eh$lpad$body$indexZ2D = $187;
    } else {
     $172 = (($168) + 16|0);
     $173 = $1;
     $174 = (($173) + 16|0);
     __THREW__ = 0;
     invoke_vii(444,($172|0),($174|0));
     $175 = __THREW__; __THREW__ = 0;
     $176 = $175&1;
     if ($176) {
      $177 = ___cxa_find_matching_catch()|0;
      $178 = tempRet0;
      $2 = $177;
      $3 = $178;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($168);
      $179 = $2;
      $180 = $3;
      $eh$lpad$body$index2Z2D = $180;$eh$lpad$body$indexZ2D = $179;
      break;
     }
     break L1;
    }
   } while(0);
   $112 = $eh$lpad$body$indexZ2D;
   $113 = $eh$lpad$body$index2Z2D;
   $72 = $agg$result;
   $189 = $72;
   $70 = $189;
   $71 = 0;
   $190 = $70;
   $69 = $190;
   $191 = $69;
   $68 = $191;
   $192 = $68;
   $193 = HEAP32[$192>>2]|0;
   $__tmp$i$i = $193;
   $194 = $71;
   $50 = $190;
   $195 = $50;
   $49 = $195;
   $196 = $49;
   HEAP32[$196>>2] = $194;
   $197 = $__tmp$i$i;
   $198 = ($197|0)!=(0|0);
   if ($198) {
    $48 = $190;
    $199 = $48;
    $47 = $199;
    $200 = $47;
    $201 = (($200) + 4|0);
    $202 = $__tmp$i$i;
    $66 = $201;
    $67 = $202;
    $203 = $66;
    $204 = (($203) + 4|0);
    $205 = HEAP8[$204>>0]|0;
    $206 = $205&1;
    if ($206) {
     $207 = HEAP32[$203>>2]|0;
     $208 = $67;
     $209 = (($208) + 16|0);
     $65 = $209;
     $210 = $65;
     $62 = $207;
     $63 = $210;
     $211 = $62;
     $212 = $63;
     ;HEAP8[$61+0>>0]=HEAP8[$64+0>>0]|0;
     $59 = $211;
     $60 = $212;
     $213 = $60;
     $58 = $213;
     $214 = $58;
     __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($214);
    }
    $215 = $67;
    $216 = ($215|0)!=(0|0);
    if ($216) {
     $217 = HEAP32[$203>>2]|0;
     $218 = $67;
     $55 = $217;
     $56 = $218;
     $57 = 1;
     $219 = $55;
     $220 = $56;
     $221 = $57;
     $52 = $219;
     $53 = $220;
     $54 = $221;
     $222 = $53;
     $51 = $222;
     $223 = $51;
     __ZdlPv($223);
    }
   }
   $259 = $112;
   $260 = $113;
   ___resumeException($259|0);
   // unreachable;
  }
 } while(0);
 $75 = $agg$result;
 $181 = $75;
 $74 = $181;
 $182 = $74;
 $73 = $182;
 $183 = $73;
 $184 = (($183) + 4|0);
 $185 = (($184) + 4|0);
 HEAP8[$185>>0] = 1;
 $$expand_i1_val7 = 1;
 $110 = $$expand_i1_val7;
 $114 = 1;
 $$pre_trunc = $110;
 $186 = $$pre_trunc&1;
 if ($186) {
  STACKTOP = sp;return;
 }
 $46 = $agg$result;
 $224 = $46;
 $44 = $224;
 $45 = 0;
 $225 = $44;
 $43 = $225;
 $226 = $43;
 $42 = $226;
 $227 = $42;
 $228 = HEAP32[$227>>2]|0;
 $__tmp$i$i1 = $228;
 $229 = $45;
 $24 = $225;
 $230 = $24;
 $23 = $230;
 $231 = $23;
 HEAP32[$231>>2] = $229;
 $232 = $__tmp$i$i1;
 $233 = ($232|0)!=(0|0);
 if ($233) {
  $22 = $225;
  $234 = $22;
  $21 = $234;
  $235 = $21;
  $236 = (($235) + 4|0);
  $237 = $__tmp$i$i1;
  $40 = $236;
  $41 = $237;
  $238 = $40;
  $239 = (($238) + 4|0);
  $240 = HEAP8[$239>>0]|0;
  $241 = $240&1;
  if ($241) {
   $242 = HEAP32[$238>>2]|0;
   $243 = $41;
   $244 = (($243) + 16|0);
   $39 = $244;
   $245 = $39;
   $36 = $242;
   $37 = $245;
   $246 = $36;
   $247 = $37;
   ;HEAP8[$35+0>>0]=HEAP8[$38+0>>0]|0;
   $33 = $246;
   $34 = $247;
   $248 = $34;
   $32 = $248;
   $249 = $32;
   __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEED2Ev($249);
  }
  $250 = $41;
  $251 = ($250|0)!=(0|0);
  if ($251) {
   $252 = HEAP32[$238>>2]|0;
   $253 = $41;
   $29 = $252;
   $30 = $253;
   $31 = 1;
   $254 = $29;
   $255 = $30;
   $256 = $31;
   $26 = $254;
   $27 = $255;
   $28 = $256;
   $257 = $27;
   $25 = $257;
   $258 = $25;
   __ZdlPv($258);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEESL_($agg$result,$this,$__p,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 $__nd = $__nd|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__child = 0, $__parent = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $__parent = sp + 12|0;
 $4 = sp + 4|0;
 $2 = $this;
 $3 = $__nd;
 $5 = $2;
 ;HEAP32[$4+0>>2]=HEAP32[$__p+0>>2]|0;
 $6 = $3;
 $7 = (($6) + 16|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$4+0>>2]|0;
 $8 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SJ_EEiEESM_RKT_($5,$$byval_copy,$__parent,$7)|0);
 $__child = $8;
 $9 = $__child;
 $10 = HEAP32[$9>>2]|0;
 $__r = $10;
 $11 = $__child;
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $18 = $__r;
  $0 = $agg$result;
  $1 = $18;
  $19 = $0;
  $20 = $1;
  HEAP32[$19>>2] = $20;
  STACKTOP = sp;return;
 }
 $14 = HEAP32[$__parent>>2]|0;
 $15 = $__child;
 $16 = $3;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_($5,$14,$15,$16);
 $17 = $3;
 $__r = $17;
 $18 = $__r;
 $0 = $agg$result;
 $1 = $18;
 $19 = $0;
 $20 = $1;
 HEAP32[$19>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_SJ_EEiEESM_RKT_($this,$__hint,$__parent,$__v) {
 $this = $this|0;
 $__hint = $__hint|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__lhs_sz$i$i$i$i19 = 0, $__lhs_sz$i$i$i$i30 = 0, $__lhs_sz$i$i$i$i6 = 0, $__next = 0, $__prior = 0, $__result$i$i$i$i = 0, $__result$i$i$i$i21 = 0, $__result$i$i$i$i32 = 0;
 var $__result$i$i$i$i8 = 0, $__rhs_sz$i$i$i$i = 0, $__rhs_sz$i$i$i$i20 = 0, $__rhs_sz$i$i$i$i31 = 0, $__rhs_sz$i$i$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1456|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp + 64|0;
 $22 = sp + 1444|0;
 $__lhs_sz$i$i$i$i30 = sp + 1204|0;
 $__rhs_sz$i$i$i$i31 = sp + 1200|0;
 $98 = sp + 56|0;
 $101 = sp + 1443|0;
 $__lhs_sz$i$i$i$i19 = sp + 884|0;
 $__rhs_sz$i$i$i$i20 = sp + 880|0;
 $148 = sp + 48|0;
 $172 = sp + 40|0;
 $175 = sp + 1442|0;
 $__lhs_sz$i$i$i$i6 = sp + 588|0;
 $__rhs_sz$i$i$i$i7 = sp + 584|0;
 $226 = sp + 32|0;
 $229 = sp + 1441|0;
 $232 = sp + 24|0;
 $242 = sp + 16|0;
 $273 = sp + 8|0;
 $276 = sp + 1440|0;
 $__lhs_sz$i$i$i$i = sp + 196|0;
 $__rhs_sz$i$i$i$i = sp + 192|0;
 $323 = sp;
 $336 = sp + 100|0;
 $337 = sp + 96|0;
 $__prior = sp + 92|0;
 $338 = sp + 88|0;
 $339 = sp + 84|0;
 $__next = sp + 80|0;
 $340 = sp + 76|0;
 $341 = sp + 72|0;
 $342 = sp + 68|0;
 $333 = $this;
 $334 = $__parent;
 $335 = $__v;
 $343 = $333;
 $331 = $343;
 $344 = $331;
 $330 = $344;
 $345 = $330;
 $346 = (($345) + 4|0);
 $329 = $346;
 $347 = $329;
 $328 = $347;
 $348 = $328;
 $327 = $348;
 $349 = $327;
 $326 = $349;
 $350 = $326;
 $324 = $337;
 $325 = $350;
 $351 = $324;
 $352 = $325;
 HEAP32[$351>>2] = $352;
 ;HEAP8[$323+0>>0]=HEAP8[$337+0>>0]|0;HEAP8[$323+1>>0]=HEAP8[$337+1>>0]|0;HEAP8[$323+2>>0]=HEAP8[$337+2>>0]|0;HEAP8[$323+3>>0]=HEAP8[$337+3>>0]|0;
 $322 = $336;
 $353 = $322;
 $354 = HEAP32[$323>>2]|0;
 HEAP32[$353>>2] = $354;
 $252 = $__hint;
 $253 = $336;
 $355 = $252;
 $356 = HEAP32[$355>>2]|0;
 $357 = $253;
 $358 = HEAP32[$357>>2]|0;
 $359 = ($356|0)==($358|0);
 if (!($359)) {
  $251 = $343;
  $360 = $251;
  $361 = (($360) + 8|0);
  $250 = $361;
  $362 = $250;
  $249 = $362;
  $363 = $249;
  $364 = $335;
  $221 = $__hint;
  $365 = $221;
  $366 = HEAP32[$365>>2]|0;
  $367 = (($366) + 16|0);
  $218 = $363;
  $219 = $364;
  $220 = $367;
  $368 = $218;
  $369 = $219;
  $370 = $220;
  $215 = $368;
  $216 = $369;
  $217 = $370;
  $371 = $216;
  $372 = $217;
  $213 = $371;
  $214 = $372;
  $373 = $213;
  $374 = $214;
  $211 = $373;
  $212 = $374;
  $375 = $211;
  $209 = $375;
  $376 = $209;
  $208 = $376;
  $377 = $208;
  $207 = $377;
  $378 = $207;
  $206 = $378;
  $379 = $206;
  $380 = HEAP8[$379>>0]|0;
  $381 = $380&255;
  $382 = $381 & 1;
  $383 = ($382|0)!=(0);
  if ($383) {
   $202 = $376;
   $384 = $202;
   $201 = $384;
   $385 = $201;
   $200 = $385;
   $386 = $200;
   $387 = (($386) + 4|0);
   $388 = HEAP32[$387>>2]|0;
   $395 = $388;
  } else {
   $205 = $376;
   $389 = $205;
   $204 = $389;
   $390 = $204;
   $203 = $390;
   $391 = $203;
   $392 = HEAP8[$391>>0]|0;
   $393 = $392&255;
   $394 = $393 >> 1;
   $395 = $394;
  }
  HEAP32[$__lhs_sz$i$i$i$i6>>2] = $395;
  $396 = $212;
  $199 = $396;
  $397 = $199;
  $198 = $397;
  $398 = $198;
  $197 = $398;
  $399 = $197;
  $196 = $399;
  $400 = $196;
  $401 = HEAP8[$400>>0]|0;
  $402 = $401&255;
  $403 = $402 & 1;
  $404 = ($403|0)!=(0);
  if ($404) {
   $192 = $397;
   $405 = $192;
   $191 = $405;
   $406 = $191;
   $190 = $406;
   $407 = $190;
   $408 = (($407) + 4|0);
   $409 = HEAP32[$408>>2]|0;
   $416 = $409;
  } else {
   $195 = $397;
   $410 = $195;
   $194 = $410;
   $411 = $194;
   $193 = $411;
   $412 = $193;
   $413 = HEAP8[$412>>0]|0;
   $414 = $413&255;
   $415 = $414 >> 1;
   $416 = $415;
  }
  HEAP32[$__rhs_sz$i$i$i$i7>>2] = $416;
  $189 = $375;
  $417 = $189;
  $188 = $417;
  $418 = $188;
  $187 = $418;
  $419 = $187;
  $186 = $419;
  $420 = $186;
  $185 = $420;
  $421 = $185;
  $422 = HEAP8[$421>>0]|0;
  $423 = $422&255;
  $424 = $423 & 1;
  $425 = ($424|0)!=(0);
  if ($425) {
   $179 = $418;
   $426 = $179;
   $178 = $426;
   $427 = $178;
   $177 = $427;
   $428 = $177;
   $429 = (($428) + 8|0);
   $430 = HEAP32[$429>>2]|0;
   $437 = $430;
  } else {
   $184 = $418;
   $431 = $184;
   $183 = $431;
   $432 = $183;
   $182 = $432;
   $433 = $182;
   $434 = (($433) + 1|0);
   $181 = $434;
   $435 = $181;
   $180 = $435;
   $436 = $180;
   $437 = $436;
  }
  $176 = $437;
  $438 = $176;
  $439 = $212;
  $166 = $439;
  $440 = $166;
  $165 = $440;
  $441 = $165;
  $164 = $441;
  $442 = $164;
  $163 = $442;
  $443 = $163;
  $162 = $443;
  $444 = $162;
  $445 = HEAP8[$444>>0]|0;
  $446 = $445&255;
  $447 = $446 & 1;
  $448 = ($447|0)!=(0);
  if ($448) {
   $156 = $441;
   $449 = $156;
   $155 = $449;
   $450 = $155;
   $154 = $450;
   $451 = $154;
   $452 = (($451) + 8|0);
   $453 = HEAP32[$452>>2]|0;
   $460 = $453;
  } else {
   $161 = $441;
   $454 = $161;
   $160 = $454;
   $455 = $160;
   $159 = $455;
   $456 = $159;
   $457 = (($456) + 1|0);
   $158 = $457;
   $458 = $158;
   $157 = $458;
   $459 = $157;
   $460 = $459;
  }
  $153 = $460;
  $461 = $153;
  $173 = $__lhs_sz$i$i$i$i6;
  $174 = $__rhs_sz$i$i$i$i7;
  $462 = $173;
  $463 = $174;
  ;HEAP8[$172+0>>0]=HEAP8[$175+0>>0]|0;
  $170 = $462;
  $171 = $463;
  $464 = $171;
  $465 = $170;
  $167 = $172;
  $168 = $464;
  $169 = $465;
  $466 = $168;
  $467 = HEAP32[$466>>2]|0;
  $468 = $169;
  $469 = HEAP32[$468>>2]|0;
  $470 = ($467>>>0)<($469>>>0);
  if ($470) {
   $471 = $171;
   $474 = $471;
  } else {
   $472 = $170;
   $474 = $472;
  }
  $473 = HEAP32[$474>>2]|0;
  __THREW__ = 0;
  $475 = (invoke_iiii(457,($438|0),($461|0),($473|0))|0);
  $476 = __THREW__; __THREW__ = 0;
  $477 = $476&1;
  if ($477) {
   $487 = ___cxa_find_matching_catch(0|0)|0;
   $488 = tempRet0;
   ___clang_call_terminate($487);
   // unreachable;
  }
  $__result$i$i$i$i8 = $475;
  $478 = $__result$i$i$i$i8;
  $479 = ($478|0)!=(0);
  do {
   if ($479) {
    $480 = $__result$i$i$i$i8;
    $210 = $480;
   } else {
    $481 = HEAP32[$__lhs_sz$i$i$i$i6>>2]|0;
    $482 = HEAP32[$__rhs_sz$i$i$i$i7>>2]|0;
    $483 = ($481>>>0)<($482>>>0);
    if ($483) {
     $210 = -1;
     break;
    }
    $484 = HEAP32[$__lhs_sz$i$i$i$i6>>2]|0;
    $485 = HEAP32[$__rhs_sz$i$i$i$i7>>2]|0;
    $486 = ($484>>>0)>($485>>>0);
    if ($486) {
     $210 = 1;
     break;
    } else {
     $210 = 0;
     break;
    }
   }
  } while(0);
  $489 = $210;
  $490 = ($489|0)<(0);
  if (!($490)) {
   $72 = $343;
   $652 = $72;
   $653 = (($652) + 8|0);
   $71 = $653;
   $654 = $71;
   $70 = $654;
   $655 = $70;
   $73 = $__hint;
   $656 = $73;
   $657 = HEAP32[$656>>2]|0;
   $658 = (($657) + 16|0);
   $659 = $335;
   $144 = $655;
   $145 = $658;
   $146 = $659;
   $660 = $144;
   $661 = $145;
   $662 = $146;
   $141 = $660;
   $142 = $661;
   $143 = $662;
   $663 = $142;
   $664 = $143;
   $139 = $663;
   $140 = $664;
   $665 = $139;
   $666 = $140;
   $137 = $665;
   $138 = $666;
   $667 = $137;
   $135 = $667;
   $668 = $135;
   $134 = $668;
   $669 = $134;
   $133 = $669;
   $670 = $133;
   $132 = $670;
   $671 = $132;
   $672 = HEAP8[$671>>0]|0;
   $673 = $672&255;
   $674 = $673 & 1;
   $675 = ($674|0)!=(0);
   if ($675) {
    $128 = $668;
    $676 = $128;
    $127 = $676;
    $677 = $127;
    $126 = $677;
    $678 = $126;
    $679 = (($678) + 4|0);
    $680 = HEAP32[$679>>2]|0;
    $687 = $680;
   } else {
    $131 = $668;
    $681 = $131;
    $130 = $681;
    $682 = $130;
    $129 = $682;
    $683 = $129;
    $684 = HEAP8[$683>>0]|0;
    $685 = $684&255;
    $686 = $685 >> 1;
    $687 = $686;
   }
   HEAP32[$__lhs_sz$i$i$i$i19>>2] = $687;
   $688 = $138;
   $125 = $688;
   $689 = $125;
   $124 = $689;
   $690 = $124;
   $123 = $690;
   $691 = $123;
   $122 = $691;
   $692 = $122;
   $693 = HEAP8[$692>>0]|0;
   $694 = $693&255;
   $695 = $694 & 1;
   $696 = ($695|0)!=(0);
   if ($696) {
    $118 = $689;
    $697 = $118;
    $117 = $697;
    $698 = $117;
    $116 = $698;
    $699 = $116;
    $700 = (($699) + 4|0);
    $701 = HEAP32[$700>>2]|0;
    $708 = $701;
   } else {
    $121 = $689;
    $702 = $121;
    $120 = $702;
    $703 = $120;
    $119 = $703;
    $704 = $119;
    $705 = HEAP8[$704>>0]|0;
    $706 = $705&255;
    $707 = $706 >> 1;
    $708 = $707;
   }
   HEAP32[$__rhs_sz$i$i$i$i20>>2] = $708;
   $115 = $667;
   $709 = $115;
   $114 = $709;
   $710 = $114;
   $113 = $710;
   $711 = $113;
   $112 = $711;
   $712 = $112;
   $111 = $712;
   $713 = $111;
   $714 = HEAP8[$713>>0]|0;
   $715 = $714&255;
   $716 = $715 & 1;
   $717 = ($716|0)!=(0);
   if ($717) {
    $105 = $710;
    $718 = $105;
    $104 = $718;
    $719 = $104;
    $103 = $719;
    $720 = $103;
    $721 = (($720) + 8|0);
    $722 = HEAP32[$721>>2]|0;
    $729 = $722;
   } else {
    $110 = $710;
    $723 = $110;
    $109 = $723;
    $724 = $109;
    $108 = $724;
    $725 = $108;
    $726 = (($725) + 1|0);
    $107 = $726;
    $727 = $107;
    $106 = $727;
    $728 = $106;
    $729 = $728;
   }
   $102 = $729;
   $730 = $102;
   $731 = $138;
   $92 = $731;
   $732 = $92;
   $91 = $732;
   $733 = $91;
   $90 = $733;
   $734 = $90;
   $89 = $734;
   $735 = $89;
   $88 = $735;
   $736 = $88;
   $737 = HEAP8[$736>>0]|0;
   $738 = $737&255;
   $739 = $738 & 1;
   $740 = ($739|0)!=(0);
   if ($740) {
    $82 = $733;
    $741 = $82;
    $81 = $741;
    $742 = $81;
    $80 = $742;
    $743 = $80;
    $744 = (($743) + 8|0);
    $745 = HEAP32[$744>>2]|0;
    $752 = $745;
   } else {
    $87 = $733;
    $746 = $87;
    $86 = $746;
    $747 = $86;
    $85 = $747;
    $748 = $85;
    $749 = (($748) + 1|0);
    $84 = $749;
    $750 = $84;
    $83 = $750;
    $751 = $83;
    $752 = $751;
   }
   $79 = $752;
   $753 = $79;
   $99 = $__lhs_sz$i$i$i$i19;
   $100 = $__rhs_sz$i$i$i$i20;
   $754 = $99;
   $755 = $100;
   ;HEAP8[$98+0>>0]=HEAP8[$101+0>>0]|0;
   $96 = $754;
   $97 = $755;
   $756 = $97;
   $757 = $96;
   $93 = $98;
   $94 = $756;
   $95 = $757;
   $758 = $94;
   $759 = HEAP32[$758>>2]|0;
   $760 = $95;
   $761 = HEAP32[$760>>2]|0;
   $762 = ($759>>>0)<($761>>>0);
   if ($762) {
    $763 = $97;
    $766 = $763;
   } else {
    $764 = $96;
    $766 = $764;
   }
   $765 = HEAP32[$766>>2]|0;
   __THREW__ = 0;
   $767 = (invoke_iiii(457,($730|0),($753|0),($765|0))|0);
   $768 = __THREW__; __THREW__ = 0;
   $769 = $768&1;
   if ($769) {
    $779 = ___cxa_find_matching_catch(0|0)|0;
    $780 = tempRet0;
    ___clang_call_terminate($779);
    // unreachable;
   }
   $__result$i$i$i$i21 = $767;
   $770 = $__result$i$i$i$i21;
   $771 = ($770|0)!=(0);
   do {
    if ($771) {
     $772 = $__result$i$i$i$i21;
     $136 = $772;
    } else {
     $773 = HEAP32[$__lhs_sz$i$i$i$i19>>2]|0;
     $774 = HEAP32[$__rhs_sz$i$i$i$i20>>2]|0;
     $775 = ($773>>>0)<($774>>>0);
     if ($775) {
      $136 = -1;
      break;
     }
     $776 = HEAP32[$__lhs_sz$i$i$i$i19>>2]|0;
     $777 = HEAP32[$__rhs_sz$i$i$i$i20>>2]|0;
     $778 = ($776>>>0)>($777>>>0);
     if ($778) {
      $136 = 1;
      break;
     } else {
      $136 = 0;
      break;
     }
    }
   } while(0);
   $781 = $136;
   $782 = ($781|0)<(0);
   if (!($782)) {
    $967 = HEAP32[$__hint>>2]|0;
    $968 = $334;
    HEAP32[$968>>2] = $967;
    $969 = $334;
    $332 = $969;
    $970 = $332;
    STACKTOP = sp;return ($970|0);
   }
   ;HEAP32[$340+0>>2]=HEAP32[$__hint+0>>2]|0;
   ;HEAP8[$232+0>>0]=HEAP8[$340+0>>0]|0;HEAP8[$232+1>>0]=HEAP8[$340+1>>0]|0;HEAP8[$232+2>>0]=HEAP8[$340+2>>0]|0;HEAP8[$232+3>>0]=HEAP8[$340+3>>0]|0;
   $230 = 1;
   $231 = 0;
   $783 = $230;
   $227 = $232;
   $228 = $783;
   $784 = $227;
   $785 = $228;
   ;HEAP8[$226+0>>0]=HEAP8[$229+0>>0]|0;
   $224 = $784;
   $225 = $785;
   $786 = $225;
   $787 = ($786|0)>=(0);
   if ($787) {
    while(1) {
     $788 = $225;
     $789 = ($788|0)>(0);
     if (!($789)) {
      break;
     }
     $790 = $224;
     $223 = $790;
     $791 = $223;
     $792 = HEAP32[$791>>2]|0;
     $793 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($792)|0);
     HEAP32[$791>>2] = $793;
     $794 = $225;
     $795 = (($794) + -1)|0;
     $225 = $795;
    }
   } else {
    while(1) {
     $796 = $225;
     $797 = ($796|0)<(0);
     if (!($797)) {
      break;
     }
     $798 = $224;
     $222 = $798;
     $799 = $222;
     $800 = HEAP32[$799>>2]|0;
     $801 = (__ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($800)|0);
     HEAP32[$799>>2] = $801;
     $802 = $225;
     $803 = (($802) + 1)|0;
     $225 = $803;
    }
   }
   ;HEAP32[$__next+0>>2]=HEAP32[$232+0>>2]|0;
   $240 = $343;
   $804 = $240;
   $239 = $804;
   $805 = $239;
   $806 = (($805) + 4|0);
   $238 = $806;
   $807 = $238;
   $237 = $807;
   $808 = $237;
   $236 = $808;
   $809 = $236;
   $235 = $809;
   $810 = $235;
   $233 = $342;
   $234 = $810;
   $811 = $233;
   $812 = $234;
   HEAP32[$811>>2] = $812;
   ;HEAP8[$242+0>>0]=HEAP8[$342+0>>0]|0;HEAP8[$242+1>>0]=HEAP8[$342+1>>0]|0;HEAP8[$242+2>>0]=HEAP8[$342+2>>0]|0;HEAP8[$242+3>>0]=HEAP8[$342+3>>0]|0;
   $241 = $341;
   $813 = $241;
   $814 = HEAP32[$242>>2]|0;
   HEAP32[$813>>2] = $814;
   $243 = $__next;
   $244 = $341;
   $815 = $243;
   $816 = HEAP32[$815>>2]|0;
   $817 = $244;
   $818 = HEAP32[$817>>2]|0;
   $819 = ($816|0)==($818|0);
   do {
    if (!($819)) {
     $247 = $343;
     $820 = $247;
     $821 = (($820) + 8|0);
     $246 = $821;
     $822 = $246;
     $245 = $822;
     $823 = $245;
     $824 = $335;
     $248 = $__next;
     $825 = $248;
     $826 = HEAP32[$825>>2]|0;
     $827 = (($826) + 16|0);
     $319 = $823;
     $320 = $824;
     $321 = $827;
     $828 = $319;
     $829 = $320;
     $830 = $321;
     $316 = $828;
     $317 = $829;
     $318 = $830;
     $831 = $317;
     $832 = $318;
     $314 = $831;
     $315 = $832;
     $833 = $314;
     $834 = $315;
     $312 = $833;
     $313 = $834;
     $835 = $312;
     $310 = $835;
     $836 = $310;
     $309 = $836;
     $837 = $309;
     $308 = $837;
     $838 = $308;
     $307 = $838;
     $839 = $307;
     $840 = HEAP8[$839>>0]|0;
     $841 = $840&255;
     $842 = $841 & 1;
     $843 = ($842|0)!=(0);
     if ($843) {
      $303 = $836;
      $844 = $303;
      $302 = $844;
      $845 = $302;
      $301 = $845;
      $846 = $301;
      $847 = (($846) + 4|0);
      $848 = HEAP32[$847>>2]|0;
      $855 = $848;
     } else {
      $306 = $836;
      $849 = $306;
      $305 = $849;
      $850 = $305;
      $304 = $850;
      $851 = $304;
      $852 = HEAP8[$851>>0]|0;
      $853 = $852&255;
      $854 = $853 >> 1;
      $855 = $854;
     }
     HEAP32[$__lhs_sz$i$i$i$i>>2] = $855;
     $856 = $313;
     $300 = $856;
     $857 = $300;
     $299 = $857;
     $858 = $299;
     $298 = $858;
     $859 = $298;
     $297 = $859;
     $860 = $297;
     $861 = HEAP8[$860>>0]|0;
     $862 = $861&255;
     $863 = $862 & 1;
     $864 = ($863|0)!=(0);
     if ($864) {
      $293 = $857;
      $865 = $293;
      $292 = $865;
      $866 = $292;
      $291 = $866;
      $867 = $291;
      $868 = (($867) + 4|0);
      $869 = HEAP32[$868>>2]|0;
      $876 = $869;
     } else {
      $296 = $857;
      $870 = $296;
      $295 = $870;
      $871 = $295;
      $294 = $871;
      $872 = $294;
      $873 = HEAP8[$872>>0]|0;
      $874 = $873&255;
      $875 = $874 >> 1;
      $876 = $875;
     }
     HEAP32[$__rhs_sz$i$i$i$i>>2] = $876;
     $290 = $835;
     $877 = $290;
     $289 = $877;
     $878 = $289;
     $288 = $878;
     $879 = $288;
     $287 = $879;
     $880 = $287;
     $286 = $880;
     $881 = $286;
     $882 = HEAP8[$881>>0]|0;
     $883 = $882&255;
     $884 = $883 & 1;
     $885 = ($884|0)!=(0);
     if ($885) {
      $280 = $878;
      $886 = $280;
      $279 = $886;
      $887 = $279;
      $278 = $887;
      $888 = $278;
      $889 = (($888) + 8|0);
      $890 = HEAP32[$889>>2]|0;
      $897 = $890;
     } else {
      $285 = $878;
      $891 = $285;
      $284 = $891;
      $892 = $284;
      $283 = $892;
      $893 = $283;
      $894 = (($893) + 1|0);
      $282 = $894;
      $895 = $282;
      $281 = $895;
      $896 = $281;
      $897 = $896;
     }
     $277 = $897;
     $898 = $277;
     $899 = $313;
     $267 = $899;
     $900 = $267;
     $266 = $900;
     $901 = $266;
     $265 = $901;
     $902 = $265;
     $264 = $902;
     $903 = $264;
     $263 = $903;
     $904 = $263;
     $905 = HEAP8[$904>>0]|0;
     $906 = $905&255;
     $907 = $906 & 1;
     $908 = ($907|0)!=(0);
     if ($908) {
      $257 = $901;
      $909 = $257;
      $256 = $909;
      $910 = $256;
      $255 = $910;
      $911 = $255;
      $912 = (($911) + 8|0);
      $913 = HEAP32[$912>>2]|0;
      $920 = $913;
     } else {
      $262 = $901;
      $914 = $262;
      $261 = $914;
      $915 = $261;
      $260 = $915;
      $916 = $260;
      $917 = (($916) + 1|0);
      $259 = $917;
      $918 = $259;
      $258 = $918;
      $919 = $258;
      $920 = $919;
     }
     $254 = $920;
     $921 = $254;
     $274 = $__lhs_sz$i$i$i$i;
     $275 = $__rhs_sz$i$i$i$i;
     $922 = $274;
     $923 = $275;
     ;HEAP8[$273+0>>0]=HEAP8[$276+0>>0]|0;
     $271 = $922;
     $272 = $923;
     $924 = $272;
     $925 = $271;
     $268 = $273;
     $269 = $924;
     $270 = $925;
     $926 = $269;
     $927 = HEAP32[$926>>2]|0;
     $928 = $270;
     $929 = HEAP32[$928>>2]|0;
     $930 = ($927>>>0)<($929>>>0);
     if ($930) {
      $931 = $272;
      $934 = $931;
     } else {
      $932 = $271;
      $934 = $932;
     }
     $933 = HEAP32[$934>>2]|0;
     __THREW__ = 0;
     $935 = (invoke_iiii(457,($898|0),($921|0),($933|0))|0);
     $936 = __THREW__; __THREW__ = 0;
     $937 = $936&1;
     if ($937) {
      $947 = ___cxa_find_matching_catch(0|0)|0;
      $948 = tempRet0;
      ___clang_call_terminate($947);
      // unreachable;
     }
     $__result$i$i$i$i = $935;
     $938 = $__result$i$i$i$i;
     $939 = ($938|0)!=(0);
     do {
      if ($939) {
       $940 = $__result$i$i$i$i;
       $311 = $940;
      } else {
       $941 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
       $942 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
       $943 = ($941>>>0)<($942>>>0);
       if ($943) {
        $311 = -1;
        break;
       }
       $944 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
       $945 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
       $946 = ($944>>>0)>($945>>>0);
       if ($946) {
        $311 = 1;
        break;
       } else {
        $311 = 0;
        break;
       }
      }
     } while(0);
     $949 = $311;
     $950 = ($949|0)<(0);
     if ($950) {
      break;
     }
     $964 = $334;
     $965 = $335;
     $966 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEESM_RKT_($343,$964,$965)|0);
     $332 = $966;
     $970 = $332;
     STACKTOP = sp;return ($970|0);
    }
   } while(0);
   $951 = HEAP32[$__hint>>2]|0;
   $952 = (($951) + 4|0);
   $953 = HEAP32[$952>>2]|0;
   $954 = ($953|0)==(0|0);
   if ($954) {
    $955 = HEAP32[$__hint>>2]|0;
    $956 = $334;
    HEAP32[$956>>2] = $955;
    $957 = $334;
    $958 = HEAP32[$957>>2]|0;
    $959 = (($958) + 4|0);
    $332 = $959;
    $970 = $332;
    STACKTOP = sp;return ($970|0);
   } else {
    $960 = HEAP32[$__next>>2]|0;
    $961 = $334;
    HEAP32[$961>>2] = $960;
    $962 = $334;
    $963 = HEAP32[$962>>2]|0;
    $332 = $963;
    $970 = $332;
    STACKTOP = sp;return ($970|0);
   }
  }
 }
 ;HEAP32[$__prior+0>>2]=HEAP32[$__hint+0>>2]|0;
 $152 = $343;
 $491 = $152;
 $151 = $491;
 $492 = $151;
 $493 = HEAP32[$492>>2]|0;
 $149 = $339;
 $150 = $493;
 $494 = $149;
 $495 = $150;
 HEAP32[$494>>2] = $495;
 ;HEAP8[$148+0>>0]=HEAP8[$339+0>>0]|0;HEAP8[$148+1>>0]=HEAP8[$339+1>>0]|0;HEAP8[$148+2>>0]=HEAP8[$339+2>>0]|0;HEAP8[$148+3>>0]=HEAP8[$339+3>>0]|0;
 $147 = $338;
 $496 = $147;
 $497 = HEAP32[$148>>2]|0;
 HEAP32[$496>>2] = $497;
 $77 = $__prior;
 $78 = $338;
 $498 = $77;
 $499 = HEAP32[$498>>2]|0;
 $500 = $78;
 $501 = HEAP32[$500>>2]|0;
 $502 = ($499|0)==($501|0);
 if (!($502)) {
  $76 = $343;
  $503 = $76;
  $504 = (($503) + 8|0);
  $75 = $504;
  $505 = $75;
  $74 = $505;
  $506 = $74;
  $69 = $__prior;
  $507 = $69;
  $508 = HEAP32[$507>>2]|0;
  $509 = (__ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($508)|0);
  HEAP32[$507>>2] = $509;
  $68 = $507;
  $510 = $68;
  $511 = HEAP32[$510>>2]|0;
  $512 = (($511) + 16|0);
  $513 = $335;
  $65 = $506;
  $66 = $512;
  $67 = $513;
  $514 = $65;
  $515 = $66;
  $516 = $67;
  $62 = $514;
  $63 = $515;
  $64 = $516;
  $517 = $63;
  $518 = $64;
  $60 = $517;
  $61 = $518;
  $519 = $60;
  $520 = $61;
  $58 = $519;
  $59 = $520;
  $521 = $58;
  $56 = $521;
  $522 = $56;
  $55 = $522;
  $523 = $55;
  $54 = $523;
  $524 = $54;
  $53 = $524;
  $525 = $53;
  $526 = HEAP8[$525>>0]|0;
  $527 = $526&255;
  $528 = $527 & 1;
  $529 = ($528|0)!=(0);
  if ($529) {
   $49 = $522;
   $530 = $49;
   $48 = $530;
   $531 = $48;
   $47 = $531;
   $532 = $47;
   $533 = (($532) + 4|0);
   $534 = HEAP32[$533>>2]|0;
   $541 = $534;
  } else {
   $52 = $522;
   $535 = $52;
   $51 = $535;
   $536 = $51;
   $50 = $536;
   $537 = $50;
   $538 = HEAP8[$537>>0]|0;
   $539 = $538&255;
   $540 = $539 >> 1;
   $541 = $540;
  }
  HEAP32[$__lhs_sz$i$i$i$i30>>2] = $541;
  $542 = $59;
  $46 = $542;
  $543 = $46;
  $45 = $543;
  $544 = $45;
  $44 = $544;
  $545 = $44;
  $43 = $545;
  $546 = $43;
  $547 = HEAP8[$546>>0]|0;
  $548 = $547&255;
  $549 = $548 & 1;
  $550 = ($549|0)!=(0);
  if ($550) {
   $39 = $543;
   $551 = $39;
   $38 = $551;
   $552 = $38;
   $37 = $552;
   $553 = $37;
   $554 = (($553) + 4|0);
   $555 = HEAP32[$554>>2]|0;
   $562 = $555;
  } else {
   $42 = $543;
   $556 = $42;
   $41 = $556;
   $557 = $41;
   $40 = $557;
   $558 = $40;
   $559 = HEAP8[$558>>0]|0;
   $560 = $559&255;
   $561 = $560 >> 1;
   $562 = $561;
  }
  HEAP32[$__rhs_sz$i$i$i$i31>>2] = $562;
  $36 = $521;
  $563 = $36;
  $35 = $563;
  $564 = $35;
  $34 = $564;
  $565 = $34;
  $33 = $565;
  $566 = $33;
  $32 = $566;
  $567 = $32;
  $568 = HEAP8[$567>>0]|0;
  $569 = $568&255;
  $570 = $569 & 1;
  $571 = ($570|0)!=(0);
  if ($571) {
   $26 = $564;
   $572 = $26;
   $25 = $572;
   $573 = $25;
   $24 = $573;
   $574 = $24;
   $575 = (($574) + 8|0);
   $576 = HEAP32[$575>>2]|0;
   $583 = $576;
  } else {
   $31 = $564;
   $577 = $31;
   $30 = $577;
   $578 = $30;
   $29 = $578;
   $579 = $29;
   $580 = (($579) + 1|0);
   $28 = $580;
   $581 = $28;
   $27 = $581;
   $582 = $27;
   $583 = $582;
  }
  $23 = $583;
  $584 = $23;
  $585 = $59;
  $13 = $585;
  $586 = $13;
  $12 = $586;
  $587 = $12;
  $11 = $587;
  $588 = $11;
  $10 = $588;
  $589 = $10;
  $9 = $589;
  $590 = $9;
  $591 = HEAP8[$590>>0]|0;
  $592 = $591&255;
  $593 = $592 & 1;
  $594 = ($593|0)!=(0);
  if ($594) {
   $3 = $587;
   $595 = $3;
   $2 = $595;
   $596 = $2;
   $1 = $596;
   $597 = $1;
   $598 = (($597) + 8|0);
   $599 = HEAP32[$598>>2]|0;
   $606 = $599;
  } else {
   $8 = $587;
   $600 = $8;
   $7 = $600;
   $601 = $7;
   $6 = $601;
   $602 = $6;
   $603 = (($602) + 1|0);
   $5 = $603;
   $604 = $5;
   $4 = $604;
   $605 = $4;
   $606 = $605;
  }
  $0 = $606;
  $607 = $0;
  $20 = $__lhs_sz$i$i$i$i30;
  $21 = $__rhs_sz$i$i$i$i31;
  $608 = $20;
  $609 = $21;
  ;HEAP8[$19+0>>0]=HEAP8[$22+0>>0]|0;
  $17 = $608;
  $18 = $609;
  $610 = $18;
  $611 = $17;
  $14 = $19;
  $15 = $610;
  $16 = $611;
  $612 = $15;
  $613 = HEAP32[$612>>2]|0;
  $614 = $16;
  $615 = HEAP32[$614>>2]|0;
  $616 = ($613>>>0)<($615>>>0);
  if ($616) {
   $617 = $18;
   $620 = $617;
  } else {
   $618 = $17;
   $620 = $618;
  }
  $619 = HEAP32[$620>>2]|0;
  __THREW__ = 0;
  $621 = (invoke_iiii(457,($584|0),($607|0),($619|0))|0);
  $622 = __THREW__; __THREW__ = 0;
  $623 = $622&1;
  if ($623) {
   $633 = ___cxa_find_matching_catch(0|0)|0;
   $634 = tempRet0;
   ___clang_call_terminate($633);
   // unreachable;
  }
  $__result$i$i$i$i32 = $621;
  $624 = $__result$i$i$i$i32;
  $625 = ($624|0)!=(0);
  do {
   if ($625) {
    $626 = $__result$i$i$i$i32;
    $57 = $626;
   } else {
    $627 = HEAP32[$__lhs_sz$i$i$i$i30>>2]|0;
    $628 = HEAP32[$__rhs_sz$i$i$i$i31>>2]|0;
    $629 = ($627>>>0)<($628>>>0);
    if ($629) {
     $57 = -1;
     break;
    }
    $630 = HEAP32[$__lhs_sz$i$i$i$i30>>2]|0;
    $631 = HEAP32[$__rhs_sz$i$i$i$i31>>2]|0;
    $632 = ($630>>>0)>($631>>>0);
    if ($632) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $635 = $57;
  $636 = ($635|0)<(0);
  if (!($636)) {
   $649 = $334;
   $650 = $335;
   $651 = (__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEESM_RKT_($343,$649,$650)|0);
   $332 = $651;
   $970 = $332;
   STACKTOP = sp;return ($970|0);
  }
 }
 $637 = HEAP32[$__hint>>2]|0;
 $638 = HEAP32[$637>>2]|0;
 $639 = ($638|0)==(0|0);
 if ($639) {
  $640 = HEAP32[$__hint>>2]|0;
  $641 = $334;
  HEAP32[$641>>2] = $640;
  $642 = $334;
  $643 = HEAP32[$642>>2]|0;
  $332 = $643;
  $970 = $332;
  STACKTOP = sp;return ($970|0);
 } else {
  $644 = HEAP32[$__prior>>2]|0;
  $645 = $334;
  HEAP32[$645>>2] = $644;
  $646 = $334;
  $647 = HEAP32[$646>>2]|0;
  $648 = (($647) + 4|0);
  $332 = $648;
  $970 = $332;
  STACKTOP = sp;return ($970|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalISA_EERPNS_16__tree_node_baseIPvEESM_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__lhs_sz$i$i$i$i1 = 0, $__nd = 0, $__result$i$i$i$i = 0, $__result$i$i$i$i3 = 0, $__rhs_sz$i$i$i$i = 0, $__rhs_sz$i$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $22 = sp + 8|0;
 $25 = sp + 653|0;
 $__lhs_sz$i$i$i$i1 = sp + 404|0;
 $__rhs_sz$i$i$i$i2 = sp + 400|0;
 $93 = sp;
 $96 = sp + 652|0;
 $__lhs_sz$i$i$i$i = sp + 116|0;
 $__rhs_sz$i$i$i$i = sp + 112|0;
 $154 = $this;
 $155 = $__parent;
 $156 = $__v;
 $157 = $154;
 $152 = $157;
 $158 = $152;
 $151 = $158;
 $159 = $151;
 $160 = (($159) + 4|0);
 $150 = $160;
 $161 = $150;
 $149 = $161;
 $162 = $149;
 $148 = $162;
 $163 = $148;
 $147 = $163;
 $164 = $147;
 $165 = HEAP32[$164>>2]|0;
 $__nd = $165;
 $166 = $__nd;
 $167 = ($166|0)!=(0|0);
 if (!($167)) {
  $146 = $157;
  $452 = $146;
  $453 = (($452) + 4|0);
  $145 = $453;
  $454 = $145;
  $144 = $454;
  $455 = $144;
  $143 = $455;
  $456 = $143;
  $142 = $456;
  $457 = $142;
  $458 = $155;
  HEAP32[$458>>2] = $457;
  $459 = $155;
  $460 = HEAP32[$459>>2]|0;
  $153 = $460;
  $461 = $153;
  STACKTOP = sp;return ($461|0);
 }
 while(1) {
  $73 = $157;
  $168 = $73;
  $169 = (($168) + 8|0);
  $72 = $169;
  $170 = $72;
  $71 = $170;
  $171 = $71;
  $172 = $156;
  $173 = $__nd;
  $174 = (($173) + 16|0);
  $68 = $171;
  $69 = $172;
  $70 = $174;
  $175 = $68;
  $176 = $69;
  $177 = $70;
  $65 = $175;
  $66 = $176;
  $67 = $177;
  $178 = $66;
  $179 = $67;
  $63 = $178;
  $64 = $179;
  $180 = $63;
  $181 = $64;
  $61 = $180;
  $62 = $181;
  $182 = $61;
  $59 = $182;
  $183 = $59;
  $58 = $183;
  $184 = $58;
  $57 = $184;
  $185 = $57;
  $56 = $185;
  $186 = $56;
  $187 = HEAP8[$186>>0]|0;
  $188 = $187&255;
  $189 = $188 & 1;
  $190 = ($189|0)!=(0);
  if ($190) {
   $52 = $183;
   $191 = $52;
   $51 = $191;
   $192 = $51;
   $50 = $192;
   $193 = $50;
   $194 = (($193) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $202 = $195;
  } else {
   $55 = $183;
   $196 = $55;
   $54 = $196;
   $197 = $54;
   $53 = $197;
   $198 = $53;
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = $200 >> 1;
   $202 = $201;
  }
  HEAP32[$__lhs_sz$i$i$i$i1>>2] = $202;
  $203 = $62;
  $49 = $203;
  $204 = $49;
  $48 = $204;
  $205 = $48;
  $47 = $205;
  $206 = $47;
  $46 = $206;
  $207 = $46;
  $208 = HEAP8[$207>>0]|0;
  $209 = $208&255;
  $210 = $209 & 1;
  $211 = ($210|0)!=(0);
  if ($211) {
   $42 = $204;
   $212 = $42;
   $41 = $212;
   $213 = $41;
   $40 = $213;
   $214 = $40;
   $215 = (($214) + 4|0);
   $216 = HEAP32[$215>>2]|0;
   $223 = $216;
  } else {
   $45 = $204;
   $217 = $45;
   $44 = $217;
   $218 = $44;
   $43 = $218;
   $219 = $43;
   $220 = HEAP8[$219>>0]|0;
   $221 = $220&255;
   $222 = $221 >> 1;
   $223 = $222;
  }
  HEAP32[$__rhs_sz$i$i$i$i2>>2] = $223;
  $39 = $182;
  $224 = $39;
  $38 = $224;
  $225 = $38;
  $37 = $225;
  $226 = $37;
  $36 = $226;
  $227 = $36;
  $35 = $227;
  $228 = $35;
  $229 = HEAP8[$228>>0]|0;
  $230 = $229&255;
  $231 = $230 & 1;
  $232 = ($231|0)!=(0);
  if ($232) {
   $29 = $225;
   $233 = $29;
   $28 = $233;
   $234 = $28;
   $27 = $234;
   $235 = $27;
   $236 = (($235) + 8|0);
   $237 = HEAP32[$236>>2]|0;
   $244 = $237;
  } else {
   $34 = $225;
   $238 = $34;
   $33 = $238;
   $239 = $33;
   $32 = $239;
   $240 = $32;
   $241 = (($240) + 1|0);
   $31 = $241;
   $242 = $31;
   $30 = $242;
   $243 = $30;
   $244 = $243;
  }
  $26 = $244;
  $245 = $26;
  $246 = $62;
  $16 = $246;
  $247 = $16;
  $15 = $247;
  $248 = $15;
  $14 = $248;
  $249 = $14;
  $13 = $249;
  $250 = $13;
  $12 = $250;
  $251 = $12;
  $252 = HEAP8[$251>>0]|0;
  $253 = $252&255;
  $254 = $253 & 1;
  $255 = ($254|0)!=(0);
  if ($255) {
   $6 = $248;
   $256 = $6;
   $5 = $256;
   $257 = $5;
   $4 = $257;
   $258 = $4;
   $259 = (($258) + 8|0);
   $260 = HEAP32[$259>>2]|0;
   $267 = $260;
  } else {
   $11 = $248;
   $261 = $11;
   $10 = $261;
   $262 = $10;
   $9 = $262;
   $263 = $9;
   $264 = (($263) + 1|0);
   $8 = $264;
   $265 = $8;
   $7 = $265;
   $266 = $7;
   $267 = $266;
  }
  $3 = $267;
  $268 = $3;
  $23 = $__lhs_sz$i$i$i$i1;
  $24 = $__rhs_sz$i$i$i$i2;
  $269 = $23;
  $270 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $269;
  $21 = $270;
  $271 = $21;
  $272 = $20;
  $17 = $22;
  $18 = $271;
  $19 = $272;
  $273 = $18;
  $274 = HEAP32[$273>>2]|0;
  $275 = $19;
  $276 = HEAP32[$275>>2]|0;
  $277 = ($274>>>0)<($276>>>0);
  if ($277) {
   $278 = $21;
   $281 = $278;
  } else {
   $279 = $20;
   $281 = $279;
  }
  $280 = HEAP32[$281>>2]|0;
  __THREW__ = 0;
  $282 = (invoke_iiii(457,($245|0),($268|0),($280|0))|0);
  $283 = __THREW__; __THREW__ = 0;
  $284 = $283&1;
  if ($284) {
   label = 26;
   break;
  }
  $__result$i$i$i$i3 = $282;
  $285 = $__result$i$i$i$i3;
  $286 = ($285|0)!=(0);
  do {
   if ($286) {
    $287 = $__result$i$i$i$i3;
    $60 = $287;
   } else {
    $288 = HEAP32[$__lhs_sz$i$i$i$i1>>2]|0;
    $289 = HEAP32[$__rhs_sz$i$i$i$i2>>2]|0;
    $290 = ($288>>>0)<($289>>>0);
    if ($290) {
     $60 = -1;
     break;
    }
    $291 = HEAP32[$__lhs_sz$i$i$i$i1>>2]|0;
    $292 = HEAP32[$__rhs_sz$i$i$i$i2>>2]|0;
    $293 = ($291>>>0)>($292>>>0);
    if ($293) {
     $60 = 1;
     break;
    } else {
     $60 = 0;
     break;
    }
   }
  } while(0);
  $296 = $60;
  $297 = ($296|0)<(0);
  if ($297) {
   $298 = $__nd;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($299|0)!=(0|0);
   if (!($300)) {
    label = 30;
    break;
   }
   $301 = $__nd;
   $302 = HEAP32[$301>>2]|0;
   $__nd = $302;
  } else {
   $2 = $157;
   $307 = $2;
   $308 = (($307) + 8|0);
   $1 = $308;
   $309 = $1;
   $0 = $309;
   $310 = $0;
   $311 = $__nd;
   $312 = (($311) + 16|0);
   $313 = $156;
   $139 = $310;
   $140 = $312;
   $141 = $313;
   $314 = $139;
   $315 = $140;
   $316 = $141;
   $136 = $314;
   $137 = $315;
   $138 = $316;
   $317 = $137;
   $318 = $138;
   $134 = $317;
   $135 = $318;
   $319 = $134;
   $320 = $135;
   $132 = $319;
   $133 = $320;
   $321 = $132;
   $130 = $321;
   $322 = $130;
   $129 = $322;
   $323 = $129;
   $128 = $323;
   $324 = $128;
   $127 = $324;
   $325 = $127;
   $326 = HEAP8[$325>>0]|0;
   $327 = $326&255;
   $328 = $327 & 1;
   $329 = ($328|0)!=(0);
   if ($329) {
    $123 = $322;
    $330 = $123;
    $122 = $330;
    $331 = $122;
    $121 = $331;
    $332 = $121;
    $333 = (($332) + 4|0);
    $334 = HEAP32[$333>>2]|0;
    $341 = $334;
   } else {
    $126 = $322;
    $335 = $126;
    $125 = $335;
    $336 = $125;
    $124 = $336;
    $337 = $124;
    $338 = HEAP8[$337>>0]|0;
    $339 = $338&255;
    $340 = $339 >> 1;
    $341 = $340;
   }
   HEAP32[$__lhs_sz$i$i$i$i>>2] = $341;
   $342 = $133;
   $120 = $342;
   $343 = $120;
   $119 = $343;
   $344 = $119;
   $118 = $344;
   $345 = $118;
   $117 = $345;
   $346 = $117;
   $347 = HEAP8[$346>>0]|0;
   $348 = $347&255;
   $349 = $348 & 1;
   $350 = ($349|0)!=(0);
   if ($350) {
    $113 = $343;
    $351 = $113;
    $112 = $351;
    $352 = $112;
    $111 = $352;
    $353 = $111;
    $354 = (($353) + 4|0);
    $355 = HEAP32[$354>>2]|0;
    $362 = $355;
   } else {
    $116 = $343;
    $356 = $116;
    $115 = $356;
    $357 = $115;
    $114 = $357;
    $358 = $114;
    $359 = HEAP8[$358>>0]|0;
    $360 = $359&255;
    $361 = $360 >> 1;
    $362 = $361;
   }
   HEAP32[$__rhs_sz$i$i$i$i>>2] = $362;
   $110 = $321;
   $363 = $110;
   $109 = $363;
   $364 = $109;
   $108 = $364;
   $365 = $108;
   $107 = $365;
   $366 = $107;
   $106 = $366;
   $367 = $106;
   $368 = HEAP8[$367>>0]|0;
   $369 = $368&255;
   $370 = $369 & 1;
   $371 = ($370|0)!=(0);
   if ($371) {
    $100 = $364;
    $372 = $100;
    $99 = $372;
    $373 = $99;
    $98 = $373;
    $374 = $98;
    $375 = (($374) + 8|0);
    $376 = HEAP32[$375>>2]|0;
    $383 = $376;
   } else {
    $105 = $364;
    $377 = $105;
    $104 = $377;
    $378 = $104;
    $103 = $378;
    $379 = $103;
    $380 = (($379) + 1|0);
    $102 = $380;
    $381 = $102;
    $101 = $381;
    $382 = $101;
    $383 = $382;
   }
   $97 = $383;
   $384 = $97;
   $385 = $133;
   $87 = $385;
   $386 = $87;
   $86 = $386;
   $387 = $86;
   $85 = $387;
   $388 = $85;
   $84 = $388;
   $389 = $84;
   $83 = $389;
   $390 = $83;
   $391 = HEAP8[$390>>0]|0;
   $392 = $391&255;
   $393 = $392 & 1;
   $394 = ($393|0)!=(0);
   if ($394) {
    $77 = $387;
    $395 = $77;
    $76 = $395;
    $396 = $76;
    $75 = $396;
    $397 = $75;
    $398 = (($397) + 8|0);
    $399 = HEAP32[$398>>2]|0;
    $406 = $399;
   } else {
    $82 = $387;
    $400 = $82;
    $81 = $400;
    $401 = $81;
    $80 = $401;
    $402 = $80;
    $403 = (($402) + 1|0);
    $79 = $403;
    $404 = $79;
    $78 = $404;
    $405 = $78;
    $406 = $405;
   }
   $74 = $406;
   $407 = $74;
   $94 = $__lhs_sz$i$i$i$i;
   $95 = $__rhs_sz$i$i$i$i;
   $408 = $94;
   $409 = $95;
   ;HEAP8[$93+0>>0]=HEAP8[$96+0>>0]|0;
   $91 = $408;
   $92 = $409;
   $410 = $92;
   $411 = $91;
   $88 = $93;
   $89 = $410;
   $90 = $411;
   $412 = $89;
   $413 = HEAP32[$412>>2]|0;
   $414 = $90;
   $415 = HEAP32[$414>>2]|0;
   $416 = ($413>>>0)<($415>>>0);
   if ($416) {
    $417 = $92;
    $420 = $417;
   } else {
    $418 = $91;
    $420 = $418;
   }
   $419 = HEAP32[$420>>2]|0;
   __THREW__ = 0;
   $421 = (invoke_iiii(457,($384|0),($407|0),($419|0))|0);
   $422 = __THREW__; __THREW__ = 0;
   $423 = $422&1;
   if ($423) {
    label = 55;
    break;
   }
   $__result$i$i$i$i = $421;
   $424 = $__result$i$i$i$i;
   $425 = ($424|0)!=(0);
   do {
    if ($425) {
     $426 = $__result$i$i$i$i;
     $131 = $426;
    } else {
     $427 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
     $428 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
     $429 = ($427>>>0)<($428>>>0);
     if ($429) {
      $131 = -1;
      break;
     }
     $430 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
     $431 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
     $432 = ($430>>>0)>($431>>>0);
     if ($432) {
      $131 = 1;
      break;
     } else {
      $131 = 0;
      break;
     }
    }
   } while(0);
   $435 = $131;
   $436 = ($435|0)<(0);
   if (!($436)) {
    label = 61;
    break;
   }
   $437 = $__nd;
   $438 = (($437) + 4|0);
   $439 = HEAP32[$438>>2]|0;
   $440 = ($439|0)!=(0|0);
   if (!($440)) {
    label = 59;
    break;
   }
   $441 = $__nd;
   $442 = (($441) + 4|0);
   $443 = HEAP32[$442>>2]|0;
   $__nd = $443;
  }
 }
 if ((label|0) == 26) {
  $294 = ___cxa_find_matching_catch(0|0)|0;
  $295 = tempRet0;
  ___clang_call_terminate($294);
  // unreachable;
 }
 else if ((label|0) == 30) {
  $303 = $__nd;
  $304 = $155;
  HEAP32[$304>>2] = $303;
  $305 = $155;
  $306 = HEAP32[$305>>2]|0;
  $153 = $306;
  $461 = $153;
  STACKTOP = sp;return ($461|0);
 }
 else if ((label|0) == 55) {
  $433 = ___cxa_find_matching_catch(0|0)|0;
  $434 = tempRet0;
  ___clang_call_terminate($433);
  // unreachable;
 }
 else if ((label|0) == 59) {
  $444 = $__nd;
  $445 = $155;
  HEAP32[$445>>2] = $444;
  $446 = $155;
  $447 = HEAP32[$446>>2]|0;
  $448 = (($447) + 4|0);
  $153 = $448;
  $461 = $153;
  STACKTOP = sp;return ($461|0);
 }
 else if ((label|0) == 61) {
  $449 = $__nd;
  $450 = $155;
  HEAP32[$450>>2] = $449;
  $451 = $155;
  $153 = $451;
  $461 = $153;
  STACKTOP = sp;return ($461|0);
 }
 return (0)|0;
}
function __ZNSt3__111__tree_prevIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__x;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $3;
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
  while(1) {
   $9 = $1;
   $10 = (($9) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $1;
   $14 = (($13) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $1 = $15;
  }
  $16 = $1;
  $2 = $16;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 } else {
  while(1) {
   $17 = $3;
   $0 = $17;
   $18 = $0;
   $19 = $0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = ($18|0)==($22|0);
   if (!($23)) {
    break;
   }
   $24 = $3;
   $25 = (($24) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $3 = $26;
  }
  $27 = $3;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $2 = $29;
  $30 = $2;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 268435455;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE25__construct_node_with_keyEOS6_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__na = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 56|0;
 $14 = sp + 614|0;
 $34 = sp + 48|0;
 $39 = sp + 613|0;
 $48 = sp + 40|0;
 $51 = sp + 612|0;
 $62 = sp + 32|0;
 $65 = sp + 611|0;
 $81 = sp + 300|0;
 $82 = sp + 24|0;
 $85 = sp + 288|0;
 $86 = sp + 280|0;
 $87 = sp + 16|0;
 $92 = sp + 256|0;
 $107 = sp + 8|0;
 $110 = sp + 610|0;
 $121 = sp;
 $124 = sp + 609|0;
 $139 = sp + 72|0;
 $136 = $this;
 $137 = $__k;
 $143 = $136;
 $135 = $143;
 $144 = $135;
 $145 = (($144) + 4|0);
 $134 = $145;
 $146 = $134;
 $133 = $146;
 $147 = $133;
 $__na = $147;
 $$expand_i1_val = 0;
 $138 = $$expand_i1_val;
 $148 = $__na;
 $99 = $148;
 $100 = 1;
 $149 = $99;
 $150 = $100;
 $96 = $149;
 $97 = $150;
 $98 = 0;
 $151 = $97;
 $152 = ($151*48)|0;
 $95 = $152;
 $153 = $95;
 $154 = (__Znwj($153)|0);
 $155 = $__na;
 $93 = $139;
 $94 = $155;
 $156 = $93;
 $157 = $94;
 HEAP32[$156>>2] = $157;
 $158 = (($156) + 4|0);
 HEAP8[$158>>0] = 0;
 $159 = (($156) + 5|0);
 HEAP8[$159>>0] = 0;
 $89 = $agg$result;
 $90 = $154;
 $91 = $139;
 $160 = $89;
 $161 = $90;
 $162 = $91;
 $88 = $162;
 $163 = $88;
 ;HEAP32[$92+0>>2]=HEAP32[$163+0>>2]|0;HEAP32[$92+4>>2]=HEAP32[$163+4>>2]|0;
 ;HEAP8[$87+0>>0]=HEAP8[$92+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$92+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$92+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$92+3>>0]|0;HEAP8[$87+4>>0]=HEAP8[$92+4>>0]|0;HEAP8[$87+5>>0]=HEAP8[$92+5>>0]|0;HEAP8[$87+6>>0]=HEAP8[$92+6>>0]|0;HEAP8[$87+7>>0]=HEAP8[$92+7>>0]|0;
 $84 = $160;
 HEAP32[$85>>2] = $161;
 $164 = $84;
 $83 = $85;
 $165 = $83;
 $166 = HEAP32[$165>>2]|0;
 $77 = $87;
 $167 = $77;
 ;HEAP32[$86+0>>2]=HEAP32[$167+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$167+4>>2]|0;
 ;HEAP8[$82+0>>0]=HEAP8[$86+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$86+3>>0]|0;HEAP8[$82+4>>0]=HEAP8[$86+4>>0]|0;HEAP8[$82+5>>0]=HEAP8[$86+5>>0]|0;HEAP8[$82+6>>0]=HEAP8[$86+6>>0]|0;HEAP8[$82+7>>0]=HEAP8[$86+7>>0]|0;
 $80 = $164;
 HEAP32[$81>>2] = $166;
 $168 = $80;
 $79 = $81;
 $169 = $79;
 $170 = HEAP32[$169>>2]|0;
 HEAP32[$168>>2] = $170;
 $171 = (($168) + 4|0);
 $78 = $82;
 $172 = $78;
 ;HEAP32[$171+0>>2]=HEAP32[$172+0>>2]|0;HEAP32[$171+4>>2]=HEAP32[$172+4>>2]|0;
 $173 = $__na;
 $76 = $agg$result;
 $174 = $76;
 $75 = $174;
 $175 = $75;
 $74 = $175;
 $176 = $74;
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177) + 16|0);
 $41 = $178;
 $179 = $41;
 $180 = $137;
 $40 = $180;
 $181 = $40;
 $36 = $173;
 $37 = $179;
 $38 = $181;
 $182 = $36;
 $183 = $37;
 $184 = $38;
 $35 = $184;
 $185 = $35;
 ;HEAP8[$34+0>>0]=HEAP8[$39+0>>0]|0;
 $31 = $182;
 $32 = $183;
 $33 = $185;
 $186 = $31;
 $187 = $32;
 $188 = $33;
 $30 = $188;
 $189 = $30;
 $27 = $186;
 $28 = $187;
 $29 = $189;
 $190 = $28;
 $191 = ($190|0)==(0|0);
 if (!($191)) {
  $192 = $29;
  $26 = $192;
  $193 = $26;
  $24 = $190;
  $25 = $193;
  $194 = $24;
  $195 = $25;
  $22 = $194;
  $23 = $195;
  $196 = $22;
  $197 = $23;
  $21 = $197;
  $198 = $21;
  ;HEAP32[$196+0>>2]=HEAP32[$198+0>>2]|0;HEAP32[$196+4>>2]=HEAP32[$198+4>>2]|0;HEAP32[$196+8>>2]=HEAP32[$198+8>>2]|0;
  $199 = $23;
  $20 = $199;
  $200 = $20;
  $19 = $200;
  $201 = $19;
  $18 = $201;
  $202 = $18;
  $__a$i$i$i$i$i$i = $202;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $203 = $__i$i$i$i$i$i$i;
   $204 = ($203>>>0)<(3);
   if (!($204)) {
    break;
   }
   $205 = $__i$i$i$i$i$i$i;
   $206 = $__a$i$i$i$i$i$i;
   $207 = (($206) + ($205<<2)|0);
   HEAP32[$207>>2] = 0;
   $208 = $__i$i$i$i$i$i$i;
   $209 = (($208) + 1)|0;
   $__i$i$i$i$i$i$i = $209;
  }
 }
 $6 = $agg$result;
 $210 = $6;
 $5 = $210;
 $211 = $5;
 $4 = $211;
 $212 = $4;
 $213 = (($212) + 4|0);
 $214 = (($213) + 4|0);
 HEAP8[$214>>0] = 1;
 $215 = $__na;
 $2 = $agg$result;
 $216 = $2;
 $1 = $216;
 $217 = $1;
 $0 = $217;
 $218 = $0;
 $219 = HEAP32[$218>>2]|0;
 $220 = (($219) + 16|0);
 $221 = (($220) + 16|0);
 $3 = $221;
 $222 = $3;
 $12 = $215;
 $13 = $222;
 $223 = $12;
 $224 = $13;
 ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
 $9 = $223;
 $10 = $224;
 $225 = $9;
 $226 = $10;
 $7 = $225;
 $8 = $226;
 $227 = $8;
 $228 = ($227|0)==(0|0);
 if (!($228)) {
  __ZN8picojson5valueC2Ev($227);
 }
 $17 = $agg$result;
 $229 = $17;
 $16 = $229;
 $230 = $16;
 $15 = $230;
 $231 = $15;
 $232 = (($231) + 4|0);
 $233 = (($232) + 5|0);
 HEAP8[$233>>0] = 1;
 $$expand_i1_val2 = 1;
 $138 = $$expand_i1_val2;
 $142 = 1;
 $$pre_trunc = $138;
 $234 = $$pre_trunc&1;
 if ($234) {
  STACKTOP = sp;return;
 }
 $132 = $agg$result;
 $235 = $132;
 $130 = $235;
 $131 = 0;
 $236 = $130;
 $129 = $236;
 $237 = $129;
 $128 = $237;
 $238 = $128;
 $239 = HEAP32[$238>>2]|0;
 $__tmp$i$i = $239;
 $240 = $131;
 $104 = $236;
 $241 = $104;
 $103 = $241;
 $242 = $103;
 HEAP32[$242>>2] = $240;
 $243 = $__tmp$i$i;
 $244 = ($243|0)!=(0|0);
 if ($244) {
  $102 = $236;
  $245 = $102;
  $101 = $245;
  $246 = $101;
  $247 = (($246) + 4|0);
  $248 = $__tmp$i$i;
  $126 = $247;
  $127 = $248;
  $249 = $126;
  $250 = (($249) + 5|0);
  $251 = HEAP8[$250>>0]|0;
  $252 = $251&1;
  if ($252) {
   $253 = HEAP32[$249>>2]|0;
   $254 = $127;
   $255 = (($254) + 16|0);
   $256 = (($255) + 16|0);
   $125 = $256;
   $257 = $125;
   $122 = $253;
   $123 = $257;
   $258 = $122;
   $259 = $123;
   ;HEAP8[$121+0>>0]=HEAP8[$124+0>>0]|0;
   $119 = $258;
   $120 = $259;
   $260 = $120;
   __ZN8picojson5valueD2Ev($260);
  }
  $261 = (($249) + 4|0);
  $262 = HEAP8[$261>>0]|0;
  $263 = $262&1;
  if ($263) {
   $264 = HEAP32[$249>>2]|0;
   $265 = $127;
   $266 = (($265) + 16|0);
   $118 = $266;
   $267 = $118;
   $108 = $264;
   $109 = $267;
   $268 = $108;
   $269 = $109;
   ;HEAP8[$107+0>>0]=HEAP8[$110+0>>0]|0;
   $105 = $268;
   $106 = $269;
   $270 = $106;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($270);
  }
  $271 = $127;
  $272 = ($271|0)!=(0|0);
  if ($272) {
   $273 = HEAP32[$249>>2]|0;
   $274 = $127;
   $115 = $273;
   $116 = $274;
   $117 = 1;
   $275 = $115;
   $276 = $116;
   $277 = $117;
   $112 = $275;
   $113 = $276;
   $114 = $277;
   $278 = $113;
   $111 = $278;
   $279 = $111;
   __ZdlPv($279);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = (($10) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($9) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = (($37) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 1024)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($6) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 1024)&-1;
  $26 = (($22) + ($25<<2)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = (($28) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZN7croutes9algorithmIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (496 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN7croutes20nearest_with_ret_algIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (112 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($1) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $5 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZN7croutes9algorithmIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes20nearest_with_ret_algIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes20nearest_with_ret_algIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes9algorithmIdE7computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node = $first_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 8|0;
 $8 = $this;
 $9 = $first_node;
 $13 = $8;
 $6 = $data;
 $7 = 0;
 $14 = $6;
 $5 = $14;
 $15 = $5;
 $4 = $15;
 $16 = $4;
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 $19 = $18 ^ 1;
 if ($19) {
  $2 = $agg$result;
  $3 = 0;
  $20 = $2;
  HEAP32[$20>>2] = 0;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = 0;
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$13>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $0 = $10;
 $1 = $data;
 $25 = $0;
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 HEAP32[$25>>2] = $27;
 $28 = (($25) + 4|0);
 $29 = $1;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 HEAP32[$28>>2] = $31;
 $32 = (($25) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = (($25) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  __ZNSt3__119__shared_weak_count12__add_sharedEv($36);
 }
 $37 = $9;
 __THREW__ = 0;
 invoke_viiii($24|0,($agg$result|0),($13|0),($10|0),($37|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = $38&1;
 if ($39) {
  $40 = ___cxa_find_matching_catch()|0;
  $41 = tempRet0;
  $11 = $40;
  $12 = $41;
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($10);
  $42 = $11;
  $43 = $12;
  ___resumeException($42|0);
  // unreachable;
 } else {
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($10);
  STACKTOP = sp;return;
 }
}
function __ZN7croutes20nearest_with_ret_algIdE10short_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes20nearest_with_ret_algIdE4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes20nearest_with_ret_algIdE12russian_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node_) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node_ = $first_node_|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__begin = 0, $__end = 0, $__p$i = 0, $__range = 0, $b = 0, $bundle = 0;
 var $edges = 0, $i = 0, $j = 0, $queue = 0, $size = 0, $visited = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp + 24|0;
 $38 = sp + 16|0;
 $39 = sp + 8|0;
 $59 = sp;
 $64 = sp + 512|0;
 $__annotator$i = sp + 511|0;
 $79 = sp + 204|0;
 $82 = sp + 192|0;
 $visited = sp + 136|0;
 $93 = sp + 509|0;
 $edges = sp + 124|0;
 $94 = sp + 120|0;
 $queue = sp + 108|0;
 $95 = sp + 96|0;
 $96 = sp + 92|0;
 $97 = sp + 88|0;
 $98 = sp + 508|0;
 $99 = sp + 80|0;
 $100 = sp + 72|0;
 $101 = sp + 60|0;
 $102 = sp + 48|0;
 $__begin = sp + 40|0;
 $__end = sp + 36|0;
 $88 = $this;
 $89 = $first_node_;
 $104 = $88;
 $87 = $data;
 $105 = $87;
 $106 = HEAP32[$105>>2]|0;
 $107 = (__ZNK7croutes5ndataIdE11nodes_countEv($106)|0);
 $size = $107;
 $$expand_i1_val = 0;
 $90 = $$expand_i1_val;
 __ZN7croutes6answerIdE4initEv($agg$result);
 $86 = $agg$result;
 $108 = $86;
 $109 = HEAP32[$108>>2]|0;
 __THREW__ = 0;
 $110 = (invoke_ii(460,($109|0))|0);
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  label = 19;
 } else {
  $bundle = $110;
  $113 = $size;
  HEAP8[$93>>0] = 0;
  __THREW__ = 0;
  invoke_viii(461,($visited|0),($113|0),($93|0));
  $114 = __THREW__; __THREW__ = 0;
  $115 = $114&1;
  if ($115) {
   label = 19;
  } else {
   HEAP32[$94>>2] = -1;
   __THREW__ = 0;
   invoke_viii(462,($edges|0),2,($94|0));
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    $193 = ___cxa_find_matching_catch()|0;
    $194 = tempRet0;
    $91 = $193;
    $92 = $194;
   } else {
    $85 = $queue;
    $118 = $85;
    $84 = $118;
    $119 = $84;
    $83 = $119;
    HEAP32[$119>>2] = 0;
    $120 = (($119) + 4|0);
    HEAP32[$120>>2] = 0;
    $121 = (($119) + 8|0);
    $81 = $121;
    HEAP32[$82>>2] = 0;
    $122 = $81;
    $80 = $82;
    $123 = $80;
    $124 = HEAP32[$123>>2]|0;
    $78 = $122;
    HEAP32[$79>>2] = $124;
    $125 = $78;
    $77 = $125;
    $76 = $79;
    $126 = $76;
    $127 = HEAP32[$126>>2]|0;
    HEAP32[$125>>2] = $127;
    $128 = $size;
    $129 = $size;
    $130 = (($129) - 1)|0;
    $131 = Math_imul($128, $130)|0;
    $132 = (($131>>>0) / 2)&-1;
    __THREW__ = 0;
    invoke_vii(463,($queue|0),($132|0));
    $133 = __THREW__; __THREW__ = 0;
    $134 = $133&1;
    L7: do {
     if ($134) {
      label = 21;
     } else {
      $i = 0;
      while(1) {
       $135 = $i;
       $136 = $size;
       $137 = ($135>>>0)<($136>>>0);
       if (!($137)) {
        break;
       }
       $138 = $i;
       $139 = (($138) + 1)|0;
       $j = $139;
       while(1) {
        $140 = $j;
        $141 = $size;
        $142 = ($140>>>0)<($141>>>0);
        if (!($142)) {
         break;
        }
        $143 = $j;
        $144 = $i;
        $145 = ($143|0)!=($144|0);
        if ($145) {
         $75 = $data;
         $146 = $75;
         $147 = HEAP32[$146>>2]|0;
         $148 = $i;
         $149 = $j;
         __THREW__ = 0;
         $150 = (invoke_iiii(464,($147|0),($148|0),($149|0))|0);
         $151 = __THREW__; __THREW__ = 0;
         $152 = $151&1;
         if ($152) {
          label = 21;
          break L7;
         }
         HEAP32[$95>>2] = $150;
         $73 = $queue;
         $74 = $95;
         $153 = $73;
         $154 = (($153) + 4|0);
         $155 = HEAP32[$154>>2]|0;
         $72 = $153;
         $156 = $72;
         $157 = (($156) + 8|0);
         $71 = $157;
         $158 = $71;
         $70 = $158;
         $159 = $70;
         $160 = HEAP32[$159>>2]|0;
         $161 = ($155>>>0)<($160>>>0);
         if ($161) {
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$153,1);
          $69 = $153;
          $162 = $69;
          $163 = (($162) + 8|0);
          $68 = $163;
          $164 = $68;
          $67 = $164;
          $165 = $67;
          $166 = (($153) + 4|0);
          $167 = HEAP32[$166>>2]|0;
          $65 = $167;
          $168 = $65;
          $169 = $74;
          $50 = $169;
          $170 = $50;
          $61 = $165;
          $62 = $168;
          $63 = $170;
          $171 = $61;
          $172 = $62;
          $173 = $63;
          $60 = $173;
          $174 = $60;
          ;HEAP8[$59+0>>0]=HEAP8[$64+0>>0]|0;
          $56 = $171;
          $57 = $172;
          $58 = $174;
          $175 = $56;
          $176 = $57;
          $177 = $58;
          $55 = $177;
          $178 = $55;
          $52 = $175;
          $53 = $176;
          $54 = $178;
          $179 = $53;
          $180 = ($179|0)==(0|0);
          if (!($180)) {
           $181 = $54;
           $51 = $181;
           $182 = $51;
           $183 = HEAP32[$182>>2]|0;
           HEAP32[$179>>2] = $183;
          }
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
          $184 = (($153) + 4|0);
          $185 = HEAP32[$184>>2]|0;
          $186 = (($185) + 4|0);
          HEAP32[$184>>2] = $186;
         } else {
          $187 = $74;
          $66 = $187;
          $188 = $66;
          __THREW__ = 0;
          invoke_vii(465,($153|0),($188|0));
          $189 = __THREW__; __THREW__ = 0;
          $190 = $189&1;
          if ($190) {
           label = 21;
           break L7;
          }
         }
        }
        $197 = $j;
        $198 = (($197) + 1)|0;
        $j = $198;
       }
       $199 = $i;
       $200 = (($199) + 1)|0;
       $i = $200;
      }
      $49 = $queue;
      $201 = $49;
      $202 = HEAP32[$201>>2]|0;
      $47 = $201;
      $48 = $202;
      $203 = $48;
      $45 = $96;
      $46 = $203;
      $204 = $45;
      $205 = $46;
      HEAP32[$204>>2] = $205;
      $44 = $queue;
      $206 = $44;
      $207 = (($206) + 4|0);
      $208 = HEAP32[$207>>2]|0;
      $42 = $206;
      $43 = $208;
      $209 = $43;
      $40 = $97;
      $41 = $209;
      $210 = $40;
      $211 = $41;
      HEAP32[$210>>2] = $211;
      ;HEAP8[$37+0>>0]=HEAP8[$98+0>>0]|0;
      ;HEAP8[$38+0>>0]=HEAP8[$97+0>>0]|0;HEAP8[$38+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$97+3>>0]|0;
      ;HEAP8[$39+0>>0]=HEAP8[$96+0>>0]|0;HEAP8[$39+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$96+3>>0]|0;
      $36 = $39;
      $212 = $36;
      $213 = HEAP32[$212>>2]|0;
      $32 = $38;
      $214 = $32;
      $215 = HEAP32[$214>>2]|0;
      $33 = $213;
      $34 = $215;
      $35 = $37;
      $216 = $33;
      $217 = $34;
      $218 = $35;
      __THREW__ = 0;
      invoke_viii(466,($216|0),($217|0),($218|0));
      $219 = __THREW__; __THREW__ = 0;
      $220 = $219&1;
      if ($220) {
       label = 21;
      } else {
       $30 = $99;
       $31 = $data;
       $221 = $30;
       $222 = $31;
       $223 = HEAP32[$222>>2]|0;
       HEAP32[$221>>2] = $223;
       $224 = (($221) + 4|0);
       $225 = $31;
       $226 = (($225) + 4|0);
       $227 = HEAP32[$226>>2]|0;
       HEAP32[$224>>2] = $227;
       $228 = (($221) + 4|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)!=(0|0);
       if ($230) {
        $231 = (($221) + 4|0);
        $232 = HEAP32[$231>>2]|0;
        __ZNSt3__119__shared_weak_count12__add_sharedEv($232);
       }
       $28 = $100;
       $29 = $agg$result;
       $233 = $28;
       $234 = $29;
       $235 = HEAP32[$234>>2]|0;
       HEAP32[$233>>2] = $235;
       $236 = (($233) + 4|0);
       $237 = $29;
       $238 = (($237) + 4|0);
       $239 = HEAP32[$238>>2]|0;
       HEAP32[$236>>2] = $239;
       $240 = (($233) + 4|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ($241|0)!=(0|0);
       if ($242) {
        $243 = (($233) + 4|0);
        $244 = HEAP32[$243>>2]|0;
        __ZNSt3__119__shared_weak_count12__add_sharedEv($244);
       }
       $245 = $bundle;
       __THREW__ = 0;
       invoke_vii(467,($101|0),($edges|0));
       $246 = __THREW__; __THREW__ = 0;
       $247 = $246&1;
       if ($247) {
        $341 = ___cxa_find_matching_catch()|0;
        $342 = tempRet0;
        $91 = $341;
        $92 = $342;
       } else {
        __THREW__ = 0;
        invoke_vii(468,($102|0),($visited|0));
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        do {
         if ($249) {
          $343 = ___cxa_find_matching_catch()|0;
          $344 = tempRet0;
          $91 = $343;
          $92 = $344;
         } else {
          __THREW__ = 0;
          invoke_viiiiiiiiii(469,($104|0),($99|0),($100|0),($245|0),($queue|0),0,-1,($101|0),($102|0),0);
          $250 = __THREW__; __THREW__ = 0;
          $251 = $250&1;
          if ($251) {
           $345 = ___cxa_find_matching_catch()|0;
           $346 = tempRet0;
           $91 = $345;
           $92 = $346;
           __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($102);
           break;
          }
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($102);
          __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($101);
          __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($100);
          __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($99);
          $27 = $agg$result;
          $252 = $27;
          $253 = HEAP32[$252>>2]|0;
          __THREW__ = 0;
          $254 = (invoke_ii(436,($253|0))|0);
          $255 = __THREW__; __THREW__ = 0;
          $256 = $255&1;
          if ($256) {
           label = 21;
           break L7;
          }
          $__range = $254;
          $257 = $__range;
          $26 = $257;
          $258 = $26;
          $259 = HEAP32[$258>>2]|0;
          $24 = $258;
          $25 = $259;
          $260 = $25;
          $22 = $__begin;
          $23 = $260;
          $261 = $22;
          $262 = $23;
          HEAP32[$261>>2] = $262;
          $263 = $__range;
          $21 = $263;
          $264 = $21;
          $265 = (($264) + 4|0);
          $266 = HEAP32[$265>>2]|0;
          $19 = $264;
          $20 = $266;
          $267 = $20;
          $17 = $__end;
          $18 = $267;
          $268 = $17;
          $269 = $18;
          HEAP32[$268>>2] = $269;
          while(1) {
           $15 = $__begin;
           $16 = $__end;
           $270 = $15;
           $271 = $16;
           $13 = $270;
           $14 = $271;
           $272 = $13;
           $12 = $272;
           $273 = $12;
           $274 = HEAP32[$273>>2]|0;
           $275 = $14;
           $11 = $275;
           $276 = $11;
           $277 = HEAP32[$276>>2]|0;
           $278 = ($274|0)==($277|0);
           $279 = $278 ^ 1;
           if (!($279)) {
            break;
           }
           $10 = $__begin;
           $280 = $10;
           $281 = HEAP32[$280>>2]|0;
           $b = $281;
           $9 = $agg$result;
           $282 = $9;
           $283 = HEAP32[$282>>2]|0;
           $284 = $b;
           $285 = HEAP32[$284>>2]|0;
           $8 = $data;
           $286 = $8;
           $287 = HEAP32[$286>>2]|0;
           $288 = $b;
           $289 = HEAP32[$288>>2]|0;
           $7 = $289;
           $290 = $7;
           $6 = $290;
           $291 = $6;
           $292 = (($291) + 20|0);
           $5 = $292;
           $293 = $5;
           $4 = $293;
           $294 = $4;
           $295 = HEAP32[$294>>2]|0;
           $296 = (($290) + 16|0);
           $297 = HEAP32[$296>>2]|0;
           $298 = (($295) + ($297))|0;
           $299 = (($298) - 1)|0;
           $__p$i = $299;
           $3 = $290;
           $300 = $3;
           $301 = (($300) + 4|0);
           $302 = HEAP32[$301>>2]|0;
           $303 = $__p$i;
           $304 = (($303>>>0) / 1024)&-1;
           $305 = (($302) + ($304<<2)|0);
           $306 = HEAP32[$305>>2]|0;
           $307 = $__p$i;
           $308 = (($307>>>0) % 1024)&-1;
           $309 = (($306) + ($308<<2)|0);
           $310 = HEAP32[$309>>2]|0;
           __THREW__ = 0;
           $311 = (invoke_ii(441,($310|0))|0);
           $312 = __THREW__; __THREW__ = 0;
           $313 = $312&1;
           if ($313) {
            label = 21;
            break L7;
           }
           $314 = $b;
           $315 = HEAP32[$314>>2]|0;
           $2 = $315;
           $316 = $2;
           $1 = $316;
           $317 = $1;
           $318 = (($317) + 4|0);
           $319 = HEAP32[$318>>2]|0;
           $320 = (($316) + 16|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (($321>>>0) / 1024)&-1;
           $323 = (($319) + ($322<<2)|0);
           $324 = HEAP32[$323>>2]|0;
           $325 = (($316) + 16|0);
           $326 = HEAP32[$325>>2]|0;
           $327 = (($326>>>0) % 1024)&-1;
           $328 = (($324) + ($327<<2)|0);
           $329 = HEAP32[$328>>2]|0;
           __THREW__ = 0;
           $330 = (invoke_ii(438,($329|0))|0);
           $331 = __THREW__; __THREW__ = 0;
           $332 = $331&1;
           if ($332) {
            label = 21;
            break L7;
           }
           __THREW__ = 0;
           $333 = (invoke_iiii(470,($287|0),($311|0),($330|0))|0);
           $334 = __THREW__; __THREW__ = 0;
           $335 = $334&1;
           if ($335) {
            label = 21;
            break L7;
           }
           __THREW__ = 0;
           invoke_viii(471,($283|0),($285|0),($333|0));
           $336 = __THREW__; __THREW__ = 0;
           $337 = $336&1;
           if ($337) {
            label = 21;
            break L7;
           }
           $0 = $__begin;
           $338 = $0;
           $339 = HEAP32[$338>>2]|0;
           $340 = (($339) + 4|0);
           HEAP32[$338>>2] = $340;
          }
          $$expand_i1_val2 = 1;
          $90 = $$expand_i1_val2;
          $103 = 1;
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($queue);
          __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($edges);
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($visited);
          $$pre_trunc = $90;
          $347 = $$pre_trunc&1;
          if ($347) {
           STACKTOP = sp;return;
          }
          __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
          STACKTOP = sp;return;
         }
        } while(0);
        __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($101);
       }
       __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($100);
       __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($99);
      }
     }
    } while(0);
    if ((label|0) == 21) {
     $195 = ___cxa_find_matching_catch()|0;
     $196 = tempRet0;
     $91 = $195;
     $92 = $196;
    }
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($queue);
    __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($edges);
   }
   __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($visited);
  }
 }
 if ((label|0) == 19) {
  $191 = ___cxa_find_matching_catch()|0;
  $192 = tempRet0;
  $91 = $191;
  $92 = $192;
 }
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 $348 = $91;
 $349 = $92;
 ___resumeException($348|0);
 // unreachable;
}
function __ZNK7croutes5ndataIdE11nodes_countEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes6answerIdE4initEv($agg$result) {
 $agg$result = $agg$result|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEE11make_sharedIJEEES4_DpOT_($agg$result);
 return;
}
function __ZN7croutes6answerIdE13create_bundleEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 177|0;
 $__annotator$i = sp + 176|0;
 $29 = sp + 64|0;
 $32 = sp + 52|0;
 $36 = sp + 36|0;
 $39 = sp + 24|0;
 $44 = sp + 4|0;
 $43 = $this;
 $45 = $43;
 $46 = (__Znwj(24)|0);
 $42 = $46;
 $47 = $42;
 $41 = $47;
 $48 = $41;
 $40 = $48;
 $49 = $40;
 HEAP32[$49>>2] = 0;
 $50 = (($49) + 4|0);
 HEAP32[$50>>2] = 0;
 $51 = (($49) + 8|0);
 HEAP32[$51>>2] = 0;
 $52 = (($49) + 12|0);
 $38 = $52;
 HEAP32[$39>>2] = 0;
 $53 = $38;
 $37 = $39;
 $54 = $37;
 $55 = HEAP32[$54>>2]|0;
 $35 = $53;
 HEAP32[$36>>2] = $55;
 $56 = $35;
 $34 = $56;
 $33 = $36;
 $57 = $33;
 $58 = HEAP32[$57>>2]|0;
 HEAP32[$56>>2] = $58;
 $59 = (($48) + 16|0);
 HEAP32[$59>>2] = 0;
 $60 = (($48) + 20|0);
 $31 = $60;
 HEAP32[$32>>2] = 0;
 $61 = $31;
 $30 = $32;
 $62 = $30;
 $63 = HEAP32[$62>>2]|0;
 $28 = $61;
 HEAP32[$29>>2] = $63;
 $64 = $28;
 $27 = $64;
 $26 = $29;
 $65 = $26;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 HEAP32[$44>>2] = $46;
 $23 = $45;
 $24 = $44;
 $67 = $23;
 $68 = (($67) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $22 = $67;
 $70 = $22;
 $71 = (($70) + 8|0);
 $21 = $71;
 $72 = $21;
 $20 = $72;
 $73 = $20;
 $74 = HEAP32[$73>>2]|0;
 $75 = ($69>>>0)<($74>>>0);
 if (!($75)) {
  $101 = $24;
  $16 = $101;
  $102 = $16;
  __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE21__push_back_slow_pathISA_EEvOT_($67,$102);
  $25 = $45;
  $103 = $25;
  $104 = (($103) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + -4|0);
  $107 = HEAP32[$106>>2]|0;
  STACKTOP = sp;return ($107|0);
 }
 __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($__annotator$i,$67,1);
 $19 = $67;
 $76 = $19;
 $77 = (($76) + 8|0);
 $18 = $77;
 $78 = $18;
 $17 = $78;
 $79 = $17;
 $80 = (($67) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $15 = $81;
 $82 = $15;
 $83 = $24;
 $0 = $83;
 $84 = $0;
 $11 = $79;
 $12 = $82;
 $13 = $84;
 $85 = $11;
 $86 = $12;
 $87 = $13;
 $10 = $87;
 $88 = $10;
 ;HEAP8[$9+0>>0]=HEAP8[$14+0>>0]|0;
 $6 = $85;
 $7 = $86;
 $8 = $88;
 $89 = $6;
 $90 = $7;
 $91 = $8;
 $5 = $91;
 $92 = $5;
 $2 = $89;
 $3 = $90;
 $4 = $92;
 $93 = $3;
 $94 = ($93|0)==(0|0);
 if (!($94)) {
  $95 = $4;
  $1 = $95;
  $96 = $1;
  $97 = HEAP32[$96>>2]|0;
  HEAP32[$93>>2] = $97;
 }
 __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
 $98 = (($67) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 4|0);
 HEAP32[$98>>2] = $100;
 $25 = $45;
 $103 = $25;
 $104 = (($103) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = (($105) + -4|0);
 $107 = HEAP32[$106>>2]|0;
 STACKTOP = sp;return ($107|0);
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEEC2EjRKb($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 104|0;
 $6 = sp + 92|0;
 $13 = sp + 64|0;
 $14 = sp + 56|0;
 $23 = sp + 16|0;
 $25 = $this;
 $26 = $__n;
 $27 = $__x;
 $28 = $25;
 $24 = $28;
 HEAP32[$28>>2] = 0;
 $29 = (($28) + 4|0);
 HEAP32[$29>>2] = 0;
 $30 = (($28) + 8|0);
 $5 = $30;
 HEAP32[$6>>2] = 0;
 $31 = $5;
 $4 = $6;
 $32 = $4;
 $33 = HEAP32[$32>>2]|0;
 $2 = $31;
 HEAP32[$3>>2] = $33;
 $34 = $2;
 $1 = $34;
 $0 = $3;
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = $26;
 $38 = ($37>>>0)>(0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = $26;
 __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($28,$39);
 $40 = $26;
 $41 = $27;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&1;
 $20 = $28;
 $21 = $40;
 $44 = $43&1;
 $22 = $44;
 $45 = $20;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $__old_size$i = $47;
 $48 = $21;
 $49 = (($45) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + ($48))|0;
 HEAP32[$49>>2] = $51;
 $52 = $__old_size$i;
 $18 = $45;
 $19 = $52;
 $53 = $18;
 $54 = HEAP32[$53>>2]|0;
 $55 = $19;
 $56 = (($55>>>0) / 32)&-1;
 $57 = (($54) + ($56<<2)|0);
 $58 = $19;
 $59 = (($58>>>0) % 32)&-1;
 $15 = $23;
 $16 = $57;
 $17 = $59;
 $60 = $15;
 $61 = $16;
 HEAP32[$60>>2] = $61;
 $62 = (($60) + 4|0);
 $63 = $17;
 HEAP32[$62>>2] = $63;
 $64 = $21;
 $65 = $22;
 $66 = $65&1;
 $11 = $64;
 $67 = $66&1;
 $12 = $67;
 $68 = $11;
 $69 = ($68>>>0)>(0);
 if ($69) {
  $70 = $12;
  $71 = $70&1;
  if ($71) {
   $9 = $13;
   $10 = $23;
   $72 = $9;
   $73 = $10;
   $74 = HEAP32[$73>>2]|0;
   HEAP32[$72>>2] = $74;
   $75 = (($72) + 4|0);
   $76 = $10;
   $77 = (($76) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   HEAP32[$75>>2] = $78;
   $79 = $11;
   __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($13,$79);
  } else {
   $7 = $14;
   $8 = $23;
   $80 = $7;
   $81 = $8;
   $82 = HEAP32[$81>>2]|0;
   HEAP32[$80>>2] = $82;
   $83 = (($80) + 4|0);
   $84 = $8;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   HEAP32[$83>>2] = $86;
   $87 = $11;
   __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($14,$87);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2EjRKi($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__a$i = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 141|0;
 $__annotator$i = sp + 140|0;
 $24 = sp + 44|0;
 $27 = sp + 32|0;
 $30 = $this;
 $31 = $__n;
 $32 = $__x;
 $35 = $30;
 $29 = $35;
 $36 = $29;
 $28 = $36;
 HEAP32[$36>>2] = 0;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 8|0);
 $26 = $38;
 HEAP32[$27>>2] = 0;
 $39 = $26;
 $25 = $27;
 $40 = $25;
 $41 = HEAP32[$40>>2]|0;
 $23 = $39;
 HEAP32[$24>>2] = $41;
 $42 = $23;
 $22 = $42;
 $21 = $24;
 $43 = $21;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = $31;
 $46 = ($45>>>0)>(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $31;
 __THREW__ = 0;
 invoke_vii(472,($35|0),($47|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $82 = ___cxa_find_matching_catch()|0;
  $83 = tempRet0;
  $33 = $82;
  $34 = $83;
  __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($35);
  $84 = $33;
  $85 = $34;
  ___resumeException($84|0);
  // unreachable;
 }
 $50 = $31;
 $51 = $32;
 $18 = $35;
 $19 = $50;
 $20 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $__a$i = $56;
 while(1) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$52,1);
  $57 = $__a$i;
  $58 = (($52) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $14 = $59;
  $60 = $14;
  $61 = $20;
  $10 = $57;
  $11 = $60;
  $12 = $61;
  $62 = $10;
  $63 = $11;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
  $5 = $62;
  $6 = $63;
  $7 = $65;
  $66 = $5;
  $67 = $6;
  $68 = $7;
  $4 = $68;
  $69 = $4;
  $1 = $66;
  $2 = $67;
  $3 = $69;
  $70 = $2;
  $71 = ($70|0)==(0|0);
  if (!($71)) {
   $72 = $3;
   $0 = $72;
   $73 = $0;
   $74 = HEAP32[$73>>2]|0;
   HEAP32[$70>>2] = $74;
  }
  $75 = (($52) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 4|0);
  HEAP32[$75>>2] = $77;
  $78 = $19;
  $79 = (($78) + -1)|0;
  $19 = $79;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $80 = $19;
  $81 = ($80>>>0)>(0);
  if (!($81)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(473,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN7croutes5ndataIdE2atEjj($this,$from_node,$to_node) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $from_node;
 $2 = $to_node;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (__ZN7croutes5ndataIdE2atEii($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN7croutes20nearest_with_ret_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEb($this,$data,$ans,$bundle,$queue,$group_begin,$current,$edges,$visited,$recursive) {
 $this = $this|0;
 $data = $data|0;
 $ans = $ans|0;
 $bundle = $bundle|0;
 $queue = $queue|0;
 $group_begin = $group_begin|0;
 $current = $current|0;
 $edges = $edges|0;
 $visited = $visited|0;
 $recursive = $recursive|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $current_group_begin = 0, $is_queue_visited_empty = 0, $j = 0, $prev_bond = 0;
 var $prev_distance = 0, $queue_visited = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $queue_visited = sp + 56|0;
 $31 = sp + 202|0;
 $is_queue_visited_empty = sp + 48|0;
 $34 = sp + 24|0;
 $35 = sp + 16|0;
 $37 = sp + 8|0;
 $39 = sp;
 $25 = $this;
 $26 = $bundle;
 $27 = $queue;
 $28 = $group_begin;
 $29 = $current;
 $40 = $recursive&1;
 $30 = $40;
 $41 = $25;
 $prev_bond = 0;
 $prev_distance = 0;
 $42 = $28;
 $current_group_begin = $42;
 $43 = $27;
 $24 = $43;
 $44 = $24;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $s = $51;
 $52 = $27;
 $23 = $52;
 $53 = $23;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$53>>2]|0;
 $57 = $55;
 $58 = $56;
 $59 = (($57) - ($58))|0;
 $60 = (($59|0) / 4)&-1;
 HEAP8[$31>>0] = 0;
 __ZNSt3__16vectorIbNS_9allocatorIbEEEC2EjRKb($queue_visited,$60,$31);
 HEAP32[$is_queue_visited_empty>>2] = $queue_visited;
 $61 = (($is_queue_visited_empty) + 4|0);
 HEAP32[$61>>2] = $data;
 L1: while(1) {
  __THREW__ = 0;
  $62 = (invoke_ii(474,($is_queue_visited_empty|0))|0);
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if ($64) {
   label = 25;
   break;
  }
  $65 = $62 ^ 1;
  if (!($65)) {
   label = 34;
   break;
  }
  $j = 0;
  while(1) {
   $66 = $j;
   $67 = $s;
   $68 = ($66|0)<($67|0);
   if (!($68)) {
    break;
   }
   $69 = $j;
   $$expand_i1_val = 0;
   $36 = $$expand_i1_val;
   $$expand_i1_val2 = 0;
   $38 = $$expand_i1_val2;
   $21 = $queue_visited;
   $22 = $69;
   $70 = $21;
   $71 = $22;
   $19 = $70;
   $20 = $71;
   $72 = $19;
   $73 = HEAP32[$72>>2]|0;
   $74 = $20;
   $75 = (($74>>>0) / 32)&-1;
   $76 = (($73) + ($75<<2)|0);
   $77 = $20;
   $78 = (($77>>>0) % 32)&-1;
   $79 = 1 << $78;
   $16 = $34;
   $17 = $76;
   $18 = $79;
   $80 = $16;
   $81 = $17;
   HEAP32[$80>>2] = $81;
   $82 = (($80) + 4|0);
   $83 = $18;
   HEAP32[$82>>2] = $83;
   $15 = $34;
   $84 = $15;
   $85 = HEAP32[$84>>2]|0;
   $86 = HEAP32[$85>>2]|0;
   $87 = (($84) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $86 & $88;
   $90 = ($89|0)!=(0);
   if ($90) {
    $167 = 0;
   } else {
    $13 = $35;
    $14 = $data;
    $91 = $13;
    $92 = $14;
    $93 = HEAP32[$92>>2]|0;
    HEAP32[$91>>2] = $93;
    $94 = (($91) + 4|0);
    $95 = $14;
    $96 = (($95) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    HEAP32[$94>>2] = $97;
    $98 = (($91) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)!=(0|0);
    if ($100) {
     $101 = (($91) + 4|0);
     $102 = HEAP32[$101>>2]|0;
     __ZNSt3__119__shared_weak_count12__add_sharedEv($102);
    }
    $$expand_i1_val4 = 1;
    $36 = $$expand_i1_val4;
    $11 = $37;
    $12 = $ans;
    $103 = $11;
    $104 = $12;
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$103>>2] = $105;
    $106 = (($103) + 4|0);
    $107 = $12;
    $108 = (($107) + 4|0);
    $109 = HEAP32[$108>>2]|0;
    HEAP32[$106>>2] = $109;
    $110 = (($103) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = ($111|0)!=(0|0);
    if ($112) {
     $113 = (($103) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     __ZNSt3__119__shared_weak_count12__add_sharedEv($114);
    }
    $$expand_i1_val6 = 1;
    $38 = $$expand_i1_val6;
    $115 = $26;
    $116 = $27;
    $117 = $j;
    $9 = $116;
    $10 = $117;
    $118 = $9;
    $119 = $10;
    $120 = HEAP32[$118>>2]|0;
    $121 = (($120) + ($119<<2)|0);
    $122 = HEAP32[$121>>2]|0;
    __THREW__ = 0;
    $123 = (invoke_iiiiiiii(475,($41|0),($35|0),($37|0),($115|0),($122|0),($edges|0),($visited|0))|0);
    $124 = __THREW__; __THREW__ = 0;
    $125 = $124&1;
    if ($125) {
     label = 26;
     break L1;
    }
    $167 = $123;
   }
   $$pre_trunc = $38;
   $126 = $$pre_trunc&1;
   if ($126) {
    __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($37);
   }
   $$pre_trunc9 = $36;
   $127 = $$pre_trunc9&1;
   if ($127) {
    __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($35);
   }
   if ($167) {
    label = 20;
    break;
   }
   $163 = $j;
   $164 = (($163) + 1)|0;
   $j = $164;
  }
  if ((label|0) == 20) {
   label = 0;
   $128 = $j;
   $5 = $queue_visited;
   $6 = $128;
   $129 = $5;
   $130 = $6;
   $3 = $129;
   $4 = $130;
   $131 = $3;
   $132 = HEAP32[$131>>2]|0;
   $133 = $4;
   $134 = (($133>>>0) / 32)&-1;
   $135 = (($132) + ($134<<2)|0);
   $136 = $4;
   $137 = (($136>>>0) % 32)&-1;
   $138 = 1 << $137;
   $0 = $39;
   $1 = $135;
   $2 = $138;
   $139 = $0;
   $140 = $1;
   HEAP32[$139>>2] = $140;
   $141 = (($139) + 4|0);
   $142 = $2;
   HEAP32[$141>>2] = $142;
   $7 = $39;
   $8 = 1;
   $143 = $7;
   $144 = $8;
   $145 = $144&1;
   if ($145) {
    $146 = (($143) + 4|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = HEAP32[$143>>2]|0;
    $149 = HEAP32[$148>>2]|0;
    $150 = $149 | $147;
    HEAP32[$148>>2] = $150;
   } else {
    $151 = (($143) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = $152 ^ -1;
    $154 = HEAP32[$143>>2]|0;
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 & $153;
    HEAP32[$154>>2] = $156;
   }
   $j = 0;
  }
 }
 if ((label|0) == 25) {
  $157 = ___cxa_find_matching_catch()|0;
  $158 = tempRet0;
  $32 = $157;
  $33 = $158;
 }
 else if ((label|0) == 26) {
  $159 = ___cxa_find_matching_catch()|0;
  $160 = tempRet0;
  $32 = $159;
  $33 = $160;
  $$pre_trunc11 = $38;
  $161 = $$pre_trunc11&1;
  if ($161) {
   __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($37);
  }
  $$pre_trunc13 = $36;
  $162 = $$pre_trunc13&1;
  if ($162) {
   __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($35);
  }
 }
 else if ((label|0) == 34) {
  __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($queue_visited);
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($queue_visited);
 $165 = $32;
 $166 = $33;
 ___resumeException($165|0);
 // unreachable;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 84|0;
 $6 = sp + 16|0;
 $9 = sp + 72|0;
 $10 = sp + 111|0;
 $11 = sp + 8|0;
 $15 = sp + 110|0;
 $17 = sp;
 $19 = sp + 109|0;
 $25 = sp + 108|0;
 $23 = $this;
 $24 = $__x;
 $28 = $23;
 $29 = $24;
 $22 = $29;
 $30 = $22;
 $31 = (($30) + 8|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $18 = $33;
 $34 = $18;
 ;HEAP8[$17+0>>0]=HEAP8[$19+0>>0]|0;
 $16 = $34;
 $13 = $28;
 $14 = $25;
 $35 = $13;
 $12 = $35;
 HEAP32[$35>>2] = 0;
 $36 = (($35) + 4|0);
 HEAP32[$36>>2] = 0;
 $37 = (($35) + 8|0);
 ;HEAP8[$11+0>>0]=HEAP8[$15+0>>0]|0;
 $8 = $37;
 HEAP32[$9>>2] = 0;
 $38 = $8;
 $7 = $9;
 $39 = $7;
 $40 = HEAP32[$39>>2]|0;
 $1 = $11;
 ;HEAP8[$6+0>>0]=HEAP8[$10+0>>0]|0;
 $4 = $38;
 HEAP32[$5>>2] = $40;
 $41 = $4;
 $3 = $6;
 $2 = $5;
 $42 = $2;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $24;
 $0 = $44;
 $45 = $0;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = HEAP32[$45>>2]|0;
 $49 = $47;
 $50 = $48;
 $51 = (($49) - ($50))|0;
 $52 = (($51|0) / 4)&-1;
 $__n = $52;
 $53 = $__n;
 $54 = ($53>>>0)>(0);
 if (!($54)) {
  STACKTOP = sp;return;
 }
 $55 = $__n;
 __THREW__ = 0;
 invoke_vii(472,($28|0),($55|0));
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if (!($57)) {
  $58 = $24;
  $59 = HEAP32[$58>>2]|0;
  $60 = $24;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  __THREW__ = 0;
  invoke_viii(476,($28|0),($59|0),($62|0));
  $63 = __THREW__; __THREW__ = 0;
  $64 = $63&1;
  if (!($64)) {
   STACKTOP = sp;return;
  }
 }
 $65 = ___cxa_find_matching_catch()|0;
 $66 = tempRet0;
 $26 = $65;
 $27 = $66;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($28);
 $67 = $26;
 $68 = $27;
 ___resumeException($67|0);
 // unreachable;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEEC2ERKS3_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 168|0;
 $$byval_copy = sp + 160|0;
 $4 = sp + 140|0;
 $5 = sp + 16|0;
 $8 = sp + 128|0;
 $9 = sp + 178|0;
 $10 = sp + 8|0;
 $14 = sp;
 $16 = sp + 177|0;
 $35 = sp + 176|0;
 $36 = sp + 32|0;
 $37 = sp + 24|0;
 $33 = $this;
 $34 = $__v;
 $38 = $33;
 $32 = $38;
 HEAP32[$38>>2] = 0;
 $39 = (($38) + 4|0);
 HEAP32[$39>>2] = 0;
 $40 = (($38) + 8|0);
 $41 = $34;
 $31 = $41;
 $42 = $31;
 $43 = (($42) + 8|0);
 $30 = $43;
 $44 = $30;
 $29 = $44;
 $45 = $29;
 $15 = $45;
 $46 = $15;
 ;HEAP8[$14+0>>0]=HEAP8[$16+0>>0]|0;
 $13 = $46;
 ;HEAP8[$10+0>>0]=HEAP8[$35+0>>0]|0;
 $7 = $40;
 HEAP32[$8>>2] = 0;
 $47 = $7;
 $6 = $8;
 $48 = $6;
 $49 = HEAP32[$48>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $47;
 HEAP32[$4>>2] = $49;
 $50 = $3;
 $2 = $5;
 $1 = $4;
 $51 = $1;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$50>>2] = $52;
 $53 = $34;
 $11 = $53;
 $54 = $11;
 $55 = (($54) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56>>>0)>(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $34;
 $12 = $58;
 $59 = $12;
 $60 = (($59) + 4|0);
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($38,$61);
 $62 = $34;
 $22 = $62;
 $63 = $22;
 $20 = $63;
 $21 = 0;
 $64 = $20;
 $65 = HEAP32[$64>>2]|0;
 $66 = $21;
 $67 = (($66>>>0) / 32)&-1;
 $68 = (($65) + ($67<<2)|0);
 $69 = $21;
 $70 = (($69>>>0) % 32)&-1;
 $17 = $36;
 $18 = $68;
 $19 = $70;
 $71 = $17;
 $72 = $18;
 HEAP32[$71>>2] = $72;
 $73 = (($71) + 4|0);
 $74 = $19;
 HEAP32[$73>>2] = $74;
 $75 = $34;
 $28 = $75;
 $76 = $28;
 $77 = (($76) + 4|0);
 $78 = HEAP32[$77>>2]|0;
 $26 = $76;
 $27 = $78;
 $79 = $26;
 $80 = HEAP32[$79>>2]|0;
 $81 = $27;
 $82 = (($81>>>0) / 32)&-1;
 $83 = (($80) + ($82<<2)|0);
 $84 = $27;
 $85 = (($84>>>0) % 32)&-1;
 $23 = $37;
 $24 = $83;
 $25 = $85;
 $86 = $23;
 $87 = $24;
 HEAP32[$86>>2] = $87;
 $88 = (($86) + 4|0);
 $89 = $25;
 HEAP32[$88>>2] = $89;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$36+4>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$37+4>>2]|0;
 __ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb1ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($38,$$byval_copy,$$byval_copy1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $13 = $15;
  $18 = $13;
  $19 = (($18) + 8|0);
  $12 = $19;
  $20 = $12;
  $11 = $20;
  $21 = $11;
  $22 = HEAP32[$15>>2]|0;
  $10 = $15;
  $23 = $10;
  $24 = (($23) + 8|0);
  $9 = $24;
  $25 = $9;
  $8 = $25;
  $26 = $8;
  $27 = HEAP32[$26>>2]|0;
  $4 = $21;
  $5 = $22;
  $6 = $27;
  $28 = $4;
  $29 = $5;
  $30 = $6;
  $1 = $28;
  $2 = $29;
  $3 = $30;
  $31 = $2;
  $0 = $31;
  $32 = $0;
  __ZdlPv($32);
 }
 $7 = $15;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($this,$bundle,$bond) {
 $this = $this|0;
 $bundle = $bundle|0;
 $bond = $bond|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $bundle;
 HEAP32[$2>>2] = $bond;
 $3 = $1;
 __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE9push_backERKS5_($3,$2);
 STACKTOP = sp;return;
}
function __ZN7croutes5ndataIdE2atEii($this,$from_node,$to_node) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $from_node;
 $6 = $to_node;
 $7 = $4;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $2 = $9;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $13 = HEAP32[$11>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $6;
 $0 = $15;
 $1 = $16;
 $17 = $0;
 $18 = $1;
 $19 = HEAP32[$17>>2]|0;
 $20 = (($19) + ($18<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE9push_backERKS5_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $22 = sp + 136|0;
 $31 = sp + 8|0;
 $29 = $this;
 $30 = $__v;
 $32 = $29;
 $28 = $32;
 $33 = $28;
 $34 = (($33) + 20|0);
 $27 = $34;
 $35 = $27;
 $26 = $35;
 $36 = $26;
 $__a = $36;
 $6 = $32;
 $37 = $6;
 $5 = $37;
 $38 = $5;
 $4 = $38;
 $39 = $4;
 $40 = (($39) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $41;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $48 = ($47|0)==(0);
 if ($48) {
  $69 = 0;
 } else {
  $3 = $38;
  $49 = $3;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $51;
  $55 = $53;
  $56 = (($54) - ($55))|0;
  $57 = (($56|0) / 4)&-1;
  $58 = $57<<10;
  $59 = (($58) - 1)|0;
  $69 = $59;
 }
 $60 = (($37) + 16|0);
 $61 = HEAP32[$60>>2]|0;
 $2 = $37;
 $62 = $2;
 $63 = (($62) + 20|0);
 $1 = $63;
 $64 = $1;
 $0 = $64;
 $65 = $0;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($61) + ($66))|0;
 $68 = (($69) - ($67))|0;
 $70 = ($68|0)==(0);
 if ($70) {
  __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE19__add_back_capacityEv($32);
 }
 $71 = $__a;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($31,$32);
 $7 = $31;
 $72 = $7;
 $73 = (($72) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $8 = $74;
 $75 = $8;
 $76 = $30;
 $19 = $71;
 $20 = $75;
 $21 = $76;
 $77 = $19;
 $78 = $20;
 $79 = $21;
 $18 = $79;
 $80 = $18;
 ;HEAP8[$17+0>>0]=HEAP8[$22+0>>0]|0;
 $14 = $77;
 $15 = $78;
 $16 = $80;
 $81 = $14;
 $82 = $15;
 $83 = $16;
 $13 = $83;
 $84 = $13;
 $10 = $81;
 $11 = $82;
 $12 = $84;
 $85 = $11;
 $86 = ($85|0)==(0|0);
 if ($86) {
  $25 = $32;
  $90 = $25;
  $91 = (($90) + 20|0);
  $24 = $91;
  $92 = $24;
  $23 = $92;
  $93 = $23;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 1)|0;
  HEAP32[$93>>2] = $95;
  STACKTOP = sp;return;
 }
 $87 = $12;
 $9 = $87;
 $88 = $9;
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$85>>2] = $89;
 $25 = $32;
 $90 = $25;
 $91 = (($90) + 20|0);
 $24 = $91;
 $92 = $24;
 $23 = $92;
 $93 = $23;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 1)|0;
 HEAP32[$93>>2] = $95;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE19__add_back_capacityEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__buf = 0, $__c$i = 0, $__c$i16 = 0, $__d$i = 0, $__d$i15 = 0, $__i = 0, $__n$i$i$i = 0, $__n$i$i$i14 = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i13 = 0, $__t$i1$i = 0, $__t$i1$i12 = 0, $__t$i17 = 0, $__t$i2 = 0, $__t$i2$i = 0, $__t$i2$i11 = 0, $__t$i3 = 0;
 var $__t$i3$i = 0, $__t$i3$i10 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 1252|0;
 $$byval_copy2 = sp + 1248|0;
 $$byval_copy1 = sp + 1244|0;
 $$byval_copy = sp + 1240|0;
 $15 = sp + 48|0;
 $18 = sp + 1262|0;
 $35 = sp + 40|0;
 $38 = sp + 1261|0;
 $__t$i3$i10 = sp + 1076|0;
 $__t$i2$i11 = sp + 1052|0;
 $__t$i1$i12 = sp + 1028|0;
 $__t$i$i13 = sp + 980|0;
 $89 = sp + 32|0;
 $94 = sp + 1260|0;
 $100 = sp + 832|0;
 $101 = sp + 828|0;
 $__t$i17 = sp + 808|0;
 $102 = sp + 804|0;
 $105 = sp + 792|0;
 $109 = sp + 24|0;
 $112 = sp + 1259|0;
 $157 = sp + 16|0;
 $160 = sp + 1258|0;
 $__t$i3$i = sp + 564|0;
 $__t$i2$i = sp + 540|0;
 $__t$i1$i = sp + 516|0;
 $__t$i$i = sp + 468|0;
 $211 = sp + 8|0;
 $216 = sp + 1257|0;
 $222 = sp + 320|0;
 $223 = sp + 316|0;
 $__t$i5 = sp + 296|0;
 $224 = sp + 292|0;
 $227 = sp + 280|0;
 $__t$i4 = sp + 256|0;
 $__t$i3 = sp + 232|0;
 $__t$i2 = sp + 208|0;
 $__t$i = sp + 160|0;
 $256 = sp;
 $259 = sp + 1256|0;
 $__pt = sp + 108|0;
 $267 = sp + 104|0;
 $268 = sp + 100|0;
 $__pt1 = sp + 96|0;
 $__buf = sp + 76|0;
 $269 = sp + 72|0;
 $270 = sp + 68|0;
 $271 = sp + 64|0;
 $266 = $this;
 $274 = $266;
 $265 = $274;
 $275 = $265;
 $276 = (($275) + 20|0);
 $264 = $276;
 $277 = $264;
 $263 = $277;
 $278 = $263;
 $__a = $278;
 $262 = $274;
 $279 = $262;
 $280 = (($279) + 16|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281>>>0)>=(1024);
 if ($282) {
  $283 = (($274) + 16|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) - 1024)|0;
  HEAP32[$283>>2] = $285;
  $261 = $274;
  $286 = $261;
  $287 = (($286) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = HEAP32[$288>>2]|0;
  HEAP32[$__pt>>2] = $289;
  $260 = $274;
  $290 = $260;
  $291 = (($290) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($292) + 4|0);
  $257 = $290;
  $258 = $293;
  $294 = $257;
  $295 = $258;
  ;HEAP8[$256+0>>0]=HEAP8[$259+0>>0]|0;
  $254 = $294;
  $255 = $295;
  $296 = $254;
  $297 = $255;
  $298 = (($296) + 4|0);
  HEAP32[$298>>2] = $297;
  $220 = $274;
  $221 = $__pt;
  $299 = $220;
  $300 = (($299) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $219 = $299;
  $302 = $219;
  $303 = (($302) + 12|0);
  $218 = $303;
  $304 = $218;
  $217 = $304;
  $305 = $217;
  $306 = HEAP32[$305>>2]|0;
  $307 = ($301|0)==($306|0);
  if ($307) {
   $308 = (($299) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$299>>2]|0;
   $311 = ($309>>>0)>($310>>>0);
   do {
    if ($311) {
     $312 = (($299) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = HEAP32[$299>>2]|0;
     $315 = $313;
     $316 = $314;
     $317 = (($315) - ($316))|0;
     $318 = (($317|0) / 4)&-1;
     $__d$i = $318;
     $319 = $__d$i;
     $320 = (($319) + 1)|0;
     $321 = (($320|0) / 2)&-1;
     $__d$i = $321;
     $322 = (($299) + 4|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = (($299) + 8|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = (($299) + 4|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $__d$i;
     $329 = (0 - ($328))|0;
     $330 = (($327) + ($329<<2)|0);
     $196 = $323;
     $197 = $325;
     $198 = $330;
     $331 = $196;
     $195 = $331;
     $332 = $195;
     $333 = $197;
     $190 = $333;
     $334 = $190;
     $335 = $198;
     $191 = $335;
     $336 = $191;
     $192 = $332;
     $193 = $334;
     $194 = $336;
     $337 = $193;
     $338 = $192;
     $339 = $337;
     $340 = $338;
     $341 = (($339) - ($340))|0;
     $342 = (($341|0) / 4)&-1;
     $__n$i$i$i = $342;
     $343 = $194;
     $344 = $192;
     $345 = $__n$i$i$i;
     $346 = $345<<2;
     _memmove(($343|0),($344|0),($346|0))|0;
     $347 = $194;
     $348 = $__n$i$i$i;
     $349 = (($347) + ($348<<2)|0);
     $350 = (($299) + 8|0);
     HEAP32[$350>>2] = $349;
     $351 = $__d$i;
     $352 = (($299) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = (0 - ($351))|0;
     $355 = (($353) + ($354<<2)|0);
     HEAP32[$352>>2] = $355;
    } else {
     $189 = $299;
     $356 = $189;
     $357 = (($356) + 12|0);
     $188 = $357;
     $358 = $188;
     $187 = $358;
     $359 = $187;
     $360 = HEAP32[$359>>2]|0;
     $361 = HEAP32[$299>>2]|0;
     $362 = $360;
     $363 = $361;
     $364 = (($362) - ($363))|0;
     $365 = (($364|0) / 4)&-1;
     $366 = $365<<1;
     HEAP32[$222>>2] = $366;
     HEAP32[$223>>2] = 1;
     $158 = $222;
     $159 = $223;
     $367 = $158;
     $368 = $159;
     ;HEAP8[$157+0>>0]=HEAP8[$160+0>>0]|0;
     $155 = $367;
     $156 = $368;
     $369 = $155;
     $370 = $156;
     $152 = $157;
     $153 = $369;
     $154 = $370;
     $371 = $153;
     $372 = HEAP32[$371>>2]|0;
     $373 = $154;
     $374 = HEAP32[$373>>2]|0;
     $375 = ($372>>>0)<($374>>>0);
     if ($375) {
      $376 = $156;
      $379 = $376;
     } else {
      $377 = $155;
      $379 = $377;
     }
     $378 = HEAP32[$379>>2]|0;
     $__c$i = $378;
     $380 = $__c$i;
     $381 = $__c$i;
     $382 = (($381>>>0) / 4)&-1;
     $147 = $299;
     $383 = $147;
     $384 = (($383) + 12|0);
     $146 = $384;
     $385 = $146;
     $145 = $385;
     $386 = $145;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t$i5,$380,$382,$386);
     $387 = (($299) + 4|0);
     $388 = HEAP32[$387>>2]|0;
     $148 = $224;
     $149 = $388;
     $389 = $148;
     $390 = $149;
     HEAP32[$389>>2] = $390;
     $391 = (($299) + 8|0);
     $392 = HEAP32[$391>>2]|0;
     $150 = $227;
     $151 = $392;
     $393 = $150;
     $394 = $151;
     HEAP32[$393>>2] = $394;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$224+0>>2]|0;
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$227+0>>2]|0;
     invoke_viii(477,($__t$i5|0),($$byval_copy|0),($$byval_copy1|0));
     $395 = __THREW__; __THREW__ = 0;
     $396 = $395&1;
     if ($396) {
      $449 = ___cxa_find_matching_catch()|0;
      $450 = tempRet0;
      $225 = $449;
      $226 = $450;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i5);
      $451 = $225;
      $452 = $226;
      ___resumeException($451|0);
      // unreachable;
     } else {
      $164 = $299;
      $165 = $__t$i5;
      $397 = $164;
      $163 = $397;
      $398 = $163;
      $399 = HEAP32[$398>>2]|0;
      HEAP32[$__t$i3$i>>2] = $399;
      $400 = $165;
      $161 = $400;
      $401 = $161;
      $402 = HEAP32[$401>>2]|0;
      $403 = $164;
      HEAP32[$403>>2] = $402;
      $162 = $__t$i3$i;
      $404 = $162;
      $405 = HEAP32[$404>>2]|0;
      $406 = $165;
      HEAP32[$406>>2] = $405;
      $407 = (($299) + 4|0);
      $408 = (($__t$i5) + 4|0);
      $169 = $407;
      $170 = $408;
      $409 = $169;
      $168 = $409;
      $410 = $168;
      $411 = HEAP32[$410>>2]|0;
      HEAP32[$__t$i2$i>>2] = $411;
      $412 = $170;
      $166 = $412;
      $413 = $166;
      $414 = HEAP32[$413>>2]|0;
      $415 = $169;
      HEAP32[$415>>2] = $414;
      $167 = $__t$i2$i;
      $416 = $167;
      $417 = HEAP32[$416>>2]|0;
      $418 = $170;
      HEAP32[$418>>2] = $417;
      $419 = (($299) + 8|0);
      $420 = (($__t$i5) + 8|0);
      $174 = $419;
      $175 = $420;
      $421 = $174;
      $173 = $421;
      $422 = $173;
      $423 = HEAP32[$422>>2]|0;
      HEAP32[$__t$i1$i>>2] = $423;
      $424 = $175;
      $171 = $424;
      $425 = $171;
      $426 = HEAP32[$425>>2]|0;
      $427 = $174;
      HEAP32[$427>>2] = $426;
      $172 = $__t$i1$i;
      $428 = $172;
      $429 = HEAP32[$428>>2]|0;
      $430 = $175;
      HEAP32[$430>>2] = $429;
      $178 = $299;
      $431 = $178;
      $432 = (($431) + 12|0);
      $177 = $432;
      $433 = $177;
      $176 = $433;
      $434 = $176;
      $181 = $__t$i5;
      $435 = $181;
      $436 = (($435) + 12|0);
      $180 = $436;
      $437 = $180;
      $179 = $437;
      $438 = $179;
      $185 = $434;
      $186 = $438;
      $439 = $185;
      $184 = $439;
      $440 = $184;
      $441 = HEAP32[$440>>2]|0;
      HEAP32[$__t$i$i>>2] = $441;
      $442 = $186;
      $182 = $442;
      $443 = $182;
      $444 = HEAP32[$443>>2]|0;
      $445 = $185;
      HEAP32[$445>>2] = $444;
      $183 = $__t$i$i;
      $446 = $183;
      $447 = HEAP32[$446>>2]|0;
      $448 = $186;
      HEAP32[$448>>2] = $447;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i5);
      break;
     }
    }
   } while(0);
  }
  $201 = $299;
  $453 = $201;
  $454 = (($453) + 12|0);
  $200 = $454;
  $455 = $200;
  $199 = $455;
  $456 = $199;
  $457 = (($299) + 8|0);
  $458 = HEAP32[$457>>2]|0;
  $202 = $458;
  $459 = $202;
  $460 = $221;
  $213 = $456;
  $214 = $459;
  $215 = $460;
  $461 = $213;
  $462 = $214;
  $463 = $215;
  $212 = $463;
  $464 = $212;
  ;HEAP8[$211+0>>0]=HEAP8[$216+0>>0]|0;
  $208 = $461;
  $209 = $462;
  $210 = $464;
  $465 = $208;
  $466 = $209;
  $467 = $210;
  $207 = $467;
  $468 = $207;
  $204 = $465;
  $205 = $466;
  $206 = $468;
  $469 = $205;
  $470 = ($469|0)==(0|0);
  if (!($470)) {
   $471 = $206;
   $203 = $471;
   $472 = $203;
   $473 = HEAP32[$472>>2]|0;
   HEAP32[$469>>2] = $473;
  }
  $474 = (($299) + 8|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = (($475) + 4|0);
  HEAP32[$474>>2] = $476;
  STACKTOP = sp;return;
 }
 $144 = $274;
 $477 = $144;
 $478 = (($477) + 8|0);
 $479 = HEAP32[$478>>2]|0;
 $480 = (($477) + 4|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = $479;
 $483 = $481;
 $484 = (($482) - ($483))|0;
 $485 = (($484|0) / 4)&-1;
 $143 = $274;
 $486 = $143;
 $142 = $486;
 $487 = $142;
 $488 = (($487) + 12|0);
 $141 = $488;
 $489 = $141;
 $140 = $489;
 $490 = $140;
 $491 = HEAP32[$490>>2]|0;
 $492 = HEAP32[$486>>2]|0;
 $493 = $491;
 $494 = $492;
 $495 = (($493) - ($494))|0;
 $496 = (($495|0) / 4)&-1;
 $497 = ($485>>>0)<($496>>>0);
 L22: do {
  if ($497) {
   $139 = $274;
   $498 = $139;
   $138 = $498;
   $499 = $138;
   $500 = (($499) + 12|0);
   $137 = $500;
   $501 = $137;
   $136 = $501;
   $502 = $136;
   $503 = HEAP32[$502>>2]|0;
   $504 = (($498) + 8|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = $503;
   $507 = $505;
   $508 = (($506) - ($507))|0;
   $509 = (($508|0) / 4)&-1;
   $510 = ($509|0)!=(0);
   if ($510) {
    $511 = $__a;
    $134 = $511;
    $135 = 1024;
    $512 = $134;
    $513 = $135;
    $131 = $512;
    $132 = $513;
    $133 = 0;
    $514 = $132;
    $515 = $514<<2;
    $130 = $515;
    $516 = $130;
    $517 = (__Znwj($516)|0);
    HEAP32[$267>>2] = $517;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE9push_backEOS6_($274,$267);
   } else {
    $518 = $__a;
    $128 = $518;
    $129 = 1024;
    $519 = $128;
    $520 = $129;
    $125 = $519;
    $126 = $520;
    $127 = 0;
    $521 = $126;
    $522 = $521<<2;
    $124 = $522;
    $523 = $124;
    $524 = (__Znwj($523)|0);
    HEAP32[$268>>2] = $524;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontEOS6_($274,$268);
    $123 = $274;
    $525 = $123;
    $526 = (($525) + 4|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = HEAP32[$527>>2]|0;
    HEAP32[$__pt1>>2] = $528;
    $113 = $274;
    $529 = $113;
    $530 = (($529) + 4|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = (($531) + 4|0);
    $110 = $529;
    $111 = $532;
    $533 = $110;
    $534 = $111;
    ;HEAP8[$109+0>>0]=HEAP8[$112+0>>0]|0;
    $107 = $533;
    $108 = $534;
    $535 = $107;
    $536 = $108;
    $537 = (($535) + 4|0);
    HEAP32[$537>>2] = $536;
    $98 = $274;
    $99 = $__pt1;
    $538 = $98;
    $539 = (($538) + 8|0);
    $540 = HEAP32[$539>>2]|0;
    $97 = $538;
    $541 = $97;
    $542 = (($541) + 12|0);
    $96 = $542;
    $543 = $96;
    $95 = $543;
    $544 = $95;
    $545 = HEAP32[$544>>2]|0;
    $546 = ($540|0)==($545|0);
    if ($546) {
     $547 = (($538) + 4|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = HEAP32[$538>>2]|0;
     $550 = ($548>>>0)>($549>>>0);
     do {
      if ($550) {
       $551 = (($538) + 4|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = HEAP32[$538>>2]|0;
       $554 = $552;
       $555 = $553;
       $556 = (($554) - ($555))|0;
       $557 = (($556|0) / 4)&-1;
       $__d$i15 = $557;
       $558 = $__d$i15;
       $559 = (($558) + 1)|0;
       $560 = (($559|0) / 2)&-1;
       $__d$i15 = $560;
       $561 = (($538) + 4|0);
       $562 = HEAP32[$561>>2]|0;
       $563 = (($538) + 8|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($538) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = $__d$i15;
       $568 = (0 - ($567))|0;
       $569 = (($566) + ($568<<2)|0);
       $74 = $562;
       $75 = $564;
       $76 = $569;
       $570 = $74;
       $73 = $570;
       $571 = $73;
       $572 = $75;
       $68 = $572;
       $573 = $68;
       $574 = $76;
       $69 = $574;
       $575 = $69;
       $70 = $571;
       $71 = $573;
       $72 = $575;
       $576 = $71;
       $577 = $70;
       $578 = $576;
       $579 = $577;
       $580 = (($578) - ($579))|0;
       $581 = (($580|0) / 4)&-1;
       $__n$i$i$i14 = $581;
       $582 = $72;
       $583 = $70;
       $584 = $__n$i$i$i14;
       $585 = $584<<2;
       _memmove(($582|0),($583|0),($585|0))|0;
       $586 = $72;
       $587 = $__n$i$i$i14;
       $588 = (($586) + ($587<<2)|0);
       $589 = (($538) + 8|0);
       HEAP32[$589>>2] = $588;
       $590 = $__d$i15;
       $591 = (($538) + 4|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (0 - ($590))|0;
       $594 = (($592) + ($593<<2)|0);
       HEAP32[$591>>2] = $594;
      } else {
       $67 = $538;
       $595 = $67;
       $596 = (($595) + 12|0);
       $66 = $596;
       $597 = $66;
       $65 = $597;
       $598 = $65;
       $599 = HEAP32[$598>>2]|0;
       $600 = HEAP32[$538>>2]|0;
       $601 = $599;
       $602 = $600;
       $603 = (($601) - ($602))|0;
       $604 = (($603|0) / 4)&-1;
       $605 = $604<<1;
       HEAP32[$100>>2] = $605;
       HEAP32[$101>>2] = 1;
       $36 = $100;
       $37 = $101;
       $606 = $36;
       $607 = $37;
       ;HEAP8[$35+0>>0]=HEAP8[$38+0>>0]|0;
       $33 = $606;
       $34 = $607;
       $608 = $33;
       $609 = $34;
       $30 = $35;
       $31 = $608;
       $32 = $609;
       $610 = $31;
       $611 = HEAP32[$610>>2]|0;
       $612 = $32;
       $613 = HEAP32[$612>>2]|0;
       $614 = ($611>>>0)<($613>>>0);
       if ($614) {
        $615 = $34;
        $618 = $615;
       } else {
        $616 = $33;
        $618 = $616;
       }
       $617 = HEAP32[$618>>2]|0;
       $__c$i16 = $617;
       $619 = $__c$i16;
       $620 = $__c$i16;
       $621 = (($620>>>0) / 4)&-1;
       $25 = $538;
       $622 = $25;
       $623 = (($622) + 12|0);
       $24 = $623;
       $624 = $24;
       $23 = $624;
       $625 = $23;
       __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t$i17,$619,$621,$625);
       $626 = (($538) + 4|0);
       $627 = HEAP32[$626>>2]|0;
       $26 = $102;
       $27 = $627;
       $628 = $26;
       $629 = $27;
       HEAP32[$628>>2] = $629;
       $630 = (($538) + 8|0);
       $631 = HEAP32[$630>>2]|0;
       $28 = $105;
       $29 = $631;
       $632 = $28;
       $633 = $29;
       HEAP32[$632>>2] = $633;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$102+0>>2]|0;
       ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$105+0>>2]|0;
       invoke_viii(477,($__t$i17|0),($$byval_copy2|0),($$byval_copy3|0));
       $634 = __THREW__; __THREW__ = 0;
       $635 = $634&1;
       if ($635) {
        $688 = ___cxa_find_matching_catch()|0;
        $689 = tempRet0;
        $103 = $688;
        $104 = $689;
        __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i17);
        $690 = $103;
        $691 = $104;
        ___resumeException($690|0);
        // unreachable;
       } else {
        $42 = $538;
        $43 = $__t$i17;
        $636 = $42;
        $41 = $636;
        $637 = $41;
        $638 = HEAP32[$637>>2]|0;
        HEAP32[$__t$i3$i10>>2] = $638;
        $639 = $43;
        $39 = $639;
        $640 = $39;
        $641 = HEAP32[$640>>2]|0;
        $642 = $42;
        HEAP32[$642>>2] = $641;
        $40 = $__t$i3$i10;
        $643 = $40;
        $644 = HEAP32[$643>>2]|0;
        $645 = $43;
        HEAP32[$645>>2] = $644;
        $646 = (($538) + 4|0);
        $647 = (($__t$i17) + 4|0);
        $47 = $646;
        $48 = $647;
        $648 = $47;
        $46 = $648;
        $649 = $46;
        $650 = HEAP32[$649>>2]|0;
        HEAP32[$__t$i2$i11>>2] = $650;
        $651 = $48;
        $44 = $651;
        $652 = $44;
        $653 = HEAP32[$652>>2]|0;
        $654 = $47;
        HEAP32[$654>>2] = $653;
        $45 = $__t$i2$i11;
        $655 = $45;
        $656 = HEAP32[$655>>2]|0;
        $657 = $48;
        HEAP32[$657>>2] = $656;
        $658 = (($538) + 8|0);
        $659 = (($__t$i17) + 8|0);
        $52 = $658;
        $53 = $659;
        $660 = $52;
        $51 = $660;
        $661 = $51;
        $662 = HEAP32[$661>>2]|0;
        HEAP32[$__t$i1$i12>>2] = $662;
        $663 = $53;
        $49 = $663;
        $664 = $49;
        $665 = HEAP32[$664>>2]|0;
        $666 = $52;
        HEAP32[$666>>2] = $665;
        $50 = $__t$i1$i12;
        $667 = $50;
        $668 = HEAP32[$667>>2]|0;
        $669 = $53;
        HEAP32[$669>>2] = $668;
        $56 = $538;
        $670 = $56;
        $671 = (($670) + 12|0);
        $55 = $671;
        $672 = $55;
        $54 = $672;
        $673 = $54;
        $59 = $__t$i17;
        $674 = $59;
        $675 = (($674) + 12|0);
        $58 = $675;
        $676 = $58;
        $57 = $676;
        $677 = $57;
        $63 = $673;
        $64 = $677;
        $678 = $63;
        $62 = $678;
        $679 = $62;
        $680 = HEAP32[$679>>2]|0;
        HEAP32[$__t$i$i13>>2] = $680;
        $681 = $64;
        $60 = $681;
        $682 = $60;
        $683 = HEAP32[$682>>2]|0;
        $684 = $63;
        HEAP32[$684>>2] = $683;
        $61 = $__t$i$i13;
        $685 = $61;
        $686 = HEAP32[$685>>2]|0;
        $687 = $64;
        HEAP32[$687>>2] = $686;
        __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i17);
        break;
       }
      }
     } while(0);
    }
    $79 = $538;
    $692 = $79;
    $693 = (($692) + 12|0);
    $78 = $693;
    $694 = $78;
    $77 = $694;
    $695 = $77;
    $696 = (($538) + 8|0);
    $697 = HEAP32[$696>>2]|0;
    $80 = $697;
    $698 = $80;
    $699 = $99;
    $91 = $695;
    $92 = $698;
    $93 = $699;
    $700 = $91;
    $701 = $92;
    $702 = $93;
    $90 = $702;
    $703 = $90;
    ;HEAP8[$89+0>>0]=HEAP8[$94+0>>0]|0;
    $86 = $700;
    $87 = $701;
    $88 = $703;
    $704 = $86;
    $705 = $87;
    $706 = $88;
    $85 = $706;
    $707 = $85;
    $82 = $704;
    $83 = $705;
    $84 = $707;
    $708 = $83;
    $709 = ($708|0)==(0|0);
    if (!($709)) {
     $710 = $84;
     $81 = $710;
     $711 = $81;
     $712 = HEAP32[$711>>2]|0;
     HEAP32[$708>>2] = $712;
    }
    $713 = (($538) + 8|0);
    $714 = HEAP32[$713>>2]|0;
    $715 = (($714) + 4|0);
    HEAP32[$713>>2] = $715;
   }
  } else {
   $22 = $274;
   $716 = $22;
   $21 = $716;
   $717 = $21;
   $718 = (($717) + 12|0);
   $20 = $718;
   $719 = $20;
   $19 = $719;
   $720 = $19;
   $721 = HEAP32[$720>>2]|0;
   $722 = HEAP32[$716>>2]|0;
   $723 = $721;
   $724 = $722;
   $725 = (($723) - ($724))|0;
   $726 = (($725|0) / 4)&-1;
   $727 = $726<<1;
   HEAP32[$269>>2] = $727;
   HEAP32[$270>>2] = 1;
   $16 = $269;
   $17 = $270;
   $728 = $16;
   $729 = $17;
   ;HEAP8[$15+0>>0]=HEAP8[$18+0>>0]|0;
   $13 = $728;
   $14 = $729;
   $730 = $13;
   $731 = $14;
   $10 = $15;
   $11 = $730;
   $12 = $731;
   $732 = $11;
   $733 = HEAP32[$732>>2]|0;
   $734 = $12;
   $735 = HEAP32[$734>>2]|0;
   $736 = ($733>>>0)<($735>>>0);
   if ($736) {
    $737 = $14;
    $740 = $737;
   } else {
    $738 = $13;
    $740 = $738;
   }
   $739 = HEAP32[$740>>2]|0;
   $9 = $274;
   $741 = $9;
   $742 = (($741) + 8|0);
   $743 = HEAP32[$742>>2]|0;
   $744 = (($741) + 4|0);
   $745 = HEAP32[$744>>2]|0;
   $746 = $743;
   $747 = $745;
   $748 = (($746) - ($747))|0;
   $749 = (($748|0) / 4)&-1;
   $8 = $274;
   $750 = $8;
   $751 = (($750) + 12|0);
   $7 = $751;
   $752 = $7;
   $6 = $752;
   $753 = $6;
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__buf,$739,$749,$753);
   $754 = $__a;
   $4 = $754;
   $5 = 1024;
   $755 = $4;
   $756 = $5;
   $1 = $755;
   $2 = $756;
   $3 = 0;
   $757 = $2;
   $758 = $757<<2;
   $0 = $758;
   $759 = $0;
   __THREW__ = 0;
   $760 = (invoke_ii(430,($759|0))|0);
   $761 = __THREW__; __THREW__ = 0;
   $762 = $761&1;
   do {
    if ($762) {
     label = 39;
    } else {
     HEAP32[$271>>2] = $760;
     __THREW__ = 0;
     invoke_vii(478,($__buf|0),($271|0));
     $763 = __THREW__; __THREW__ = 0;
     $764 = $763&1;
     if ($764) {
      label = 39;
     } else {
      $121 = $274;
      $785 = $121;
      $786 = (($785) + 8|0);
      $787 = HEAP32[$786>>2]|0;
      $__i = $787;
      while(1) {
       $788 = $__i;
       $122 = $274;
       $789 = $122;
       $790 = (($789) + 4|0);
       $791 = HEAP32[$790>>2]|0;
       $792 = ($788|0)!=($791|0);
       if (!($792)) {
        label = 49;
        break;
       }
       $793 = $__i;
       $794 = (($793) + -4|0);
       $__i = $794;
       __THREW__ = 0;
       invoke_vii(481,($__buf|0),($794|0));
       $795 = __THREW__; __THREW__ = 0;
       $796 = $795&1;
       if ($796) {
        label = 48;
        break;
       }
      }
      if ((label|0) == 48) {
       $797 = ___cxa_find_matching_catch()|0;
       $798 = tempRet0;
       $272 = $797;
       $273 = $798;
       break;
      }
      else if ((label|0) == 49) {
       $231 = $274;
       $232 = $__buf;
       $799 = $231;
       $230 = $799;
       $800 = $230;
       $801 = HEAP32[$800>>2]|0;
       HEAP32[$__t$i4>>2] = $801;
       $802 = $232;
       $228 = $802;
       $803 = $228;
       $804 = HEAP32[$803>>2]|0;
       $805 = $231;
       HEAP32[$805>>2] = $804;
       $229 = $__t$i4;
       $806 = $229;
       $807 = HEAP32[$806>>2]|0;
       $808 = $232;
       HEAP32[$808>>2] = $807;
       $809 = (($274) + 4|0);
       $810 = (($__buf) + 4|0);
       $236 = $809;
       $237 = $810;
       $811 = $236;
       $235 = $811;
       $812 = $235;
       $813 = HEAP32[$812>>2]|0;
       HEAP32[$__t$i3>>2] = $813;
       $814 = $237;
       $233 = $814;
       $815 = $233;
       $816 = HEAP32[$815>>2]|0;
       $817 = $236;
       HEAP32[$817>>2] = $816;
       $234 = $__t$i3;
       $818 = $234;
       $819 = HEAP32[$818>>2]|0;
       $820 = $237;
       HEAP32[$820>>2] = $819;
       $821 = (($274) + 8|0);
       $822 = (($__buf) + 8|0);
       $241 = $821;
       $242 = $822;
       $823 = $241;
       $240 = $823;
       $824 = $240;
       $825 = HEAP32[$824>>2]|0;
       HEAP32[$__t$i2>>2] = $825;
       $826 = $242;
       $238 = $826;
       $827 = $238;
       $828 = HEAP32[$827>>2]|0;
       $829 = $241;
       HEAP32[$829>>2] = $828;
       $239 = $__t$i2;
       $830 = $239;
       $831 = HEAP32[$830>>2]|0;
       $832 = $242;
       HEAP32[$832>>2] = $831;
       $245 = $274;
       $833 = $245;
       $834 = (($833) + 12|0);
       $244 = $834;
       $835 = $244;
       $243 = $835;
       $836 = $243;
       $248 = $__buf;
       $837 = $248;
       $838 = (($837) + 12|0);
       $247 = $838;
       $839 = $247;
       $246 = $839;
       $840 = $246;
       $252 = $836;
       $253 = $840;
       $841 = $252;
       $251 = $841;
       $842 = $251;
       $843 = HEAP32[$842>>2]|0;
       HEAP32[$__t$i>>2] = $843;
       $844 = $253;
       $249 = $844;
       $845 = $249;
       $846 = HEAP32[$845>>2]|0;
       $847 = $252;
       HEAP32[$847>>2] = $846;
       $250 = $__t$i;
       $848 = $250;
       $849 = HEAP32[$848>>2]|0;
       $850 = $253;
       HEAP32[$850>>2] = $849;
       __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
       break L22;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 39) {
     $765 = ___cxa_find_matching_catch(0|0)|0;
     $766 = tempRet0;
     $272 = $765;
     $273 = $766;
     $767 = $272;
     (___cxa_begin_catch(($767|0))|0);
     $768 = $__a;
     $106 = $__buf;
     $769 = $106;
     $770 = (($769) + 8|0);
     $771 = HEAP32[$770>>2]|0;
     $772 = (($771) + -4|0);
     $773 = HEAP32[$772>>2]|0;
     $118 = $768;
     $119 = $773;
     $120 = 1024;
     $774 = $118;
     $775 = $119;
     $776 = $120;
     $115 = $774;
     $116 = $775;
     $117 = $776;
     $777 = $116;
     $114 = $777;
     $778 = $114;
     __ZdlPv($778);
     __THREW__ = 0;
     invoke_v(479);
     $779 = __THREW__; __THREW__ = 0;
     $780 = $779&1;
     if (!($780)) {
      // unreachable;
     }
     $781 = ___cxa_find_matching_catch()|0;
     $782 = tempRet0;
     $272 = $781;
     $273 = $782;
     __THREW__ = 0;
     invoke_v(480);
     $783 = __THREW__; __THREW__ = 0;
     $784 = $783&1;
     if ($784) {
      $853 = ___cxa_find_matching_catch(0|0)|0;
      $854 = tempRet0;
      ___clang_call_terminate($853);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
   $851 = $272;
   $852 = $273;
   ___resumeException($851|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE9push_backEOS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = (($84) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = (($87) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 if ($92) {
  $93 = (($84) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$84>>2]|0;
  $96 = ($94>>>0)>($95>>>0);
  do {
   if ($96) {
    $97 = (($84) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = (($84) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($84) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($84) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = (($84) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = (($84) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
   } else {
    $44 = $84;
    $141 = $44;
    $142 = (($141) + 12|0);
    $43 = $142;
    $143 = $43;
    $42 = $143;
    $144 = $42;
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$84>>2]|0;
    $147 = $145;
    $148 = $146;
    $149 = (($147) - ($148))|0;
    $150 = (($149|0) / 4)&-1;
    $151 = $150<<1;
    HEAP32[$78>>2] = $151;
    HEAP32[$79>>2] = 1;
    $13 = $78;
    $14 = $79;
    $152 = $13;
    $153 = $14;
    ;HEAP8[$12+0>>0]=HEAP8[$15+0>>0]|0;
    $10 = $152;
    $11 = $153;
    $154 = $10;
    $155 = $11;
    $7 = $12;
    $8 = $154;
    $9 = $155;
    $156 = $8;
    $157 = HEAP32[$156>>2]|0;
    $158 = $9;
    $159 = HEAP32[$158>>2]|0;
    $160 = ($157>>>0)<($159>>>0);
    if ($160) {
     $161 = $11;
     $164 = $161;
    } else {
     $162 = $10;
     $164 = $162;
    }
    $163 = HEAP32[$164>>2]|0;
    $__c = $163;
    $165 = $__c;
    $166 = $__c;
    $167 = (($166>>>0) / 4)&-1;
    $2 = $84;
    $168 = $2;
    $169 = (($168) + 12|0);
    $1 = $169;
    $170 = $1;
    $0 = $170;
    $171 = $0;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t,$165,$167,$171);
    $172 = (($84) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $3 = $80;
    $4 = $173;
    $174 = $3;
    $175 = $4;
    HEAP32[$174>>2] = $175;
    $176 = (($84) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $5 = $83;
    $6 = $177;
    $178 = $5;
    $179 = $6;
    HEAP32[$178>>2] = $179;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$80+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$83+0>>2]|0;
    invoke_viii(477,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $180 = __THREW__; __THREW__ = 0;
    $181 = $180&1;
    if (!($181)) {
     $19 = $84;
     $20 = $__t;
     $182 = $19;
     $18 = $182;
     $183 = $18;
     $184 = HEAP32[$183>>2]|0;
     HEAP32[$__t$i3>>2] = $184;
     $185 = $20;
     $16 = $185;
     $186 = $16;
     $187 = HEAP32[$186>>2]|0;
     $188 = $19;
     HEAP32[$188>>2] = $187;
     $17 = $__t$i3;
     $189 = $17;
     $190 = HEAP32[$189>>2]|0;
     $191 = $20;
     HEAP32[$191>>2] = $190;
     $192 = (($84) + 4|0);
     $193 = (($__t) + 4|0);
     $24 = $192;
     $25 = $193;
     $194 = $24;
     $23 = $194;
     $195 = $23;
     $196 = HEAP32[$195>>2]|0;
     HEAP32[$__t$i2>>2] = $196;
     $197 = $25;
     $21 = $197;
     $198 = $21;
     $199 = HEAP32[$198>>2]|0;
     $200 = $24;
     HEAP32[$200>>2] = $199;
     $22 = $__t$i2;
     $201 = $22;
     $202 = HEAP32[$201>>2]|0;
     $203 = $25;
     HEAP32[$203>>2] = $202;
     $204 = (($84) + 8|0);
     $205 = (($__t) + 8|0);
     $29 = $204;
     $30 = $205;
     $206 = $29;
     $28 = $206;
     $207 = $28;
     $208 = HEAP32[$207>>2]|0;
     HEAP32[$__t$i1>>2] = $208;
     $209 = $30;
     $26 = $209;
     $210 = $26;
     $211 = HEAP32[$210>>2]|0;
     $212 = $29;
     HEAP32[$212>>2] = $211;
     $27 = $__t$i1;
     $213 = $27;
     $214 = HEAP32[$213>>2]|0;
     $215 = $30;
     HEAP32[$215>>2] = $214;
     $33 = $84;
     $216 = $33;
     $217 = (($216) + 12|0);
     $32 = $217;
     $218 = $32;
     $31 = $218;
     $219 = $31;
     $36 = $__t;
     $220 = $36;
     $221 = (($220) + 12|0);
     $35 = $221;
     $222 = $35;
     $34 = $222;
     $223 = $34;
     $40 = $219;
     $41 = $223;
     $224 = $40;
     $39 = $224;
     $225 = $39;
     $226 = HEAP32[$225>>2]|0;
     HEAP32[$__t$i>>2] = $226;
     $227 = $41;
     $37 = $227;
     $228 = $37;
     $229 = HEAP32[$228>>2]|0;
     $230 = $40;
     HEAP32[$230>>2] = $229;
     $38 = $__t$i;
     $231 = $38;
     $232 = HEAP32[$231>>2]|0;
     $233 = $41;
     HEAP32[$233>>2] = $232;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
     break;
    }
    $234 = ___cxa_find_matching_catch()|0;
    $235 = tempRet0;
    $81 = $234;
    $82 = $235;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
    $261 = $81;
    $262 = $82;
    ___resumeException($261|0);
    // unreachable;
   }
  } while(0);
 }
 $56 = $84;
 $236 = $56;
 $237 = (($236) + 12|0);
 $55 = $237;
 $238 = $55;
 $54 = $238;
 $239 = $54;
 $240 = (($84) + 8|0);
 $241 = HEAP32[$240>>2]|0;
 $57 = $241;
 $242 = $57;
 $243 = $77;
 $58 = $243;
 $244 = $58;
 $69 = $239;
 $70 = $242;
 $71 = $244;
 $245 = $69;
 $246 = $70;
 $247 = $71;
 $68 = $247;
 $248 = $68;
 ;HEAP8[$67+0>>0]=HEAP8[$72+0>>0]|0;
 $64 = $245;
 $65 = $246;
 $66 = $248;
 $249 = $64;
 $250 = $65;
 $251 = $66;
 $63 = $251;
 $252 = $63;
 $60 = $249;
 $61 = $250;
 $62 = $252;
 $253 = $61;
 $254 = ($253|0)==(0|0);
 if ($254) {
  $258 = (($84) + 8|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + 4|0);
  HEAP32[$258>>2] = $260;
  STACKTOP = sp;return;
 }
 $255 = $62;
 $59 = $255;
 $256 = $59;
 $257 = HEAP32[$256>>2]|0;
 HEAP32[$253>>2] = $257;
 $258 = (($84) + 8|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = (($259) + 4|0);
 HEAP32[$258>>2] = $260;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontEOS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 396|0;
 $$byval_copy = sp + 392|0;
 $8 = sp + 8|0;
 $11 = sp + 401|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $70 = sp;
 $75 = sp + 400|0;
 $81 = sp + 52|0;
 $82 = sp + 48|0;
 $__t = sp + 28|0;
 $83 = sp + 24|0;
 $86 = sp + 12|0;
 $79 = $this;
 $80 = $__x;
 $87 = $79;
 $88 = (($87) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$87>>2]|0;
 $91 = ($89|0)==($90|0);
 if ($91) {
  $92 = (($87) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $78 = $87;
  $94 = $78;
  $95 = (($94) + 12|0);
  $77 = $95;
  $96 = $77;
  $76 = $96;
  $97 = $76;
  $98 = HEAP32[$97>>2]|0;
  $99 = ($93>>>0)<($98>>>0);
  do {
   if ($99) {
    $56 = $87;
    $100 = $56;
    $101 = (($100) + 12|0);
    $55 = $101;
    $102 = $55;
    $54 = $102;
    $103 = $54;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($87) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = (($109|0) / 4)&-1;
    $__d = $110;
    $111 = $__d;
    $112 = (($111) + 1)|0;
    $113 = (($112|0) / 2)&-1;
    $__d = $113;
    $114 = (($87) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($87) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($87) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $__d;
    $121 = (($119) + ($120<<2)|0);
    $51 = $115;
    $52 = $117;
    $53 = $121;
    $122 = $51;
    $50 = $122;
    $123 = $50;
    $124 = $52;
    $45 = $124;
    $125 = $45;
    $126 = $53;
    $46 = $126;
    $127 = $46;
    $47 = $123;
    $48 = $125;
    $49 = $127;
    $128 = $48;
    $129 = $47;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $__n$i$i = $133;
    $134 = $__n$i$i;
    $135 = $49;
    $136 = (0 - ($134))|0;
    $137 = (($135) + ($136<<2)|0);
    $49 = $137;
    $138 = $49;
    $139 = $47;
    $140 = $__n$i$i;
    $141 = $140<<2;
    _memmove(($138|0),($139|0),($141|0))|0;
    $142 = $49;
    $143 = (($87) + 4|0);
    HEAP32[$143>>2] = $142;
    $144 = $__d;
    $145 = (($87) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($144<<2)|0);
    HEAP32[$145>>2] = $147;
   } else {
    $18 = $87;
    $148 = $18;
    $149 = (($148) + 12|0);
    $17 = $149;
    $150 = $17;
    $16 = $150;
    $151 = $16;
    $152 = HEAP32[$151>>2]|0;
    $153 = HEAP32[$87>>2]|0;
    $154 = $152;
    $155 = $153;
    $156 = (($154) - ($155))|0;
    $157 = (($156|0) / 4)&-1;
    $158 = $157<<1;
    HEAP32[$81>>2] = $158;
    HEAP32[$82>>2] = 1;
    $9 = $81;
    $10 = $82;
    $159 = $9;
    $160 = $10;
    ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
    $6 = $159;
    $7 = $160;
    $161 = $6;
    $162 = $7;
    $3 = $8;
    $4 = $161;
    $5 = $162;
    $163 = $4;
    $164 = HEAP32[$163>>2]|0;
    $165 = $5;
    $166 = HEAP32[$165>>2]|0;
    $167 = ($164>>>0)<($166>>>0);
    if ($167) {
     $168 = $7;
     $171 = $168;
    } else {
     $169 = $6;
     $171 = $169;
    }
    $170 = HEAP32[$171>>2]|0;
    $__c = $170;
    $172 = $__c;
    $173 = $__c;
    $174 = (($173) + 3)|0;
    $175 = (($174>>>0) / 4)&-1;
    $2 = $87;
    $176 = $2;
    $177 = (($176) + 12|0);
    $1 = $177;
    $178 = $1;
    $0 = $178;
    $179 = $0;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t,$172,$175,$179);
    $180 = (($87) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $12 = $83;
    $13 = $181;
    $182 = $12;
    $183 = $13;
    HEAP32[$182>>2] = $183;
    $184 = (($87) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $14 = $86;
    $15 = $185;
    $186 = $14;
    $187 = $15;
    HEAP32[$186>>2] = $187;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$83+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$86+0>>2]|0;
    invoke_viii(477,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $188 = __THREW__; __THREW__ = 0;
    $189 = $188&1;
    if (!($189)) {
     $22 = $87;
     $23 = $__t;
     $190 = $22;
     $21 = $190;
     $191 = $21;
     $192 = HEAP32[$191>>2]|0;
     HEAP32[$__t$i3>>2] = $192;
     $193 = $23;
     $19 = $193;
     $194 = $19;
     $195 = HEAP32[$194>>2]|0;
     $196 = $22;
     HEAP32[$196>>2] = $195;
     $20 = $__t$i3;
     $197 = $20;
     $198 = HEAP32[$197>>2]|0;
     $199 = $23;
     HEAP32[$199>>2] = $198;
     $200 = (($87) + 4|0);
     $201 = (($__t) + 4|0);
     $27 = $200;
     $28 = $201;
     $202 = $27;
     $26 = $202;
     $203 = $26;
     $204 = HEAP32[$203>>2]|0;
     HEAP32[$__t$i2>>2] = $204;
     $205 = $28;
     $24 = $205;
     $206 = $24;
     $207 = HEAP32[$206>>2]|0;
     $208 = $27;
     HEAP32[$208>>2] = $207;
     $25 = $__t$i2;
     $209 = $25;
     $210 = HEAP32[$209>>2]|0;
     $211 = $28;
     HEAP32[$211>>2] = $210;
     $212 = (($87) + 8|0);
     $213 = (($__t) + 8|0);
     $32 = $212;
     $33 = $213;
     $214 = $32;
     $31 = $214;
     $215 = $31;
     $216 = HEAP32[$215>>2]|0;
     HEAP32[$__t$i1>>2] = $216;
     $217 = $33;
     $29 = $217;
     $218 = $29;
     $219 = HEAP32[$218>>2]|0;
     $220 = $32;
     HEAP32[$220>>2] = $219;
     $30 = $__t$i1;
     $221 = $30;
     $222 = HEAP32[$221>>2]|0;
     $223 = $33;
     HEAP32[$223>>2] = $222;
     $36 = $87;
     $224 = $36;
     $225 = (($224) + 12|0);
     $35 = $225;
     $226 = $35;
     $34 = $226;
     $227 = $34;
     $39 = $__t;
     $228 = $39;
     $229 = (($228) + 12|0);
     $38 = $229;
     $230 = $38;
     $37 = $230;
     $231 = $37;
     $43 = $227;
     $44 = $231;
     $232 = $43;
     $42 = $232;
     $233 = $42;
     $234 = HEAP32[$233>>2]|0;
     HEAP32[$__t$i>>2] = $234;
     $235 = $44;
     $40 = $235;
     $236 = $40;
     $237 = HEAP32[$236>>2]|0;
     $238 = $43;
     HEAP32[$238>>2] = $237;
     $41 = $__t$i;
     $239 = $41;
     $240 = HEAP32[$239>>2]|0;
     $241 = $44;
     HEAP32[$241>>2] = $240;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
     break;
    }
    $242 = ___cxa_find_matching_catch()|0;
    $243 = tempRet0;
    $84 = $242;
    $85 = $243;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
    $270 = $84;
    $271 = $85;
    ___resumeException($270|0);
    // unreachable;
   }
  } while(0);
 }
 $59 = $87;
 $244 = $59;
 $245 = (($244) + 12|0);
 $58 = $245;
 $246 = $58;
 $57 = $246;
 $247 = $57;
 $248 = (($87) + 4|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (($249) + -4|0);
 $60 = $250;
 $251 = $60;
 $252 = $80;
 $61 = $252;
 $253 = $61;
 $72 = $247;
 $73 = $251;
 $74 = $253;
 $254 = $72;
 $255 = $73;
 $256 = $74;
 $71 = $256;
 $257 = $71;
 ;HEAP8[$70+0>>0]=HEAP8[$75+0>>0]|0;
 $67 = $254;
 $68 = $255;
 $69 = $257;
 $258 = $67;
 $259 = $68;
 $260 = $69;
 $66 = $260;
 $261 = $66;
 $63 = $258;
 $64 = $259;
 $65 = $261;
 $262 = $64;
 $263 = ($262|0)==(0|0);
 if ($263) {
  $267 = (($87) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + -4|0);
  HEAP32[$267>>2] = $269;
  STACKTOP = sp;return;
 }
 $264 = $65;
 $62 = $264;
 $265 = $62;
 $266 = HEAP32[$265>>2]|0;
 HEAP32[$262>>2] = $266;
 $267 = (($87) + 4|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = (($268) + -4|0);
 HEAP32[$267>>2] = $269;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE9push_backEOS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = (($84) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = (($87) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 if ($92) {
  $93 = (($84) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$84>>2]|0;
  $96 = ($94>>>0)>($95>>>0);
  do {
   if ($96) {
    $97 = (($84) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = (($84) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($84) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($84) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = (($84) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = (($84) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
   } else {
    $44 = $84;
    $141 = $44;
    $142 = (($141) + 12|0);
    $43 = $142;
    $143 = $43;
    $42 = $143;
    $144 = $42;
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$84>>2]|0;
    $147 = $145;
    $148 = $146;
    $149 = (($147) - ($148))|0;
    $150 = (($149|0) / 4)&-1;
    $151 = $150<<1;
    HEAP32[$78>>2] = $151;
    HEAP32[$79>>2] = 1;
    $13 = $78;
    $14 = $79;
    $152 = $13;
    $153 = $14;
    ;HEAP8[$12+0>>0]=HEAP8[$15+0>>0]|0;
    $10 = $152;
    $11 = $153;
    $154 = $10;
    $155 = $11;
    $7 = $12;
    $8 = $154;
    $9 = $155;
    $156 = $8;
    $157 = HEAP32[$156>>2]|0;
    $158 = $9;
    $159 = HEAP32[$158>>2]|0;
    $160 = ($157>>>0)<($159>>>0);
    if ($160) {
     $161 = $11;
     $164 = $161;
    } else {
     $162 = $10;
     $164 = $162;
    }
    $163 = HEAP32[$164>>2]|0;
    $__c = $163;
    $165 = $__c;
    $166 = $__c;
    $167 = (($166>>>0) / 4)&-1;
    $2 = $84;
    $168 = $2;
    $169 = (($168) + 12|0);
    $1 = $169;
    $170 = $1;
    $0 = $170;
    $171 = $0;
    $172 = (($171) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t,$165,$167,$173);
    $174 = (($84) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $3 = $80;
    $4 = $175;
    $176 = $3;
    $177 = $4;
    HEAP32[$176>>2] = $177;
    $178 = (($84) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $5 = $83;
    $6 = $179;
    $180 = $5;
    $181 = $6;
    HEAP32[$180>>2] = $181;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$80+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$83+0>>2]|0;
    invoke_viii(477,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $182 = __THREW__; __THREW__ = 0;
    $183 = $182&1;
    if (!($183)) {
     $19 = $84;
     $20 = $__t;
     $184 = $19;
     $18 = $184;
     $185 = $18;
     $186 = HEAP32[$185>>2]|0;
     HEAP32[$__t$i3>>2] = $186;
     $187 = $20;
     $16 = $187;
     $188 = $16;
     $189 = HEAP32[$188>>2]|0;
     $190 = $19;
     HEAP32[$190>>2] = $189;
     $17 = $__t$i3;
     $191 = $17;
     $192 = HEAP32[$191>>2]|0;
     $193 = $20;
     HEAP32[$193>>2] = $192;
     $194 = (($84) + 4|0);
     $195 = (($__t) + 4|0);
     $24 = $194;
     $25 = $195;
     $196 = $24;
     $23 = $196;
     $197 = $23;
     $198 = HEAP32[$197>>2]|0;
     HEAP32[$__t$i2>>2] = $198;
     $199 = $25;
     $21 = $199;
     $200 = $21;
     $201 = HEAP32[$200>>2]|0;
     $202 = $24;
     HEAP32[$202>>2] = $201;
     $22 = $__t$i2;
     $203 = $22;
     $204 = HEAP32[$203>>2]|0;
     $205 = $25;
     HEAP32[$205>>2] = $204;
     $206 = (($84) + 8|0);
     $207 = (($__t) + 8|0);
     $29 = $206;
     $30 = $207;
     $208 = $29;
     $28 = $208;
     $209 = $28;
     $210 = HEAP32[$209>>2]|0;
     HEAP32[$__t$i1>>2] = $210;
     $211 = $30;
     $26 = $211;
     $212 = $26;
     $213 = HEAP32[$212>>2]|0;
     $214 = $29;
     HEAP32[$214>>2] = $213;
     $27 = $__t$i1;
     $215 = $27;
     $216 = HEAP32[$215>>2]|0;
     $217 = $30;
     HEAP32[$217>>2] = $216;
     $33 = $84;
     $218 = $33;
     $219 = (($218) + 12|0);
     $32 = $219;
     $220 = $32;
     $31 = $220;
     $221 = $31;
     $36 = $__t;
     $222 = $36;
     $223 = (($222) + 12|0);
     $35 = $223;
     $224 = $35;
     $34 = $224;
     $225 = $34;
     $40 = $221;
     $41 = $225;
     $226 = $40;
     $39 = $226;
     $227 = $39;
     $228 = HEAP32[$227>>2]|0;
     HEAP32[$__t$i>>2] = $228;
     $229 = $41;
     $37 = $229;
     $230 = $37;
     $231 = HEAP32[$230>>2]|0;
     $232 = $40;
     HEAP32[$232>>2] = $231;
     $38 = $__t$i;
     $233 = $38;
     $234 = HEAP32[$233>>2]|0;
     $235 = $41;
     HEAP32[$235>>2] = $234;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
     break;
    }
    $236 = ___cxa_find_matching_catch()|0;
    $237 = tempRet0;
    $81 = $236;
    $82 = $237;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
    $265 = $81;
    $266 = $82;
    ___resumeException($265|0);
    // unreachable;
   }
  } while(0);
 }
 $56 = $84;
 $238 = $56;
 $239 = (($238) + 12|0);
 $55 = $239;
 $240 = $55;
 $54 = $240;
 $241 = $54;
 $242 = (($241) + 4|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = (($84) + 8|0);
 $245 = HEAP32[$244>>2]|0;
 $57 = $245;
 $246 = $57;
 $247 = $77;
 $58 = $247;
 $248 = $58;
 $69 = $243;
 $70 = $246;
 $71 = $248;
 $249 = $69;
 $250 = $70;
 $251 = $71;
 $68 = $251;
 $252 = $68;
 ;HEAP8[$67+0>>0]=HEAP8[$72+0>>0]|0;
 $64 = $249;
 $65 = $250;
 $66 = $252;
 $253 = $64;
 $254 = $65;
 $255 = $66;
 $63 = $255;
 $256 = $63;
 $60 = $253;
 $61 = $254;
 $62 = $256;
 $257 = $61;
 $258 = ($257|0)==(0|0);
 if ($258) {
  $262 = (($84) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + 4|0);
  HEAP32[$262>>2] = $264;
  STACKTOP = sp;return;
 }
 $259 = $62;
 $59 = $259;
 $260 = $59;
 $261 = HEAP32[$260>>2]|0;
 HEAP32[$257>>2] = $261;
 $262 = (($84) + 8|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 4|0);
 HEAP32[$262>>2] = $264;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE10push_frontERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 392|0;
 $$byval_copy = sp + 388|0;
 $8 = sp + 8|0;
 $11 = sp + 397|0;
 $__t$i3 = sp + 296|0;
 $__t$i2 = sp + 272|0;
 $__t$i1 = sp + 248|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 396|0;
 $80 = sp + 52|0;
 $81 = sp + 48|0;
 $__t = sp + 28|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = (($86) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 if ($90) {
  $91 = (($86) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $77 = $86;
  $93 = $77;
  $94 = (($93) + 12|0);
  $76 = $94;
  $95 = $76;
  $75 = $95;
  $96 = $75;
  $97 = HEAP32[$96>>2]|0;
  $98 = ($92>>>0)<($97>>>0);
  do {
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = (($99) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($86) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = (($86) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($86) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($86) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = (($86) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = (($86) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
   } else {
    $18 = $86;
    $147 = $18;
    $148 = (($147) + 12|0);
    $17 = $148;
    $149 = $17;
    $16 = $149;
    $150 = $16;
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$86>>2]|0;
    $153 = $151;
    $154 = $152;
    $155 = (($153) - ($154))|0;
    $156 = (($155|0) / 4)&-1;
    $157 = $156<<1;
    HEAP32[$80>>2] = $157;
    HEAP32[$81>>2] = 1;
    $9 = $80;
    $10 = $81;
    $158 = $9;
    $159 = $10;
    ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
    $6 = $158;
    $7 = $159;
    $160 = $6;
    $161 = $7;
    $3 = $8;
    $4 = $160;
    $5 = $161;
    $162 = $4;
    $163 = HEAP32[$162>>2]|0;
    $164 = $5;
    $165 = HEAP32[$164>>2]|0;
    $166 = ($163>>>0)<($165>>>0);
    if ($166) {
     $167 = $7;
     $170 = $167;
    } else {
     $168 = $6;
     $170 = $168;
    }
    $169 = HEAP32[$170>>2]|0;
    $__c = $169;
    $171 = $__c;
    $172 = $__c;
    $173 = (($172) + 3)|0;
    $174 = (($173>>>0) / 4)&-1;
    $2 = $86;
    $175 = $2;
    $176 = (($175) + 12|0);
    $1 = $176;
    $177 = $1;
    $0 = $177;
    $178 = $0;
    $179 = (($178) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t,$171,$174,$180);
    $181 = (($86) + 4|0);
    $182 = HEAP32[$181>>2]|0;
    $12 = $82;
    $13 = $182;
    $183 = $12;
    $184 = $13;
    HEAP32[$183>>2] = $184;
    $185 = (($86) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    $14 = $85;
    $15 = $186;
    $187 = $14;
    $188 = $15;
    HEAP32[$187>>2] = $188;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$82+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$85+0>>2]|0;
    invoke_viii(477,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if (!($190)) {
     $22 = $86;
     $23 = $__t;
     $191 = $22;
     $21 = $191;
     $192 = $21;
     $193 = HEAP32[$192>>2]|0;
     HEAP32[$__t$i3>>2] = $193;
     $194 = $23;
     $19 = $194;
     $195 = $19;
     $196 = HEAP32[$195>>2]|0;
     $197 = $22;
     HEAP32[$197>>2] = $196;
     $20 = $__t$i3;
     $198 = $20;
     $199 = HEAP32[$198>>2]|0;
     $200 = $23;
     HEAP32[$200>>2] = $199;
     $201 = (($86) + 4|0);
     $202 = (($__t) + 4|0);
     $27 = $201;
     $28 = $202;
     $203 = $27;
     $26 = $203;
     $204 = $26;
     $205 = HEAP32[$204>>2]|0;
     HEAP32[$__t$i2>>2] = $205;
     $206 = $28;
     $24 = $206;
     $207 = $24;
     $208 = HEAP32[$207>>2]|0;
     $209 = $27;
     HEAP32[$209>>2] = $208;
     $25 = $__t$i2;
     $210 = $25;
     $211 = HEAP32[$210>>2]|0;
     $212 = $28;
     HEAP32[$212>>2] = $211;
     $213 = (($86) + 8|0);
     $214 = (($__t) + 8|0);
     $32 = $213;
     $33 = $214;
     $215 = $32;
     $31 = $215;
     $216 = $31;
     $217 = HEAP32[$216>>2]|0;
     HEAP32[$__t$i1>>2] = $217;
     $218 = $33;
     $29 = $218;
     $219 = $29;
     $220 = HEAP32[$219>>2]|0;
     $221 = $32;
     HEAP32[$221>>2] = $220;
     $30 = $__t$i1;
     $222 = $30;
     $223 = HEAP32[$222>>2]|0;
     $224 = $33;
     HEAP32[$224>>2] = $223;
     $36 = $86;
     $225 = $36;
     $226 = (($225) + 12|0);
     $35 = $226;
     $227 = $35;
     $34 = $227;
     $228 = $34;
     $39 = $__t;
     $229 = $39;
     $230 = (($229) + 12|0);
     $38 = $230;
     $231 = $38;
     $37 = $231;
     $232 = $37;
     $43 = $228;
     $44 = $232;
     $233 = $43;
     $42 = $233;
     $234 = $42;
     $235 = HEAP32[$234>>2]|0;
     HEAP32[$__t$i>>2] = $235;
     $236 = $44;
     $40 = $236;
     $237 = $40;
     $238 = HEAP32[$237>>2]|0;
     $239 = $43;
     HEAP32[$239>>2] = $238;
     $41 = $__t$i;
     $240 = $41;
     $241 = HEAP32[$240>>2]|0;
     $242 = $44;
     HEAP32[$242>>2] = $241;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
     break;
    }
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $83 = $243;
    $84 = $244;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
    $272 = $83;
    $273 = $84;
    ___resumeException($272|0);
    // unreachable;
   }
  } while(0);
 }
 $59 = $86;
 $245 = $59;
 $246 = (($245) + 12|0);
 $58 = $246;
 $247 = $58;
 $57 = $247;
 $248 = $57;
 $249 = (($248) + 4|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($86) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($252) + -4|0);
 $60 = $253;
 $254 = $60;
 $255 = $79;
 $71 = $250;
 $72 = $254;
 $73 = $255;
 $256 = $71;
 $257 = $72;
 $258 = $73;
 $70 = $258;
 $259 = $70;
 ;HEAP8[$69+0>>0]=HEAP8[$74+0>>0]|0;
 $66 = $256;
 $67 = $257;
 $68 = $259;
 $260 = $66;
 $261 = $67;
 $262 = $68;
 $65 = $262;
 $263 = $65;
 $62 = $260;
 $63 = $261;
 $64 = $263;
 $264 = $63;
 $265 = ($264|0)==(0|0);
 if ($265) {
  $269 = (($86) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($270) + -4|0);
  HEAP32[$269>>2] = $271;
  STACKTOP = sp;return;
 }
 $266 = $64;
 $61 = $266;
 $267 = $61;
 $268 = HEAP32[$267>>2]|0;
 HEAP32[$264>>2] = $268;
 $269 = (($86) + 4|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (($270) + -4|0);
 HEAP32[$269>>2] = $271;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE18__construct_at_endINS_13move_iteratorIPS6_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESG_SG_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $19 = sp + 100|0;
 $24 = $this;
 $25 = $24;
 $23 = $25;
 $26 = $23;
 $27 = (($26) + 12|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $__a = $31;
 while(1) {
  $2 = $__first;
  $3 = $__last;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $0 = $35;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $__a;
  $40 = (($25) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $4 = $41;
  $42 = $4;
  $5 = $__first;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $16 = $39;
  $17 = $42;
  $18 = $44;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $15 = $47;
  $48 = $15;
  ;HEAP8[$14+0>>0]=HEAP8[$19+0>>0]|0;
  $11 = $45;
  $12 = $46;
  $13 = $48;
  $49 = $11;
  $50 = $12;
  $51 = $13;
  $10 = $51;
  $52 = $10;
  $7 = $49;
  $8 = $50;
  $9 = $52;
  $53 = $8;
  $54 = ($53|0)==(0|0);
  if (!($54)) {
   $55 = $9;
   $6 = $55;
   $56 = $6;
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$53>>2] = $57;
  }
  $58 = (($25) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 4|0);
  HEAP32[$58>>2] = $60;
  $20 = $__first;
  $61 = $20;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 4|0);
  HEAP32[$61>>2] = $63;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $16 = $14;
 $17 = (__ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($15)|0);
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($15);
  // unreachable;
 } else {
  $19 = $14;
  $12 = $19;
  $20 = $12;
  $21 = (($20) - 1)|0;
  $22 = (($21>>>0) / 32)&-1;
  $23 = (($22) + 1)|0;
  $14 = $23;
  $2 = $15;
  $24 = $2;
  $25 = (($24) + 8|0);
  $1 = $25;
  $26 = $1;
  $0 = $26;
  $27 = $0;
  $28 = $14;
  $7 = $27;
  $8 = $28;
  $29 = $7;
  $30 = $8;
  $4 = $29;
  $5 = $30;
  $6 = 0;
  $31 = $5;
  $32 = $31<<2;
  $3 = $32;
  $33 = $3;
  $34 = (__Znwj($33)|0);
  HEAP32[$15>>2] = $34;
  $35 = (($15) + 4|0);
  HEAP32[$35>>2] = 0;
  $36 = $14;
  $11 = $15;
  $37 = $11;
  $38 = (($37) + 8|0);
  $10 = $38;
  $39 = $10;
  $9 = $39;
  $40 = $9;
  HEAP32[$40>>2] = $36;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb1ELj0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $__old_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 248|0;
 $$byval_copy2 = sp + 240|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 224|0;
 $9 = sp + 176|0;
 $10 = sp + 168|0;
 $11 = sp + 160|0;
 $12 = sp + 152|0;
 $13 = sp + 144|0;
 $14 = sp + 136|0;
 $15 = sp + 48|0;
 $16 = sp + 40|0;
 $19 = sp + 32|0;
 $20 = sp + 24|0;
 $21 = sp + 16|0;
 $22 = sp + 120|0;
 $23 = sp + 112|0;
 $24 = sp + 256|0;
 $25 = sp + 8|0;
 $26 = sp;
 $28 = sp + 96|0;
 $29 = sp + 88|0;
 $30 = sp + 80|0;
 $31 = sp + 72|0;
 $32 = sp + 64|0;
 $33 = sp + 56|0;
 $27 = $this;
 $34 = $27;
 $35 = (($34) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $__old_size = $36;
 ;HEAP32[$28+0>>2]=HEAP32[$__first+0>>2]|0;HEAP32[$28+4>>2]=HEAP32[$__first+4>>2]|0;
 ;HEAP32[$29+0>>2]=HEAP32[$__last+0>>2]|0;HEAP32[$29+4>>2]=HEAP32[$__last+4>>2]|0;
 ;HEAP8[$25+0>>0]=HEAP8[$29+0>>0]|0;HEAP8[$25+1>>0]=HEAP8[$29+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$29+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$29+3>>0]|0;HEAP8[$25+4>>0]=HEAP8[$29+4>>0]|0;HEAP8[$25+5>>0]=HEAP8[$29+5>>0]|0;HEAP8[$25+6>>0]=HEAP8[$29+6>>0]|0;HEAP8[$25+7>>0]=HEAP8[$29+7>>0]|0;
 ;HEAP8[$26+0>>0]=HEAP8[$28+0>>0]|0;HEAP8[$26+1>>0]=HEAP8[$28+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$28+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$28+3>>0]|0;HEAP8[$26+4>>0]=HEAP8[$28+4>>0]|0;HEAP8[$26+5>>0]=HEAP8[$28+5>>0]|0;HEAP8[$26+6>>0]=HEAP8[$28+6>>0]|0;HEAP8[$26+7>>0]=HEAP8[$28+7>>0]|0;
 ;HEAP32[$22+0>>2]=HEAP32[$26+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$26+4>>2]|0;
 ;HEAP32[$23+0>>2]=HEAP32[$25+0>>2]|0;HEAP32[$23+4>>2]=HEAP32[$25+4>>2]|0;
 ;HEAP8[$19+0>>0]=HEAP8[$24+0>>0]|0;
 ;HEAP8[$20+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$23+3>>0]|0;HEAP8[$20+4>>0]=HEAP8[$23+4>>0]|0;HEAP8[$20+5>>0]=HEAP8[$23+5>>0]|0;HEAP8[$20+6>>0]=HEAP8[$23+6>>0]|0;HEAP8[$20+7>>0]=HEAP8[$23+7>>0]|0;
 ;HEAP8[$21+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$21+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$21+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$21+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$21+7>>0]=HEAP8[$22+7>>0]|0;
 $17 = $20;
 $18 = $21;
 $37 = $17;
 $38 = HEAP32[$37>>2]|0;
 $39 = $18;
 $40 = HEAP32[$39>>2]|0;
 $41 = $38;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = $44<<5;
 $46 = $17;
 $47 = (($46) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($45) + ($48))|0;
 $50 = $18;
 $51 = (($50) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($49) - ($52))|0;
 $54 = (($34) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + ($53))|0;
 HEAP32[$54>>2] = $56;
 ;HEAP32[$30+0>>2]=HEAP32[$__first+0>>2]|0;HEAP32[$30+4>>2]=HEAP32[$__first+4>>2]|0;
 ;HEAP32[$31+0>>2]=HEAP32[$__last+0>>2]|0;HEAP32[$31+4>>2]=HEAP32[$__last+4>>2]|0;
 $57 = $__old_size;
 $3 = $34;
 $4 = $57;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = $4;
 $61 = (($60>>>0) / 32)&-1;
 $62 = (($59) + ($61<<2)|0);
 $63 = $4;
 $64 = (($63>>>0) % 32)&-1;
 $0 = $32;
 $1 = $62;
 $2 = $64;
 $65 = $0;
 $66 = $1;
 HEAP32[$65>>2] = $66;
 $67 = (($65) + 4|0);
 $68 = $2;
 HEAP32[$67>>2] = $68;
 ;HEAP8[$15+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$15+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$31+3>>0]|0;HEAP8[$15+4>>0]=HEAP8[$31+4>>0]|0;HEAP8[$15+5>>0]=HEAP8[$31+5>>0]|0;HEAP8[$15+6>>0]=HEAP8[$31+6>>0]|0;HEAP8[$15+7>>0]=HEAP8[$31+7>>0]|0;
 ;HEAP8[$16+0>>0]=HEAP8[$30+0>>0]|0;HEAP8[$16+1>>0]=HEAP8[$30+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$30+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$30+3>>0]|0;HEAP8[$16+4>>0]=HEAP8[$30+4>>0]|0;HEAP8[$16+5>>0]=HEAP8[$30+5>>0]|0;HEAP8[$16+6>>0]=HEAP8[$30+6>>0]|0;HEAP8[$16+7>>0]=HEAP8[$30+7>>0]|0;
 $69 = (($16) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($32) + 4|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($70|0)==($72|0);
 if ($73) {
  ;HEAP32[$9+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$16+4>>2]|0;
  ;HEAP32[$10+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$15+4>>2]|0;
  $7 = $11;
  $8 = $32;
  $74 = $7;
  $75 = $8;
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$74>>2] = $76;
  $77 = (($74) + 4|0);
  $78 = $8;
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  HEAP32[$77>>2] = $80;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$9+4>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$10+4>>2]|0;
  __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($33,$$byval_copy,$$byval_copy1,$11);
  STACKTOP = sp;return;
 } else {
  ;HEAP32[$12+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$12+4>>2]=HEAP32[$16+4>>2]|0;
  ;HEAP32[$13+0>>2]=HEAP32[$15+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$15+4>>2]|0;
  $5 = $14;
  $6 = $32;
  $81 = $5;
  $82 = $6;
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$81>>2] = $83;
  $84 = (($81) + 4|0);
  $85 = $6;
  $86 = (($85) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  HEAP32[$84>>2] = $87;
  ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$12+4>>2]|0;
  ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$13+0>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$13+4>>2]|0;
  __ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($33,$$byval_copy2,$$byval_copy3,$14);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b = 0;
 var $__b2 = 0, $__clz = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__n = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 92|0;
 $__n = sp + 36|0;
 $15 = sp + 24|0;
 $13 = $__last;
 $14 = $__first;
 $16 = $13;
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = HEAP32[$18>>2]|0;
 $20 = $17;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 4)&-1;
 $24 = $23<<5;
 $25 = $13;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($24) + ($27))|0;
 $29 = $14;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) - ($31))|0;
 HEAP32[$__n>>2] = $32;
 $33 = HEAP32[$__n>>2]|0;
 $34 = ($33|0)>(0);
 if (!($34)) {
  $11 = $agg$result;
  $12 = $__result;
  $132 = $11;
  $133 = $12;
  $134 = HEAP32[$133>>2]|0;
  HEAP32[$132>>2] = $134;
  $135 = (($132) + 4|0);
  $136 = $12;
  $137 = (($136) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  HEAP32[$135>>2] = $138;
  STACKTOP = sp;return;
 }
 $35 = (($__first) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = (($__first) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (32 - ($39))|0;
  $__clz = $40;
  $41 = $__clz;
  HEAP32[$15>>2] = $41;
  $6 = $15;
  $7 = $__n;
  $42 = $6;
  $43 = $7;
  ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
  $3 = $42;
  $4 = $43;
  $44 = $4;
  $45 = $3;
  $0 = $5;
  $1 = $44;
  $2 = $45;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = $2;
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)<($49|0);
  if ($50) {
   $51 = $4;
   $54 = $51;
  } else {
   $52 = $3;
   $54 = $52;
  }
  $53 = HEAP32[$54>>2]|0;
  $__dn = $53;
  $55 = $__dn;
  $56 = HEAP32[$__n>>2]|0;
  $57 = (($56) - ($55))|0;
  HEAP32[$__n>>2] = $57;
  $58 = (($__first) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = -1 << $59;
  $61 = $__clz;
  $62 = $__dn;
  $63 = (($61) - ($62))|0;
  $64 = -1 >>> $63;
  $65 = $60 & $64;
  $__m = $65;
  $66 = HEAP32[$__first>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = $__m;
  $69 = $67 & $68;
  $__b = $69;
  $70 = $__m;
  $71 = $70 ^ -1;
  $72 = HEAP32[$__result>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & $71;
  HEAP32[$72>>2] = $74;
  $75 = $__b;
  $76 = HEAP32[$__result>>2]|0;
  $77 = HEAP32[$76>>2]|0;
  $78 = $77 | $75;
  HEAP32[$76>>2] = $78;
  $79 = $__dn;
  $80 = (($__result) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($79) + ($81))|0;
  $83 = (($82>>>0) / 32)&-1;
  $84 = HEAP32[$__result>>2]|0;
  $85 = (($84) + ($83<<2)|0);
  HEAP32[$__result>>2] = $85;
  $86 = $__dn;
  $87 = (($__result) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($86) + ($88))|0;
  $90 = (($89>>>0) % 32)&-1;
  $91 = (($__result) + 4|0);
  HEAP32[$91>>2] = $90;
  $92 = HEAP32[$__first>>2]|0;
  $93 = (($92) + 4|0);
  HEAP32[$__first>>2] = $93;
 }
 $94 = HEAP32[$__n>>2]|0;
 $95 = (($94>>>0) / 32)&-1;
 $__nw = $95;
 $96 = HEAP32[$__result>>2]|0;
 $9 = $96;
 $97 = $9;
 $98 = HEAP32[$__first>>2]|0;
 $10 = $98;
 $99 = $10;
 $100 = $__nw;
 $101 = $100<<2;
 _memmove(($97|0),($99|0),($101|0))|0;
 $102 = $__nw;
 $103 = $102<<5;
 $104 = HEAP32[$__n>>2]|0;
 $105 = (($104) - ($103))|0;
 HEAP32[$__n>>2] = $105;
 $106 = $__nw;
 $107 = HEAP32[$__result>>2]|0;
 $108 = (($107) + ($106<<2)|0);
 HEAP32[$__result>>2] = $108;
 $109 = HEAP32[$__n>>2]|0;
 $110 = ($109|0)>(0);
 if ($110) {
  $111 = $__nw;
  $112 = HEAP32[$__first>>2]|0;
  $113 = (($112) + ($111<<2)|0);
  HEAP32[$__first>>2] = $113;
  $114 = HEAP32[$__n>>2]|0;
  $115 = (32 - ($114))|0;
  $116 = -1 >>> $115;
  $__m1 = $116;
  $117 = HEAP32[$__first>>2]|0;
  $118 = HEAP32[$117>>2]|0;
  $119 = $__m1;
  $120 = $118 & $119;
  $__b2 = $120;
  $121 = $__m1;
  $122 = $121 ^ -1;
  $123 = HEAP32[$__result>>2]|0;
  $124 = HEAP32[$123>>2]|0;
  $125 = $124 & $122;
  HEAP32[$123>>2] = $125;
  $126 = $__b2;
  $127 = HEAP32[$__result>>2]|0;
  $128 = HEAP32[$127>>2]|0;
  $129 = $128 | $126;
  HEAP32[$127>>2] = $129;
  $130 = HEAP32[$__n>>2]|0;
  $131 = (($__result) + 4|0);
  HEAP32[$131>>2] = $130;
 }
 $11 = $agg$result;
 $12 = $__result;
 $132 = $11;
 $133 = $12;
 $134 = HEAP32[$133>>2]|0;
 HEAP32[$132>>2] = $134;
 $135 = (($132) + 4|0);
 $136 = $12;
 $137 = (($136) + 4|0);
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$135>>2] = $138;
 STACKTOP = sp;return;
}
function __ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_($agg$result,$__first,$__last,$__result) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__b = 0, $__b3 = 0, $__b4 = 0, $__clz_f = 0, $__clz_r = 0, $__clz_r1 = 0, $__ddn = 0, $__dn = 0, $__dn5 = 0, $__m = 0, $__m2 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 16|0;
 $8 = sp + 182|0;
 $14 = sp + 8|0;
 $17 = sp + 181|0;
 $23 = sp;
 $26 = sp + 180|0;
 $__n = sp + 76|0;
 $31 = sp + 64|0;
 $__clz_r = sp + 52|0;
 $32 = sp + 44|0;
 $33 = sp + 20|0;
 $29 = $__last;
 $30 = $__first;
 $34 = $29;
 $35 = HEAP32[$34>>2]|0;
 $36 = $30;
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 4)&-1;
 $42 = $41<<5;
 $43 = $29;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($42) + ($45))|0;
 $47 = $30;
 $48 = (($47) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($46) - ($49))|0;
 HEAP32[$__n>>2] = $50;
 $51 = HEAP32[$__n>>2]|0;
 $52 = ($51|0)>(0);
 if (!($52)) {
  $27 = $agg$result;
  $28 = $__result;
  $297 = $27;
  $298 = $28;
  $299 = HEAP32[$298>>2]|0;
  HEAP32[$297>>2] = $299;
  $300 = (($297) + 4|0);
  $301 = $28;
  $302 = (($301) + 4|0);
  $303 = HEAP32[$302>>2]|0;
  HEAP32[$300>>2] = $303;
  STACKTOP = sp;return;
 }
 $53 = (($__first) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = (($__first) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (32 - ($57))|0;
  $__clz_f = $58;
  $59 = $__clz_f;
  HEAP32[$31>>2] = $59;
  $6 = $31;
  $7 = $__n;
  $60 = $6;
  $61 = $7;
  ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
  $3 = $60;
  $4 = $61;
  $62 = $4;
  $63 = $3;
  $0 = $5;
  $1 = $62;
  $2 = $63;
  $64 = $1;
  $65 = HEAP32[$64>>2]|0;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = ($65|0)<($67|0);
  if ($68) {
   $69 = $4;
   $72 = $69;
  } else {
   $70 = $3;
   $72 = $70;
  }
  $71 = HEAP32[$72>>2]|0;
  $__dn = $71;
  $73 = $__dn;
  $74 = HEAP32[$__n>>2]|0;
  $75 = (($74) - ($73))|0;
  HEAP32[$__n>>2] = $75;
  $76 = (($__first) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = -1 << $77;
  $79 = $__clz_f;
  $80 = $__dn;
  $81 = (($79) - ($80))|0;
  $82 = -1 >>> $81;
  $83 = $78 & $82;
  $__m = $83;
  $84 = HEAP32[$__first>>2]|0;
  $85 = HEAP32[$84>>2]|0;
  $86 = $__m;
  $87 = $85 & $86;
  $__b = $87;
  $88 = (($__result) + 4|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (32 - ($89))|0;
  HEAP32[$__clz_r>>2] = $90;
  $91 = $__dn;
  HEAP32[$32>>2] = $91;
  $15 = $32;
  $16 = $__clz_r;
  $92 = $15;
  $93 = $16;
  ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
  $12 = $92;
  $13 = $93;
  $94 = $13;
  $95 = $12;
  $9 = $14;
  $10 = $94;
  $11 = $95;
  $96 = $10;
  $97 = HEAP32[$96>>2]|0;
  $98 = $11;
  $99 = HEAP32[$98>>2]|0;
  $100 = ($97>>>0)<($99>>>0);
  if ($100) {
   $101 = $13;
   $104 = $101;
  } else {
   $102 = $12;
   $104 = $102;
  }
  $103 = HEAP32[$104>>2]|0;
  $__ddn = $103;
  $105 = (($__result) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = -1 << $106;
  $108 = HEAP32[$__clz_r>>2]|0;
  $109 = $__ddn;
  $110 = (($108) - ($109))|0;
  $111 = -1 >>> $110;
  $112 = $107 & $111;
  $__m = $112;
  $113 = $__m;
  $114 = $113 ^ -1;
  $115 = HEAP32[$__result>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = $116 & $114;
  HEAP32[$115>>2] = $117;
  $118 = (($__result) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($__first) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = ($119>>>0)>($121>>>0);
  if ($122) {
   $123 = $__b;
   $124 = (($__result) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($__first) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($125) - ($127))|0;
   $129 = $123 << $128;
   $130 = HEAP32[$__result>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = $131 | $129;
   HEAP32[$130>>2] = $132;
  } else {
   $133 = $__b;
   $134 = (($__first) + 4|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($__result) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = (($135) - ($137))|0;
   $139 = $133 >>> $138;
   $140 = HEAP32[$__result>>2]|0;
   $141 = HEAP32[$140>>2]|0;
   $142 = $141 | $139;
   HEAP32[$140>>2] = $142;
  }
  $143 = $__ddn;
  $144 = (($__result) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($143) + ($145))|0;
  $147 = (($146>>>0) / 32)&-1;
  $148 = HEAP32[$__result>>2]|0;
  $149 = (($148) + ($147<<2)|0);
  HEAP32[$__result>>2] = $149;
  $150 = $__ddn;
  $151 = (($__result) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = (($150) + ($152))|0;
  $154 = (($153>>>0) % 32)&-1;
  $155 = (($__result) + 4|0);
  HEAP32[$155>>2] = $154;
  $156 = $__ddn;
  $157 = $__dn;
  $158 = (($157) - ($156))|0;
  $__dn = $158;
  $159 = $__dn;
  $160 = ($159|0)>(0);
  if ($160) {
   $161 = $__dn;
   $162 = (32 - ($161))|0;
   $163 = -1 >>> $162;
   $__m = $163;
   $164 = $__m;
   $165 = $164 ^ -1;
   $166 = HEAP32[$__result>>2]|0;
   $167 = HEAP32[$166>>2]|0;
   $168 = $167 & $165;
   HEAP32[$166>>2] = $168;
   $169 = $__b;
   $170 = (($__first) + 4|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = $__ddn;
   $173 = (($171) + ($172))|0;
   $174 = $169 >>> $173;
   $175 = HEAP32[$__result>>2]|0;
   $176 = HEAP32[$175>>2]|0;
   $177 = $176 | $174;
   HEAP32[$175>>2] = $177;
   $178 = $__dn;
   $179 = (($__result) + 4|0);
   HEAP32[$179>>2] = $178;
  }
  $180 = HEAP32[$__first>>2]|0;
  $181 = (($180) + 4|0);
  HEAP32[$__first>>2] = $181;
 }
 $182 = (($__result) + 4|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (32 - ($183))|0;
 $__clz_r1 = $184;
 $185 = (($__result) + 4|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = -1 << $186;
 $__m2 = $187;
 while(1) {
  $188 = HEAP32[$__n>>2]|0;
  $189 = ($188>>>0)>=(32);
  if (!($189)) {
   break;
  }
  $190 = HEAP32[$__first>>2]|0;
  $191 = HEAP32[$190>>2]|0;
  $__b3 = $191;
  $192 = $__m2;
  $193 = $192 ^ -1;
  $194 = HEAP32[$__result>>2]|0;
  $195 = HEAP32[$194>>2]|0;
  $196 = $195 & $193;
  HEAP32[$194>>2] = $196;
  $197 = $__b3;
  $198 = (($__result) + 4|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = $197 << $199;
  $201 = HEAP32[$__result>>2]|0;
  $202 = HEAP32[$201>>2]|0;
  $203 = $202 | $200;
  HEAP32[$201>>2] = $203;
  $204 = HEAP32[$__result>>2]|0;
  $205 = (($204) + 4|0);
  HEAP32[$__result>>2] = $205;
  $206 = $__m2;
  $207 = HEAP32[$__result>>2]|0;
  $208 = HEAP32[$207>>2]|0;
  $209 = $208 & $206;
  HEAP32[$207>>2] = $209;
  $210 = $__b3;
  $211 = $__clz_r1;
  $212 = $210 >>> $211;
  $213 = HEAP32[$__result>>2]|0;
  $214 = HEAP32[$213>>2]|0;
  $215 = $214 | $212;
  HEAP32[$213>>2] = $215;
  $216 = HEAP32[$__n>>2]|0;
  $217 = (($216) - 32)|0;
  HEAP32[$__n>>2] = $217;
  $218 = HEAP32[$__first>>2]|0;
  $219 = (($218) + 4|0);
  HEAP32[$__first>>2] = $219;
 }
 $220 = HEAP32[$__n>>2]|0;
 $221 = ($220|0)>(0);
 if ($221) {
  $222 = HEAP32[$__n>>2]|0;
  $223 = (32 - ($222))|0;
  $224 = -1 >>> $223;
  $__m2 = $224;
  $225 = HEAP32[$__first>>2]|0;
  $226 = HEAP32[$225>>2]|0;
  $227 = $__m2;
  $228 = $226 & $227;
  $__b4 = $228;
  $229 = $__clz_r1;
  HEAP32[$33>>2] = $229;
  $24 = $__n;
  $25 = $33;
  $230 = $24;
  $231 = $25;
  ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
  $21 = $230;
  $22 = $231;
  $232 = $22;
  $233 = $21;
  $18 = $23;
  $19 = $232;
  $20 = $233;
  $234 = $19;
  $235 = HEAP32[$234>>2]|0;
  $236 = $20;
  $237 = HEAP32[$236>>2]|0;
  $238 = ($235|0)<($237|0);
  if ($238) {
   $239 = $22;
   $242 = $239;
  } else {
   $240 = $21;
   $242 = $240;
  }
  $241 = HEAP32[$242>>2]|0;
  $__dn5 = $241;
  $243 = (($__result) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = -1 << $244;
  $246 = $__clz_r1;
  $247 = $__dn5;
  $248 = (($246) - ($247))|0;
  $249 = -1 >>> $248;
  $250 = $245 & $249;
  $__m2 = $250;
  $251 = $__m2;
  $252 = $251 ^ -1;
  $253 = HEAP32[$__result>>2]|0;
  $254 = HEAP32[$253>>2]|0;
  $255 = $254 & $252;
  HEAP32[$253>>2] = $255;
  $256 = $__b4;
  $257 = (($__result) + 4|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $256 << $258;
  $260 = HEAP32[$__result>>2]|0;
  $261 = HEAP32[$260>>2]|0;
  $262 = $261 | $259;
  HEAP32[$260>>2] = $262;
  $263 = $__dn5;
  $264 = (($__result) + 4|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($263) + ($265))|0;
  $267 = (($266>>>0) / 32)&-1;
  $268 = HEAP32[$__result>>2]|0;
  $269 = (($268) + ($267<<2)|0);
  HEAP32[$__result>>2] = $269;
  $270 = $__dn5;
  $271 = (($__result) + 4|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = (($270) + ($272))|0;
  $274 = (($273>>>0) % 32)&-1;
  $275 = (($__result) + 4|0);
  HEAP32[$275>>2] = $274;
  $276 = $__dn5;
  $277 = HEAP32[$__n>>2]|0;
  $278 = (($277) - ($276))|0;
  HEAP32[$__n>>2] = $278;
  $279 = HEAP32[$__n>>2]|0;
  $280 = ($279|0)>(0);
  if ($280) {
   $281 = HEAP32[$__n>>2]|0;
   $282 = (32 - ($281))|0;
   $283 = -1 >>> $282;
   $__m2 = $283;
   $284 = $__m2;
   $285 = $284 ^ -1;
   $286 = HEAP32[$__result>>2]|0;
   $287 = HEAP32[$286>>2]|0;
   $288 = $287 & $285;
   HEAP32[$286>>2] = $288;
   $289 = $__b4;
   $290 = $__dn5;
   $291 = $289 >>> $290;
   $292 = HEAP32[$__result>>2]|0;
   $293 = HEAP32[$292>>2]|0;
   $294 = $293 | $291;
   HEAP32[$292>>2] = $294;
   $295 = HEAP32[$__n>>2]|0;
   $296 = (($__result) + 4|0);
   HEAP32[$296>>2] = $295;
  }
 }
 $27 = $agg$result;
 $28 = $__result;
 $297 = $27;
 $298 = $28;
 $299 = HEAP32[$298>>2]|0;
 HEAP32[$297>>2] = $299;
 $300 = (($297) + 4|0);
 $301 = $28;
 $302 = (($301) + 4|0);
 $303 = HEAP32[$302>>2]|0;
 HEAP32[$300>>2] = $303;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIbNS_9allocatorIbEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__amax = 0, $__nmax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 48|0;
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $12 = $8;
 $13 = (($12) + 8|0);
 $7 = $13;
 $14 = $7;
 $6 = $14;
 $15 = $6;
 $3 = $15;
 $16 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $16;
 $17 = $1;
 $0 = $17;
 $__amax = 1073741823;
 $18 = (4294967295 / 2)&-1;
 $__nmax = $18;
 $19 = $__nmax;
 $20 = (($19>>>0) / 32)&-1;
 $21 = $__amax;
 $22 = ($20>>>0)<=($21>>>0);
 if ($22) {
  $23 = $__nmax;
  $9 = $23;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 } else {
  $24 = $__amax;
  $5 = $24;
  $25 = $5;
  $26 = $25<<5;
  $9 = $26;
  $27 = $9;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = (($22) + 8|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$21,1);
  $29 = $__a;
  $30 = (($21) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $14 = $31;
  $32 = $14;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = $3;
   $0 = $44;
   $45 = $0;
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$42>>2] = $46;
  }
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $47 = (($21) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 4|0);
  HEAP32[$47>>2] = $49;
  $50 = $19;
  $51 = (($50) + 4|0);
  $19 = $51;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZZN7croutes20nearest_with_ret_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEbENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $26 = sp + 8|0;
 $27 = sp;
 $28 = sp + 128|0;
 $25 = $this;
 $29 = $25;
 $30 = HEAP32[$29>>2]|0;
 $24 = $30;
 $31 = $24;
 $22 = $31;
 $23 = 0;
 $32 = $22;
 $33 = HEAP32[$32>>2]|0;
 $34 = $23;
 $35 = (($34>>>0) / 32)&-1;
 $36 = (($33) + ($35<<2)|0);
 $37 = $23;
 $38 = (($37>>>0) % 32)&-1;
 $19 = $26;
 $20 = $36;
 $21 = $38;
 $39 = $19;
 $40 = $20;
 HEAP32[$39>>2] = $40;
 $41 = (($39) + 4|0);
 $42 = $21;
 HEAP32[$41>>2] = $42;
 $43 = HEAP32[$29>>2]|0;
 $18 = $43;
 $44 = $18;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $16 = $44;
 $17 = $46;
 $47 = $16;
 $48 = HEAP32[$47>>2]|0;
 $49 = $17;
 $50 = (($49>>>0) / 32)&-1;
 $51 = (($48) + ($50<<2)|0);
 $52 = $17;
 $53 = (($52>>>0) % 32)&-1;
 $13 = $27;
 $14 = $51;
 $15 = $53;
 $54 = $13;
 $55 = $14;
 HEAP32[$54>>2] = $55;
 $56 = (($54) + 4|0);
 $57 = $15;
 HEAP32[$56>>2] = $57;
 HEAP8[$28>>0] = 1;
 $9 = $28;
 $58 = $9;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&1;
 if ($60) {
  $6 = $10;
  $7 = $26;
  $61 = $6;
  $62 = $7;
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$61>>2] = $63;
  $64 = (($61) + 4|0);
  $65 = $7;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$64>>2] = $67;
  $4 = $27;
  $5 = $26;
  $68 = $4;
  $69 = HEAP32[$68>>2]|0;
  $70 = $5;
  $71 = HEAP32[$70>>2]|0;
  $72 = $69;
  $73 = $71;
  $74 = (($72) - ($73))|0;
  $75 = (($74|0) / 4)&-1;
  $76 = $75<<5;
  $77 = $4;
  $78 = (($77) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) + ($79))|0;
  $81 = $5;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($80) - ($83))|0;
  $85 = (__ZNSt3__117__count_bool_trueINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($10,$84)|0);
  $8 = $85;
  $111 = $8;
  $112 = (($29) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $12 = $113;
  $114 = $12;
  $115 = HEAP32[$114>>2]|0;
  $116 = (__ZNK7croutes5ndataIdE11nodes_countEv($115)|0);
  $117 = (($116) - 1)|0;
  $118 = ($111|0)==($117|0);
  STACKTOP = sp;return ($118|0);
 } else {
  $0 = $11;
  $1 = $26;
  $86 = $0;
  $87 = $1;
  $88 = HEAP32[$87>>2]|0;
  HEAP32[$86>>2] = $88;
  $89 = (($86) + 4|0);
  $90 = $1;
  $91 = (($90) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  HEAP32[$89>>2] = $92;
  $2 = $27;
  $3 = $26;
  $93 = $2;
  $94 = HEAP32[$93>>2]|0;
  $95 = $3;
  $96 = HEAP32[$95>>2]|0;
  $97 = $94;
  $98 = $96;
  $99 = (($97) - ($98))|0;
  $100 = (($99|0) / 4)&-1;
  $101 = $100<<5;
  $102 = $2;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) + ($104))|0;
  $106 = $3;
  $107 = (($106) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($105) - ($108))|0;
  $110 = (__ZNSt3__118__count_bool_falseINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($11,$109)|0);
  $8 = $110;
  $111 = $8;
  $112 = (($29) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $12 = $113;
  $114 = $12;
  $115 = HEAP32[$114>>2]|0;
  $116 = (__ZNK7croutes5ndataIdE11nodes_countEv($115)|0);
  $117 = (($116) - 1)|0;
  $118 = ($111|0)==($117|0);
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function __ZN7croutes20nearest_with_ret_algIdE10try_to_addENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEEPSC_RNS2_6vectorIiNSF_IiEEEERNSK_IbNSF_IbEEEE($this,$data,$ans,$bundle,$bond,$edges,$visited) {
 $this = $this|0;
 $data = $data|0;
 $ans = $ans|0;
 $bundle = $bundle|0;
 $bond = $bond|0;
 $edges = $edges|0;
 $visited = $visited|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $87 = sp + 40|0;
 $88 = sp + 32|0;
 $89 = sp + 24|0;
 $90 = sp + 16|0;
 $91 = sp + 8|0;
 $92 = sp;
 $82 = $this;
 $83 = $bundle;
 $84 = $bond;
 $85 = $edges;
 $86 = $visited;
 $result = 0;
 $93 = $85;
 $79 = $93;
 $80 = 0;
 $94 = $79;
 $95 = $80;
 $96 = HEAP32[$94>>2]|0;
 $97 = (($96) + ($95<<2)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(-1);
 if ($99) {
  $100 = $85;
  $68 = $100;
  $69 = 1;
  $101 = $68;
  $102 = $69;
  $103 = HEAP32[$101>>2]|0;
  $104 = (($103) + ($102<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)==(-1);
  if ($106) {
   $58 = $ans;
   $107 = $58;
   $108 = HEAP32[$107>>2]|0;
   $109 = $83;
   $110 = $84;
   __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($108,$109,$110);
   $111 = $84;
   $112 = (__ZNK7croutes8net_bondIdE4fromEv($111)|0);
   $113 = $85;
   $54 = $113;
   $55 = 0;
   $114 = $54;
   $115 = $55;
   $116 = HEAP32[$114>>2]|0;
   $117 = (($116) + ($115<<2)|0);
   HEAP32[$117>>2] = $112;
   $118 = $84;
   $119 = (__ZNK7croutes8net_bondIdE2toEv($118)|0);
   $120 = $85;
   $52 = $120;
   $53 = 1;
   $121 = $52;
   $122 = $53;
   $123 = HEAP32[$121>>2]|0;
   $124 = (($123) + ($122<<2)|0);
   HEAP32[$124>>2] = $119;
   $result = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $125 = $84;
  $126 = (__ZNK7croutes8net_bondIdE4fromEv($125)|0);
  $127 = $85;
  $50 = $127;
  $51 = 0;
  $128 = $50;
  $129 = $51;
  $130 = HEAP32[$128>>2]|0;
  $131 = (($130) + ($129<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($126|0)==($132|0);
  if ($133) {
   $134 = $86;
   $135 = $84;
   $136 = (__ZNK7croutes8net_bondIdE2toEv($135)|0);
   $48 = $134;
   $49 = $136;
   $137 = $48;
   $138 = $49;
   $46 = $137;
   $47 = $138;
   $139 = $46;
   $140 = HEAP32[$139>>2]|0;
   $141 = $47;
   $142 = (($141>>>0) / 32)&-1;
   $143 = (($140) + ($142<<2)|0);
   $144 = $47;
   $145 = (($144>>>0) % 32)&-1;
   $146 = 1 << $145;
   $43 = $87;
   $44 = $143;
   $45 = $146;
   $147 = $43;
   $148 = $44;
   HEAP32[$147>>2] = $148;
   $149 = (($147) + 4|0);
   $150 = $45;
   HEAP32[$149>>2] = $150;
   $42 = $87;
   $151 = $42;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $153 & $155;
   $157 = ($156|0)!=(0);
   if ($157) {
    label = 7;
   } else {
    $31 = $ans;
    $158 = $31;
    $159 = HEAP32[$158>>2]|0;
    $160 = $83;
    $28 = $data;
    $161 = $28;
    $162 = HEAP32[$161>>2]|0;
    $163 = $84;
    $164 = (__ZNK7croutes8net_bondIdE2toEv($163)|0);
    $165 = $84;
    $166 = (__ZNK7croutes8net_bondIdE4fromEv($165)|0);
    $167 = (__ZN7croutes5ndataIdE2atEii($162,$164,$166)|0);
    __ZN7croutes6answerIdE14add_bond_frontEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($159,$160,$167);
    $168 = $84;
    $169 = (__ZNK7croutes8net_bondIdE2toEv($168)|0);
    $170 = $85;
    $24 = $170;
    $25 = 0;
    $171 = $24;
    $172 = $25;
    $173 = HEAP32[$171>>2]|0;
    $174 = (($173) + ($172<<2)|0);
    HEAP32[$174>>2] = $169;
    $result = 1;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $175 = $84;
   $176 = (__ZNK7croutes8net_bondIdE4fromEv($175)|0);
   $177 = $85;
   $22 = $177;
   $23 = 1;
   $178 = $22;
   $179 = $23;
   $180 = HEAP32[$178>>2]|0;
   $181 = (($180) + ($179<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($176|0)==($182|0);
   if ($183) {
    $184 = $86;
    $185 = $84;
    $186 = (__ZNK7croutes8net_bondIdE2toEv($185)|0);
    $11 = $184;
    $12 = $186;
    $187 = $11;
    $188 = $12;
    $9 = $187;
    $10 = $188;
    $189 = $9;
    $190 = HEAP32[$189>>2]|0;
    $191 = $10;
    $192 = (($191>>>0) / 32)&-1;
    $193 = (($190) + ($192<<2)|0);
    $194 = $10;
    $195 = (($194>>>0) % 32)&-1;
    $196 = 1 << $195;
    $6 = $88;
    $7 = $193;
    $8 = $196;
    $197 = $6;
    $198 = $7;
    HEAP32[$197>>2] = $198;
    $199 = (($197) + 4|0);
    $200 = $8;
    HEAP32[$199>>2] = $200;
    $3 = $88;
    $201 = $3;
    $202 = HEAP32[$201>>2]|0;
    $203 = HEAP32[$202>>2]|0;
    $204 = (($201) + 4|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $203 & $205;
    $207 = ($206|0)!=(0);
    if ($207) {
     label = 10;
    } else {
     $0 = $ans;
     $208 = $0;
     $209 = HEAP32[$208>>2]|0;
     $210 = $83;
     $211 = $84;
     __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($209,$210,$211);
     $212 = $84;
     $213 = (__ZNK7croutes8net_bondIdE2toEv($212)|0);
     $214 = $85;
     $1 = $214;
     $2 = 1;
     $215 = $1;
     $216 = $2;
     $217 = HEAP32[$215>>2]|0;
     $218 = (($217) + ($216<<2)|0);
     HEAP32[$218>>2] = $213;
     $result = 1;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $219 = $84;
    $220 = (__ZNK7croutes8net_bondIdE2toEv($219)|0);
    $221 = $85;
    $4 = $221;
    $5 = 0;
    $222 = $4;
    $223 = $5;
    $224 = HEAP32[$222>>2]|0;
    $225 = (($224) + ($223<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ($220|0)==($226|0);
    if ($227) {
     $228 = $86;
     $229 = $84;
     $230 = (__ZNK7croutes8net_bondIdE4fromEv($229)|0);
     $18 = $228;
     $19 = $230;
     $231 = $18;
     $232 = $19;
     $16 = $231;
     $17 = $232;
     $233 = $16;
     $234 = HEAP32[$233>>2]|0;
     $235 = $17;
     $236 = (($235>>>0) / 32)&-1;
     $237 = (($234) + ($236<<2)|0);
     $238 = $17;
     $239 = (($238>>>0) % 32)&-1;
     $240 = 1 << $239;
     $13 = $89;
     $14 = $237;
     $15 = $240;
     $241 = $13;
     $242 = $14;
     HEAP32[$241>>2] = $242;
     $243 = (($241) + 4|0);
     $244 = $15;
     HEAP32[$243>>2] = $244;
     $20 = $89;
     $245 = $20;
     $246 = HEAP32[$245>>2]|0;
     $247 = HEAP32[$246>>2]|0;
     $248 = (($245) + 4|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $247 & $249;
     $251 = ($250|0)!=(0);
     if ($251) {
      label = 13;
     } else {
      $21 = $ans;
      $252 = $21;
      $253 = HEAP32[$252>>2]|0;
      $254 = $83;
      $255 = $84;
      __ZN7croutes6answerIdE14add_bond_frontEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($253,$254,$255);
      $256 = $84;
      $257 = (__ZNK7croutes8net_bondIdE4fromEv($256)|0);
      $258 = $85;
      $26 = $258;
      $27 = 0;
      $259 = $26;
      $260 = $27;
      $261 = HEAP32[$259>>2]|0;
      $262 = (($261) + ($260<<2)|0);
      HEAP32[$262>>2] = $257;
      $result = 1;
     }
    } else {
     label = 13;
    }
    if ((label|0) == 13) {
     $263 = $84;
     $264 = (__ZNK7croutes8net_bondIdE2toEv($263)|0);
     $265 = $85;
     $29 = $265;
     $30 = 1;
     $266 = $29;
     $267 = $30;
     $268 = HEAP32[$266>>2]|0;
     $269 = (($268) + ($267<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($264|0)==($270|0);
     if ($271) {
      $272 = $86;
      $273 = $84;
      $274 = (__ZNK7croutes8net_bondIdE4fromEv($273)|0);
      $37 = $272;
      $38 = $274;
      $275 = $37;
      $276 = $38;
      $35 = $275;
      $36 = $276;
      $277 = $35;
      $278 = HEAP32[$277>>2]|0;
      $279 = $36;
      $280 = (($279>>>0) / 32)&-1;
      $281 = (($278) + ($280<<2)|0);
      $282 = $36;
      $283 = (($282>>>0) % 32)&-1;
      $284 = 1 << $283;
      $32 = $90;
      $33 = $281;
      $34 = $284;
      $285 = $32;
      $286 = $33;
      HEAP32[$285>>2] = $286;
      $287 = (($285) + 4|0);
      $288 = $34;
      HEAP32[$287>>2] = $288;
      $39 = $90;
      $289 = $39;
      $290 = HEAP32[$289>>2]|0;
      $291 = HEAP32[$290>>2]|0;
      $292 = (($289) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $291 & $293;
      $295 = ($294|0)!=(0);
      if (!($295)) {
       $40 = $ans;
       $296 = $40;
       $297 = HEAP32[$296>>2]|0;
       $298 = $83;
       $41 = $data;
       $299 = $41;
       $300 = HEAP32[$299>>2]|0;
       $301 = $84;
       $302 = (__ZNK7croutes8net_bondIdE2toEv($301)|0);
       $303 = $84;
       $304 = (__ZNK7croutes8net_bondIdE4fromEv($303)|0);
       $305 = (__ZN7croutes5ndataIdE2atEii($300,$302,$304)|0);
       __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($297,$298,$305);
       $306 = $84;
       $307 = (__ZNK7croutes8net_bondIdE4fromEv($306)|0);
       $308 = $85;
       $56 = $308;
       $57 = 1;
       $309 = $56;
       $310 = $57;
       $311 = HEAP32[$309>>2]|0;
       $312 = (($311) + ($310<<2)|0);
       HEAP32[$312>>2] = $307;
       $result = 1;
      }
     }
    }
   }
  }
 }
 $313 = $result;
 $314 = $313&1;
 if (!($314)) {
  $$expand_i1_val2 = 0;
  $81 = $$expand_i1_val2;
  $$pre_trunc = $81;
  $377 = $$pre_trunc&1;
  STACKTOP = sp;return ($377|0);
 }
 $315 = $86;
 $316 = $84;
 $317 = (__ZNK7croutes8net_bondIdE4fromEv($316)|0);
 $64 = $315;
 $65 = $317;
 $318 = $64;
 $319 = $65;
 $62 = $318;
 $63 = $319;
 $320 = $62;
 $321 = HEAP32[$320>>2]|0;
 $322 = $63;
 $323 = (($322>>>0) / 32)&-1;
 $324 = (($321) + ($323<<2)|0);
 $325 = $63;
 $326 = (($325>>>0) % 32)&-1;
 $327 = 1 << $326;
 $59 = $91;
 $60 = $324;
 $61 = $327;
 $328 = $59;
 $329 = $60;
 HEAP32[$328>>2] = $329;
 $330 = (($328) + 4|0);
 $331 = $61;
 HEAP32[$330>>2] = $331;
 $66 = $91;
 $67 = 1;
 $332 = $66;
 $333 = $67;
 $334 = $333&1;
 if ($334) {
  $335 = (($332) + 4|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = HEAP32[$332>>2]|0;
  $338 = HEAP32[$337>>2]|0;
  $339 = $338 | $336;
  HEAP32[$337>>2] = $339;
 } else {
  $340 = (($332) + 4|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $341 ^ -1;
  $343 = HEAP32[$332>>2]|0;
  $344 = HEAP32[$343>>2]|0;
  $345 = $344 & $342;
  HEAP32[$343>>2] = $345;
 }
 $346 = $86;
 $347 = $84;
 $348 = (__ZNK7croutes8net_bondIdE2toEv($347)|0);
 $75 = $346;
 $76 = $348;
 $349 = $75;
 $350 = $76;
 $73 = $349;
 $74 = $350;
 $351 = $73;
 $352 = HEAP32[$351>>2]|0;
 $353 = $74;
 $354 = (($353>>>0) / 32)&-1;
 $355 = (($352) + ($354<<2)|0);
 $356 = $74;
 $357 = (($356>>>0) % 32)&-1;
 $358 = 1 << $357;
 $70 = $92;
 $71 = $355;
 $72 = $358;
 $359 = $70;
 $360 = $71;
 HEAP32[$359>>2] = $360;
 $361 = (($359) + 4|0);
 $362 = $72;
 HEAP32[$361>>2] = $362;
 $77 = $92;
 $78 = 1;
 $363 = $77;
 $364 = $78;
 $365 = $364&1;
 if ($365) {
  $366 = (($363) + 4|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = HEAP32[$363>>2]|0;
  $369 = HEAP32[$368>>2]|0;
  $370 = $369 | $367;
  HEAP32[$368>>2] = $370;
 } else {
  $371 = (($363) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $372 ^ -1;
  $374 = HEAP32[$363>>2]|0;
  $375 = HEAP32[$374>>2]|0;
  $376 = $375 & $373;
  HEAP32[$374>>2] = $376;
 }
 $$expand_i1_val = 1;
 $81 = $$expand_i1_val;
 $$pre_trunc = $81;
 $377 = $$pre_trunc&1;
 STACKTOP = sp;return ($377|0);
}
function __ZN7croutes6answerIdE14add_bond_frontEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($this,$bundle,$bond) {
 $this = $this|0;
 $bundle = $bundle|0;
 $bond = $bond|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $bundle;
 HEAP32[$2>>2] = $bond;
 $3 = $1;
 __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE10push_frontERKS5_($3,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE10push_frontERKS5_($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = sp;
 $17 = sp + 116|0;
 $26 = sp + 8|0;
 $24 = $this;
 $25 = $__v;
 $27 = $24;
 $23 = $27;
 $28 = $23;
 $29 = (($28) + 20|0);
 $22 = $29;
 $30 = $22;
 $21 = $30;
 $31 = $21;
 $__a = $31;
 $0 = $27;
 $32 = $0;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0);
 if ($35) {
  __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE20__add_front_capacityEv($27);
 }
 $36 = $__a;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($26,$27);
 $1 = $26;
 $37 = $1;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($39|0)==($41|0);
 if ($42) {
  $43 = HEAP32[$37>>2]|0;
  $44 = (($43) + -4|0);
  HEAP32[$37>>2] = $44;
  $45 = HEAP32[$37>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4096|0);
  $48 = (($37) + 4|0);
  HEAP32[$48>>2] = $47;
 }
 $49 = (($37) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + -4|0);
 HEAP32[$49>>2] = $51;
 $2 = $37;
 $52 = $2;
 $53 = (($52) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $3 = $54;
 $55 = $3;
 $56 = $25;
 $14 = $36;
 $15 = $55;
 $16 = $56;
 $57 = $14;
 $58 = $15;
 $59 = $16;
 $13 = $59;
 $60 = $13;
 ;HEAP8[$12+0>>0]=HEAP8[$17+0>>0]|0;
 $9 = $57;
 $10 = $58;
 $11 = $60;
 $61 = $9;
 $62 = $10;
 $63 = $11;
 $8 = $63;
 $64 = $8;
 $5 = $61;
 $6 = $62;
 $7 = $64;
 $65 = $6;
 $66 = ($65|0)==(0|0);
 if ($66) {
  $70 = (($27) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + -1)|0;
  HEAP32[$70>>2] = $72;
  $20 = $27;
  $73 = $20;
  $74 = (($73) + 20|0);
  $19 = $74;
  $75 = $19;
  $18 = $75;
  $76 = $18;
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$76>>2] = $78;
  STACKTOP = sp;return;
 }
 $67 = $7;
 $4 = $67;
 $68 = $4;
 $69 = HEAP32[$68>>2]|0;
 HEAP32[$65>>2] = $69;
 $70 = (($27) + 16|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + -1)|0;
 HEAP32[$70>>2] = $72;
 $20 = $27;
 $73 = $20;
 $74 = (($73) + 20|0);
 $19 = $74;
 $75 = $19;
 $18 = $75;
 $76 = $18;
 $77 = HEAP32[$76>>2]|0;
 $78 = (($77) + 1)|0;
 HEAP32[$76>>2] = $78;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE20__add_front_capacityEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__buf = 0, $__c$i = 0, $__d$i = 0, $__i = 0, $__n$i$i$i = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i1$i = 0, $__t$i2 = 0, $__t$i2$i = 0, $__t$i3 = 0, $__t$i3$i = 0;
 var $__t$i4 = 0, $__t$i5 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 976|0;
 $$byval_copy = sp + 972|0;
 $8 = sp + 48|0;
 $11 = sp + 986|0;
 $28 = sp + 40|0;
 $31 = sp + 985|0;
 $38 = sp + 32|0;
 $41 = sp + 984|0;
 $83 = sp + 24|0;
 $86 = sp + 983|0;
 $__t$i3$i = sp + 632|0;
 $__t$i2$i = sp + 608|0;
 $__t$i1$i = sp + 584|0;
 $__t$i$i = sp + 536|0;
 $137 = sp + 16|0;
 $142 = sp + 982|0;
 $148 = sp + 388|0;
 $149 = sp + 384|0;
 $__t$i5 = sp + 364|0;
 $150 = sp + 360|0;
 $153 = sp + 348|0;
 $__t$i4 = sp + 324|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i = sp + 228|0;
 $185 = sp + 8|0;
 $188 = sp + 981|0;
 $195 = sp;
 $198 = sp + 980|0;
 $__pt = sp + 108|0;
 $212 = sp + 104|0;
 $213 = sp + 100|0;
 $__pt1 = sp + 96|0;
 $__buf = sp + 76|0;
 $214 = sp + 72|0;
 $215 = sp + 68|0;
 $216 = sp + 64|0;
 $211 = $this;
 $219 = $211;
 $210 = $219;
 $220 = $210;
 $221 = (($220) + 20|0);
 $209 = $221;
 $222 = $209;
 $208 = $222;
 $223 = $208;
 $__a = $223;
 $207 = $219;
 $224 = $207;
 $206 = $224;
 $225 = $206;
 $205 = $225;
 $226 = $205;
 $227 = (($226) + 8|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = (($226) + 4|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = $228;
 $232 = $230;
 $233 = (($231) - ($232))|0;
 $234 = (($233|0) / 4)&-1;
 $235 = ($234|0)==(0);
 if ($235) {
  $256 = 0;
 } else {
  $204 = $225;
  $236 = $204;
  $237 = (($236) + 8|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($236) + 4|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $238;
  $242 = $240;
  $243 = (($241) - ($242))|0;
  $244 = (($243|0) / 4)&-1;
  $245 = $244<<10;
  $246 = (($245) - 1)|0;
  $256 = $246;
 }
 $247 = (($224) + 16|0);
 $248 = HEAP32[$247>>2]|0;
 $203 = $224;
 $249 = $203;
 $250 = (($249) + 20|0);
 $202 = $250;
 $251 = $202;
 $201 = $251;
 $252 = $201;
 $253 = HEAP32[$252>>2]|0;
 $254 = (($248) + ($253))|0;
 $255 = (($256) - ($254))|0;
 $257 = ($255>>>0)>=(1024);
 if ($257) {
  $258 = (($219) + 16|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + 1024)|0;
  HEAP32[$258>>2] = $260;
  $200 = $219;
  $261 = $200;
  $262 = (($261) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + -4|0);
  $265 = HEAP32[$264>>2]|0;
  HEAP32[$__pt>>2] = $265;
  $199 = $219;
  $266 = $199;
  $267 = (($266) + 8|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + -4|0);
  $196 = $266;
  $197 = $269;
  $270 = $196;
  $271 = $197;
  ;HEAP8[$195+0>>0]=HEAP8[$198+0>>0]|0;
  $193 = $270;
  $194 = $271;
  $272 = $193;
  while(1) {
   $273 = $194;
   $274 = (($272) + 8|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ($273|0)!=($275|0);
   if (!($276)) {
    break;
   }
   $192 = $272;
   $277 = $192;
   $278 = (($277) + 12|0);
   $191 = $278;
   $279 = $191;
   $190 = $279;
   $280 = $190;
   $281 = (($272) + 8|0);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + -4|0);
   HEAP32[$281>>2] = $283;
   $189 = $283;
   $284 = $189;
   $186 = $280;
   $187 = $284;
   $285 = $186;
   $286 = $187;
   ;HEAP8[$185+0>>0]=HEAP8[$188+0>>0]|0;
   $183 = $285;
   $184 = $286;
   $287 = $183;
   $288 = $184;
   $181 = $287;
   $182 = $288;
  }
  __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontERKS6_($219,$__pt);
  STACKTOP = sp;return;
 }
 $70 = $219;
 $289 = $70;
 $290 = (($289) + 8|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = (($289) + 4|0);
 $293 = HEAP32[$292>>2]|0;
 $294 = $291;
 $295 = $293;
 $296 = (($294) - ($295))|0;
 $297 = (($296|0) / 4)&-1;
 $69 = $219;
 $298 = $69;
 $68 = $298;
 $299 = $68;
 $300 = (($299) + 12|0);
 $67 = $300;
 $301 = $67;
 $66 = $301;
 $302 = $66;
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[$298>>2]|0;
 $305 = $303;
 $306 = $304;
 $307 = (($305) - ($306))|0;
 $308 = (($307|0) / 4)&-1;
 $309 = ($297>>>0)<($308>>>0);
 do {
  if ($309) {
   $65 = $219;
   $310 = $65;
   $311 = (($310) + 4|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[$310>>2]|0;
   $314 = $312;
   $315 = $313;
   $316 = (($314) - ($315))|0;
   $317 = (($316|0) / 4)&-1;
   $318 = ($317>>>0)>(0);
   if ($318) {
    $319 = $__a;
    $63 = $319;
    $64 = 1024;
    $320 = $63;
    $321 = $64;
    $60 = $320;
    $61 = $321;
    $62 = 0;
    $322 = $61;
    $323 = $322<<2;
    $59 = $323;
    $324 = $59;
    $325 = (__Znwj($324)|0);
    HEAP32[$212>>2] = $325;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontEOS6_($219,$212);
   } else {
    $326 = $__a;
    $57 = $326;
    $58 = 1024;
    $327 = $57;
    $328 = $58;
    $54 = $327;
    $55 = $328;
    $56 = 0;
    $329 = $55;
    $330 = $329<<2;
    $53 = $330;
    $331 = $53;
    $332 = (__Znwj($331)|0);
    HEAP32[$213>>2] = $332;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE9push_backEOS6_($219,$213);
    $52 = $219;
    $333 = $52;
    $334 = (($333) + 8|0);
    $335 = HEAP32[$334>>2]|0;
    $336 = (($335) + -4|0);
    $337 = HEAP32[$336>>2]|0;
    HEAP32[$__pt1>>2] = $337;
    $42 = $219;
    $338 = $42;
    $339 = (($338) + 8|0);
    $340 = HEAP32[$339>>2]|0;
    $341 = (($340) + -4|0);
    $39 = $338;
    $40 = $341;
    $342 = $39;
    $343 = $40;
    ;HEAP8[$38+0>>0]=HEAP8[$41+0>>0]|0;
    $36 = $342;
    $37 = $343;
    $344 = $36;
    while(1) {
     $345 = $37;
     $346 = (($344) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($345|0)!=($347|0);
     if (!($348)) {
      break;
     }
     $35 = $344;
     $349 = $35;
     $350 = (($349) + 12|0);
     $34 = $350;
     $351 = $34;
     $33 = $351;
     $352 = $33;
     $353 = (($344) + 8|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($354) + -4|0);
     HEAP32[$353>>2] = $355;
     $32 = $355;
     $356 = $32;
     $29 = $352;
     $30 = $356;
     $357 = $29;
     $358 = $30;
     ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
     $26 = $357;
     $27 = $358;
     $359 = $26;
     $360 = $27;
     $24 = $359;
     $25 = $360;
    }
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontERKS6_($219,$__pt1);
   }
   $22 = $219;
   $361 = $22;
   $362 = (($361) + 8|0);
   $363 = HEAP32[$362>>2]|0;
   $364 = (($361) + 4|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = $363;
   $367 = $365;
   $368 = (($366) - ($367))|0;
   $369 = (($368|0) / 4)&-1;
   $370 = ($369|0)==(1);
   if ($370) {
    $375 = 512;
   } else {
    $371 = (($219) + 16|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = (($372) + 1024)|0;
    $375 = $373;
   }
   $374 = (($219) + 16|0);
   HEAP32[$374>>2] = $375;
  } else {
   $15 = $219;
   $376 = $15;
   $14 = $376;
   $377 = $14;
   $378 = (($377) + 12|0);
   $13 = $378;
   $379 = $13;
   $12 = $379;
   $380 = $12;
   $381 = HEAP32[$380>>2]|0;
   $382 = HEAP32[$376>>2]|0;
   $383 = $381;
   $384 = $382;
   $385 = (($383) - ($384))|0;
   $386 = (($385|0) / 4)&-1;
   $387 = $386<<1;
   HEAP32[$214>>2] = $387;
   HEAP32[$215>>2] = 1;
   $9 = $214;
   $10 = $215;
   $388 = $9;
   $389 = $10;
   ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
   $6 = $388;
   $7 = $389;
   $390 = $6;
   $391 = $7;
   $3 = $8;
   $4 = $390;
   $5 = $391;
   $392 = $4;
   $393 = HEAP32[$392>>2]|0;
   $394 = $5;
   $395 = HEAP32[$394>>2]|0;
   $396 = ($393>>>0)<($395>>>0);
   if ($396) {
    $397 = $7;
    $400 = $397;
   } else {
    $398 = $6;
    $400 = $398;
   }
   $399 = HEAP32[$400>>2]|0;
   $2 = $219;
   $401 = $2;
   $402 = (($401) + 12|0);
   $1 = $402;
   $403 = $1;
   $0 = $403;
   $404 = $0;
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__buf,$399,0,$404);
   $405 = $__a;
   $20 = $405;
   $21 = 1024;
   $406 = $20;
   $407 = $21;
   $17 = $406;
   $18 = $407;
   $19 = 0;
   $408 = $18;
   $409 = $408<<2;
   $16 = $409;
   $410 = $16;
   __THREW__ = 0;
   $411 = (invoke_ii(430,($410|0))|0);
   $412 = __THREW__; __THREW__ = 0;
   $413 = $412&1;
   if ($413) {
    label = 27;
   } else {
    HEAP32[$216>>2] = $411;
    __THREW__ = 0;
    invoke_vii(478,($__buf|0),($216|0));
    $414 = __THREW__; __THREW__ = 0;
    $415 = $414&1;
    if ($415) {
     label = 27;
    } else {
     $50 = $219;
     $435 = $50;
     $436 = (($435) + 4|0);
     $437 = HEAP32[$436>>2]|0;
     $__i = $437;
     while(1) {
      $438 = $__i;
      $51 = $219;
      $439 = $51;
      $440 = (($439) + 8|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = ($438|0)!=($441|0);
      if (!($442)) {
       label = 52;
       break;
      }
      $443 = $__i;
      $146 = $__buf;
      $147 = $443;
      $444 = $146;
      $445 = (($444) + 8|0);
      $446 = HEAP32[$445>>2]|0;
      $145 = $444;
      $447 = $145;
      $448 = (($447) + 12|0);
      $144 = $448;
      $449 = $144;
      $143 = $449;
      $450 = $143;
      $451 = HEAP32[$450>>2]|0;
      $452 = ($446|0)==($451|0);
      if ($452) {
       $453 = (($444) + 4|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = HEAP32[$444>>2]|0;
       $456 = ($454>>>0)>($455>>>0);
       if ($456) {
        $457 = (($444) + 4|0);
        $458 = HEAP32[$457>>2]|0;
        $459 = HEAP32[$444>>2]|0;
        $460 = $458;
        $461 = $459;
        $462 = (($460) - ($461))|0;
        $463 = (($462|0) / 4)&-1;
        $__d$i = $463;
        $464 = $__d$i;
        $465 = (($464) + 1)|0;
        $466 = (($465|0) / 2)&-1;
        $__d$i = $466;
        $467 = (($444) + 4|0);
        $468 = HEAP32[$467>>2]|0;
        $469 = (($444) + 8|0);
        $470 = HEAP32[$469>>2]|0;
        $471 = (($444) + 4|0);
        $472 = HEAP32[$471>>2]|0;
        $473 = $__d$i;
        $474 = (0 - ($473))|0;
        $475 = (($472) + ($474<<2)|0);
        $122 = $468;
        $123 = $470;
        $124 = $475;
        $476 = $122;
        $121 = $476;
        $477 = $121;
        $478 = $123;
        $116 = $478;
        $479 = $116;
        $480 = $124;
        $117 = $480;
        $481 = $117;
        $118 = $477;
        $119 = $479;
        $120 = $481;
        $482 = $119;
        $483 = $118;
        $484 = $482;
        $485 = $483;
        $486 = (($484) - ($485))|0;
        $487 = (($486|0) / 4)&-1;
        $__n$i$i$i = $487;
        $488 = $120;
        $489 = $118;
        $490 = $__n$i$i$i;
        $491 = $490<<2;
        _memmove(($488|0),($489|0),($491|0))|0;
        $492 = $120;
        $493 = $__n$i$i$i;
        $494 = (($492) + ($493<<2)|0);
        $495 = (($444) + 8|0);
        HEAP32[$495>>2] = $494;
        $496 = $__d$i;
        $497 = (($444) + 4|0);
        $498 = HEAP32[$497>>2]|0;
        $499 = (0 - ($496))|0;
        $500 = (($498) + ($499<<2)|0);
        HEAP32[$497>>2] = $500;
       } else {
        $115 = $444;
        $501 = $115;
        $502 = (($501) + 12|0);
        $114 = $502;
        $503 = $114;
        $113 = $503;
        $504 = $113;
        $505 = HEAP32[$504>>2]|0;
        $506 = HEAP32[$444>>2]|0;
        $507 = $505;
        $508 = $506;
        $509 = (($507) - ($508))|0;
        $510 = (($509|0) / 4)&-1;
        $511 = $510<<1;
        HEAP32[$148>>2] = $511;
        HEAP32[$149>>2] = 1;
        $84 = $148;
        $85 = $149;
        $512 = $84;
        $513 = $85;
        ;HEAP8[$83+0>>0]=HEAP8[$86+0>>0]|0;
        $81 = $512;
        $82 = $513;
        $514 = $81;
        $515 = $82;
        $78 = $83;
        $79 = $514;
        $80 = $515;
        $516 = $79;
        $517 = HEAP32[$516>>2]|0;
        $518 = $80;
        $519 = HEAP32[$518>>2]|0;
        $520 = ($517>>>0)<($519>>>0);
        if ($520) {
         $521 = $82;
         $524 = $521;
        } else {
         $522 = $81;
         $524 = $522;
        }
        $523 = HEAP32[$524>>2]|0;
        $__c$i = $523;
        $525 = $__c$i;
        $526 = $__c$i;
        $527 = (($526>>>0) / 4)&-1;
        $73 = $444;
        $528 = $73;
        $529 = (($528) + 12|0);
        $72 = $529;
        $530 = $72;
        $71 = $530;
        $531 = $71;
        $532 = (($531) + 4|0);
        $533 = HEAP32[$532>>2]|0;
        __THREW__ = 0;
        invoke_viiii(482,($__t$i5|0),($525|0),($527|0),($533|0));
        $534 = __THREW__; __THREW__ = 0;
        $535 = $534&1;
        if ($535) {
         label = 50;
         break;
        }
        $536 = (($444) + 4|0);
        $537 = HEAP32[$536>>2]|0;
        $74 = $150;
        $75 = $537;
        $538 = $74;
        $539 = $75;
        HEAP32[$538>>2] = $539;
        $540 = (($444) + 8|0);
        $541 = HEAP32[$540>>2]|0;
        $76 = $153;
        $77 = $541;
        $542 = $76;
        $543 = $77;
        HEAP32[$542>>2] = $543;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$150+0>>2]|0;
        ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$153+0>>2]|0;
        invoke_viii(477,($__t$i5|0),($$byval_copy|0),($$byval_copy6|0));
        $544 = __THREW__; __THREW__ = 0;
        $545 = $544&1;
        if ($545) {
         label = 43;
         break;
        }
        $90 = $444;
        $91 = $__t$i5;
        $546 = $90;
        $89 = $546;
        $547 = $89;
        $548 = HEAP32[$547>>2]|0;
        HEAP32[$__t$i3$i>>2] = $548;
        $549 = $91;
        $87 = $549;
        $550 = $87;
        $551 = HEAP32[$550>>2]|0;
        $552 = $90;
        HEAP32[$552>>2] = $551;
        $88 = $__t$i3$i;
        $553 = $88;
        $554 = HEAP32[$553>>2]|0;
        $555 = $91;
        HEAP32[$555>>2] = $554;
        $556 = (($444) + 4|0);
        $557 = (($__t$i5) + 4|0);
        $95 = $556;
        $96 = $557;
        $558 = $95;
        $94 = $558;
        $559 = $94;
        $560 = HEAP32[$559>>2]|0;
        HEAP32[$__t$i2$i>>2] = $560;
        $561 = $96;
        $92 = $561;
        $562 = $92;
        $563 = HEAP32[$562>>2]|0;
        $564 = $95;
        HEAP32[$564>>2] = $563;
        $93 = $__t$i2$i;
        $565 = $93;
        $566 = HEAP32[$565>>2]|0;
        $567 = $96;
        HEAP32[$567>>2] = $566;
        $568 = (($444) + 8|0);
        $569 = (($__t$i5) + 8|0);
        $100 = $568;
        $101 = $569;
        $570 = $100;
        $99 = $570;
        $571 = $99;
        $572 = HEAP32[$571>>2]|0;
        HEAP32[$__t$i1$i>>2] = $572;
        $573 = $101;
        $97 = $573;
        $574 = $97;
        $575 = HEAP32[$574>>2]|0;
        $576 = $100;
        HEAP32[$576>>2] = $575;
        $98 = $__t$i1$i;
        $577 = $98;
        $578 = HEAP32[$577>>2]|0;
        $579 = $101;
        HEAP32[$579>>2] = $578;
        $104 = $444;
        $580 = $104;
        $581 = (($580) + 12|0);
        $103 = $581;
        $582 = $103;
        $102 = $582;
        $583 = $102;
        $107 = $__t$i5;
        $584 = $107;
        $585 = (($584) + 12|0);
        $106 = $585;
        $586 = $106;
        $105 = $586;
        $587 = $105;
        $111 = $583;
        $112 = $587;
        $588 = $111;
        $110 = $588;
        $589 = $110;
        $590 = HEAP32[$589>>2]|0;
        HEAP32[$__t$i$i>>2] = $590;
        $591 = $112;
        $108 = $591;
        $592 = $108;
        $593 = HEAP32[$592>>2]|0;
        $594 = $111;
        HEAP32[$594>>2] = $593;
        $109 = $__t$i$i;
        $595 = $109;
        $596 = HEAP32[$595>>2]|0;
        $597 = $112;
        HEAP32[$597>>2] = $596;
        __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i5);
       }
      }
      $127 = $444;
      $602 = $127;
      $603 = (($602) + 12|0);
      $126 = $603;
      $604 = $126;
      $125 = $604;
      $605 = $125;
      $606 = (($605) + 4|0);
      $607 = HEAP32[$606>>2]|0;
      $608 = (($444) + 8|0);
      $609 = HEAP32[$608>>2]|0;
      $128 = $609;
      $610 = $128;
      $611 = $147;
      $139 = $607;
      $140 = $610;
      $141 = $611;
      $612 = $139;
      $613 = $140;
      $614 = $141;
      $138 = $614;
      $615 = $138;
      ;HEAP8[$137+0>>0]=HEAP8[$142+0>>0]|0;
      $134 = $612;
      $135 = $613;
      $136 = $615;
      $616 = $134;
      $617 = $135;
      $618 = $136;
      $133 = $618;
      $619 = $133;
      $130 = $616;
      $131 = $617;
      $132 = $619;
      $620 = $131;
      $621 = ($620|0)==(0|0);
      if (!($621)) {
       $622 = $132;
       $129 = $622;
       $623 = $129;
       $624 = HEAP32[$623>>2]|0;
       HEAP32[$620>>2] = $624;
      }
      $625 = (($444) + 8|0);
      $626 = HEAP32[$625>>2]|0;
      $627 = (($626) + 4|0);
      HEAP32[$625>>2] = $627;
      $628 = $__i;
      $629 = (($628) + 4|0);
      $__i = $629;
     }
     if ((label|0) == 43) {
      $598 = ___cxa_find_matching_catch()|0;
      $599 = tempRet0;
      $151 = $598;
      $152 = $599;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i5);
      $600 = $151;
      $601 = $152;
      $eh$lpad$body$index2Z2D = $601;$eh$lpad$body$indexZ2D = $600;
     }
     else if ((label|0) == 50) {
      $630 = ___cxa_find_matching_catch()|0;
      $631 = tempRet0;
      $eh$lpad$body$index2Z2D = $631;$eh$lpad$body$indexZ2D = $630;
     }
     else if ((label|0) == 52) {
      $157 = $219;
      $158 = $__buf;
      $632 = $157;
      $156 = $632;
      $633 = $156;
      $634 = HEAP32[$633>>2]|0;
      HEAP32[$__t$i4>>2] = $634;
      $635 = $158;
      $154 = $635;
      $636 = $154;
      $637 = HEAP32[$636>>2]|0;
      $638 = $157;
      HEAP32[$638>>2] = $637;
      $155 = $__t$i4;
      $639 = $155;
      $640 = HEAP32[$639>>2]|0;
      $641 = $158;
      HEAP32[$641>>2] = $640;
      $642 = (($219) + 4|0);
      $643 = (($__buf) + 4|0);
      $162 = $642;
      $163 = $643;
      $644 = $162;
      $161 = $644;
      $645 = $161;
      $646 = HEAP32[$645>>2]|0;
      HEAP32[$__t$i3>>2] = $646;
      $647 = $163;
      $159 = $647;
      $648 = $159;
      $649 = HEAP32[$648>>2]|0;
      $650 = $162;
      HEAP32[$650>>2] = $649;
      $160 = $__t$i3;
      $651 = $160;
      $652 = HEAP32[$651>>2]|0;
      $653 = $163;
      HEAP32[$653>>2] = $652;
      $654 = (($219) + 8|0);
      $655 = (($__buf) + 8|0);
      $167 = $654;
      $168 = $655;
      $656 = $167;
      $166 = $656;
      $657 = $166;
      $658 = HEAP32[$657>>2]|0;
      HEAP32[$__t$i2>>2] = $658;
      $659 = $168;
      $164 = $659;
      $660 = $164;
      $661 = HEAP32[$660>>2]|0;
      $662 = $167;
      HEAP32[$662>>2] = $661;
      $165 = $__t$i2;
      $663 = $165;
      $664 = HEAP32[$663>>2]|0;
      $665 = $168;
      HEAP32[$665>>2] = $664;
      $171 = $219;
      $666 = $171;
      $667 = (($666) + 12|0);
      $170 = $667;
      $668 = $170;
      $169 = $668;
      $669 = $169;
      $174 = $__buf;
      $670 = $174;
      $671 = (($670) + 12|0);
      $173 = $671;
      $672 = $173;
      $172 = $672;
      $673 = $172;
      $178 = $669;
      $179 = $673;
      $674 = $178;
      $177 = $674;
      $675 = $177;
      $676 = HEAP32[$675>>2]|0;
      HEAP32[$__t$i>>2] = $676;
      $677 = $179;
      $175 = $677;
      $678 = $175;
      $679 = HEAP32[$678>>2]|0;
      $680 = $178;
      HEAP32[$680>>2] = $679;
      $176 = $__t$i;
      $681 = $176;
      $682 = HEAP32[$681>>2]|0;
      $683 = $179;
      HEAP32[$683>>2] = $682;
      $180 = $219;
      $684 = $180;
      $685 = (($684) + 8|0);
      $686 = HEAP32[$685>>2]|0;
      $687 = (($684) + 4|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = $686;
      $690 = $688;
      $691 = (($689) - ($690))|0;
      $692 = (($691|0) / 4)&-1;
      $693 = ($692|0)==(1);
      if ($693) {
       $698 = 512;
      } else {
       $694 = (($219) + 16|0);
       $695 = HEAP32[$694>>2]|0;
       $696 = (($695) + 1024)|0;
       $698 = $696;
      }
      $697 = (($219) + 16|0);
      HEAP32[$697>>2] = $698;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
      break;
     }
     $217 = $eh$lpad$body$indexZ2D;
     $218 = $eh$lpad$body$index2Z2D;
    }
   }
   do {
    if ((label|0) == 27) {
     $416 = ___cxa_find_matching_catch(0|0)|0;
     $417 = tempRet0;
     $217 = $416;
     $218 = $417;
     $418 = $217;
     (___cxa_begin_catch(($418|0))|0);
     $419 = $__a;
     $23 = $__buf;
     $420 = $23;
     $421 = (($420) + 4|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = HEAP32[$422>>2]|0;
     $47 = $419;
     $48 = $423;
     $49 = 1024;
     $424 = $47;
     $425 = $48;
     $426 = $49;
     $44 = $424;
     $45 = $425;
     $46 = $426;
     $427 = $45;
     $43 = $427;
     $428 = $43;
     __ZdlPv($428);
     __THREW__ = 0;
     invoke_v(479);
     $429 = __THREW__; __THREW__ = 0;
     $430 = $429&1;
     if (!($430)) {
      // unreachable;
     }
     $431 = ___cxa_find_matching_catch()|0;
     $432 = tempRet0;
     $217 = $431;
     $218 = $432;
     __THREW__ = 0;
     invoke_v(480);
     $433 = __THREW__; __THREW__ = 0;
     $434 = $433&1;
     if ($434) {
      $701 = ___cxa_find_matching_catch(0|0)|0;
      $702 = tempRet0;
      ___clang_call_terminate($701);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
   $699 = $217;
   $700 = $218;
   ___resumeException($699|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 392|0;
 $$byval_copy = sp + 388|0;
 $8 = sp + 8|0;
 $11 = sp + 397|0;
 $__t$i3 = sp + 296|0;
 $__t$i2 = sp + 272|0;
 $__t$i1 = sp + 248|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 396|0;
 $80 = sp + 52|0;
 $81 = sp + 48|0;
 $__t = sp + 28|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = (($86) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 if ($90) {
  $91 = (($86) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $77 = $86;
  $93 = $77;
  $94 = (($93) + 12|0);
  $76 = $94;
  $95 = $76;
  $75 = $95;
  $96 = $75;
  $97 = HEAP32[$96>>2]|0;
  $98 = ($92>>>0)<($97>>>0);
  do {
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = (($99) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($86) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = (($86) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($86) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($86) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = (($86) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = (($86) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
   } else {
    $18 = $86;
    $147 = $18;
    $148 = (($147) + 12|0);
    $17 = $148;
    $149 = $17;
    $16 = $149;
    $150 = $16;
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$86>>2]|0;
    $153 = $151;
    $154 = $152;
    $155 = (($153) - ($154))|0;
    $156 = (($155|0) / 4)&-1;
    $157 = $156<<1;
    HEAP32[$80>>2] = $157;
    HEAP32[$81>>2] = 1;
    $9 = $80;
    $10 = $81;
    $158 = $9;
    $159 = $10;
    ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
    $6 = $158;
    $7 = $159;
    $160 = $6;
    $161 = $7;
    $3 = $8;
    $4 = $160;
    $5 = $161;
    $162 = $4;
    $163 = HEAP32[$162>>2]|0;
    $164 = $5;
    $165 = HEAP32[$164>>2]|0;
    $166 = ($163>>>0)<($165>>>0);
    if ($166) {
     $167 = $7;
     $170 = $167;
    } else {
     $168 = $6;
     $170 = $168;
    }
    $169 = HEAP32[$170>>2]|0;
    $__c = $169;
    $171 = $__c;
    $172 = $__c;
    $173 = (($172) + 3)|0;
    $174 = (($173>>>0) / 4)&-1;
    $2 = $86;
    $175 = $2;
    $176 = (($175) + 12|0);
    $1 = $176;
    $177 = $1;
    $0 = $177;
    $178 = $0;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t,$171,$174,$178);
    $179 = (($86) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    $12 = $82;
    $13 = $180;
    $181 = $12;
    $182 = $13;
    HEAP32[$181>>2] = $182;
    $183 = (($86) + 8|0);
    $184 = HEAP32[$183>>2]|0;
    $14 = $85;
    $15 = $184;
    $185 = $14;
    $186 = $15;
    HEAP32[$185>>2] = $186;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$82+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$85+0>>2]|0;
    invoke_viii(477,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $187 = __THREW__; __THREW__ = 0;
    $188 = $187&1;
    if (!($188)) {
     $22 = $86;
     $23 = $__t;
     $189 = $22;
     $21 = $189;
     $190 = $21;
     $191 = HEAP32[$190>>2]|0;
     HEAP32[$__t$i3>>2] = $191;
     $192 = $23;
     $19 = $192;
     $193 = $19;
     $194 = HEAP32[$193>>2]|0;
     $195 = $22;
     HEAP32[$195>>2] = $194;
     $20 = $__t$i3;
     $196 = $20;
     $197 = HEAP32[$196>>2]|0;
     $198 = $23;
     HEAP32[$198>>2] = $197;
     $199 = (($86) + 4|0);
     $200 = (($__t) + 4|0);
     $27 = $199;
     $28 = $200;
     $201 = $27;
     $26 = $201;
     $202 = $26;
     $203 = HEAP32[$202>>2]|0;
     HEAP32[$__t$i2>>2] = $203;
     $204 = $28;
     $24 = $204;
     $205 = $24;
     $206 = HEAP32[$205>>2]|0;
     $207 = $27;
     HEAP32[$207>>2] = $206;
     $25 = $__t$i2;
     $208 = $25;
     $209 = HEAP32[$208>>2]|0;
     $210 = $28;
     HEAP32[$210>>2] = $209;
     $211 = (($86) + 8|0);
     $212 = (($__t) + 8|0);
     $32 = $211;
     $33 = $212;
     $213 = $32;
     $31 = $213;
     $214 = $31;
     $215 = HEAP32[$214>>2]|0;
     HEAP32[$__t$i1>>2] = $215;
     $216 = $33;
     $29 = $216;
     $217 = $29;
     $218 = HEAP32[$217>>2]|0;
     $219 = $32;
     HEAP32[$219>>2] = $218;
     $30 = $__t$i1;
     $220 = $30;
     $221 = HEAP32[$220>>2]|0;
     $222 = $33;
     HEAP32[$222>>2] = $221;
     $36 = $86;
     $223 = $36;
     $224 = (($223) + 12|0);
     $35 = $224;
     $225 = $35;
     $34 = $225;
     $226 = $34;
     $39 = $__t;
     $227 = $39;
     $228 = (($227) + 12|0);
     $38 = $228;
     $229 = $38;
     $37 = $229;
     $230 = $37;
     $43 = $226;
     $44 = $230;
     $231 = $43;
     $42 = $231;
     $232 = $42;
     $233 = HEAP32[$232>>2]|0;
     HEAP32[$__t$i>>2] = $233;
     $234 = $44;
     $40 = $234;
     $235 = $40;
     $236 = HEAP32[$235>>2]|0;
     $237 = $43;
     HEAP32[$237>>2] = $236;
     $41 = $__t$i;
     $238 = $41;
     $239 = HEAP32[$238>>2]|0;
     $240 = $44;
     HEAP32[$240>>2] = $239;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
     break;
    }
    $241 = ___cxa_find_matching_catch()|0;
    $242 = tempRet0;
    $83 = $241;
    $84 = $242;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t);
    $268 = $83;
    $269 = $84;
    ___resumeException($268|0);
    // unreachable;
   }
  } while(0);
 }
 $59 = $86;
 $243 = $59;
 $244 = (($243) + 12|0);
 $58 = $244;
 $245 = $58;
 $57 = $245;
 $246 = $57;
 $247 = (($86) + 4|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = (($248) + -4|0);
 $60 = $249;
 $250 = $60;
 $251 = $79;
 $71 = $246;
 $72 = $250;
 $73 = $251;
 $252 = $71;
 $253 = $72;
 $254 = $73;
 $70 = $254;
 $255 = $70;
 ;HEAP8[$69+0>>0]=HEAP8[$74+0>>0]|0;
 $66 = $252;
 $67 = $253;
 $68 = $255;
 $256 = $66;
 $257 = $67;
 $258 = $68;
 $65 = $258;
 $259 = $65;
 $62 = $256;
 $63 = $257;
 $64 = $259;
 $260 = $63;
 $261 = ($260|0)==(0|0);
 if ($261) {
  $265 = (($86) + 4|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + -4|0);
  HEAP32[$265>>2] = $267;
  STACKTOP = sp;return;
 }
 $262 = $64;
 $61 = $262;
 $263 = $61;
 $264 = HEAP32[$263>>2]|0;
 HEAP32[$260>>2] = $264;
 $265 = (($86) + 4|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = (($266) + -4|0);
 HEAP32[$265>>2] = $267;
 STACKTOP = sp;return;
}
function __ZNSt3__117__count_bool_trueINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0;
 var $__m1 = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 68|0;
 $12 = sp + 24|0;
 $__clz_f = sp + 16|0;
 HEAP32[$12>>2] = $__n;
 $__r = 0;
 $13 = (($__first) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (($__first) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (32 - ($17))|0;
  HEAP32[$__clz_f>>2] = $18;
  $9 = $__clz_f;
  $10 = $12;
  $19 = $9;
  $20 = $10;
  ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
  $6 = $19;
  $7 = $20;
  $21 = $7;
  $22 = $6;
  $3 = $8;
  $4 = $21;
  $5 = $22;
  $23 = $4;
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24>>>0)<($26>>>0);
  if ($27) {
   $28 = $7;
   $31 = $28;
  } else {
   $29 = $6;
   $31 = $29;
  }
  $30 = HEAP32[$31>>2]|0;
  $__dn = $30;
  $32 = (($__first) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = -1 << $33;
  $35 = HEAP32[$__clz_f>>2]|0;
  $36 = $__dn;
  $37 = (($35) - ($36))|0;
  $38 = -1 >>> $37;
  $39 = $34 & $38;
  $__m = $39;
  $40 = HEAP32[$__first>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $__m;
  $43 = $41 & $42;
  $0 = $43;
  $44 = $0;
  $45 = (_llvm_ctpop_i32(($44|0))|0);
  $__r = $45;
  $46 = $__dn;
  $47 = HEAP32[$12>>2]|0;
  $48 = (($47) - ($46))|0;
  HEAP32[$12>>2] = $48;
  $49 = HEAP32[$__first>>2]|0;
  $50 = (($49) + 4|0);
  HEAP32[$__first>>2] = $50;
 }
 while(1) {
  $51 = HEAP32[$12>>2]|0;
  $52 = ($51>>>0)>=(32);
  if (!($52)) {
   break;
  }
  $53 = HEAP32[$__first>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $1 = $54;
  $55 = $1;
  $56 = (_llvm_ctpop_i32(($55|0))|0);
  $57 = $__r;
  $58 = (($57) + ($56))|0;
  $__r = $58;
  $59 = HEAP32[$__first>>2]|0;
  $60 = (($59) + 4|0);
  HEAP32[$__first>>2] = $60;
  $61 = HEAP32[$12>>2]|0;
  $62 = (($61) - 32)|0;
  HEAP32[$12>>2] = $62;
 }
 $63 = HEAP32[$12>>2]|0;
 $64 = ($63>>>0)>(0);
 if (!($64)) {
  $76 = $__r;
  STACKTOP = sp;return ($76|0);
 }
 $65 = HEAP32[$12>>2]|0;
 $66 = (32 - ($65))|0;
 $67 = -1 >>> $66;
 $__m1 = $67;
 $68 = HEAP32[$__first>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = $__m1;
 $71 = $69 & $70;
 $2 = $71;
 $72 = $2;
 $73 = (_llvm_ctpop_i32(($72|0))|0);
 $74 = $__r;
 $75 = (($74) + ($73))|0;
 $__r = $75;
 $76 = $__r;
 STACKTOP = sp;return ($76|0);
}
function __ZNSt3__118__count_bool_falseINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 68|0;
 $12 = sp + 24|0;
 $__clz_f = sp + 16|0;
 HEAP32[$12>>2] = $__n;
 $__r = 0;
 $13 = (($__first) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = (($__first) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (32 - ($17))|0;
  HEAP32[$__clz_f>>2] = $18;
  $9 = $__clz_f;
  $10 = $12;
  $19 = $9;
  $20 = $10;
  ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
  $6 = $19;
  $7 = $20;
  $21 = $7;
  $22 = $6;
  $3 = $8;
  $4 = $21;
  $5 = $22;
  $23 = $4;
  $24 = HEAP32[$23>>2]|0;
  $25 = $5;
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24>>>0)<($26>>>0);
  if ($27) {
   $28 = $7;
   $31 = $28;
  } else {
   $29 = $6;
   $31 = $29;
  }
  $30 = HEAP32[$31>>2]|0;
  $__dn = $30;
  $32 = (($__first) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = -1 << $33;
  $35 = HEAP32[$__clz_f>>2]|0;
  $36 = $__dn;
  $37 = (($35) - ($36))|0;
  $38 = -1 >>> $37;
  $39 = $34 & $38;
  $__m = $39;
  $40 = HEAP32[$__first>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 ^ -1;
  $43 = $__m;
  $44 = $42 & $43;
  $0 = $44;
  $45 = $0;
  $46 = (_llvm_ctpop_i32(($45|0))|0);
  $__r = $46;
  $47 = $__dn;
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) - ($47))|0;
  HEAP32[$12>>2] = $49;
  $50 = HEAP32[$__first>>2]|0;
  $51 = (($50) + 4|0);
  HEAP32[$__first>>2] = $51;
 }
 while(1) {
  $52 = HEAP32[$12>>2]|0;
  $53 = ($52>>>0)>=(32);
  if (!($53)) {
   break;
  }
  $54 = HEAP32[$__first>>2]|0;
  $55 = HEAP32[$54>>2]|0;
  $56 = $55 ^ -1;
  $1 = $56;
  $57 = $1;
  $58 = (_llvm_ctpop_i32(($57|0))|0);
  $59 = $__r;
  $60 = (($59) + ($58))|0;
  $__r = $60;
  $61 = HEAP32[$__first>>2]|0;
  $62 = (($61) + 4|0);
  HEAP32[$__first>>2] = $62;
  $63 = HEAP32[$12>>2]|0;
  $64 = (($63) - 32)|0;
  HEAP32[$12>>2] = $64;
 }
 $65 = HEAP32[$12>>2]|0;
 $66 = ($65>>>0)>(0);
 if (!($66)) {
  $79 = $__r;
  STACKTOP = sp;return ($79|0);
 }
 $67 = HEAP32[$12>>2]|0;
 $68 = (32 - ($67))|0;
 $69 = -1 >>> $68;
 $__m1 = $69;
 $70 = HEAP32[$__first>>2]|0;
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 ^ -1;
 $73 = $__m1;
 $74 = $72 & $73;
 $2 = $74;
 $75 = $2;
 $76 = (_llvm_ctpop_i32(($75|0))|0);
 $77 = $__r;
 $78 = (($77) + ($76))|0;
 $__r = $78;
 $79 = $__r;
 STACKTOP = sp;return ($79|0);
}
function __ZNSt3__16__sortIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0;
 var $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 164|0;
 $__t$i4 = sp + 140|0;
 $__t$i3 = sp + 116|0;
 $__t$i2 = sp + 92|0;
 $__t$i1 = sp + 68|0;
 $__t$i = sp + 44|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $33 = $31;
   $34 = $30;
   $35 = $33;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 4)&-1;
   $__len = $38;
   $39 = $__len;
   switch ($39|0) {
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   default: {
   }
   }
   $81 = $__len;
   $82 = ($81|0)<=(30);
   if ($82) {
    label = 12;
    break L1;
   }
   $86 = $30;
   $__m = $86;
   $87 = $31;
   $__lm1 = $87;
   $88 = $__lm1;
   $89 = (($88) + -4|0);
   $__lm1 = $89;
   $90 = $__len;
   $91 = ($90|0)>=(1000);
   if ($91) {
    $92 = $__len;
    $93 = (($92|0) / 2)&-1;
    $__delta = $93;
    $94 = $__delta;
    $95 = $__m;
    $96 = (($95) + ($94<<2)|0);
    $__m = $96;
    $97 = $__delta;
    $98 = (($97|0) / 2)&-1;
    $__delta = $98;
    $99 = $30;
    $100 = $30;
    $101 = $__delta;
    $102 = (($100) + ($101<<2)|0);
    $103 = $__m;
    $104 = $__m;
    $105 = $__delta;
    $106 = (($104) + ($105<<2)|0);
    $107 = $__lm1;
    $108 = $32;
    $109 = (__ZNSt3__17__sort5IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($99,$102,$103,$106,$107,$108)|0);
    $__n_swaps = $109;
   } else {
    $110 = $__len;
    $111 = (($110|0) / 2)&-1;
    $__delta = $111;
    $112 = $__delta;
    $113 = $__m;
    $114 = (($113) + ($112<<2)|0);
    $__m = $114;
    $115 = $30;
    $116 = $__m;
    $117 = $__lm1;
    $118 = $32;
    $119 = (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($115,$116,$117,$118)|0);
    $__n_swaps = $119;
   }
   $120 = $30;
   $__i = $120;
   $121 = $__lm1;
   $__j = $121;
   $122 = $32;
   $123 = $__i;
   $124 = $__m;
   $125 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($122,$123,$124)|0);
   if ($125) {
    break;
   }
   while(1) {
    $126 = $__i;
    $127 = $__j;
    $128 = (($127) + -4|0);
    $__j = $128;
    $129 = ($126|0)==($128|0);
    if ($129) {
     break;
    }
    $198 = $32;
    $199 = $__j;
    $200 = $__m;
    $201 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($198,$199,$200)|0);
    if ($201) {
     label = 41;
     break L3;
    }
   }
   $130 = $__i;
   $131 = (($130) + 4|0);
   $__i = $131;
   $132 = $31;
   $__j = $132;
   $133 = $32;
   $134 = $30;
   $135 = $__j;
   $136 = (($135) + -4|0);
   $__j = $136;
   $137 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($133,$134,$136)|0);
   if (!($137)) {
    while(1) {
     $138 = $__i;
     $139 = $__j;
     $140 = ($138|0)==($139|0);
     if ($140) {
      label = 22;
      break L1;
     }
     $141 = $32;
     $142 = $30;
     $143 = $__i;
     $144 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($141,$142,$143)|0);
     if ($144) {
      break;
     }
     $161 = $__i;
     $162 = (($161) + 4|0);
     $__i = $162;
    }
    $145 = $__i;
    $146 = $__j;
    $23 = $145;
    $24 = $146;
    $147 = $23;
    $22 = $147;
    $148 = $22;
    $149 = HEAP32[$148>>2]|0;
    HEAP32[$__t$i1>>2] = $149;
    $150 = $24;
    $20 = $150;
    $151 = $20;
    $152 = HEAP32[$151>>2]|0;
    $153 = $23;
    HEAP32[$153>>2] = $152;
    $21 = $__t$i1;
    $154 = $21;
    $155 = HEAP32[$154>>2]|0;
    $156 = $24;
    HEAP32[$156>>2] = $155;
    $157 = $__n_swaps;
    $158 = (($157) + 1)|0;
    $__n_swaps = $158;
    $159 = $__i;
    $160 = (($159) + 4|0);
    $__i = $160;
   }
   $163 = $__i;
   $164 = $__j;
   $165 = ($163|0)==($164|0);
   if ($165) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $166 = $32;
     $167 = $30;
     $168 = $__i;
     $169 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($166,$167,$168)|0);
     $170 = $169 ^ 1;
     if (!($170)) {
      break;
     }
     $171 = $__i;
     $172 = (($171) + 4|0);
     $__i = $172;
    }
    while(1) {
     $173 = $32;
     $174 = $30;
     $175 = $__j;
     $176 = (($175) + -4|0);
     $__j = $176;
     $177 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($173,$174,$176)|0);
     if (!($177)) {
      break;
     }
    }
    $178 = $__i;
    $179 = $__j;
    $180 = ($178>>>0)>=($179>>>0);
    if ($180) {
     break;
    }
    $181 = $__i;
    $182 = $__j;
    $18 = $181;
    $19 = $182;
    $183 = $18;
    $17 = $183;
    $184 = $17;
    $185 = HEAP32[$184>>2]|0;
    HEAP32[$__t$i2>>2] = $185;
    $186 = $19;
    $15 = $186;
    $187 = $15;
    $188 = HEAP32[$187>>2]|0;
    $189 = $18;
    HEAP32[$189>>2] = $188;
    $16 = $__t$i2;
    $190 = $16;
    $191 = HEAP32[$190>>2]|0;
    $192 = $19;
    HEAP32[$192>>2] = $191;
    $193 = $__n_swaps;
    $194 = (($193) + 1)|0;
    $__n_swaps = $194;
    $195 = $__i;
    $196 = (($195) + 4|0);
    $__i = $196;
   }
   $197 = $__i;
   $30 = $197;
  }
  if ((label|0) == 41) {
   label = 0;
   $202 = $__i;
   $203 = $__j;
   $13 = $202;
   $14 = $203;
   $204 = $13;
   $12 = $204;
   $205 = $12;
   $206 = HEAP32[$205>>2]|0;
   HEAP32[$__t$i3>>2] = $206;
   $207 = $14;
   $10 = $207;
   $208 = $10;
   $209 = HEAP32[$208>>2]|0;
   $210 = $13;
   HEAP32[$210>>2] = $209;
   $11 = $__t$i3;
   $211 = $11;
   $212 = HEAP32[$211>>2]|0;
   $213 = $14;
   HEAP32[$213>>2] = $212;
   $214 = $__n_swaps;
   $215 = (($214) + 1)|0;
   $__n_swaps = $215;
  }
  $216 = $__i;
  $217 = (($216) + 4|0);
  $__i = $217;
  $218 = $__i;
  $219 = $__j;
  $220 = ($218>>>0)<($219>>>0);
  if ($220) {
   while(1) {
    while(1) {
     $221 = $32;
     $222 = $__i;
     $223 = $__m;
     $224 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($221,$222,$223)|0);
     if (!($224)) {
      break;
     }
     $225 = $__i;
     $226 = (($225) + 4|0);
     $__i = $226;
    }
    while(1) {
     $227 = $32;
     $228 = $__j;
     $229 = (($228) + -4|0);
     $__j = $229;
     $230 = $__m;
     $231 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($227,$229,$230)|0);
     $232 = $231 ^ 1;
     if (!($232)) {
      break;
     }
    }
    $233 = $__i;
    $234 = $__j;
    $235 = ($233>>>0)>($234>>>0);
    if ($235) {
     break;
    }
    $236 = $__i;
    $237 = $__j;
    $8 = $236;
    $9 = $237;
    $238 = $8;
    $7 = $238;
    $239 = $7;
    $240 = HEAP32[$239>>2]|0;
    HEAP32[$__t$i4>>2] = $240;
    $241 = $9;
    $5 = $241;
    $242 = $5;
    $243 = HEAP32[$242>>2]|0;
    $244 = $8;
    HEAP32[$244>>2] = $243;
    $6 = $__t$i4;
    $245 = $6;
    $246 = HEAP32[$245>>2]|0;
    $247 = $9;
    HEAP32[$247>>2] = $246;
    $248 = $__n_swaps;
    $249 = (($248) + 1)|0;
    $__n_swaps = $249;
    $250 = $__m;
    $251 = $__i;
    $252 = ($250|0)==($251|0);
    if ($252) {
     $253 = $__j;
     $__m = $253;
    }
    $254 = $__i;
    $255 = (($254) + 4|0);
    $__i = $255;
   }
  }
  $256 = $__i;
  $257 = $__m;
  $258 = ($256|0)!=($257|0);
  if ($258) {
   $259 = $32;
   $260 = $__m;
   $261 = $__i;
   $262 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($259,$260,$261)|0);
   if ($262) {
    $263 = $__i;
    $264 = $__m;
    $3 = $263;
    $4 = $264;
    $265 = $3;
    $2 = $265;
    $266 = $2;
    $267 = HEAP32[$266>>2]|0;
    HEAP32[$__t$i5>>2] = $267;
    $268 = $4;
    $0 = $268;
    $269 = $0;
    $270 = HEAP32[$269>>2]|0;
    $271 = $3;
    HEAP32[$271>>2] = $270;
    $1 = $__t$i5;
    $272 = $1;
    $273 = HEAP32[$272>>2]|0;
    $274 = $4;
    HEAP32[$274>>2] = $273;
    $275 = $__n_swaps;
    $276 = (($275) + 1)|0;
    $__n_swaps = $276;
   }
  }
  $277 = $__n_swaps;
  $278 = ($277|0)==(0);
  if ($278) {
   $279 = $30;
   $280 = $__i;
   $281 = $32;
   $282 = (__ZNSt3__127__insertion_sort_incompleteIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($279,$280,$281)|0);
   $283 = $282&1;
   $__fs = $283;
   $284 = $__i;
   $285 = (($284) + 4|0);
   $286 = $31;
   $287 = $32;
   $288 = (__ZNSt3__127__insertion_sort_incompleteIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($285,$286,$287)|0);
   if ($288) {
    $289 = $__fs;
    $290 = $289&1;
    if ($290) {
     label = 64;
     break;
    }
    $291 = $__i;
    $31 = $291;
    continue;
   }
   $292 = $__fs;
   $293 = $292&1;
   if ($293) {
    $294 = $__i;
    $295 = (($294) + 4|0);
    $__i = $295;
    $30 = $295;
    continue;
   }
  }
  $296 = $__i;
  $297 = $30;
  $298 = $296;
  $299 = $297;
  $300 = (($298) - ($299))|0;
  $301 = (($300|0) / 4)&-1;
  $302 = $31;
  $303 = $__i;
  $304 = $302;
  $305 = $303;
  $306 = (($304) - ($305))|0;
  $307 = (($306|0) / 4)&-1;
  $308 = ($301|0)<($307|0);
  if ($308) {
   $309 = $30;
   $310 = $__i;
   $311 = $32;
   __ZNSt3__16__sortIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($309,$310,$311);
   $312 = $__i;
   $313 = (($312) + 4|0);
   $__i = $313;
   $30 = $313;
  } else {
   $314 = $__i;
   $315 = (($314) + 4|0);
   $316 = $31;
   $317 = $32;
   __ZNSt3__16__sortIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($315,$316,$317);
   $318 = $__i;
   $31 = $318;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $40 = $32;
  $41 = $31;
  $42 = (($41) + -4|0);
  $31 = $42;
  $43 = $30;
  $44 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($40,$42,$43)|0);
  if ($44) {
   $45 = $30;
   $46 = $31;
   $28 = $45;
   $29 = $46;
   $47 = $28;
   $27 = $47;
   $48 = $27;
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$__t$i>>2] = $49;
   $50 = $29;
   $25 = $50;
   $51 = $25;
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   HEAP32[$53>>2] = $52;
   $26 = $__t$i;
   $54 = $26;
   $55 = HEAP32[$54>>2]|0;
   $56 = $29;
   HEAP32[$56>>2] = $55;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $57 = $30;
  $58 = $30;
  $59 = (($58) + 4|0);
  $60 = $31;
  $61 = (($60) + -4|0);
  $31 = $61;
  $62 = $32;
  (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($57,$59,$61,$62)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $63 = $30;
  $64 = $30;
  $65 = (($64) + 4|0);
  $66 = $30;
  $67 = (($66) + 8|0);
  $68 = $31;
  $69 = (($68) + -4|0);
  $31 = $69;
  $70 = $32;
  (__ZNSt3__17__sort4IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($63,$65,$67,$69,$70)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $71 = $30;
  $72 = $30;
  $73 = (($72) + 4|0);
  $74 = $30;
  $75 = (($74) + 8|0);
  $76 = $30;
  $77 = (($76) + 12|0);
  $78 = $31;
  $79 = (($78) + -4|0);
  $31 = $79;
  $80 = $32;
  (__ZNSt3__17__sort5IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($71,$73,$75,$77,$79,$80)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $83 = $30;
  $84 = $31;
  $85 = $32;
  __ZNSt3__118__insertion_sort_3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($83,$84,$85);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($this,$lhs,$rhs) {
 $this = $this|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $lhs;
 $3 = $rhs;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK7croutes8net_bondIdE4sameERKS1_($5,$7)|0);
 if ($8) {
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN7croutes8net_bondIdE8distanceEv($10)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = (__ZN7croutes8net_bondIdE8distanceEv($14)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $12 < $16;
  $$expand_i1_val2 = $17&1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0;
 var $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 120|0;
 $__t$i3 = sp + 96|0;
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 48|0;
 $__t$i = sp + 24|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = $27;
 $32 = $26;
 $33 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($30,$31,$32)|0);
 if ($33) {
  $68 = $29;
  $69 = $28;
  $70 = $27;
  $71 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($68,$69,$70)|0);
  if ($71) {
   $72 = $26;
   $73 = $28;
   $3 = $72;
   $4 = $73;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$__t$i4>>2] = $76;
   $77 = $4;
   $0 = $77;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   HEAP32[$80>>2] = $79;
   $1 = $__t$i4;
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = $4;
   HEAP32[$83>>2] = $82;
   $__r = 1;
   $84 = $__r;
   $25 = $84;
   $114 = $25;
   STACKTOP = sp;return ($114|0);
  }
  $85 = $26;
  $86 = $27;
  $8 = $85;
  $9 = $86;
  $87 = $8;
  $7 = $87;
  $88 = $7;
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$__t$i3>>2] = $89;
  $90 = $9;
  $5 = $90;
  $91 = $5;
  $92 = HEAP32[$91>>2]|0;
  $93 = $8;
  HEAP32[$93>>2] = $92;
  $6 = $__t$i3;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = $9;
  HEAP32[$96>>2] = $95;
  $__r = 1;
  $97 = $29;
  $98 = $28;
  $99 = $27;
  $100 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($97,$98,$99)|0);
  if ($100) {
   $101 = $27;
   $102 = $28;
   $18 = $101;
   $19 = $102;
   $103 = $18;
   $17 = $103;
   $104 = $17;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$__t$i1>>2] = $105;
   $106 = $19;
   $15 = $106;
   $107 = $15;
   $108 = HEAP32[$107>>2]|0;
   $109 = $18;
   HEAP32[$109>>2] = $108;
   $16 = $__t$i1;
   $110 = $16;
   $111 = HEAP32[$110>>2]|0;
   $112 = $19;
   HEAP32[$112>>2] = $111;
   $__r = 2;
  }
  $113 = $__r;
  $25 = $113;
  $114 = $25;
  STACKTOP = sp;return ($114|0);
 } else {
  $34 = $29;
  $35 = $28;
  $36 = $27;
  $37 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($34,$35,$36)|0);
  if (!($37)) {
   $38 = $__r;
   $25 = $38;
   $114 = $25;
   STACKTOP = sp;return ($114|0);
  }
  $39 = $27;
  $40 = $28;
  $23 = $39;
  $24 = $40;
  $41 = $23;
  $22 = $41;
  $42 = $22;
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$__t$i>>2] = $43;
  $44 = $24;
  $20 = $44;
  $45 = $20;
  $46 = HEAP32[$45>>2]|0;
  $47 = $23;
  HEAP32[$47>>2] = $46;
  $21 = $__t$i;
  $48 = $21;
  $49 = HEAP32[$48>>2]|0;
  $50 = $24;
  HEAP32[$50>>2] = $49;
  $__r = 1;
  $51 = $29;
  $52 = $27;
  $53 = $26;
  $54 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($51,$52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$__t$i2>>2] = $59;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   $62 = HEAP32[$61>>2]|0;
   $63 = $13;
   HEAP32[$63>>2] = $62;
   $11 = $__t$i2;
   $64 = $11;
   $65 = HEAP32[$64>>2]|0;
   $66 = $14;
   HEAP32[$66>>2] = $65;
   $__r = 2;
  }
  $67 = $__r;
  $25 = $67;
  $114 = $25;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort4IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 48|0;
 $__t$i = sp + 24|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = $18;
 $27 = $17;
 $28 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($25,$26,$27)|0);
 if (!($28)) {
  $79 = $__r;
  STACKTOP = sp;return ($79|0);
 }
 $29 = $17;
 $30 = $18;
 $13 = $29;
 $14 = $30;
 $31 = $13;
 $12 = $31;
 $32 = $12;
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$__t$i>>2] = $33;
 $34 = $14;
 $10 = $34;
 $35 = $10;
 $36 = HEAP32[$35>>2]|0;
 $37 = $13;
 HEAP32[$37>>2] = $36;
 $11 = $__t$i;
 $38 = $11;
 $39 = HEAP32[$38>>2]|0;
 $40 = $14;
 HEAP32[$40>>2] = $39;
 $41 = $__r;
 $42 = (($41) + 1)|0;
 $__r = $42;
 $43 = $19;
 $44 = $17;
 $45 = $16;
 $46 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($43,$44,$45)|0);
 if ($46) {
  $47 = $16;
  $48 = $17;
  $3 = $47;
  $4 = $48;
  $49 = $3;
  $2 = $49;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$__t$i2>>2] = $51;
  $52 = $4;
  $0 = $52;
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  HEAP32[$55>>2] = $54;
  $1 = $__t$i2;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = $4;
  HEAP32[$58>>2] = $57;
  $59 = $__r;
  $60 = (($59) + 1)|0;
  $__r = $60;
  $61 = $19;
  $62 = $16;
  $63 = $15;
  $64 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($61,$62,$63)|0);
  if ($64) {
   $65 = $15;
   $66 = $16;
   $8 = $65;
   $9 = $66;
   $67 = $8;
   $7 = $67;
   $68 = $7;
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$__t$i1>>2] = $69;
   $70 = $9;
   $5 = $70;
   $71 = $5;
   $72 = HEAP32[$71>>2]|0;
   $73 = $8;
   HEAP32[$73>>2] = $72;
   $6 = $__t$i1;
   $74 = $6;
   $75 = HEAP32[$74>>2]|0;
   $76 = $9;
   HEAP32[$76>>2] = $75;
   $77 = $__r;
   $78 = (($77) + 1)|0;
   $__r = $78;
  }
 }
 $79 = $__r;
 STACKTOP = sp;return ($79|0);
}
function __ZNSt3__17__sort5IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 100|0;
 $__t$i2 = sp + 76|0;
 $__t$i1 = sp + 52|0;
 $__t$i = sp + 28|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = $24;
 $34 = $23;
 $35 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($32,$33,$34)|0);
 if (!($35)) {
  $104 = $__r;
  STACKTOP = sp;return ($104|0);
 }
 $36 = $23;
 $37 = $24;
 $18 = $36;
 $19 = $37;
 $38 = $18;
 $17 = $38;
 $39 = $17;
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$__t$i>>2] = $40;
 $41 = $19;
 $15 = $41;
 $42 = $15;
 $43 = HEAP32[$42>>2]|0;
 $44 = $18;
 HEAP32[$44>>2] = $43;
 $16 = $__t$i;
 $45 = $16;
 $46 = HEAP32[$45>>2]|0;
 $47 = $19;
 HEAP32[$47>>2] = $46;
 $48 = $__r;
 $49 = (($48) + 1)|0;
 $__r = $49;
 $50 = $25;
 $51 = $23;
 $52 = $22;
 $53 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($50,$51,$52)|0);
 if ($53) {
  $54 = $22;
  $55 = $23;
  $8 = $54;
  $9 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$__t$i2>>2] = $58;
  $59 = $9;
  $5 = $59;
  $60 = $5;
  $61 = HEAP32[$60>>2]|0;
  $62 = $8;
  HEAP32[$62>>2] = $61;
  $6 = $__t$i2;
  $63 = $6;
  $64 = HEAP32[$63>>2]|0;
  $65 = $9;
  HEAP32[$65>>2] = $64;
  $66 = $__r;
  $67 = (($66) + 1)|0;
  $__r = $67;
  $68 = $25;
  $69 = $22;
  $70 = $21;
  $71 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($68,$69,$70)|0);
  if ($71) {
   $72 = $21;
   $73 = $22;
   $3 = $72;
   $4 = $73;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$__t$i3>>2] = $76;
   $77 = $4;
   $0 = $77;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   HEAP32[$80>>2] = $79;
   $1 = $__t$i3;
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = $4;
   HEAP32[$83>>2] = $82;
   $84 = $__r;
   $85 = (($84) + 1)|0;
   $__r = $85;
   $86 = $25;
   $87 = $21;
   $88 = $20;
   $89 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($86,$87,$88)|0);
   if ($89) {
    $90 = $20;
    $91 = $21;
    $13 = $90;
    $14 = $91;
    $92 = $13;
    $12 = $92;
    $93 = $12;
    $94 = HEAP32[$93>>2]|0;
    HEAP32[$__t$i1>>2] = $94;
    $95 = $14;
    $10 = $95;
    $96 = $10;
    $97 = HEAP32[$96>>2]|0;
    $98 = $13;
    HEAP32[$98>>2] = $97;
    $11 = $__t$i1;
    $99 = $11;
    $100 = HEAP32[$99>>2]|0;
    $101 = $14;
    HEAP32[$101>>2] = $100;
    $102 = $__r;
    $103 = (($102) + 1)|0;
    $__r = $103;
   }
  }
 }
 $104 = $__r;
 STACKTOP = sp;return ($104|0);
}
function __ZNSt3__118__insertion_sort_3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 4|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = (($6) + 8|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = (($9) + 4|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = (($13) + 4|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = $__i;
  $20 = $__j;
  $21 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($18,$19,$20)|0);
  if ($21) {
   $22 = $__i;
   $2 = $22;
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$__t>>2] = $24;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__k;
    $0 = $27;
    $28 = $0;
    $29 = HEAP32[$28>>2]|0;
    $30 = $__j;
    HEAP32[$30>>2] = $29;
    $31 = $__k;
    $__j = $31;
    $32 = $__j;
    $33 = $3;
    $34 = ($32|0)!=($33|0);
    if ($34) {
     $35 = $5;
     $36 = $__k;
     $37 = (($36) + -4|0);
     $__k = $37;
     $38 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($35,$__t,$37)|0);
     $45 = $38;
    } else {
     $45 = 0;
    }
    if (!($45)) {
     break;
    }
   }
   $1 = $__t;
   $39 = $1;
   $40 = HEAP32[$39>>2]|0;
   $41 = $__j;
   HEAP32[$41>>2] = $40;
  }
  $42 = $__i;
  $__j = $42;
  $43 = $__i;
  $44 = (($43) + 4|0);
  $__i = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0;
 var $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 36|0;
 $__t = sp + 4|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 4)&-1;
 switch ($17|0) {
 case 2:  {
  $18 = $11;
  $19 = $10;
  $20 = (($19) + -4|0);
  $10 = $20;
  $21 = $9;
  $22 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($18,$20,$21)|0);
  if ($22) {
   $23 = $9;
   $24 = $10;
   $6 = $23;
   $7 = $24;
   $25 = $6;
   $5 = $25;
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$__t$i>>2] = $27;
   $28 = $7;
   $3 = $28;
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = $6;
   HEAP32[$31>>2] = $30;
   $4 = $__t$i;
   $32 = $4;
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   HEAP32[$34>>2] = $33;
  }
  $$expand_i1_val2 = 1;
  $8 = $$expand_i1_val2;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 4:  {
  $41 = $9;
  $42 = $9;
  $43 = (($42) + 4|0);
  $44 = $9;
  $45 = (($44) + 8|0);
  $46 = $10;
  $47 = (($46) + -4|0);
  $10 = $47;
  $48 = $11;
  (__ZNSt3__17__sort4IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($41,$43,$45,$47,$48)|0);
  $$expand_i1_val6 = 1;
  $8 = $$expand_i1_val6;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $8 = $$expand_i1_val;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 5:  {
  $49 = $9;
  $50 = $9;
  $51 = (($50) + 4|0);
  $52 = $9;
  $53 = (($52) + 8|0);
  $54 = $9;
  $55 = (($54) + 12|0);
  $56 = $10;
  $57 = (($56) + -4|0);
  $10 = $57;
  $58 = $11;
  (__ZNSt3__17__sort5IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($49,$51,$53,$55,$57,$58)|0);
  $$expand_i1_val8 = 1;
  $8 = $$expand_i1_val8;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 3:  {
  $35 = $9;
  $36 = $9;
  $37 = (($36) + 4|0);
  $38 = $10;
  $39 = (($38) + -4|0);
  $10 = $39;
  $40 = $11;
  (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($35,$37,$39,$40)|0);
  $$expand_i1_val4 = 1;
  $8 = $$expand_i1_val4;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 default: {
  $59 = $9;
  $60 = (($59) + 8|0);
  $__j = $60;
  $61 = $9;
  $62 = $9;
  $63 = (($62) + 4|0);
  $64 = $__j;
  $65 = $11;
  (__ZNSt3__17__sort3IRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($61,$63,$64,$65)|0);
  $__limit = 8;
  $__count = 0;
  $66 = $__j;
  $67 = (($66) + 4|0);
  $__i = $67;
  while(1) {
   $68 = $__i;
   $69 = $10;
   $70 = ($68|0)!=($69|0);
   if (!($70)) {
    label = 22;
    break;
   }
   $71 = $11;
   $72 = $__i;
   $73 = $__j;
   $74 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($71,$72,$73)|0);
   if ($74) {
    $75 = $__i;
    $1 = $75;
    $76 = $1;
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$__t>>2] = $77;
    $78 = $__j;
    $__k = $78;
    $79 = $__i;
    $__j = $79;
    while(1) {
     $80 = $__k;
     $0 = $80;
     $81 = $0;
     $82 = HEAP32[$81>>2]|0;
     $83 = $__j;
     HEAP32[$83>>2] = $82;
     $84 = $__k;
     $__j = $84;
     $85 = $__j;
     $86 = $9;
     $87 = ($85|0)!=($86|0);
     if ($87) {
      $88 = $11;
      $89 = $__k;
      $90 = (($89) + -4|0);
      $__k = $90;
      $91 = (__ZZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($88,$__t,$90)|0);
      $106 = $91;
     } else {
      $106 = 0;
     }
     if (!($106)) {
      break;
     }
    }
    $2 = $__t;
    $92 = $2;
    $93 = HEAP32[$92>>2]|0;
    $94 = $__j;
    HEAP32[$94>>2] = $93;
    $95 = $__count;
    $96 = (($95) + 1)|0;
    $__count = $96;
    $97 = ($96|0)==(8);
    if ($97) {
     label = 18;
     break;
    }
   }
   $102 = $__i;
   $__j = $102;
   $103 = $__i;
   $104 = (($103) + 4|0);
   $__i = $104;
  }
  if ((label|0) == 18) {
   $98 = $__i;
   $99 = (($98) + 4|0);
   $__i = $99;
   $100 = $10;
   $101 = ($99|0)==($100|0);
   $$expand_i1_val10 = $101&1;
   $8 = $$expand_i1_val10;
   $$pre_trunc = $8;
   $105 = $$pre_trunc&1;
   STACKTOP = sp;return ($105|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $8 = $$expand_i1_val12;
   $$pre_trunc = $8;
   $105 = $$pre_trunc&1;
   STACKTOP = sp;return ($105|0);
  }
 }
 }
 return (0)|0;
}
function __ZNK7croutes8net_bondIdE4sameERKS1_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rhs;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if ($6) {
  $7 = (($2) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($11|0);
  if ($12) {
   $23 = 1;
   STACKTOP = sp;return ($23|0);
  }
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($13|0)==($16|0);
 if ($17) {
  $18 = (($2) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($19|0)==($21|0);
  $24 = $22;
 } else {
  $24 = 0;
 }
 $23 = $24;
 STACKTOP = sp;return ($23|0);
}
function __ZN7croutes8net_bondIdE8distanceEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(473,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEEC2EjjS7_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNSt3__113__fill_n_trueINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = (($__first) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = (($__first) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if ($25) {
   $26 = $5;
   $29 = $26;
  } else {
   $27 = $4;
   $29 = $27;
  }
  $28 = HEAP32[$29>>2]|0;
  $__dn = $28;
  $30 = (($__first) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = HEAP32[$__first>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | $38;
  HEAP32[$39>>2] = $41;
  $42 = $__dn;
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) - ($42))|0;
  HEAP32[$10>>2] = $44;
  $45 = HEAP32[$__first>>2]|0;
  $46 = (($45) + 4|0);
  HEAP32[$__first>>2] = $46;
 }
 $47 = HEAP32[$10>>2]|0;
 $48 = (($47>>>0) / 32)&-1;
 $__nw = $48;
 $49 = HEAP32[$__first>>2]|0;
 $0 = $49;
 $50 = $0;
 $51 = $__nw;
 $52 = $51<<2;
 _memset(($50|0),-1,($52|0))|0;
 $53 = $__nw;
 $54 = $53<<5;
 $55 = HEAP32[$10>>2]|0;
 $56 = (($55) - ($54))|0;
 HEAP32[$10>>2] = $56;
 $57 = HEAP32[$10>>2]|0;
 $58 = ($57>>>0)>(0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $59 = $__nw;
 $60 = HEAP32[$__first>>2]|0;
 $61 = (($60) + ($59<<2)|0);
 HEAP32[$__first>>2] = $61;
 $62 = HEAP32[$10>>2]|0;
 $63 = (32 - ($62))|0;
 $64 = -1 >>> $63;
 $__m1 = $64;
 $65 = $__m1;
 $66 = HEAP32[$__first>>2]|0;
 $67 = HEAP32[$66>>2]|0;
 $68 = $67 | $65;
 HEAP32[$66>>2] = $68;
 STACKTOP = sp;return;
}
function __ZNSt3__114__fill_n_falseINS_6vectorIbNS_9allocatorIbEEEEEEvNS_14__bit_iteratorIT_Lb0EXLi0EEEENS6_9size_typeE($__first,$__n) {
 $__first = $__first|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__clz_f = 0, $__dn = 0, $__m = 0, $__m1 = 0, $__nw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 60|0;
 $10 = sp + 24|0;
 $__clz_f = sp + 20|0;
 HEAP32[$10>>2] = $__n;
 $11 = (($__first) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = (($__first) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (32 - ($15))|0;
  HEAP32[$__clz_f>>2] = $16;
  $7 = $__clz_f;
  $8 = $10;
  $17 = $7;
  $18 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $17;
  $5 = $18;
  $19 = $5;
  $20 = $4;
  $1 = $6;
  $2 = $19;
  $3 = $20;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22>>>0)<($24>>>0);
  if ($25) {
   $26 = $5;
   $29 = $26;
  } else {
   $27 = $4;
   $29 = $27;
  }
  $28 = HEAP32[$29>>2]|0;
  $__dn = $28;
  $30 = (($__first) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = -1 << $31;
  $33 = HEAP32[$__clz_f>>2]|0;
  $34 = $__dn;
  $35 = (($33) - ($34))|0;
  $36 = -1 >>> $35;
  $37 = $32 & $36;
  $__m = $37;
  $38 = $__m;
  $39 = $38 ^ -1;
  $40 = HEAP32[$__first>>2]|0;
  $41 = HEAP32[$40>>2]|0;
  $42 = $41 & $39;
  HEAP32[$40>>2] = $42;
  $43 = $__dn;
  $44 = HEAP32[$10>>2]|0;
  $45 = (($44) - ($43))|0;
  HEAP32[$10>>2] = $45;
  $46 = HEAP32[$__first>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$__first>>2] = $47;
 }
 $48 = HEAP32[$10>>2]|0;
 $49 = (($48>>>0) / 32)&-1;
 $__nw = $49;
 $50 = HEAP32[$__first>>2]|0;
 $0 = $50;
 $51 = $0;
 $52 = $__nw;
 $53 = $52<<2;
 _memset(($51|0),0,($53|0))|0;
 $54 = $__nw;
 $55 = $54<<5;
 $56 = HEAP32[$10>>2]|0;
 $57 = (($56) - ($55))|0;
 HEAP32[$10>>2] = $57;
 $58 = HEAP32[$10>>2]|0;
 $59 = ($58>>>0)>(0);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 $60 = $__nw;
 $61 = HEAP32[$__first>>2]|0;
 $62 = (($61) + ($60<<2)|0);
 HEAP32[$__first>>2] = $62;
 $63 = HEAP32[$10>>2]|0;
 $64 = (32 - ($63))|0;
 $65 = -1 >>> $64;
 $__m1 = $65;
 $66 = $__m1;
 $67 = $66 ^ -1;
 $68 = HEAP32[$__first>>2]|0;
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 & $67;
 HEAP32[$68>>2] = $70;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($40) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $22 = $51;
  $52 = $22;
  $19 = $48;
  $20 = $52;
  $53 = $19;
  $54 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  $56 = $17;
  $14 = $55;
  $15 = $56;
 }
 $57 = HEAP32[$34>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $59 = $13;
 $60 = (($59) + 12|0);
 $12 = $60;
 $61 = $12;
 $11 = $61;
 $62 = $11;
 $63 = HEAP32[$34>>2]|0;
 $3 = $34;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $8 = $62;
 $9 = $63;
 $10 = $74;
 $75 = $8;
 $76 = $9;
 $77 = $10;
 $5 = $75;
 $6 = $76;
 $7 = $77;
 $78 = $6;
 $4 = $78;
 $79 = $4;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE21__push_back_slow_pathISA_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEERNS7_ISA_EEEC2EjjSC_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(483,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEERNS7_ISA_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEERNS7_ISA_EEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEERNS7_ISA_EEEC2EjjSC_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE26__swap_out_circular_bufferERNS_14__split_bufferISA_RSB_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEERNS7_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNSt3__110shared_ptrIN7croutes6answerIdEEE11make_sharedIJEEES4_DpOT_($agg$result) {
 $agg$result = $agg$result|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 32|0;
 $8 = sp + 440|0;
 $9 = sp + 24|0;
 $15 = sp + 439|0;
 $16 = sp + 16|0;
 $56 = sp + 220|0;
 $57 = sp + 8|0;
 $60 = sp + 208|0;
 $61 = sp + 200|0;
 $62 = sp;
 $67 = sp + 176|0;
 $__a2 = sp + 438|0;
 $__hold2 = sp + 56|0;
 $94 = sp + 48|0;
 $95 = sp + 437|0;
 $93 = $__a2;
 $72 = $__a2;
 $73 = 1;
 $74 = 0;
 $100 = $73;
 $101 = ($100*24)|0;
 $71 = $101;
 $102 = $71;
 $103 = (__Znwj($102)|0);
 $68 = $94;
 $69 = $__a2;
 $70 = 1;
 $104 = $68;
 $105 = $69;
 HEAP32[$104>>2] = $105;
 $106 = (($104) + 4|0);
 $107 = $70;
 HEAP32[$106>>2] = $107;
 $64 = $__hold2;
 $65 = $103;
 $66 = $94;
 $108 = $64;
 $109 = $65;
 $110 = $66;
 $63 = $110;
 $111 = $63;
 ;HEAP32[$67+0>>2]=HEAP32[$111+0>>2]|0;HEAP32[$67+4>>2]=HEAP32[$111+4>>2]|0;
 ;HEAP8[$62+0>>0]=HEAP8[$67+0>>0]|0;HEAP8[$62+1>>0]=HEAP8[$67+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$67+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$67+3>>0]|0;HEAP8[$62+4>>0]=HEAP8[$67+4>>0]|0;HEAP8[$62+5>>0]=HEAP8[$67+5>>0]|0;HEAP8[$62+6>>0]=HEAP8[$67+6>>0]|0;HEAP8[$62+7>>0]=HEAP8[$67+7>>0]|0;
 $59 = $108;
 HEAP32[$60>>2] = $109;
 $112 = $59;
 $58 = $60;
 $113 = $58;
 $114 = HEAP32[$113>>2]|0;
 $52 = $62;
 $115 = $52;
 ;HEAP32[$61+0>>2]=HEAP32[$115+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$115+4>>2]|0;
 ;HEAP8[$57+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$57+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$61+3>>0]|0;HEAP8[$57+4>>0]=HEAP8[$61+4>>0]|0;HEAP8[$57+5>>0]=HEAP8[$61+5>>0]|0;HEAP8[$57+6>>0]=HEAP8[$61+6>>0]|0;HEAP8[$57+7>>0]=HEAP8[$61+7>>0]|0;
 $55 = $112;
 HEAP32[$56>>2] = $114;
 $116 = $55;
 $54 = $56;
 $117 = $54;
 $118 = HEAP32[$117>>2]|0;
 HEAP32[$116>>2] = $118;
 $119 = (($116) + 4|0);
 $53 = $57;
 $120 = $53;
 ;HEAP32[$119+0>>2]=HEAP32[$120+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$120+4>>2]|0;
 $33 = $__hold2;
 $121 = $33;
 $32 = $121;
 $122 = $32;
 $31 = $122;
 $123 = $31;
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0|0);
 if (!($125)) {
  $0 = $95;
  $1 = $__a2;
  ;HEAP8[$16+0>>0]=HEAP8[$95+0>>0]|0;
  $14 = $124;
  $126 = $14;
  $12 = $126;
  $13 = 0;
  $127 = $12;
  $128 = $13;
  $10 = $127;
  $11 = $128;
  $129 = $10;
  $130 = (3552 + 8|0);
  HEAP32[$129>>2] = $130;
  $131 = (($129) + 4|0);
  $132 = $11;
  HEAP32[$131>>2] = $132;
  $133 = (3616 + 8|0);
  HEAP32[$127>>2] = $133;
  $134 = (($127) + 8|0);
  $135 = $13;
  HEAP32[$134>>2] = $135;
  $136 = (376 + 8|0);
  HEAP32[$126>>2] = $136;
  $137 = (($126) + 12|0);
  $2 = $16;
  ;HEAP8[$9+0>>0]=HEAP8[$15+0>>0]|0;
  $7 = $137;
  $138 = $7;
  $6 = $9;
  ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
  $4 = $138;
  $139 = $4;
  $3 = $5;
  __ZN7croutes6answerIdEC2Ev($139);
 }
 $$expand_i1_val = 0;
 $98 = $$expand_i1_val;
 $17 = $agg$result;
 $140 = $17;
 HEAP32[$140>>2] = 0;
 $141 = (($140) + 4|0);
 HEAP32[$141>>2] = 0;
 $20 = $__hold2;
 $142 = $20;
 $19 = $142;
 $143 = $19;
 $18 = $143;
 $144 = $18;
 $145 = HEAP32[$144>>2]|0;
 $23 = $145;
 $146 = $23;
 $147 = (($146) + 12|0);
 $22 = $147;
 $148 = $22;
 $21 = $148;
 $149 = $21;
 HEAP32[$agg$result>>2] = $149;
 $28 = $__hold2;
 $150 = $28;
 $27 = $150;
 $151 = $27;
 $26 = $151;
 $152 = $26;
 $153 = HEAP32[$152>>2]|0;
 $__t$i = $153;
 $25 = $150;
 $154 = $25;
 $24 = $154;
 $155 = $24;
 HEAP32[$155>>2] = 0;
 $156 = $__t$i;
 $157 = (($agg$result) + 4|0);
 HEAP32[$157>>2] = $156;
 $158 = HEAP32[$agg$result>>2]|0;
 $29 = $agg$result;
 $30 = $158;
 $$expand_i1_val2 = 1;
 $98 = $$expand_i1_val2;
 $99 = 1;
 $$pre_trunc = $98;
 $159 = $$pre_trunc&1;
 if (!($159)) {
  __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 }
 $92 = $__hold2;
 $160 = $92;
 $90 = $160;
 $91 = 0;
 $161 = $90;
 $89 = $161;
 $162 = $89;
 $88 = $162;
 $163 = $88;
 $164 = HEAP32[$163>>2]|0;
 $__tmp$i$i = $164;
 $165 = $91;
 $78 = $161;
 $166 = $78;
 $77 = $166;
 $167 = $77;
 HEAP32[$167>>2] = $165;
 $168 = $__tmp$i$i;
 $169 = ($168|0)!=(0|0);
 if (!($169)) {
  STACKTOP = sp;return;
 }
 $76 = $161;
 $170 = $76;
 $75 = $170;
 $171 = $75;
 $172 = (($171) + 4|0);
 $173 = $__tmp$i$i;
 $86 = $172;
 $87 = $173;
 $174 = $86;
 $175 = HEAP32[$174>>2]|0;
 $176 = $87;
 $177 = (($174) + 4|0);
 $178 = HEAP32[$177>>2]|0;
 $83 = $175;
 $84 = $176;
 $85 = $178;
 $179 = $83;
 $180 = $84;
 $181 = $85;
 $80 = $179;
 $81 = $180;
 $82 = $181;
 $182 = $81;
 $79 = $182;
 $183 = $79;
 __ZdlPv($183);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (376 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 12|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN7croutes6answerIdEEEES4_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 12|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 __ZN7croutes6answerIdED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = (($11) + 12|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = (($11) + 12|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZN7croutes6answerIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__begin = 0, $__end = 0, $__range = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__begin = sp + 8|0;
 $__end = sp + 4|0;
 $18 = $this;
 $19 = $18;
 $__range = $19;
 $20 = $__range;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $15 = $21;
 $16 = $22;
 $23 = $16;
 $13 = $__begin;
 $14 = $23;
 $24 = $13;
 $25 = $14;
 HEAP32[$24>>2] = $25;
 $26 = $__range;
 $12 = $26;
 $27 = $12;
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $10 = $27;
 $11 = $29;
 $30 = $11;
 $8 = $__end;
 $9 = $30;
 $31 = $8;
 $32 = $9;
 HEAP32[$31>>2] = $32;
 while(1) {
  $5 = $__begin;
  $6 = $__end;
  $33 = $5;
  $34 = $6;
  $3 = $33;
  $4 = $34;
  $35 = $3;
  $2 = $35;
  $36 = $2;
  $37 = HEAP32[$36>>2]|0;
  $38 = $4;
  $1 = $38;
  $39 = $1;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)==($40|0);
  $42 = $41 ^ 1;
  if (!($42)) {
   break;
  }
  $0 = $__begin;
  $43 = $0;
  $44 = HEAP32[$43>>2]|0;
  $b = $44;
  $45 = $b;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)==(0|0);
  if (!($47)) {
   __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($46);
   __ZdlPv($46);
  }
  $48 = $b;
  HEAP32[$48>>2] = 0;
  $7 = $__begin;
  $49 = $7;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 4|0);
  HEAP32[$49>>2] = $51;
 }
 __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEED2Ev($19);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__e = 0, $__i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $15 = $12;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5clearEv($15);
 $11 = $15;
 $16 = $11;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $__i = $18;
 $10 = $15;
 $19 = $10;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $__e = $21;
 while(1) {
  $22 = $__i;
  $23 = $__e;
  $24 = ($22|0)!=($23|0);
  if (!($24)) {
   break;
  }
  $9 = $15;
  $25 = $9;
  $26 = (($25) + 20|0);
  $8 = $26;
  $27 = $8;
  $7 = $27;
  $28 = $7;
  $29 = $__i;
  $30 = HEAP32[$29>>2]|0;
  $4 = $28;
  $5 = $30;
  $6 = 1024;
  $31 = $4;
  $32 = $5;
  $33 = $6;
  $1 = $31;
  $2 = $32;
  $3 = $33;
  $34 = $2;
  $0 = $34;
  $35 = $0;
  __ZdlPv($35);
  $36 = $__i;
  $37 = (($36) + 4|0);
  $__i = $37;
 }
 __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEED2Ev($15);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 177|0;
 $25 = sp;
 $28 = sp + 176|0;
 $__i = sp + 24|0;
 $__e = sp + 16|0;
 $38 = $this;
 $39 = $38;
 $37 = $39;
 $40 = $37;
 $41 = (($40) + 20|0);
 $36 = $41;
 $42 = $36;
 $35 = $42;
 $43 = $35;
 $__a = $43;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($__i,$39);
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($__e,$39);
 while(1) {
  $33 = $__i;
  $34 = $__e;
  $44 = $33;
  $45 = $34;
  $31 = $44;
  $32 = $45;
  $46 = $31;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $32;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($48|0)==($51|0);
  $53 = $52 ^ 1;
  if (!($53)) {
   break;
  }
  $54 = $__a;
  $15 = $__i;
  $55 = $15;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $58 = $0;
  $6 = $54;
  $7 = $58;
  $59 = $6;
  $60 = $7;
  ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
  $3 = $59;
  $4 = $60;
  $61 = $3;
  $62 = $4;
  $1 = $61;
  $2 = $62;
  $9 = $__i;
  $63 = $9;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 4|0);
  HEAP32[$64>>2] = $66;
  $67 = HEAP32[$63>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = $66;
  $70 = $68;
  $71 = (($69) - ($70))|0;
  $72 = (($71|0) / 4)&-1;
  $73 = ($72|0)==(1024);
  if ($73) {
   $74 = HEAP32[$63>>2]|0;
   $75 = (($74) + 4|0);
   HEAP32[$63>>2] = $75;
   $76 = HEAP32[$63>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($63) + 4|0);
   HEAP32[$78>>2] = $77;
  }
 }
 $12 = $39;
 $79 = $12;
 $80 = (($79) + 20|0);
 $11 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 HEAP32[$82>>2] = 0;
 while(1) {
  $13 = $39;
  $83 = $13;
  $84 = (($83) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $85;
  $89 = $87;
  $90 = (($88) - ($89))|0;
  $91 = (($90|0) / 4)&-1;
  $92 = ($91>>>0)>(2);
  if (!($92)) {
   break;
  }
  $93 = $__a;
  $14 = $39;
  $94 = $14;
  $95 = (($94) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$96>>2]|0;
  $20 = $93;
  $21 = $97;
  $22 = 1024;
  $98 = $20;
  $99 = $21;
  $100 = $22;
  $17 = $98;
  $18 = $99;
  $19 = $100;
  $101 = $18;
  $16 = $101;
  $102 = $16;
  __ZdlPv($102);
  $29 = $39;
  $103 = $29;
  $104 = (($103) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 4|0);
  $26 = $103;
  $27 = $106;
  $107 = $26;
  $108 = $27;
  ;HEAP8[$25+0>>0]=HEAP8[$28+0>>0]|0;
  $23 = $107;
  $24 = $108;
  $109 = $23;
  $110 = $24;
  $111 = (($109) + 4|0);
  HEAP32[$111>>2] = $110;
 }
 $30 = $39;
 $112 = $30;
 $113 = (($112) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($112) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $114;
 $118 = $116;
 $119 = (($117) - ($118))|0;
 $120 = (($119|0) / 4)&-1;
 if ((($120|0) == 1)) {
  $121 = (($39) + 16|0);
  HEAP32[$121>>2] = 512;
  STACKTOP = sp;return;
 } else if ((($120|0) == 2)) {
  $122 = (($39) + 16|0);
  HEAP32[$122>>2] = 1024;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN7croutes6answerIdEEEES4_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN7croutes6answerIdEEEES4_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN7croutes6answerIdEEEES4_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes6answerIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes6answerIdEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 28|0;
 $6 = sp + 16|0;
 $10 = $this;
 $11 = $10;
 $9 = $11;
 $12 = $9;
 $8 = $12;
 $13 = $8;
 $7 = $13;
 HEAP32[$13>>2] = 0;
 $14 = (($13) + 4|0);
 HEAP32[$14>>2] = 0;
 $15 = (($13) + 8|0);
 $5 = $15;
 HEAP32[$6>>2] = 0;
 $16 = $5;
 $4 = $6;
 $17 = $4;
 $18 = HEAP32[$17>>2]|0;
 $2 = $16;
 HEAP32[$3>>2] = $18;
 $19 = $2;
 $1 = $19;
 $0 = $3;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function __ZN7croutes9algorithmIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN7croutes9algorithmIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes9algorithmIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes11nearest_algIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (536 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($1) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $5 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZN7croutes9algorithmIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes11nearest_algIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes11nearest_algIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes11nearest_algIdE10short_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes11nearest_algIdE4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes11nearest_algIdE12russian_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node_) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node_ = $first_node_|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__begin = 0, $__end = 0, $__p$i = 0, $__range = 0, $b = 0, $bundle = 0;
 var $edges = 0, $i = 0, $j = 0, $queue = 0, $size = 0, $visited = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp + 24|0;
 $38 = sp + 16|0;
 $39 = sp + 8|0;
 $59 = sp;
 $64 = sp + 512|0;
 $__annotator$i = sp + 511|0;
 $79 = sp + 204|0;
 $82 = sp + 192|0;
 $visited = sp + 136|0;
 $93 = sp + 509|0;
 $edges = sp + 124|0;
 $94 = sp + 120|0;
 $queue = sp + 108|0;
 $95 = sp + 96|0;
 $96 = sp + 92|0;
 $97 = sp + 88|0;
 $98 = sp + 508|0;
 $99 = sp + 80|0;
 $100 = sp + 72|0;
 $101 = sp + 60|0;
 $102 = sp + 48|0;
 $__begin = sp + 40|0;
 $__end = sp + 36|0;
 $88 = $this;
 $89 = $first_node_;
 $104 = $88;
 $87 = $data;
 $105 = $87;
 $106 = HEAP32[$105>>2]|0;
 $107 = (__ZNK7croutes5ndataIdE11nodes_countEv($106)|0);
 $size = $107;
 $$expand_i1_val = 0;
 $90 = $$expand_i1_val;
 __ZN7croutes6answerIdE4initEv($agg$result);
 $86 = $agg$result;
 $108 = $86;
 $109 = HEAP32[$108>>2]|0;
 __THREW__ = 0;
 $110 = (invoke_ii(460,($109|0))|0);
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  label = 19;
 } else {
  $bundle = $110;
  $113 = $size;
  HEAP8[$93>>0] = 0;
  __THREW__ = 0;
  invoke_viii(461,($visited|0),($113|0),($93|0));
  $114 = __THREW__; __THREW__ = 0;
  $115 = $114&1;
  if ($115) {
   label = 19;
  } else {
   HEAP32[$94>>2] = -1;
   __THREW__ = 0;
   invoke_viii(462,($edges|0),2,($94|0));
   $116 = __THREW__; __THREW__ = 0;
   $117 = $116&1;
   if ($117) {
    $193 = ___cxa_find_matching_catch()|0;
    $194 = tempRet0;
    $91 = $193;
    $92 = $194;
   } else {
    $85 = $queue;
    $118 = $85;
    $84 = $118;
    $119 = $84;
    $83 = $119;
    HEAP32[$119>>2] = 0;
    $120 = (($119) + 4|0);
    HEAP32[$120>>2] = 0;
    $121 = (($119) + 8|0);
    $81 = $121;
    HEAP32[$82>>2] = 0;
    $122 = $81;
    $80 = $82;
    $123 = $80;
    $124 = HEAP32[$123>>2]|0;
    $78 = $122;
    HEAP32[$79>>2] = $124;
    $125 = $78;
    $77 = $125;
    $76 = $79;
    $126 = $76;
    $127 = HEAP32[$126>>2]|0;
    HEAP32[$125>>2] = $127;
    $128 = $size;
    $129 = $size;
    $130 = (($129) - 1)|0;
    $131 = Math_imul($128, $130)|0;
    $132 = (($131>>>0) / 2)&-1;
    __THREW__ = 0;
    invoke_vii(463,($queue|0),($132|0));
    $133 = __THREW__; __THREW__ = 0;
    $134 = $133&1;
    L6: do {
     if ($134) {
      label = 21;
     } else {
      $i = 0;
      while(1) {
       $135 = $i;
       $136 = $size;
       $137 = ($135>>>0)<($136>>>0);
       if (!($137)) {
        break;
       }
       $138 = $i;
       $139 = (($138) + 1)|0;
       $j = $139;
       while(1) {
        $140 = $j;
        $141 = $size;
        $142 = ($140>>>0)<($141>>>0);
        if (!($142)) {
         break;
        }
        $143 = $j;
        $144 = $i;
        $145 = ($143|0)!=($144|0);
        if ($145) {
         $75 = $data;
         $146 = $75;
         $147 = HEAP32[$146>>2]|0;
         $148 = $i;
         $149 = $j;
         __THREW__ = 0;
         $150 = (invoke_iiii(464,($147|0),($148|0),($149|0))|0);
         $151 = __THREW__; __THREW__ = 0;
         $152 = $151&1;
         if ($152) {
          label = 21;
          break L6;
         }
         HEAP32[$95>>2] = $150;
         $73 = $queue;
         $74 = $95;
         $153 = $73;
         $154 = (($153) + 4|0);
         $155 = HEAP32[$154>>2]|0;
         $72 = $153;
         $156 = $72;
         $157 = (($156) + 8|0);
         $71 = $157;
         $158 = $71;
         $70 = $158;
         $159 = $70;
         $160 = HEAP32[$159>>2]|0;
         $161 = ($155>>>0)<($160>>>0);
         if ($161) {
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$153,1);
          $69 = $153;
          $162 = $69;
          $163 = (($162) + 8|0);
          $68 = $163;
          $164 = $68;
          $67 = $164;
          $165 = $67;
          $166 = (($153) + 4|0);
          $167 = HEAP32[$166>>2]|0;
          $65 = $167;
          $168 = $65;
          $169 = $74;
          $50 = $169;
          $170 = $50;
          $61 = $165;
          $62 = $168;
          $63 = $170;
          $171 = $61;
          $172 = $62;
          $173 = $63;
          $60 = $173;
          $174 = $60;
          ;HEAP8[$59+0>>0]=HEAP8[$64+0>>0]|0;
          $56 = $171;
          $57 = $172;
          $58 = $174;
          $175 = $56;
          $176 = $57;
          $177 = $58;
          $55 = $177;
          $178 = $55;
          $52 = $175;
          $53 = $176;
          $54 = $178;
          $179 = $53;
          $180 = ($179|0)==(0|0);
          if (!($180)) {
           $181 = $54;
           $51 = $181;
           $182 = $51;
           $183 = HEAP32[$182>>2]|0;
           HEAP32[$179>>2] = $183;
          }
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
          $184 = (($153) + 4|0);
          $185 = HEAP32[$184>>2]|0;
          $186 = (($185) + 4|0);
          HEAP32[$184>>2] = $186;
         } else {
          $187 = $74;
          $66 = $187;
          $188 = $66;
          __THREW__ = 0;
          invoke_vii(465,($153|0),($188|0));
          $189 = __THREW__; __THREW__ = 0;
          $190 = $189&1;
          if ($190) {
           label = 21;
           break L6;
          }
         }
        }
        $197 = $j;
        $198 = (($197) + 1)|0;
        $j = $198;
       }
       $199 = $i;
       $200 = (($199) + 1)|0;
       $i = $200;
      }
      $49 = $queue;
      $201 = $49;
      $202 = HEAP32[$201>>2]|0;
      $47 = $201;
      $48 = $202;
      $203 = $48;
      $45 = $96;
      $46 = $203;
      $204 = $45;
      $205 = $46;
      HEAP32[$204>>2] = $205;
      $44 = $queue;
      $206 = $44;
      $207 = (($206) + 4|0);
      $208 = HEAP32[$207>>2]|0;
      $42 = $206;
      $43 = $208;
      $209 = $43;
      $40 = $97;
      $41 = $209;
      $210 = $40;
      $211 = $41;
      HEAP32[$210>>2] = $211;
      ;HEAP8[$37+0>>0]=HEAP8[$98+0>>0]|0;
      ;HEAP8[$38+0>>0]=HEAP8[$97+0>>0]|0;HEAP8[$38+1>>0]=HEAP8[$97+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$97+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$97+3>>0]|0;
      ;HEAP8[$39+0>>0]=HEAP8[$96+0>>0]|0;HEAP8[$39+1>>0]=HEAP8[$96+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$96+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$96+3>>0]|0;
      $36 = $39;
      $212 = $36;
      $213 = HEAP32[$212>>2]|0;
      $32 = $38;
      $214 = $32;
      $215 = HEAP32[$214>>2]|0;
      $33 = $213;
      $34 = $215;
      $35 = $37;
      $216 = $33;
      $217 = $34;
      $218 = $35;
      __THREW__ = 0;
      invoke_viii(484,($216|0),($217|0),($218|0));
      $219 = __THREW__; __THREW__ = 0;
      $220 = $219&1;
      if ($220) {
       label = 21;
      } else {
       $30 = $99;
       $31 = $data;
       $221 = $30;
       $222 = $31;
       $223 = HEAP32[$222>>2]|0;
       HEAP32[$221>>2] = $223;
       $224 = (($221) + 4|0);
       $225 = $31;
       $226 = (($225) + 4|0);
       $227 = HEAP32[$226>>2]|0;
       HEAP32[$224>>2] = $227;
       $228 = (($221) + 4|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)!=(0|0);
       if ($230) {
        $231 = (($221) + 4|0);
        $232 = HEAP32[$231>>2]|0;
        __ZNSt3__119__shared_weak_count12__add_sharedEv($232);
       }
       $28 = $100;
       $29 = $agg$result;
       $233 = $28;
       $234 = $29;
       $235 = HEAP32[$234>>2]|0;
       HEAP32[$233>>2] = $235;
       $236 = (($233) + 4|0);
       $237 = $29;
       $238 = (($237) + 4|0);
       $239 = HEAP32[$238>>2]|0;
       HEAP32[$236>>2] = $239;
       $240 = (($233) + 4|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ($241|0)!=(0|0);
       if ($242) {
        $243 = (($233) + 4|0);
        $244 = HEAP32[$243>>2]|0;
        __ZNSt3__119__shared_weak_count12__add_sharedEv($244);
       }
       $245 = $bundle;
       __THREW__ = 0;
       invoke_vii(467,($101|0),($edges|0));
       $246 = __THREW__; __THREW__ = 0;
       $247 = $246&1;
       if ($247) {
        $341 = ___cxa_find_matching_catch()|0;
        $342 = tempRet0;
        $91 = $341;
        $92 = $342;
       } else {
        __THREW__ = 0;
        invoke_vii(468,($102|0),($visited|0));
        $248 = __THREW__; __THREW__ = 0;
        $249 = $248&1;
        do {
         if ($249) {
          $343 = ___cxa_find_matching_catch()|0;
          $344 = tempRet0;
          $91 = $343;
          $92 = $344;
         } else {
          __THREW__ = 0;
          invoke_viiiiiiiiii(485,($104|0),($99|0),($100|0),($245|0),($queue|0),0,-1,($101|0),($102|0),0);
          $250 = __THREW__; __THREW__ = 0;
          $251 = $250&1;
          if ($251) {
           $345 = ___cxa_find_matching_catch()|0;
           $346 = tempRet0;
           $91 = $345;
           $92 = $346;
           __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($102);
           break;
          }
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($102);
          __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($101);
          __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($100);
          __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($99);
          $27 = $agg$result;
          $252 = $27;
          $253 = HEAP32[$252>>2]|0;
          __THREW__ = 0;
          $254 = (invoke_ii(436,($253|0))|0);
          $255 = __THREW__; __THREW__ = 0;
          $256 = $255&1;
          if ($256) {
           label = 21;
           break L6;
          }
          $__range = $254;
          $257 = $__range;
          $26 = $257;
          $258 = $26;
          $259 = HEAP32[$258>>2]|0;
          $24 = $258;
          $25 = $259;
          $260 = $25;
          $22 = $__begin;
          $23 = $260;
          $261 = $22;
          $262 = $23;
          HEAP32[$261>>2] = $262;
          $263 = $__range;
          $21 = $263;
          $264 = $21;
          $265 = (($264) + 4|0);
          $266 = HEAP32[$265>>2]|0;
          $19 = $264;
          $20 = $266;
          $267 = $20;
          $17 = $__end;
          $18 = $267;
          $268 = $17;
          $269 = $18;
          HEAP32[$268>>2] = $269;
          while(1) {
           $15 = $__begin;
           $16 = $__end;
           $270 = $15;
           $271 = $16;
           $13 = $270;
           $14 = $271;
           $272 = $13;
           $12 = $272;
           $273 = $12;
           $274 = HEAP32[$273>>2]|0;
           $275 = $14;
           $11 = $275;
           $276 = $11;
           $277 = HEAP32[$276>>2]|0;
           $278 = ($274|0)==($277|0);
           $279 = $278 ^ 1;
           if (!($279)) {
            break;
           }
           $10 = $__begin;
           $280 = $10;
           $281 = HEAP32[$280>>2]|0;
           $b = $281;
           $9 = $agg$result;
           $282 = $9;
           $283 = HEAP32[$282>>2]|0;
           $284 = $b;
           $285 = HEAP32[$284>>2]|0;
           $8 = $data;
           $286 = $8;
           $287 = HEAP32[$286>>2]|0;
           $288 = $b;
           $289 = HEAP32[$288>>2]|0;
           $7 = $289;
           $290 = $7;
           $6 = $290;
           $291 = $6;
           $292 = (($291) + 20|0);
           $5 = $292;
           $293 = $5;
           $4 = $293;
           $294 = $4;
           $295 = HEAP32[$294>>2]|0;
           $296 = (($290) + 16|0);
           $297 = HEAP32[$296>>2]|0;
           $298 = (($295) + ($297))|0;
           $299 = (($298) - 1)|0;
           $__p$i = $299;
           $3 = $290;
           $300 = $3;
           $301 = (($300) + 4|0);
           $302 = HEAP32[$301>>2]|0;
           $303 = $__p$i;
           $304 = (($303>>>0) / 1024)&-1;
           $305 = (($302) + ($304<<2)|0);
           $306 = HEAP32[$305>>2]|0;
           $307 = $__p$i;
           $308 = (($307>>>0) % 1024)&-1;
           $309 = (($306) + ($308<<2)|0);
           $310 = HEAP32[$309>>2]|0;
           __THREW__ = 0;
           $311 = (invoke_ii(441,($310|0))|0);
           $312 = __THREW__; __THREW__ = 0;
           $313 = $312&1;
           if ($313) {
            label = 21;
            break L6;
           }
           $314 = $b;
           $315 = HEAP32[$314>>2]|0;
           $2 = $315;
           $316 = $2;
           $1 = $316;
           $317 = $1;
           $318 = (($317) + 4|0);
           $319 = HEAP32[$318>>2]|0;
           $320 = (($316) + 16|0);
           $321 = HEAP32[$320>>2]|0;
           $322 = (($321>>>0) / 1024)&-1;
           $323 = (($319) + ($322<<2)|0);
           $324 = HEAP32[$323>>2]|0;
           $325 = (($316) + 16|0);
           $326 = HEAP32[$325>>2]|0;
           $327 = (($326>>>0) % 1024)&-1;
           $328 = (($324) + ($327<<2)|0);
           $329 = HEAP32[$328>>2]|0;
           __THREW__ = 0;
           $330 = (invoke_ii(438,($329|0))|0);
           $331 = __THREW__; __THREW__ = 0;
           $332 = $331&1;
           if ($332) {
            label = 21;
            break L6;
           }
           __THREW__ = 0;
           $333 = (invoke_iiii(470,($287|0),($311|0),($330|0))|0);
           $334 = __THREW__; __THREW__ = 0;
           $335 = $334&1;
           if ($335) {
            label = 21;
            break L6;
           }
           __THREW__ = 0;
           invoke_viii(471,($283|0),($285|0),($333|0));
           $336 = __THREW__; __THREW__ = 0;
           $337 = $336&1;
           if ($337) {
            label = 21;
            break L6;
           }
           $0 = $__begin;
           $338 = $0;
           $339 = HEAP32[$338>>2]|0;
           $340 = (($339) + 4|0);
           HEAP32[$338>>2] = $340;
          }
          $$expand_i1_val2 = 1;
          $90 = $$expand_i1_val2;
          $103 = 1;
          __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($queue);
          __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($edges);
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($visited);
          $$pre_trunc = $90;
          $347 = $$pre_trunc&1;
          if ($347) {
           STACKTOP = sp;return;
          }
          __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
          STACKTOP = sp;return;
         }
        } while(0);
        __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($101);
       }
       __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($100);
       __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($99);
      }
     }
    } while(0);
    if ((label|0) == 21) {
     $195 = ___cxa_find_matching_catch()|0;
     $196 = tempRet0;
     $91 = $195;
     $92 = $196;
    }
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($queue);
    __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($edges);
   }
   __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($visited);
  }
 }
 if ((label|0) == 19) {
  $191 = ___cxa_find_matching_catch()|0;
  $192 = tempRet0;
  $91 = $191;
  $92 = $192;
 }
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 $348 = $91;
 $349 = $92;
 ___resumeException($348|0);
 // unreachable;
}
function __ZN7croutes11nearest_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEb($this,$data,$ans,$bundle,$queue,$group_begin,$current,$edges,$visited,$recursive) {
 $this = $this|0;
 $data = $data|0;
 $ans = $ans|0;
 $bundle = $bundle|0;
 $queue = $queue|0;
 $group_begin = $group_begin|0;
 $current = $current|0;
 $edges = $edges|0;
 $visited = $visited|0;
 $recursive = $recursive|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $$pre_trunc11 = 0, $$pre_trunc13 = 0, $$pre_trunc9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $is_queue_visited_empty = 0, $j = 0, $queue_visited = 0, $s = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $queue_visited = sp + 56|0;
 $31 = sp + 190|0;
 $is_queue_visited_empty = sp + 48|0;
 $34 = sp + 24|0;
 $35 = sp + 16|0;
 $37 = sp + 8|0;
 $39 = sp;
 $25 = $this;
 $26 = $bundle;
 $27 = $queue;
 $28 = $group_begin;
 $29 = $current;
 $40 = $recursive&1;
 $30 = $40;
 $41 = $25;
 $42 = $27;
 $24 = $42;
 $43 = $24;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $s = $50;
 $51 = $27;
 $23 = $51;
 $52 = $23;
 $53 = (($52) + 4|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = HEAP32[$52>>2]|0;
 $56 = $54;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = (($58|0) / 4)&-1;
 HEAP8[$31>>0] = 0;
 __ZNSt3__16vectorIbNS_9allocatorIbEEEC2EjRKb($queue_visited,$59,$31);
 HEAP32[$is_queue_visited_empty>>2] = $queue_visited;
 $60 = (($is_queue_visited_empty) + 4|0);
 HEAP32[$60>>2] = $data;
 L1: while(1) {
  __THREW__ = 0;
  $61 = (invoke_ii(486,($is_queue_visited_empty|0))|0);
  $62 = __THREW__; __THREW__ = 0;
  $63 = $62&1;
  if ($63) {
   label = 25;
   break;
  }
  $64 = $61 ^ 1;
  if (!($64)) {
   label = 34;
   break;
  }
  $j = 0;
  while(1) {
   $65 = $j;
   $66 = $s;
   $67 = ($65|0)<($66|0);
   if (!($67)) {
    break;
   }
   $68 = $j;
   $$expand_i1_val = 0;
   $36 = $$expand_i1_val;
   $$expand_i1_val2 = 0;
   $38 = $$expand_i1_val2;
   $21 = $queue_visited;
   $22 = $68;
   $69 = $21;
   $70 = $22;
   $19 = $69;
   $20 = $70;
   $71 = $19;
   $72 = HEAP32[$71>>2]|0;
   $73 = $20;
   $74 = (($73>>>0) / 32)&-1;
   $75 = (($72) + ($74<<2)|0);
   $76 = $20;
   $77 = (($76>>>0) % 32)&-1;
   $78 = 1 << $77;
   $16 = $34;
   $17 = $75;
   $18 = $78;
   $79 = $16;
   $80 = $17;
   HEAP32[$79>>2] = $80;
   $81 = (($79) + 4|0);
   $82 = $18;
   HEAP32[$81>>2] = $82;
   $15 = $34;
   $83 = $15;
   $84 = HEAP32[$83>>2]|0;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($83) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $85 & $87;
   $89 = ($88|0)!=(0);
   if ($89) {
    $166 = 0;
   } else {
    $13 = $35;
    $14 = $data;
    $90 = $13;
    $91 = $14;
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$90>>2] = $92;
    $93 = (($90) + 4|0);
    $94 = $14;
    $95 = (($94) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    HEAP32[$93>>2] = $96;
    $97 = (($90) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)!=(0|0);
    if ($99) {
     $100 = (($90) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     __ZNSt3__119__shared_weak_count12__add_sharedEv($101);
    }
    $$expand_i1_val4 = 1;
    $36 = $$expand_i1_val4;
    $11 = $37;
    $12 = $ans;
    $102 = $11;
    $103 = $12;
    $104 = HEAP32[$103>>2]|0;
    HEAP32[$102>>2] = $104;
    $105 = (($102) + 4|0);
    $106 = $12;
    $107 = (($106) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    HEAP32[$105>>2] = $108;
    $109 = (($102) + 4|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = ($110|0)!=(0|0);
    if ($111) {
     $112 = (($102) + 4|0);
     $113 = HEAP32[$112>>2]|0;
     __ZNSt3__119__shared_weak_count12__add_sharedEv($113);
    }
    $$expand_i1_val6 = 1;
    $38 = $$expand_i1_val6;
    $114 = $26;
    $115 = $27;
    $116 = $j;
    $9 = $115;
    $10 = $116;
    $117 = $9;
    $118 = $10;
    $119 = HEAP32[$117>>2]|0;
    $120 = (($119) + ($118<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    __THREW__ = 0;
    $122 = (invoke_iiiiiiii(487,($41|0),($35|0),($37|0),($114|0),($121|0),($edges|0),($visited|0))|0);
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 26;
     break L1;
    }
    $166 = $122;
   }
   $$pre_trunc = $38;
   $125 = $$pre_trunc&1;
   if ($125) {
    __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($37);
   }
   $$pre_trunc9 = $36;
   $126 = $$pre_trunc9&1;
   if ($126) {
    __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($35);
   }
   if ($166) {
    $127 = $j;
    $5 = $queue_visited;
    $6 = $127;
    $128 = $5;
    $129 = $6;
    $3 = $128;
    $4 = $129;
    $130 = $3;
    $131 = HEAP32[$130>>2]|0;
    $132 = $4;
    $133 = (($132>>>0) / 32)&-1;
    $134 = (($131) + ($133<<2)|0);
    $135 = $4;
    $136 = (($135>>>0) % 32)&-1;
    $137 = 1 << $136;
    $0 = $39;
    $1 = $134;
    $2 = $137;
    $138 = $0;
    $139 = $1;
    HEAP32[$138>>2] = $139;
    $140 = (($138) + 4|0);
    $141 = $2;
    HEAP32[$140>>2] = $141;
    $7 = $39;
    $8 = 1;
    $142 = $7;
    $143 = $8;
    $144 = $143&1;
    if ($144) {
     $145 = (($142) + 4|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = HEAP32[$142>>2]|0;
     $148 = HEAP32[$147>>2]|0;
     $149 = $148 | $146;
     HEAP32[$147>>2] = $149;
    } else {
     $150 = (($142) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = $151 ^ -1;
     $153 = HEAP32[$142>>2]|0;
     $154 = HEAP32[$153>>2]|0;
     $155 = $154 & $152;
     HEAP32[$153>>2] = $155;
    }
    $j = 0;
   }
   $162 = $j;
   $163 = (($162) + 1)|0;
   $j = $163;
  }
 }
 if ((label|0) == 25) {
  $156 = ___cxa_find_matching_catch()|0;
  $157 = tempRet0;
  $32 = $156;
  $33 = $157;
 }
 else if ((label|0) == 26) {
  $158 = ___cxa_find_matching_catch()|0;
  $159 = tempRet0;
  $32 = $158;
  $33 = $159;
  $$pre_trunc11 = $38;
  $160 = $$pre_trunc11&1;
  if ($160) {
   __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($37);
  }
  $$pre_trunc13 = $36;
  $161 = $$pre_trunc13&1;
  if ($161) {
   __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($35);
  }
 }
 else if ((label|0) == 34) {
  __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($queue_visited);
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($queue_visited);
 $164 = $32;
 $165 = $33;
 ___resumeException($164|0);
 // unreachable;
}
function __ZZN7croutes11nearest_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEbENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 80|0;
 $11 = sp + 72|0;
 $26 = sp + 8|0;
 $27 = sp;
 $28 = sp + 128|0;
 $25 = $this;
 $29 = $25;
 $30 = HEAP32[$29>>2]|0;
 $24 = $30;
 $31 = $24;
 $22 = $31;
 $23 = 0;
 $32 = $22;
 $33 = HEAP32[$32>>2]|0;
 $34 = $23;
 $35 = (($34>>>0) / 32)&-1;
 $36 = (($33) + ($35<<2)|0);
 $37 = $23;
 $38 = (($37>>>0) % 32)&-1;
 $19 = $26;
 $20 = $36;
 $21 = $38;
 $39 = $19;
 $40 = $20;
 HEAP32[$39>>2] = $40;
 $41 = (($39) + 4|0);
 $42 = $21;
 HEAP32[$41>>2] = $42;
 $43 = HEAP32[$29>>2]|0;
 $18 = $43;
 $44 = $18;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $16 = $44;
 $17 = $46;
 $47 = $16;
 $48 = HEAP32[$47>>2]|0;
 $49 = $17;
 $50 = (($49>>>0) / 32)&-1;
 $51 = (($48) + ($50<<2)|0);
 $52 = $17;
 $53 = (($52>>>0) % 32)&-1;
 $13 = $27;
 $14 = $51;
 $15 = $53;
 $54 = $13;
 $55 = $14;
 HEAP32[$54>>2] = $55;
 $56 = (($54) + 4|0);
 $57 = $15;
 HEAP32[$56>>2] = $57;
 HEAP8[$28>>0] = 1;
 $9 = $28;
 $58 = $9;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&1;
 if ($60) {
  $6 = $10;
  $7 = $26;
  $61 = $6;
  $62 = $7;
  $63 = HEAP32[$62>>2]|0;
  HEAP32[$61>>2] = $63;
  $64 = (($61) + 4|0);
  $65 = $7;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$64>>2] = $67;
  $4 = $27;
  $5 = $26;
  $68 = $4;
  $69 = HEAP32[$68>>2]|0;
  $70 = $5;
  $71 = HEAP32[$70>>2]|0;
  $72 = $69;
  $73 = $71;
  $74 = (($72) - ($73))|0;
  $75 = (($74|0) / 4)&-1;
  $76 = $75<<5;
  $77 = $4;
  $78 = (($77) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($76) + ($79))|0;
  $81 = $5;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($80) - ($83))|0;
  $85 = (__ZNSt3__117__count_bool_trueINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($10,$84)|0);
  $8 = $85;
  $111 = $8;
  $112 = (($29) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $12 = $113;
  $114 = $12;
  $115 = HEAP32[$114>>2]|0;
  $116 = (__ZNK7croutes5ndataIdE11nodes_countEv($115)|0);
  $117 = (($116) - 1)|0;
  $118 = ($111|0)==($117|0);
  STACKTOP = sp;return ($118|0);
 } else {
  $0 = $11;
  $1 = $26;
  $86 = $0;
  $87 = $1;
  $88 = HEAP32[$87>>2]|0;
  HEAP32[$86>>2] = $88;
  $89 = (($86) + 4|0);
  $90 = $1;
  $91 = (($90) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  HEAP32[$89>>2] = $92;
  $2 = $27;
  $3 = $26;
  $93 = $2;
  $94 = HEAP32[$93>>2]|0;
  $95 = $3;
  $96 = HEAP32[$95>>2]|0;
  $97 = $94;
  $98 = $96;
  $99 = (($97) - ($98))|0;
  $100 = (($99|0) / 4)&-1;
  $101 = $100<<5;
  $102 = $2;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) + ($104))|0;
  $106 = $3;
  $107 = (($106) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($105) - ($108))|0;
  $110 = (__ZNSt3__118__count_bool_falseINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_XT0_EXLi0EEE15difference_typeES7_NS6_9size_typeE($11,$109)|0);
  $8 = $110;
  $111 = $8;
  $112 = (($29) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $12 = $113;
  $114 = $12;
  $115 = HEAP32[$114>>2]|0;
  $116 = (__ZNK7croutes5ndataIdE11nodes_countEv($115)|0);
  $117 = (($116) - 1)|0;
  $118 = ($111|0)==($117|0);
  STACKTOP = sp;return ($118|0);
 }
 return (0)|0;
}
function __ZN7croutes11nearest_algIdE10try_to_addENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEEPSC_RNS2_6vectorIiNSF_IiEEEERNSK_IbNSF_IbEEEE($this,$data,$ans,$bundle,$bond,$edges,$visited) {
 $this = $this|0;
 $data = $data|0;
 $ans = $ans|0;
 $bundle = $bundle|0;
 $bond = $bond|0;
 $edges = $edges|0;
 $visited = $visited|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $87 = sp + 40|0;
 $88 = sp + 32|0;
 $89 = sp + 24|0;
 $90 = sp + 16|0;
 $91 = sp + 8|0;
 $92 = sp;
 $82 = $this;
 $83 = $bundle;
 $84 = $bond;
 $85 = $edges;
 $86 = $visited;
 $result = 0;
 $93 = $85;
 $79 = $93;
 $80 = 0;
 $94 = $79;
 $95 = $80;
 $96 = HEAP32[$94>>2]|0;
 $97 = (($96) + ($95<<2)|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)==(-1);
 if ($99) {
  $100 = $85;
  $68 = $100;
  $69 = 1;
  $101 = $68;
  $102 = $69;
  $103 = HEAP32[$101>>2]|0;
  $104 = (($103) + ($102<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)==(-1);
  if ($106) {
   $58 = $ans;
   $107 = $58;
   $108 = HEAP32[$107>>2]|0;
   $109 = $83;
   $110 = $84;
   __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($108,$109,$110);
   $111 = $84;
   $112 = (__ZNK7croutes8net_bondIdE4fromEv($111)|0);
   $113 = $85;
   $54 = $113;
   $55 = 0;
   $114 = $54;
   $115 = $55;
   $116 = HEAP32[$114>>2]|0;
   $117 = (($116) + ($115<<2)|0);
   HEAP32[$117>>2] = $112;
   $118 = $84;
   $119 = (__ZNK7croutes8net_bondIdE2toEv($118)|0);
   $120 = $85;
   $52 = $120;
   $53 = 1;
   $121 = $52;
   $122 = $53;
   $123 = HEAP32[$121>>2]|0;
   $124 = (($123) + ($122<<2)|0);
   HEAP32[$124>>2] = $119;
   $result = 1;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $125 = $84;
  $126 = (__ZNK7croutes8net_bondIdE4fromEv($125)|0);
  $127 = $85;
  $50 = $127;
  $51 = 0;
  $128 = $50;
  $129 = $51;
  $130 = HEAP32[$128>>2]|0;
  $131 = (($130) + ($129<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($126|0)==($132|0);
  if ($133) {
   $134 = $86;
   $135 = $84;
   $136 = (__ZNK7croutes8net_bondIdE2toEv($135)|0);
   $48 = $134;
   $49 = $136;
   $137 = $48;
   $138 = $49;
   $46 = $137;
   $47 = $138;
   $139 = $46;
   $140 = HEAP32[$139>>2]|0;
   $141 = $47;
   $142 = (($141>>>0) / 32)&-1;
   $143 = (($140) + ($142<<2)|0);
   $144 = $47;
   $145 = (($144>>>0) % 32)&-1;
   $146 = 1 << $145;
   $43 = $87;
   $44 = $143;
   $45 = $146;
   $147 = $43;
   $148 = $44;
   HEAP32[$147>>2] = $148;
   $149 = (($147) + 4|0);
   $150 = $45;
   HEAP32[$149>>2] = $150;
   $42 = $87;
   $151 = $42;
   $152 = HEAP32[$151>>2]|0;
   $153 = HEAP32[$152>>2]|0;
   $154 = (($151) + 4|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $153 & $155;
   $157 = ($156|0)!=(0);
   if ($157) {
    label = 7;
   } else {
    $31 = $ans;
    $158 = $31;
    $159 = HEAP32[$158>>2]|0;
    $160 = $83;
    $28 = $data;
    $161 = $28;
    $162 = HEAP32[$161>>2]|0;
    $163 = $84;
    $164 = (__ZNK7croutes8net_bondIdE2toEv($163)|0);
    $165 = $84;
    $166 = (__ZNK7croutes8net_bondIdE4fromEv($165)|0);
    $167 = (__ZN7croutes5ndataIdE2atEii($162,$164,$166)|0);
    __ZN7croutes6answerIdE14add_bond_frontEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($159,$160,$167);
    $168 = $84;
    $169 = (__ZNK7croutes8net_bondIdE2toEv($168)|0);
    $170 = $85;
    $24 = $170;
    $25 = 0;
    $171 = $24;
    $172 = $25;
    $173 = HEAP32[$171>>2]|0;
    $174 = (($173) + ($172<<2)|0);
    HEAP32[$174>>2] = $169;
    $result = 1;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $175 = $84;
   $176 = (__ZNK7croutes8net_bondIdE4fromEv($175)|0);
   $177 = $85;
   $22 = $177;
   $23 = 1;
   $178 = $22;
   $179 = $23;
   $180 = HEAP32[$178>>2]|0;
   $181 = (($180) + ($179<<2)|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($176|0)==($182|0);
   if ($183) {
    $184 = $86;
    $185 = $84;
    $186 = (__ZNK7croutes8net_bondIdE2toEv($185)|0);
    $11 = $184;
    $12 = $186;
    $187 = $11;
    $188 = $12;
    $9 = $187;
    $10 = $188;
    $189 = $9;
    $190 = HEAP32[$189>>2]|0;
    $191 = $10;
    $192 = (($191>>>0) / 32)&-1;
    $193 = (($190) + ($192<<2)|0);
    $194 = $10;
    $195 = (($194>>>0) % 32)&-1;
    $196 = 1 << $195;
    $6 = $88;
    $7 = $193;
    $8 = $196;
    $197 = $6;
    $198 = $7;
    HEAP32[$197>>2] = $198;
    $199 = (($197) + 4|0);
    $200 = $8;
    HEAP32[$199>>2] = $200;
    $3 = $88;
    $201 = $3;
    $202 = HEAP32[$201>>2]|0;
    $203 = HEAP32[$202>>2]|0;
    $204 = (($201) + 4|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $203 & $205;
    $207 = ($206|0)!=(0);
    if ($207) {
     label = 10;
    } else {
     $0 = $ans;
     $208 = $0;
     $209 = HEAP32[$208>>2]|0;
     $210 = $83;
     $211 = $84;
     __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($209,$210,$211);
     $212 = $84;
     $213 = (__ZNK7croutes8net_bondIdE2toEv($212)|0);
     $214 = $85;
     $1 = $214;
     $2 = 1;
     $215 = $1;
     $216 = $2;
     $217 = HEAP32[$215>>2]|0;
     $218 = (($217) + ($216<<2)|0);
     HEAP32[$218>>2] = $213;
     $result = 1;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    $219 = $84;
    $220 = (__ZNK7croutes8net_bondIdE2toEv($219)|0);
    $221 = $85;
    $4 = $221;
    $5 = 0;
    $222 = $4;
    $223 = $5;
    $224 = HEAP32[$222>>2]|0;
    $225 = (($224) + ($223<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = ($220|0)==($226|0);
    if ($227) {
     $228 = $86;
     $229 = $84;
     $230 = (__ZNK7croutes8net_bondIdE4fromEv($229)|0);
     $18 = $228;
     $19 = $230;
     $231 = $18;
     $232 = $19;
     $16 = $231;
     $17 = $232;
     $233 = $16;
     $234 = HEAP32[$233>>2]|0;
     $235 = $17;
     $236 = (($235>>>0) / 32)&-1;
     $237 = (($234) + ($236<<2)|0);
     $238 = $17;
     $239 = (($238>>>0) % 32)&-1;
     $240 = 1 << $239;
     $13 = $89;
     $14 = $237;
     $15 = $240;
     $241 = $13;
     $242 = $14;
     HEAP32[$241>>2] = $242;
     $243 = (($241) + 4|0);
     $244 = $15;
     HEAP32[$243>>2] = $244;
     $20 = $89;
     $245 = $20;
     $246 = HEAP32[$245>>2]|0;
     $247 = HEAP32[$246>>2]|0;
     $248 = (($245) + 4|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = $247 & $249;
     $251 = ($250|0)!=(0);
     if ($251) {
      label = 13;
     } else {
      $21 = $ans;
      $252 = $21;
      $253 = HEAP32[$252>>2]|0;
      $254 = $83;
      $255 = $84;
      __ZN7croutes6answerIdE14add_bond_frontEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($253,$254,$255);
      $256 = $84;
      $257 = (__ZNK7croutes8net_bondIdE4fromEv($256)|0);
      $258 = $85;
      $26 = $258;
      $27 = 0;
      $259 = $26;
      $260 = $27;
      $261 = HEAP32[$259>>2]|0;
      $262 = (($261) + ($260<<2)|0);
      HEAP32[$262>>2] = $257;
      $result = 1;
     }
    } else {
     label = 13;
    }
    if ((label|0) == 13) {
     $263 = $84;
     $264 = (__ZNK7croutes8net_bondIdE2toEv($263)|0);
     $265 = $85;
     $29 = $265;
     $30 = 1;
     $266 = $29;
     $267 = $30;
     $268 = HEAP32[$266>>2]|0;
     $269 = (($268) + ($267<<2)|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($264|0)==($270|0);
     if ($271) {
      $272 = $86;
      $273 = $84;
      $274 = (__ZNK7croutes8net_bondIdE4fromEv($273)|0);
      $37 = $272;
      $38 = $274;
      $275 = $37;
      $276 = $38;
      $35 = $275;
      $36 = $276;
      $277 = $35;
      $278 = HEAP32[$277>>2]|0;
      $279 = $36;
      $280 = (($279>>>0) / 32)&-1;
      $281 = (($278) + ($280<<2)|0);
      $282 = $36;
      $283 = (($282>>>0) % 32)&-1;
      $284 = 1 << $283;
      $32 = $90;
      $33 = $281;
      $34 = $284;
      $285 = $32;
      $286 = $33;
      HEAP32[$285>>2] = $286;
      $287 = (($285) + 4|0);
      $288 = $34;
      HEAP32[$287>>2] = $288;
      $39 = $90;
      $289 = $39;
      $290 = HEAP32[$289>>2]|0;
      $291 = HEAP32[$290>>2]|0;
      $292 = (($289) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $291 & $293;
      $295 = ($294|0)!=(0);
      if (!($295)) {
       $40 = $ans;
       $296 = $40;
       $297 = HEAP32[$296>>2]|0;
       $298 = $83;
       $41 = $data;
       $299 = $41;
       $300 = HEAP32[$299>>2]|0;
       $301 = $84;
       $302 = (__ZNK7croutes8net_bondIdE2toEv($301)|0);
       $303 = $84;
       $304 = (__ZNK7croutes8net_bondIdE4fromEv($303)|0);
       $305 = (__ZN7croutes5ndataIdE2atEii($300,$302,$304)|0);
       __ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_($297,$298,$305);
       $306 = $84;
       $307 = (__ZNK7croutes8net_bondIdE4fromEv($306)|0);
       $308 = $85;
       $56 = $308;
       $57 = 1;
       $309 = $56;
       $310 = $57;
       $311 = HEAP32[$309>>2]|0;
       $312 = (($311) + ($310<<2)|0);
       HEAP32[$312>>2] = $307;
       $result = 1;
      }
     }
    }
   }
  }
 }
 $313 = $result;
 $314 = $313&1;
 if (!($314)) {
  $$expand_i1_val2 = 0;
  $81 = $$expand_i1_val2;
  $$pre_trunc = $81;
  $377 = $$pre_trunc&1;
  STACKTOP = sp;return ($377|0);
 }
 $315 = $86;
 $316 = $84;
 $317 = (__ZNK7croutes8net_bondIdE4fromEv($316)|0);
 $64 = $315;
 $65 = $317;
 $318 = $64;
 $319 = $65;
 $62 = $318;
 $63 = $319;
 $320 = $62;
 $321 = HEAP32[$320>>2]|0;
 $322 = $63;
 $323 = (($322>>>0) / 32)&-1;
 $324 = (($321) + ($323<<2)|0);
 $325 = $63;
 $326 = (($325>>>0) % 32)&-1;
 $327 = 1 << $326;
 $59 = $91;
 $60 = $324;
 $61 = $327;
 $328 = $59;
 $329 = $60;
 HEAP32[$328>>2] = $329;
 $330 = (($328) + 4|0);
 $331 = $61;
 HEAP32[$330>>2] = $331;
 $66 = $91;
 $67 = 1;
 $332 = $66;
 $333 = $67;
 $334 = $333&1;
 if ($334) {
  $335 = (($332) + 4|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = HEAP32[$332>>2]|0;
  $338 = HEAP32[$337>>2]|0;
  $339 = $338 | $336;
  HEAP32[$337>>2] = $339;
 } else {
  $340 = (($332) + 4|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $341 ^ -1;
  $343 = HEAP32[$332>>2]|0;
  $344 = HEAP32[$343>>2]|0;
  $345 = $344 & $342;
  HEAP32[$343>>2] = $345;
 }
 $346 = $86;
 $347 = $84;
 $348 = (__ZNK7croutes8net_bondIdE2toEv($347)|0);
 $75 = $346;
 $76 = $348;
 $349 = $75;
 $350 = $76;
 $73 = $349;
 $74 = $350;
 $351 = $73;
 $352 = HEAP32[$351>>2]|0;
 $353 = $74;
 $354 = (($353>>>0) / 32)&-1;
 $355 = (($352) + ($354<<2)|0);
 $356 = $74;
 $357 = (($356>>>0) % 32)&-1;
 $358 = 1 << $357;
 $70 = $92;
 $71 = $355;
 $72 = $358;
 $359 = $70;
 $360 = $71;
 HEAP32[$359>>2] = $360;
 $361 = (($359) + 4|0);
 $362 = $72;
 HEAP32[$361>>2] = $362;
 $77 = $92;
 $78 = 1;
 $363 = $77;
 $364 = $78;
 $365 = $364&1;
 if ($365) {
  $366 = (($363) + 4|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = HEAP32[$363>>2]|0;
  $369 = HEAP32[$368>>2]|0;
  $370 = $369 | $367;
  HEAP32[$368>>2] = $370;
 } else {
  $371 = (($363) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $372 ^ -1;
  $374 = HEAP32[$363>>2]|0;
  $375 = HEAP32[$374>>2]|0;
  $376 = $375 & $373;
  HEAP32[$374>>2] = $376;
 }
 $$expand_i1_val = 1;
 $81 = $$expand_i1_val;
 $$pre_trunc = $81;
 $377 = $$pre_trunc&1;
 STACKTOP = sp;return ($377|0);
}
function __ZNSt3__16__sortIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0;
 var $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 164|0;
 $__t$i4 = sp + 140|0;
 $__t$i3 = sp + 116|0;
 $__t$i2 = sp + 92|0;
 $__t$i1 = sp + 68|0;
 $__t$i = sp + 44|0;
 $30 = $__first;
 $31 = $__last;
 $32 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $33 = $31;
   $34 = $30;
   $35 = $33;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = (($37|0) / 4)&-1;
   $__len = $38;
   $39 = $__len;
   switch ($39|0) {
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   default: {
   }
   }
   $81 = $__len;
   $82 = ($81|0)<=(30);
   if ($82) {
    label = 12;
    break L1;
   }
   $86 = $30;
   $__m = $86;
   $87 = $31;
   $__lm1 = $87;
   $88 = $__lm1;
   $89 = (($88) + -4|0);
   $__lm1 = $89;
   $90 = $__len;
   $91 = ($90|0)>=(1000);
   if ($91) {
    $92 = $__len;
    $93 = (($92|0) / 2)&-1;
    $__delta = $93;
    $94 = $__delta;
    $95 = $__m;
    $96 = (($95) + ($94<<2)|0);
    $__m = $96;
    $97 = $__delta;
    $98 = (($97|0) / 2)&-1;
    $__delta = $98;
    $99 = $30;
    $100 = $30;
    $101 = $__delta;
    $102 = (($100) + ($101<<2)|0);
    $103 = $__m;
    $104 = $__m;
    $105 = $__delta;
    $106 = (($104) + ($105<<2)|0);
    $107 = $__lm1;
    $108 = $32;
    $109 = (__ZNSt3__17__sort5IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($99,$102,$103,$106,$107,$108)|0);
    $__n_swaps = $109;
   } else {
    $110 = $__len;
    $111 = (($110|0) / 2)&-1;
    $__delta = $111;
    $112 = $__delta;
    $113 = $__m;
    $114 = (($113) + ($112<<2)|0);
    $__m = $114;
    $115 = $30;
    $116 = $__m;
    $117 = $__lm1;
    $118 = $32;
    $119 = (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($115,$116,$117,$118)|0);
    $__n_swaps = $119;
   }
   $120 = $30;
   $__i = $120;
   $121 = $__lm1;
   $__j = $121;
   $122 = $32;
   $123 = $__i;
   $124 = $__m;
   $125 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($122,$123,$124)|0);
   if ($125) {
    break;
   }
   while(1) {
    $126 = $__i;
    $127 = $__j;
    $128 = (($127) + -4|0);
    $__j = $128;
    $129 = ($126|0)==($128|0);
    if ($129) {
     break;
    }
    $198 = $32;
    $199 = $__j;
    $200 = $__m;
    $201 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($198,$199,$200)|0);
    if ($201) {
     label = 41;
     break L3;
    }
   }
   $130 = $__i;
   $131 = (($130) + 4|0);
   $__i = $131;
   $132 = $31;
   $__j = $132;
   $133 = $32;
   $134 = $30;
   $135 = $__j;
   $136 = (($135) + -4|0);
   $__j = $136;
   $137 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($133,$134,$136)|0);
   if (!($137)) {
    while(1) {
     $138 = $__i;
     $139 = $__j;
     $140 = ($138|0)==($139|0);
     if ($140) {
      label = 22;
      break L1;
     }
     $141 = $32;
     $142 = $30;
     $143 = $__i;
     $144 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($141,$142,$143)|0);
     if ($144) {
      break;
     }
     $161 = $__i;
     $162 = (($161) + 4|0);
     $__i = $162;
    }
    $145 = $__i;
    $146 = $__j;
    $23 = $145;
    $24 = $146;
    $147 = $23;
    $22 = $147;
    $148 = $22;
    $149 = HEAP32[$148>>2]|0;
    HEAP32[$__t$i1>>2] = $149;
    $150 = $24;
    $20 = $150;
    $151 = $20;
    $152 = HEAP32[$151>>2]|0;
    $153 = $23;
    HEAP32[$153>>2] = $152;
    $21 = $__t$i1;
    $154 = $21;
    $155 = HEAP32[$154>>2]|0;
    $156 = $24;
    HEAP32[$156>>2] = $155;
    $157 = $__n_swaps;
    $158 = (($157) + 1)|0;
    $__n_swaps = $158;
    $159 = $__i;
    $160 = (($159) + 4|0);
    $__i = $160;
   }
   $163 = $__i;
   $164 = $__j;
   $165 = ($163|0)==($164|0);
   if ($165) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $166 = $32;
     $167 = $30;
     $168 = $__i;
     $169 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($166,$167,$168)|0);
     $170 = $169 ^ 1;
     if (!($170)) {
      break;
     }
     $171 = $__i;
     $172 = (($171) + 4|0);
     $__i = $172;
    }
    while(1) {
     $173 = $32;
     $174 = $30;
     $175 = $__j;
     $176 = (($175) + -4|0);
     $__j = $176;
     $177 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($173,$174,$176)|0);
     if (!($177)) {
      break;
     }
    }
    $178 = $__i;
    $179 = $__j;
    $180 = ($178>>>0)>=($179>>>0);
    if ($180) {
     break;
    }
    $181 = $__i;
    $182 = $__j;
    $18 = $181;
    $19 = $182;
    $183 = $18;
    $17 = $183;
    $184 = $17;
    $185 = HEAP32[$184>>2]|0;
    HEAP32[$__t$i2>>2] = $185;
    $186 = $19;
    $15 = $186;
    $187 = $15;
    $188 = HEAP32[$187>>2]|0;
    $189 = $18;
    HEAP32[$189>>2] = $188;
    $16 = $__t$i2;
    $190 = $16;
    $191 = HEAP32[$190>>2]|0;
    $192 = $19;
    HEAP32[$192>>2] = $191;
    $193 = $__n_swaps;
    $194 = (($193) + 1)|0;
    $__n_swaps = $194;
    $195 = $__i;
    $196 = (($195) + 4|0);
    $__i = $196;
   }
   $197 = $__i;
   $30 = $197;
  }
  if ((label|0) == 41) {
   label = 0;
   $202 = $__i;
   $203 = $__j;
   $13 = $202;
   $14 = $203;
   $204 = $13;
   $12 = $204;
   $205 = $12;
   $206 = HEAP32[$205>>2]|0;
   HEAP32[$__t$i3>>2] = $206;
   $207 = $14;
   $10 = $207;
   $208 = $10;
   $209 = HEAP32[$208>>2]|0;
   $210 = $13;
   HEAP32[$210>>2] = $209;
   $11 = $__t$i3;
   $211 = $11;
   $212 = HEAP32[$211>>2]|0;
   $213 = $14;
   HEAP32[$213>>2] = $212;
   $214 = $__n_swaps;
   $215 = (($214) + 1)|0;
   $__n_swaps = $215;
  }
  $216 = $__i;
  $217 = (($216) + 4|0);
  $__i = $217;
  $218 = $__i;
  $219 = $__j;
  $220 = ($218>>>0)<($219>>>0);
  if ($220) {
   while(1) {
    while(1) {
     $221 = $32;
     $222 = $__i;
     $223 = $__m;
     $224 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($221,$222,$223)|0);
     if (!($224)) {
      break;
     }
     $225 = $__i;
     $226 = (($225) + 4|0);
     $__i = $226;
    }
    while(1) {
     $227 = $32;
     $228 = $__j;
     $229 = (($228) + -4|0);
     $__j = $229;
     $230 = $__m;
     $231 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($227,$229,$230)|0);
     $232 = $231 ^ 1;
     if (!($232)) {
      break;
     }
    }
    $233 = $__i;
    $234 = $__j;
    $235 = ($233>>>0)>($234>>>0);
    if ($235) {
     break;
    }
    $236 = $__i;
    $237 = $__j;
    $8 = $236;
    $9 = $237;
    $238 = $8;
    $7 = $238;
    $239 = $7;
    $240 = HEAP32[$239>>2]|0;
    HEAP32[$__t$i4>>2] = $240;
    $241 = $9;
    $5 = $241;
    $242 = $5;
    $243 = HEAP32[$242>>2]|0;
    $244 = $8;
    HEAP32[$244>>2] = $243;
    $6 = $__t$i4;
    $245 = $6;
    $246 = HEAP32[$245>>2]|0;
    $247 = $9;
    HEAP32[$247>>2] = $246;
    $248 = $__n_swaps;
    $249 = (($248) + 1)|0;
    $__n_swaps = $249;
    $250 = $__m;
    $251 = $__i;
    $252 = ($250|0)==($251|0);
    if ($252) {
     $253 = $__j;
     $__m = $253;
    }
    $254 = $__i;
    $255 = (($254) + 4|0);
    $__i = $255;
   }
  }
  $256 = $__i;
  $257 = $__m;
  $258 = ($256|0)!=($257|0);
  if ($258) {
   $259 = $32;
   $260 = $__m;
   $261 = $__i;
   $262 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($259,$260,$261)|0);
   if ($262) {
    $263 = $__i;
    $264 = $__m;
    $3 = $263;
    $4 = $264;
    $265 = $3;
    $2 = $265;
    $266 = $2;
    $267 = HEAP32[$266>>2]|0;
    HEAP32[$__t$i5>>2] = $267;
    $268 = $4;
    $0 = $268;
    $269 = $0;
    $270 = HEAP32[$269>>2]|0;
    $271 = $3;
    HEAP32[$271>>2] = $270;
    $1 = $__t$i5;
    $272 = $1;
    $273 = HEAP32[$272>>2]|0;
    $274 = $4;
    HEAP32[$274>>2] = $273;
    $275 = $__n_swaps;
    $276 = (($275) + 1)|0;
    $__n_swaps = $276;
   }
  }
  $277 = $__n_swaps;
  $278 = ($277|0)==(0);
  if ($278) {
   $279 = $30;
   $280 = $__i;
   $281 = $32;
   $282 = (__ZNSt3__127__insertion_sort_incompleteIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($279,$280,$281)|0);
   $283 = $282&1;
   $__fs = $283;
   $284 = $__i;
   $285 = (($284) + 4|0);
   $286 = $31;
   $287 = $32;
   $288 = (__ZNSt3__127__insertion_sort_incompleteIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($285,$286,$287)|0);
   if ($288) {
    $289 = $__fs;
    $290 = $289&1;
    if ($290) {
     label = 64;
     break;
    }
    $291 = $__i;
    $31 = $291;
    continue;
   }
   $292 = $__fs;
   $293 = $292&1;
   if ($293) {
    $294 = $__i;
    $295 = (($294) + 4|0);
    $__i = $295;
    $30 = $295;
    continue;
   }
  }
  $296 = $__i;
  $297 = $30;
  $298 = $296;
  $299 = $297;
  $300 = (($298) - ($299))|0;
  $301 = (($300|0) / 4)&-1;
  $302 = $31;
  $303 = $__i;
  $304 = $302;
  $305 = $303;
  $306 = (($304) - ($305))|0;
  $307 = (($306|0) / 4)&-1;
  $308 = ($301|0)<($307|0);
  if ($308) {
   $309 = $30;
   $310 = $__i;
   $311 = $32;
   __ZNSt3__16__sortIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($309,$310,$311);
   $312 = $__i;
   $313 = (($312) + 4|0);
   $__i = $313;
   $30 = $313;
  } else {
   $314 = $__i;
   $315 = (($314) + 4|0);
   $316 = $31;
   $317 = $32;
   __ZNSt3__16__sortIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($315,$316,$317);
   $318 = $__i;
   $31 = $318;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $40 = $32;
  $41 = $31;
  $42 = (($41) + -4|0);
  $31 = $42;
  $43 = $30;
  $44 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($40,$42,$43)|0);
  if ($44) {
   $45 = $30;
   $46 = $31;
   $28 = $45;
   $29 = $46;
   $47 = $28;
   $27 = $47;
   $48 = $27;
   $49 = HEAP32[$48>>2]|0;
   HEAP32[$__t$i>>2] = $49;
   $50 = $29;
   $25 = $50;
   $51 = $25;
   $52 = HEAP32[$51>>2]|0;
   $53 = $28;
   HEAP32[$53>>2] = $52;
   $26 = $__t$i;
   $54 = $26;
   $55 = HEAP32[$54>>2]|0;
   $56 = $29;
   HEAP32[$56>>2] = $55;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $57 = $30;
  $58 = $30;
  $59 = (($58) + 4|0);
  $60 = $31;
  $61 = (($60) + -4|0);
  $31 = $61;
  $62 = $32;
  (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($57,$59,$61,$62)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $63 = $30;
  $64 = $30;
  $65 = (($64) + 4|0);
  $66 = $30;
  $67 = (($66) + 8|0);
  $68 = $31;
  $69 = (($68) + -4|0);
  $31 = $69;
  $70 = $32;
  (__ZNSt3__17__sort4IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($63,$65,$67,$69,$70)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $71 = $30;
  $72 = $30;
  $73 = (($72) + 4|0);
  $74 = $30;
  $75 = (($74) + 8|0);
  $76 = $30;
  $77 = (($76) + 12|0);
  $78 = $31;
  $79 = (($78) + -4|0);
  $31 = $79;
  $80 = $32;
  (__ZNSt3__17__sort5IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($71,$73,$75,$77,$79,$80)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $83 = $30;
  $84 = $31;
  $85 = $32;
  __ZNSt3__118__insertion_sort_3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($83,$84,$85);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($this,$lhs,$rhs) {
 $this = $this|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $lhs;
 $3 = $rhs;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = HEAP32[$6>>2]|0;
 $8 = (__ZNK7croutes8net_bondIdE4sameERKS1_($5,$7)|0);
 if ($8) {
  $$expand_i1_val = 1;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 } else {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = (__ZN7croutes8net_bondIdE8distanceEv($10)|0);
  $12 = +HEAPF64[$11>>3];
  $13 = $3;
  $14 = HEAP32[$13>>2]|0;
  $15 = (__ZN7croutes8net_bondIdE8distanceEv($14)|0);
  $16 = +HEAPF64[$15>>3];
  $17 = $12 < $16;
  $$expand_i1_val2 = $17&1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $18 = $$pre_trunc&1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0;
 var $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 120|0;
 $__t$i3 = sp + 96|0;
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 48|0;
 $__t$i = sp + 24|0;
 $26 = $__x;
 $27 = $__y;
 $28 = $__z;
 $29 = $__c;
 $__r = 0;
 $30 = $29;
 $31 = $27;
 $32 = $26;
 $33 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($30,$31,$32)|0);
 if ($33) {
  $68 = $29;
  $69 = $28;
  $70 = $27;
  $71 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($68,$69,$70)|0);
  if ($71) {
   $72 = $26;
   $73 = $28;
   $3 = $72;
   $4 = $73;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$__t$i4>>2] = $76;
   $77 = $4;
   $0 = $77;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   HEAP32[$80>>2] = $79;
   $1 = $__t$i4;
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = $4;
   HEAP32[$83>>2] = $82;
   $__r = 1;
   $84 = $__r;
   $25 = $84;
   $114 = $25;
   STACKTOP = sp;return ($114|0);
  }
  $85 = $26;
  $86 = $27;
  $8 = $85;
  $9 = $86;
  $87 = $8;
  $7 = $87;
  $88 = $7;
  $89 = HEAP32[$88>>2]|0;
  HEAP32[$__t$i3>>2] = $89;
  $90 = $9;
  $5 = $90;
  $91 = $5;
  $92 = HEAP32[$91>>2]|0;
  $93 = $8;
  HEAP32[$93>>2] = $92;
  $6 = $__t$i3;
  $94 = $6;
  $95 = HEAP32[$94>>2]|0;
  $96 = $9;
  HEAP32[$96>>2] = $95;
  $__r = 1;
  $97 = $29;
  $98 = $28;
  $99 = $27;
  $100 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($97,$98,$99)|0);
  if ($100) {
   $101 = $27;
   $102 = $28;
   $18 = $101;
   $19 = $102;
   $103 = $18;
   $17 = $103;
   $104 = $17;
   $105 = HEAP32[$104>>2]|0;
   HEAP32[$__t$i1>>2] = $105;
   $106 = $19;
   $15 = $106;
   $107 = $15;
   $108 = HEAP32[$107>>2]|0;
   $109 = $18;
   HEAP32[$109>>2] = $108;
   $16 = $__t$i1;
   $110 = $16;
   $111 = HEAP32[$110>>2]|0;
   $112 = $19;
   HEAP32[$112>>2] = $111;
   $__r = 2;
  }
  $113 = $__r;
  $25 = $113;
  $114 = $25;
  STACKTOP = sp;return ($114|0);
 } else {
  $34 = $29;
  $35 = $28;
  $36 = $27;
  $37 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($34,$35,$36)|0);
  if (!($37)) {
   $38 = $__r;
   $25 = $38;
   $114 = $25;
   STACKTOP = sp;return ($114|0);
  }
  $39 = $27;
  $40 = $28;
  $23 = $39;
  $24 = $40;
  $41 = $23;
  $22 = $41;
  $42 = $22;
  $43 = HEAP32[$42>>2]|0;
  HEAP32[$__t$i>>2] = $43;
  $44 = $24;
  $20 = $44;
  $45 = $20;
  $46 = HEAP32[$45>>2]|0;
  $47 = $23;
  HEAP32[$47>>2] = $46;
  $21 = $__t$i;
  $48 = $21;
  $49 = HEAP32[$48>>2]|0;
  $50 = $24;
  HEAP32[$50>>2] = $49;
  $__r = 1;
  $51 = $29;
  $52 = $27;
  $53 = $26;
  $54 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($51,$52,$53)|0);
  if ($54) {
   $55 = $26;
   $56 = $27;
   $13 = $55;
   $14 = $56;
   $57 = $13;
   $12 = $57;
   $58 = $12;
   $59 = HEAP32[$58>>2]|0;
   HEAP32[$__t$i2>>2] = $59;
   $60 = $14;
   $10 = $60;
   $61 = $10;
   $62 = HEAP32[$61>>2]|0;
   $63 = $13;
   HEAP32[$63>>2] = $62;
   $11 = $__t$i2;
   $64 = $11;
   $65 = HEAP32[$64>>2]|0;
   $66 = $14;
   HEAP32[$66>>2] = $65;
   $__r = 2;
  }
  $67 = $__r;
  $25 = $67;
  $114 = $25;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort4IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 72|0;
 $__t$i1 = sp + 48|0;
 $__t$i = sp + 24|0;
 $15 = $__x1;
 $16 = $__x2;
 $17 = $__x3;
 $18 = $__x4;
 $19 = $__c;
 $20 = $15;
 $21 = $16;
 $22 = $17;
 $23 = $19;
 $24 = (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($20,$21,$22,$23)|0);
 $__r = $24;
 $25 = $19;
 $26 = $18;
 $27 = $17;
 $28 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($25,$26,$27)|0);
 if (!($28)) {
  $79 = $__r;
  STACKTOP = sp;return ($79|0);
 }
 $29 = $17;
 $30 = $18;
 $13 = $29;
 $14 = $30;
 $31 = $13;
 $12 = $31;
 $32 = $12;
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$__t$i>>2] = $33;
 $34 = $14;
 $10 = $34;
 $35 = $10;
 $36 = HEAP32[$35>>2]|0;
 $37 = $13;
 HEAP32[$37>>2] = $36;
 $11 = $__t$i;
 $38 = $11;
 $39 = HEAP32[$38>>2]|0;
 $40 = $14;
 HEAP32[$40>>2] = $39;
 $41 = $__r;
 $42 = (($41) + 1)|0;
 $__r = $42;
 $43 = $19;
 $44 = $17;
 $45 = $16;
 $46 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($43,$44,$45)|0);
 if ($46) {
  $47 = $16;
  $48 = $17;
  $3 = $47;
  $4 = $48;
  $49 = $3;
  $2 = $49;
  $50 = $2;
  $51 = HEAP32[$50>>2]|0;
  HEAP32[$__t$i2>>2] = $51;
  $52 = $4;
  $0 = $52;
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $3;
  HEAP32[$55>>2] = $54;
  $1 = $__t$i2;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = $4;
  HEAP32[$58>>2] = $57;
  $59 = $__r;
  $60 = (($59) + 1)|0;
  $__r = $60;
  $61 = $19;
  $62 = $16;
  $63 = $15;
  $64 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($61,$62,$63)|0);
  if ($64) {
   $65 = $15;
   $66 = $16;
   $8 = $65;
   $9 = $66;
   $67 = $8;
   $7 = $67;
   $68 = $7;
   $69 = HEAP32[$68>>2]|0;
   HEAP32[$__t$i1>>2] = $69;
   $70 = $9;
   $5 = $70;
   $71 = $5;
   $72 = HEAP32[$71>>2]|0;
   $73 = $8;
   HEAP32[$73>>2] = $72;
   $6 = $__t$i1;
   $74 = $6;
   $75 = HEAP32[$74>>2]|0;
   $76 = $9;
   HEAP32[$76>>2] = $75;
   $77 = $__r;
   $78 = (($77) + 1)|0;
   $__r = $78;
  }
 }
 $79 = $__r;
 STACKTOP = sp;return ($79|0);
}
function __ZNSt3__17__sort5IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 100|0;
 $__t$i2 = sp + 76|0;
 $__t$i1 = sp + 52|0;
 $__t$i = sp + 28|0;
 $20 = $__x1;
 $21 = $__x2;
 $22 = $__x3;
 $23 = $__x4;
 $24 = $__x5;
 $25 = $__c;
 $26 = $20;
 $27 = $21;
 $28 = $22;
 $29 = $23;
 $30 = $25;
 $31 = (__ZNSt3__17__sort4IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($26,$27,$28,$29,$30)|0);
 $__r = $31;
 $32 = $25;
 $33 = $24;
 $34 = $23;
 $35 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($32,$33,$34)|0);
 if (!($35)) {
  $104 = $__r;
  STACKTOP = sp;return ($104|0);
 }
 $36 = $23;
 $37 = $24;
 $18 = $36;
 $19 = $37;
 $38 = $18;
 $17 = $38;
 $39 = $17;
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$__t$i>>2] = $40;
 $41 = $19;
 $15 = $41;
 $42 = $15;
 $43 = HEAP32[$42>>2]|0;
 $44 = $18;
 HEAP32[$44>>2] = $43;
 $16 = $__t$i;
 $45 = $16;
 $46 = HEAP32[$45>>2]|0;
 $47 = $19;
 HEAP32[$47>>2] = $46;
 $48 = $__r;
 $49 = (($48) + 1)|0;
 $__r = $49;
 $50 = $25;
 $51 = $23;
 $52 = $22;
 $53 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($50,$51,$52)|0);
 if ($53) {
  $54 = $22;
  $55 = $23;
  $8 = $54;
  $9 = $55;
  $56 = $8;
  $7 = $56;
  $57 = $7;
  $58 = HEAP32[$57>>2]|0;
  HEAP32[$__t$i2>>2] = $58;
  $59 = $9;
  $5 = $59;
  $60 = $5;
  $61 = HEAP32[$60>>2]|0;
  $62 = $8;
  HEAP32[$62>>2] = $61;
  $6 = $__t$i2;
  $63 = $6;
  $64 = HEAP32[$63>>2]|0;
  $65 = $9;
  HEAP32[$65>>2] = $64;
  $66 = $__r;
  $67 = (($66) + 1)|0;
  $__r = $67;
  $68 = $25;
  $69 = $22;
  $70 = $21;
  $71 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($68,$69,$70)|0);
  if ($71) {
   $72 = $21;
   $73 = $22;
   $3 = $72;
   $4 = $73;
   $74 = $3;
   $2 = $74;
   $75 = $2;
   $76 = HEAP32[$75>>2]|0;
   HEAP32[$__t$i3>>2] = $76;
   $77 = $4;
   $0 = $77;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = $3;
   HEAP32[$80>>2] = $79;
   $1 = $__t$i3;
   $81 = $1;
   $82 = HEAP32[$81>>2]|0;
   $83 = $4;
   HEAP32[$83>>2] = $82;
   $84 = $__r;
   $85 = (($84) + 1)|0;
   $__r = $85;
   $86 = $25;
   $87 = $21;
   $88 = $20;
   $89 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($86,$87,$88)|0);
   if ($89) {
    $90 = $20;
    $91 = $21;
    $13 = $90;
    $14 = $91;
    $92 = $13;
    $12 = $92;
    $93 = $12;
    $94 = HEAP32[$93>>2]|0;
    HEAP32[$__t$i1>>2] = $94;
    $95 = $14;
    $10 = $95;
    $96 = $10;
    $97 = HEAP32[$96>>2]|0;
    $98 = $13;
    HEAP32[$98>>2] = $97;
    $11 = $__t$i1;
    $99 = $11;
    $100 = HEAP32[$99>>2]|0;
    $101 = $14;
    HEAP32[$101>>2] = $100;
    $102 = $__r;
    $103 = (($102) + 1)|0;
    $__r = $103;
   }
  }
 }
 $104 = $__r;
 STACKTOP = sp;return ($104|0);
}
function __ZNSt3__118__insertion_sort_3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 4|0;
 $3 = $__first;
 $4 = $__last;
 $5 = $__comp;
 $6 = $3;
 $7 = (($6) + 8|0);
 $__j = $7;
 $8 = $3;
 $9 = $3;
 $10 = (($9) + 4|0);
 $11 = $__j;
 $12 = $5;
 (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($8,$10,$11,$12)|0);
 $13 = $__j;
 $14 = (($13) + 4|0);
 $__i = $14;
 while(1) {
  $15 = $__i;
  $16 = $4;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  $18 = $5;
  $19 = $__i;
  $20 = $__j;
  $21 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($18,$19,$20)|0);
  if ($21) {
   $22 = $__i;
   $2 = $22;
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$__t>>2] = $24;
   $25 = $__j;
   $__k = $25;
   $26 = $__i;
   $__j = $26;
   while(1) {
    $27 = $__k;
    $0 = $27;
    $28 = $0;
    $29 = HEAP32[$28>>2]|0;
    $30 = $__j;
    HEAP32[$30>>2] = $29;
    $31 = $__k;
    $__j = $31;
    $32 = $__j;
    $33 = $3;
    $34 = ($32|0)!=($33|0);
    if ($34) {
     $35 = $5;
     $36 = $__k;
     $37 = (($36) + -4|0);
     $__k = $37;
     $38 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($35,$__t,$37)|0);
     $45 = $38;
    } else {
     $45 = 0;
    }
    if (!($45)) {
     break;
    }
   }
   $1 = $__t;
   $39 = $1;
   $40 = HEAP32[$39>>2]|0;
   $41 = $__j;
   HEAP32[$41>>2] = $40;
  }
  $42 = $__i;
  $__j = $42;
  $43 = $__i;
  $44 = (($43) + 4|0);
  $__i = $44;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEbT0_SG_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0;
 var $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 36|0;
 $__t = sp + 4|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $10;
 $13 = $9;
 $14 = $12;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($16|0) / 4)&-1;
 switch ($17|0) {
 case 4:  {
  $41 = $9;
  $42 = $9;
  $43 = (($42) + 4|0);
  $44 = $9;
  $45 = (($44) + 8|0);
  $46 = $10;
  $47 = (($46) + -4|0);
  $10 = $47;
  $48 = $11;
  (__ZNSt3__17__sort4IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_T_($41,$43,$45,$47,$48)|0);
  $$expand_i1_val6 = 1;
  $8 = $$expand_i1_val6;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $8 = $$expand_i1_val;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 3:  {
  $35 = $9;
  $36 = $9;
  $37 = (($36) + 4|0);
  $38 = $10;
  $39 = (($38) + -4|0);
  $10 = $39;
  $40 = $11;
  (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($35,$37,$39,$40)|0);
  $$expand_i1_val4 = 1;
  $8 = $$expand_i1_val4;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 5:  {
  $49 = $9;
  $50 = $9;
  $51 = (($50) + 4|0);
  $52 = $9;
  $53 = (($52) + 8|0);
  $54 = $9;
  $55 = (($54) + 12|0);
  $56 = $10;
  $57 = (($56) + -4|0);
  $10 = $57;
  $58 = $11;
  (__ZNSt3__17__sort5IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_SG_SG_T_($49,$51,$53,$55,$57,$58)|0);
  $$expand_i1_val8 = 1;
  $8 = $$expand_i1_val8;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 case 2:  {
  $18 = $11;
  $19 = $10;
  $20 = (($19) + -4|0);
  $10 = $20;
  $21 = $9;
  $22 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($18,$20,$21)|0);
  if ($22) {
   $23 = $9;
   $24 = $10;
   $6 = $23;
   $7 = $24;
   $25 = $6;
   $5 = $25;
   $26 = $5;
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$__t$i>>2] = $27;
   $28 = $7;
   $3 = $28;
   $29 = $3;
   $30 = HEAP32[$29>>2]|0;
   $31 = $6;
   HEAP32[$31>>2] = $30;
   $4 = $__t$i;
   $32 = $4;
   $33 = HEAP32[$32>>2]|0;
   $34 = $7;
   HEAP32[$34>>2] = $33;
  }
  $$expand_i1_val2 = 1;
  $8 = $$expand_i1_val2;
  $$pre_trunc = $8;
  $105 = $$pre_trunc&1;
  STACKTOP = sp;return ($105|0);
  break;
 }
 default: {
  $59 = $9;
  $60 = (($59) + 8|0);
  $__j = $60;
  $61 = $9;
  $62 = $9;
  $63 = (($62) + 4|0);
  $64 = $__j;
  $65 = $11;
  (__ZNSt3__17__sort3IRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEjT0_SG_SG_T_($61,$63,$64,$65)|0);
  $__limit = 8;
  $__count = 0;
  $66 = $__j;
  $67 = (($66) + 4|0);
  $__i = $67;
  while(1) {
   $68 = $__i;
   $69 = $10;
   $70 = ($68|0)!=($69|0);
   if (!($70)) {
    label = 22;
    break;
   }
   $71 = $11;
   $72 = $__i;
   $73 = $__j;
   $74 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($71,$72,$73)|0);
   if ($74) {
    $75 = $__i;
    $1 = $75;
    $76 = $1;
    $77 = HEAP32[$76>>2]|0;
    HEAP32[$__t>>2] = $77;
    $78 = $__j;
    $__k = $78;
    $79 = $__i;
    $__j = $79;
    while(1) {
     $80 = $__k;
     $0 = $80;
     $81 = $0;
     $82 = HEAP32[$81>>2]|0;
     $83 = $__j;
     HEAP32[$83>>2] = $82;
     $84 = $__k;
     $__j = $84;
     $85 = $__j;
     $86 = $9;
     $87 = ($85|0)!=($86|0);
     if ($87) {
      $88 = $11;
      $89 = $__k;
      $90 = (($89) + -4|0);
      $__k = $90;
      $91 = (__ZZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRKPNS_8net_bondIdEESB_E_clESB_SB_($88,$__t,$90)|0);
      $106 = $91;
     } else {
      $106 = 0;
     }
     if (!($106)) {
      break;
     }
    }
    $2 = $__t;
    $92 = $2;
    $93 = HEAP32[$92>>2]|0;
    $94 = $__j;
    HEAP32[$94>>2] = $93;
    $95 = $__count;
    $96 = (($95) + 1)|0;
    $__count = $96;
    $97 = ($96|0)==(8);
    if ($97) {
     label = 18;
     break;
    }
   }
   $102 = $__i;
   $__j = $102;
   $103 = $__i;
   $104 = (($103) + 4|0);
   $__i = $104;
  }
  if ((label|0) == 18) {
   $98 = $__i;
   $99 = (($98) + 4|0);
   $__i = $99;
   $100 = $10;
   $101 = ($99|0)==($100|0);
   $$expand_i1_val10 = $101&1;
   $8 = $$expand_i1_val10;
   $$pre_trunc = $8;
   $105 = $$pre_trunc&1;
   STACKTOP = sp;return ($105|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $8 = $$expand_i1_val12;
   $$pre_trunc = $8;
   $105 = $$pre_trunc&1;
   STACKTOP = sp;return ($105|0);
  }
 }
 }
 return (0)|0;
}
function __ZN7croutes10little_algIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (720 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($1) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $5 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZN7croutes9algorithmIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes10little_algIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes10little_algIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes10little_algIdE10short_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes10little_algIdE4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes10little_algIdE12russian_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes10little_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node = $first_node|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bundle = 0, $cdata = 0, $row = 0, $size = 0;
 var $skip_cols = 0, $skip_rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $cdata = sp + 88|0;
 $skip_rows = sp + 68|0;
 $18 = sp + 173|0;
 $skip_cols = sp + 56|0;
 $19 = sp + 172|0;
 $20 = sp + 48|0;
 $21 = sp + 40|0;
 $22 = sp + 32|0;
 $23 = sp + 16|0;
 $24 = sp + 4|0;
 $13 = $this;
 $14 = $first_node;
 $26 = $13;
 $$expand_i1_val = 0;
 $15 = $$expand_i1_val;
 __ZN7croutes6answerIdE4initEv($agg$result);
 $12 = $agg$result;
 $27 = $12;
 $28 = HEAP32[$27>>2]|0;
 __THREW__ = 0;
 $29 = (invoke_ii(460,($28|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  label = 11;
 } else {
  $bundle = $29;
  $11 = $data;
  $32 = $11;
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  $34 = (invoke_ii(488,($33|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   label = 11;
  } else {
   $size = $34;
   $10 = $data;
   $37 = $10;
   $38 = HEAP32[$37>>2]|0;
   __THREW__ = 0;
   invoke_vii(489,($cdata|0),($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    label = 11;
   } else {
    $row = 0;
    while(1) {
     $41 = $row;
     $42 = $size;
     $43 = ($41|0)<($42|0);
     if (!($43)) {
      label = 13;
      break;
     }
     $9 = $cdata;
     $44 = $9;
     $45 = HEAP32[$44>>2]|0;
     __THREW__ = 0;
     $46 = (+invoke_di(490,($45|0)));
     $47 = __THREW__; __THREW__ = 0;
     $48 = $47&1;
     if ($48) {
      label = 12;
      break;
     }
     $8 = $cdata;
     $49 = $8;
     $50 = HEAP32[$49>>2]|0;
     $51 = $row;
     $52 = $row;
     __THREW__ = 0;
     $53 = (invoke_iiii(470,($50|0),($51|0),($52|0))|0);
     $54 = __THREW__; __THREW__ = 0;
     $55 = $54&1;
     if ($55) {
      label = 12;
      break;
     }
     __THREW__ = 0;
     $56 = (invoke_ii(491,($53|0))|0);
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      label = 12;
      break;
     }
     HEAPF64[$56>>3] = $46;
     $59 = $row;
     $60 = (($59) + 1)|0;
     $row = $60;
    }
    if ((label|0) == 13) {
     $7 = $cdata;
     $65 = $7;
     $66 = HEAP32[$65>>2]|0;
     __THREW__ = 0;
     $67 = (invoke_ii(488,($66|0))|0);
     $68 = __THREW__; __THREW__ = 0;
     $69 = $68&1;
     if ($69) {
      label = 12;
     } else {
      HEAP8[$18>>0] = 0;
      __THREW__ = 0;
      invoke_viii(461,($skip_rows|0),($67|0),($18|0));
      $70 = __THREW__; __THREW__ = 0;
      $71 = $70&1;
      if ($71) {
       label = 12;
      } else {
       $6 = $cdata;
       $72 = $6;
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii(488,($73|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        label = 27;
       } else {
        HEAP8[$19>>0] = 0;
        __THREW__ = 0;
        invoke_viii(461,($skip_cols|0),($74|0),($19|0));
        $77 = __THREW__; __THREW__ = 0;
        $78 = $77&1;
        if ($78) {
         label = 27;
        } else {
         $4 = $20;
         $5 = $data;
         $79 = $4;
         $80 = $5;
         $81 = HEAP32[$80>>2]|0;
         HEAP32[$79>>2] = $81;
         $82 = (($79) + 4|0);
         $83 = $5;
         $84 = (($83) + 4|0);
         $85 = HEAP32[$84>>2]|0;
         HEAP32[$82>>2] = $85;
         $86 = (($79) + 4|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = ($87|0)!=(0|0);
         if ($88) {
          $89 = (($79) + 4|0);
          $90 = HEAP32[$89>>2]|0;
          __ZNSt3__119__shared_weak_count12__add_sharedEv($90);
         }
         $2 = $21;
         $3 = $cdata;
         $91 = $2;
         $92 = $3;
         $93 = HEAP32[$92>>2]|0;
         HEAP32[$91>>2] = $93;
         $94 = (($91) + 4|0);
         $95 = $3;
         $96 = (($95) + 4|0);
         $97 = HEAP32[$96>>2]|0;
         HEAP32[$94>>2] = $97;
         $98 = (($91) + 4|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = ($99|0)!=(0|0);
         if ($100) {
          $101 = (($91) + 4|0);
          $102 = HEAP32[$101>>2]|0;
          __ZNSt3__119__shared_weak_count12__add_sharedEv($102);
         }
         $0 = $22;
         $1 = $agg$result;
         $103 = $0;
         $104 = $1;
         $105 = HEAP32[$104>>2]|0;
         HEAP32[$103>>2] = $105;
         $106 = (($103) + 4|0);
         $107 = $1;
         $108 = (($107) + 4|0);
         $109 = HEAP32[$108>>2]|0;
         HEAP32[$106>>2] = $109;
         $110 = (($103) + 4|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = ($111|0)!=(0|0);
         if ($112) {
          $113 = (($103) + 4|0);
          $114 = HEAP32[$113>>2]|0;
          __ZNSt3__119__shared_weak_count12__add_sharedEv($114);
         }
         $115 = $bundle;
         __THREW__ = 0;
         invoke_vii(468,($23|0),($skip_rows|0));
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          $125 = ___cxa_find_matching_catch()|0;
          $126 = tempRet0;
          $16 = $125;
          $17 = $126;
         } else {
          __THREW__ = 0;
          invoke_vii(468,($24|0),($skip_cols|0));
          $118 = __THREW__; __THREW__ = 0;
          $119 = $118&1;
          do {
           if ($119) {
            $127 = ___cxa_find_matching_catch()|0;
            $128 = tempRet0;
            $16 = $127;
            $17 = $128;
           } else {
            __THREW__ = 0;
            invoke_viiiiiii(492,($26|0),($20|0),($21|0),($22|0),($115|0),($23|0),($24|0));
            $120 = __THREW__; __THREW__ = 0;
            $121 = $120&1;
            if ($121) {
             $129 = ___cxa_find_matching_catch()|0;
             $130 = tempRet0;
             $16 = $129;
             $17 = $130;
             __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($24);
             break;
            }
            __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($24);
            __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($23);
            __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($22);
            __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($21);
            __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($20);
            $$expand_i1_val2 = 1;
            $15 = $$expand_i1_val2;
            $25 = 1;
            __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($skip_cols);
            __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($skip_rows);
            __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($cdata);
            $$pre_trunc = $15;
            $122 = $$pre_trunc&1;
            if ($122) {
             STACKTOP = sp;return;
            }
            __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
            STACKTOP = sp;return;
           }
          } while(0);
          __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($23);
         }
         __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($22);
         __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($21);
         __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($20);
         __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($skip_cols);
        }
       }
       if ((label|0) == 27) {
        $123 = ___cxa_find_matching_catch()|0;
        $124 = tempRet0;
        $16 = $123;
        $17 = $124;
       }
       __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($skip_rows);
      }
     }
    }
    if ((label|0) == 12) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $16 = $63;
     $17 = $64;
    }
    __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($cdata);
   }
  }
 }
 if ((label|0) == 11) {
  $61 = ___cxa_find_matching_catch()|0;
  $62 = tempRet0;
  $16 = $61;
  $17 = $62;
 }
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 $131 = $16;
 $132 = $17;
 ___resumeException($131|0);
 // unreachable;
}
function __ZNK7croutes5ndataIdE4copyEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $1 = $3;
 $4 = $1;
 $0 = $4;
 $5 = $0;
 __ZNSt3__110shared_ptrIN7croutes5ndataIdEEE11make_sharedIJRKS3_EEES4_DpOT_($agg$result,$5);
 STACKTOP = sp;return;
}
function __ZNK7croutes5ndataIdE3infEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = +HEAPF64[$2>>3];
 STACKTOP = sp;return (+$3);
}
function __ZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_($this,$data,$cdata1,$ans,$bundle,$skip_rows,$skip_cols) {
 $this = $this|0;
 $data = $data|0;
 $cdata1 = $cdata1|0;
 $ans = $ans|0;
 $bundle = $bundle|0;
 $skip_rows = $skip_rows|0;
 $skip_cols = $skip_cols|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0;
 var $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0;
 var $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0;
 var $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0;
 var $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0;
 var $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0;
 var $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0;
 var $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0.0, $1195 = 0, $1196 = 0, $1197 = 0.0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0;
 var $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0;
 var $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0;
 var $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0;
 var $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0;
 var $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0;
 var $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0;
 var $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0;
 var $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0;
 var $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0;
 var $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0;
 var $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0;
 var $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0;
 var $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0.0, $144 = 0;
 var $1440 = 0, $1441 = 0, $1442 = 0.0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0;
 var $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0;
 var $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0;
 var $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0;
 var $1512 = 0, $1513 = 0.0, $1514 = 0, $1515 = 0, $1516 = 0.0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0;
 var $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0.0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0.0, $1547 = 0, $1548 = 0;
 var $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0;
 var $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0;
 var $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0;
 var $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0;
 var $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0;
 var $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0;
 var $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0;
 var $1675 = 0, $1676 = 0.0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0;
 var $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0;
 var $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0;
 var $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0.0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0.0, $518 = 0, $519 = 0, $52 = 0, $520 = 0.0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0.0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0.0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0.0, $613 = 0.0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0.0, $623 = 0, $624 = 0, $625 = 0.0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0.0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0.0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0.0;
 var $799 = 0.0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0.0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
 var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
 var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0.0, $848 = 0.0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
 var $852 = 0, $853 = 0, $854 = 0.0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0.0, $863 = 0.0, $864 = 0.0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
 var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
 var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
 var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
 var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
 var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
 var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0.0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0.0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0;
 var $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0;
 var $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0, $__annotator$i$i = 0, $__begin = 0, $__begin18 = 0, $__end = 0, $__end19 = 0, $__old_size$i$i$i = 0, $__old_size$i$i$i35 = 0, $__range = 0, $__range17 = 0, $__t$i$i$i$i = 0, $__t$i$i$i$i34 = 0, $b = 0, $b1 = 0, $b12 = 0, $b120 = 0, $cdata = 0;
 var $cleanup$dest = 0, $cleanup$dest21 = 0, $col = 0, $col1 = 0, $col110 = 0, $col14 = 0, $col15 = 0, $col2 = 0, $col8 = 0, $comp = 0, $k = 0, $max_items = 0, $min_dist = 0.0, $min_dist3 = 0.0, $min_in_col = 0.0, $min_in_row = 0.0, $n = 0, $n1 = 0, $n111 = 0, $n5 = 0;
 var $n9 = 0, $old_bundle = 0, $pq = 0, $prev_dist = 0.0, $recursive = 0, $row = 0, $row1 = 0, $row116 = 0, $row13 = 0, $row4 = 0, $row6 = 0, $row7 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy7 = sp + 2216|0;
 $$byval_copy6 = sp + 2212|0;
 $$byval_copy5 = sp + 2208|0;
 $$byval_copy4 = sp + 2204|0;
 $$byval_copy3 = sp + 2200|0;
 $$byval_copy2 = sp + 2196|0;
 $$byval_copy1 = sp + 2192|0;
 $$byval_copy = sp + 2188|0;
 $__t$i$i$i$i34 = sp + 1832|0;
 $94 = sp + 1812|0;
 $95 = sp + 1808|0;
 $96 = sp + 1804|0;
 $97 = sp + 168|0;
 $98 = sp + 160|0;
 $103 = sp + 1784|0;
 $104 = sp + 1780|0;
 $105 = sp + 152|0;
 $106 = sp + 144|0;
 $107 = sp + 136|0;
 $117 = sp + 128|0;
 $120 = sp + 2232|0;
 $137 = sp + 1664|0;
 $138 = sp + 1660|0;
 $139 = sp + 2231|0;
 $__t$i$i$i$i = sp + 1624|0;
 $152 = sp + 1604|0;
 $153 = sp + 1600|0;
 $154 = sp + 1596|0;
 $155 = sp + 120|0;
 $156 = sp + 112|0;
 $161 = sp + 1576|0;
 $162 = sp + 1572|0;
 $163 = sp + 104|0;
 $164 = sp + 96|0;
 $165 = sp + 88|0;
 $175 = sp + 80|0;
 $178 = sp + 2230|0;
 $195 = sp + 1456|0;
 $196 = sp + 1452|0;
 $197 = sp + 2229|0;
 $206 = sp + 72|0;
 $211 = sp + 2228|0;
 $__annotator$i = sp + 2227|0;
 $234 = sp + 1312|0;
 $237 = sp + 1300|0;
 $260 = sp + 64|0;
 $265 = sp + 2226|0;
 $__annotator$i$i = sp + 2225|0;
 $280 = sp + 1136|0;
 $281 = sp + 1132|0;
 $282 = sp + 56|0;
 $283 = sp + 48|0;
 $284 = sp + 40|0;
 $288 = sp + 1116|0;
 $289 = sp + 1112|0;
 $290 = sp + 2224|0;
 $339 = sp + 916|0;
 $342 = sp + 904|0;
 $cdata = sp + 552|0;
 $comp = sp + 2221|0;
 $432 = sp + 528|0;
 $434 = sp + 504|0;
 $435 = sp + 488|0;
 $436 = sp + 472|0;
 $pq = sp + 456|0;
 $437 = sp + 440|0;
 $438 = sp + 424|0;
 $439 = sp + 400|0;
 $440 = sp + 384|0;
 $441 = sp + 380|0;
 $max_items = sp + 368|0;
 $__begin = sp + 356|0;
 $__end = sp + 352|0;
 $442 = sp + 328|0;
 $443 = sp + 320|0;
 $444 = sp + 304|0;
 $445 = sp + 288|0;
 $446 = sp + 272|0;
 $447 = sp + 256|0;
 $448 = sp + 248|0;
 $449 = sp + 240|0;
 $450 = sp + 232|0;
 $451 = sp + 220|0;
 $452 = sp + 208|0;
 $453 = sp + 200|0;
 $454 = sp + 192|0;
 $__begin18 = sp + 180|0;
 $__end19 = sp + 176|0;
 $428 = $this;
 $429 = $bundle;
 $455 = $428;
 $427 = $data;
 $456 = $427;
 $457 = HEAP32[$456>>2]|0;
 $458 = (__ZNK7croutes5ndataIdE11nodes_countEv($457)|0);
 $size = $458;
 $426 = $cdata1;
 $459 = $426;
 $460 = HEAP32[$459>>2]|0;
 __ZNK7croutes5ndataIdE4copyEv($cdata,$460);
 L1: while(1) {
  $row = 0;
  while(1) {
   $461 = $row;
   $462 = $size;
   $463 = ($461|0)<($462|0);
   if (!($463)) {
    break;
   }
   $425 = $cdata;
   $464 = $425;
   $465 = HEAP32[$464>>2]|0;
   __THREW__ = 0;
   $466 = (+invoke_di(490,($465|0)));
   $467 = __THREW__; __THREW__ = 0;
   $468 = $467&1;
   if ($468) {
    label = 15;
    break L1;
   }
   $min_dist = $466;
   $col = 0;
   while(1) {
    $469 = $col;
    $470 = $size;
    $471 = ($469|0)<($470|0);
    if (!($471)) {
     break;
    }
    $472 = $col;
    $423 = $skip_cols;
    $424 = $472;
    $473 = $423;
    $474 = $424;
    $421 = $473;
    $422 = $474;
    $475 = $421;
    $476 = HEAP32[$475>>2]|0;
    $477 = $422;
    $478 = (($477>>>0) / 32)&-1;
    $479 = (($476) + ($478<<2)|0);
    $480 = $422;
    $481 = (($480>>>0) % 32)&-1;
    $482 = 1 << $481;
    $418 = $432;
    $419 = $479;
    $420 = $482;
    $483 = $418;
    $484 = $419;
    HEAP32[$483>>2] = $484;
    $485 = (($483) + 4|0);
    $486 = $420;
    HEAP32[$485>>2] = $486;
    $417 = $432;
    $487 = $417;
    $488 = HEAP32[$487>>2]|0;
    $489 = HEAP32[$488>>2]|0;
    $490 = (($487) + 4|0);
    $491 = HEAP32[$490>>2]|0;
    $492 = $489 & $491;
    $493 = ($492|0)!=(0);
    if (!($493)) {
     $416 = $cdata;
     $494 = $416;
     $495 = HEAP32[$494>>2]|0;
     $496 = $row;
     $497 = $col;
     __THREW__ = 0;
     $498 = (invoke_iiii(470,($495|0),($496|0),($497|0))|0);
     $499 = __THREW__; __THREW__ = 0;
     $500 = $499&1;
     if ($500) {
      label = 15;
      break L1;
     }
     $n = $498;
     $501 = $n;
     __THREW__ = 0;
     $502 = (invoke_ii(491,($501|0))|0);
     $503 = __THREW__; __THREW__ = 0;
     $504 = $503&1;
     if ($504) {
      label = 15;
      break L1;
     }
     $505 = +HEAPF64[$502>>3];
     $506 = $min_dist;
     $507 = $505 < $506;
     if ($507) {
      $508 = $n;
      __THREW__ = 0;
      $509 = (invoke_ii(491,($508|0))|0);
      $510 = __THREW__; __THREW__ = 0;
      $511 = $510&1;
      if ($511) {
       label = 15;
       break L1;
      }
      $512 = +HEAPF64[$509>>3];
      $min_dist = $512;
     }
    }
    $515 = $col;
    $516 = (($515) + 1)|0;
    $col = $516;
   }
   $517 = $min_dist;
   $415 = $cdata;
   $518 = $415;
   $519 = HEAP32[$518>>2]|0;
   __THREW__ = 0;
   $520 = (+invoke_di(490,($519|0)));
   $521 = __THREW__; __THREW__ = 0;
   $522 = $521&1;
   if ($522) {
    label = 15;
    break L1;
   }
   $523 = $517 == $520;
   if ($523) {
    label = 21;
    break L1;
   }
   $524 = $min_dist;
   $525 = $524 != 0.0;
   if ($525) {
    $col1 = 0;
    while(1) {
     $526 = $col1;
     $527 = $size;
     $528 = ($526|0)<($527|0);
     if (!($528)) {
      break;
     }
     $529 = $col1;
     $413 = $skip_cols;
     $414 = $529;
     $530 = $413;
     $531 = $414;
     $411 = $530;
     $412 = $531;
     $532 = $411;
     $533 = HEAP32[$532>>2]|0;
     $534 = $412;
     $535 = (($534>>>0) / 32)&-1;
     $536 = (($533) + ($535<<2)|0);
     $537 = $412;
     $538 = (($537>>>0) % 32)&-1;
     $539 = 1 << $538;
     $408 = $434;
     $409 = $536;
     $410 = $539;
     $540 = $408;
     $541 = $409;
     HEAP32[$540>>2] = $541;
     $542 = (($540) + 4|0);
     $543 = $410;
     HEAP32[$542>>2] = $543;
     $388 = $434;
     $544 = $388;
     $545 = HEAP32[$544>>2]|0;
     $546 = HEAP32[$545>>2]|0;
     $547 = (($544) + 4|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = $546 & $548;
     $550 = ($549|0)!=(0);
     if (!($550)) {
      $551 = $min_dist;
      $387 = $cdata;
      $552 = $387;
      $553 = HEAP32[$552>>2]|0;
      $554 = $row;
      $555 = $col1;
      __THREW__ = 0;
      $556 = (invoke_iiii(470,($553|0),($554|0),($555|0))|0);
      $557 = __THREW__; __THREW__ = 0;
      $558 = $557&1;
      if ($558) {
       label = 15;
       break L1;
      }
      __THREW__ = 0;
      $559 = (invoke_ii(491,($556|0))|0);
      $560 = __THREW__; __THREW__ = 0;
      $561 = $560&1;
      if ($561) {
       label = 15;
       break L1;
      }
      $562 = +HEAPF64[$559>>3];
      $563 = $562 - $551;
      HEAPF64[$559>>3] = $563;
     }
     $564 = $col1;
     $565 = (($564) + 1)|0;
     $col1 = $565;
    }
   }
   $566 = $row;
   $567 = (($566) + 1)|0;
   $row = $567;
  }
  $col2 = 0;
  while(1) {
   $568 = $col2;
   $569 = $size;
   $570 = ($568|0)<($569|0);
   if (!($570)) {
    break;
   }
   $386 = $cdata;
   $571 = $386;
   $572 = HEAP32[$571>>2]|0;
   __THREW__ = 0;
   $573 = (+invoke_di(490,($572|0)));
   $574 = __THREW__; __THREW__ = 0;
   $575 = $574&1;
   if ($575) {
    label = 15;
    break L1;
   }
   $min_dist3 = $573;
   $row4 = 0;
   while(1) {
    $576 = $row4;
    $577 = $size;
    $578 = ($576|0)<($577|0);
    if (!($578)) {
     break;
    }
    $579 = $row4;
    $384 = $skip_rows;
    $385 = $579;
    $580 = $384;
    $581 = $385;
    $382 = $580;
    $383 = $581;
    $582 = $382;
    $583 = HEAP32[$582>>2]|0;
    $584 = $383;
    $585 = (($584>>>0) / 32)&-1;
    $586 = (($583) + ($585<<2)|0);
    $587 = $383;
    $588 = (($587>>>0) % 32)&-1;
    $589 = 1 << $588;
    $379 = $435;
    $380 = $586;
    $381 = $589;
    $590 = $379;
    $591 = $380;
    HEAP32[$590>>2] = $591;
    $592 = (($590) + 4|0);
    $593 = $381;
    HEAP32[$592>>2] = $593;
    $378 = $435;
    $594 = $378;
    $595 = HEAP32[$594>>2]|0;
    $596 = HEAP32[$595>>2]|0;
    $597 = (($594) + 4|0);
    $598 = HEAP32[$597>>2]|0;
    $599 = $596 & $598;
    $600 = ($599|0)!=(0);
    if (!($600)) {
     $377 = $cdata;
     $601 = $377;
     $602 = HEAP32[$601>>2]|0;
     $603 = $row4;
     $604 = $col2;
     __THREW__ = 0;
     $605 = (invoke_iiii(470,($602|0),($603|0),($604|0))|0);
     $606 = __THREW__; __THREW__ = 0;
     $607 = $606&1;
     if ($607) {
      label = 15;
      break L1;
     }
     $n5 = $605;
     $608 = $n5;
     __THREW__ = 0;
     $609 = (invoke_ii(491,($608|0))|0);
     $610 = __THREW__; __THREW__ = 0;
     $611 = $610&1;
     if ($611) {
      label = 15;
      break L1;
     }
     $612 = +HEAPF64[$609>>3];
     $613 = $min_dist3;
     $614 = $612 < $613;
     if ($614) {
      $615 = $n5;
      __THREW__ = 0;
      $616 = (invoke_ii(491,($615|0))|0);
      $617 = __THREW__; __THREW__ = 0;
      $618 = $617&1;
      if ($618) {
       label = 15;
       break L1;
      }
      $619 = +HEAPF64[$616>>3];
      $min_dist3 = $619;
     }
    }
    $620 = $row4;
    $621 = (($620) + 1)|0;
    $row4 = $621;
   }
   $622 = $min_dist3;
   $376 = $cdata;
   $623 = $376;
   $624 = HEAP32[$623>>2]|0;
   __THREW__ = 0;
   $625 = (+invoke_di(490,($624|0)));
   $626 = __THREW__; __THREW__ = 0;
   $627 = $626&1;
   if ($627) {
    label = 15;
    break L1;
   }
   $628 = $622 == $625;
   if ($628) {
    label = 52;
    break L1;
   }
   $629 = $min_dist3;
   $630 = $629 != 0.0;
   if ($630) {
    $row6 = 0;
    while(1) {
     $631 = $row6;
     $632 = $size;
     $633 = ($631|0)<($632|0);
     if (!($633)) {
      break;
     }
     $634 = $row6;
     $364 = $skip_rows;
     $365 = $634;
     $635 = $364;
     $636 = $365;
     $362 = $635;
     $363 = $636;
     $637 = $362;
     $638 = HEAP32[$637>>2]|0;
     $639 = $363;
     $640 = (($639>>>0) / 32)&-1;
     $641 = (($638) + ($640<<2)|0);
     $642 = $363;
     $643 = (($642>>>0) % 32)&-1;
     $644 = 1 << $643;
     $359 = $436;
     $360 = $641;
     $361 = $644;
     $645 = $359;
     $646 = $360;
     HEAP32[$645>>2] = $646;
     $647 = (($645) + 4|0);
     $648 = $361;
     HEAP32[$647>>2] = $648;
     $349 = $436;
     $649 = $349;
     $650 = HEAP32[$649>>2]|0;
     $651 = HEAP32[$650>>2]|0;
     $652 = (($649) + 4|0);
     $653 = HEAP32[$652>>2]|0;
     $654 = $651 & $653;
     $655 = ($654|0)!=(0);
     if (!($655)) {
      $656 = $min_dist3;
      $348 = $cdata;
      $657 = $348;
      $658 = HEAP32[$657>>2]|0;
      $659 = $row6;
      $660 = $col2;
      __THREW__ = 0;
      $661 = (invoke_iiii(470,($658|0),($659|0),($660|0))|0);
      $662 = __THREW__; __THREW__ = 0;
      $663 = $662&1;
      if ($663) {
       label = 15;
       break L1;
      }
      __THREW__ = 0;
      $664 = (invoke_ii(491,($661|0))|0);
      $665 = __THREW__; __THREW__ = 0;
      $666 = $665&1;
      if ($666) {
       label = 15;
       break L1;
      }
      $667 = +HEAPF64[$664>>3];
      $668 = $667 - $656;
      HEAPF64[$664>>3] = $668;
     }
     $669 = $row6;
     $670 = (($669) + 1)|0;
     $row6 = $670;
    }
   }
   $671 = $col2;
   $672 = (($671) + 1)|0;
   $col2 = $672;
  }
  $346 = $pq;
  $347 = $comp;
  $673 = $346;
  $345 = $673;
  $674 = $345;
  $344 = $674;
  $675 = $344;
  $343 = $675;
  HEAP32[$675>>2] = 0;
  $676 = (($675) + 4|0);
  HEAP32[$676>>2] = 0;
  $677 = (($675) + 8|0);
  $341 = $677;
  HEAP32[$342>>2] = 0;
  $678 = $341;
  $340 = $342;
  $679 = $340;
  $680 = HEAP32[$679>>2]|0;
  $338 = $678;
  HEAP32[$339>>2] = $680;
  $681 = $338;
  $337 = $681;
  $336 = $339;
  $682 = $336;
  $683 = HEAP32[$682>>2]|0;
  HEAP32[$681>>2] = $683;
  $row7 = 0;
  while(1) {
   $684 = $row7;
   $685 = $size;
   $686 = ($684|0)<($685|0);
   if (!($686)) {
    break;
   }
   $687 = $row7;
   $334 = $skip_rows;
   $335 = $687;
   $688 = $334;
   $689 = $335;
   $332 = $688;
   $333 = $689;
   $690 = $332;
   $691 = HEAP32[$690>>2]|0;
   $692 = $333;
   $693 = (($692>>>0) / 32)&-1;
   $694 = (($691) + ($693<<2)|0);
   $695 = $333;
   $696 = (($695>>>0) % 32)&-1;
   $697 = 1 << $696;
   $329 = $437;
   $330 = $694;
   $331 = $697;
   $698 = $329;
   $699 = $330;
   HEAP32[$698>>2] = $699;
   $700 = (($698) + 4|0);
   $701 = $331;
   HEAP32[$700>>2] = $701;
   $328 = $437;
   $702 = $328;
   $703 = HEAP32[$702>>2]|0;
   $704 = HEAP32[$703>>2]|0;
   $705 = (($702) + 4|0);
   $706 = HEAP32[$705>>2]|0;
   $707 = $704 & $706;
   $708 = ($707|0)!=(0);
   if ($708) {
   } else {
    $col8 = 0;
    while(1) {
     $711 = $col8;
     $712 = $size;
     $713 = ($711|0)<($712|0);
     if (!($713)) {
      break;
     }
     $714 = $col8;
     $326 = $skip_cols;
     $327 = $714;
     $715 = $326;
     $716 = $327;
     $324 = $715;
     $325 = $716;
     $717 = $324;
     $718 = HEAP32[$717>>2]|0;
     $719 = $325;
     $720 = (($719>>>0) / 32)&-1;
     $721 = (($718) + ($720<<2)|0);
     $722 = $325;
     $723 = (($722>>>0) % 32)&-1;
     $724 = 1 << $723;
     $321 = $438;
     $322 = $721;
     $323 = $724;
     $725 = $321;
     $726 = $322;
     HEAP32[$725>>2] = $726;
     $727 = (($725) + 4|0);
     $728 = $323;
     HEAP32[$727>>2] = $728;
     $320 = $438;
     $729 = $320;
     $730 = HEAP32[$729>>2]|0;
     $731 = HEAP32[$730>>2]|0;
     $732 = (($729) + 4|0);
     $733 = HEAP32[$732>>2]|0;
     $734 = $731 & $733;
     $735 = ($734|0)!=(0);
     if ($735) {
     } else {
      $319 = $cdata;
      $736 = $319;
      $737 = HEAP32[$736>>2]|0;
      $738 = $row7;
      $739 = $col8;
      __THREW__ = 0;
      $740 = (invoke_iiii(470,($737|0),($738|0),($739|0))|0);
      $741 = __THREW__; __THREW__ = 0;
      $742 = $741&1;
      if ($742) {
       label = 72;
       break L1;
      }
      $n9 = $740;
      $743 = $n9;
      __THREW__ = 0;
      $744 = (invoke_ii(491,($743|0))|0);
      $745 = __THREW__; __THREW__ = 0;
      $746 = $745&1;
      if ($746) {
       label = 72;
       break L1;
      }
      $747 = +HEAPF64[$744>>3];
      $748 = $747 == 0.0;
      if ($748) {
       $318 = $cdata;
       $749 = $318;
       $750 = HEAP32[$749>>2]|0;
       __THREW__ = 0;
       $751 = (+invoke_di(490,($750|0)));
       $752 = __THREW__; __THREW__ = 0;
       $753 = $752&1;
       if ($753) {
        label = 72;
        break L1;
       }
       $min_in_row = $751;
       $315 = $cdata;
       $754 = $315;
       $755 = HEAP32[$754>>2]|0;
       __THREW__ = 0;
       $756 = (+invoke_di(490,($755|0)));
       $757 = __THREW__; __THREW__ = 0;
       $758 = $757&1;
       if ($758) {
        label = 72;
        break L1;
       }
       $min_in_col = $756;
       $col110 = 0;
       while(1) {
        $759 = $col110;
        $760 = $size;
        $761 = ($759|0)<($760|0);
        if (!($761)) {
         break;
        }
        $312 = $cdata;
        $762 = $312;
        $763 = HEAP32[$762>>2]|0;
        $764 = $row7;
        $765 = $col110;
        __THREW__ = 0;
        $766 = (invoke_iiii(470,($763|0),($764|0),($765|0))|0);
        $767 = __THREW__; __THREW__ = 0;
        $768 = $767&1;
        if ($768) {
         label = 72;
         break L1;
        }
        $n1 = $766;
        $769 = $col110;
        $770 = $col8;
        $771 = ($769|0)!=($770|0);
        do {
         if ($771) {
          $772 = $col110;
          $308 = $skip_cols;
          $309 = $772;
          $773 = $308;
          $774 = $309;
          $306 = $773;
          $307 = $774;
          $775 = $306;
          $776 = HEAP32[$775>>2]|0;
          $777 = $307;
          $778 = (($777>>>0) / 32)&-1;
          $779 = (($776) + ($778<<2)|0);
          $780 = $307;
          $781 = (($780>>>0) % 32)&-1;
          $782 = 1 << $781;
          $303 = $439;
          $304 = $779;
          $305 = $782;
          $783 = $303;
          $784 = $304;
          HEAP32[$783>>2] = $784;
          $785 = (($783) + 4|0);
          $786 = $305;
          HEAP32[$785>>2] = $786;
          $302 = $439;
          $787 = $302;
          $788 = HEAP32[$787>>2]|0;
          $789 = HEAP32[$788>>2]|0;
          $790 = (($787) + 4|0);
          $791 = HEAP32[$790>>2]|0;
          $792 = $789 & $791;
          $793 = ($792|0)!=(0);
          if ($793) {
           break;
          }
          $794 = $n1;
          __THREW__ = 0;
          $795 = (invoke_ii(491,($794|0))|0);
          $796 = __THREW__; __THREW__ = 0;
          $797 = $796&1;
          if ($797) {
           label = 72;
           break L1;
          }
          $798 = +HEAPF64[$795>>3];
          $799 = $min_in_row;
          $800 = $798 < $799;
          if (!($800)) {
           break;
          }
          $801 = $n1;
          __THREW__ = 0;
          $802 = (invoke_ii(491,($801|0))|0);
          $803 = __THREW__; __THREW__ = 0;
          $804 = $803&1;
          if ($804) {
           label = 72;
           break L1;
          }
          $805 = +HEAPF64[$802>>3];
          $min_in_row = $805;
         }
        } while(0);
        $806 = $col110;
        $807 = (($806) + 1)|0;
        $col110 = $807;
       }
       $row1 = 0;
       while(1) {
        $808 = $row1;
        $809 = $size;
        $810 = ($808|0)<($809|0);
        if (!($810)) {
         break;
        }
        $301 = $cdata;
        $811 = $301;
        $812 = HEAP32[$811>>2]|0;
        $813 = $row1;
        $814 = $col8;
        __THREW__ = 0;
        $815 = (invoke_iiii(470,($812|0),($813|0),($814|0))|0);
        $816 = __THREW__; __THREW__ = 0;
        $817 = $816&1;
        if ($817) {
         label = 72;
         break L1;
        }
        $n111 = $815;
        $818 = $row1;
        $819 = $row7;
        $820 = ($818|0)!=($819|0);
        do {
         if ($820) {
          $821 = $row1;
          $298 = $skip_rows;
          $299 = $821;
          $822 = $298;
          $823 = $299;
          $296 = $822;
          $297 = $823;
          $824 = $296;
          $825 = HEAP32[$824>>2]|0;
          $826 = $297;
          $827 = (($826>>>0) / 32)&-1;
          $828 = (($825) + ($827<<2)|0);
          $829 = $297;
          $830 = (($829>>>0) % 32)&-1;
          $831 = 1 << $830;
          $293 = $440;
          $294 = $828;
          $295 = $831;
          $832 = $293;
          $833 = $294;
          HEAP32[$832>>2] = $833;
          $834 = (($832) + 4|0);
          $835 = $295;
          HEAP32[$834>>2] = $835;
          $291 = $440;
          $836 = $291;
          $837 = HEAP32[$836>>2]|0;
          $838 = HEAP32[$837>>2]|0;
          $839 = (($836) + 4|0);
          $840 = HEAP32[$839>>2]|0;
          $841 = $838 & $840;
          $842 = ($841|0)!=(0);
          if ($842) {
           break;
          }
          $843 = $n111;
          __THREW__ = 0;
          $844 = (invoke_ii(491,($843|0))|0);
          $845 = __THREW__; __THREW__ = 0;
          $846 = $845&1;
          if ($846) {
           label = 72;
           break L1;
          }
          $847 = +HEAPF64[$844>>3];
          $848 = $min_in_col;
          $849 = $847 < $848;
          if (!($849)) {
           break;
          }
          $850 = $n111;
          __THREW__ = 0;
          $851 = (invoke_ii(491,($850|0))|0);
          $852 = __THREW__; __THREW__ = 0;
          $853 = $852&1;
          if ($853) {
           label = 72;
           break L1;
          }
          $854 = +HEAPF64[$851>>3];
          $min_in_col = $854;
         }
        } while(0);
        $855 = $row1;
        $856 = (($855) + 1)|0;
        $row1 = $856;
       }
       __THREW__ = 0;
       $857 = (invoke_ii(430,16)|0);
       $858 = __THREW__; __THREW__ = 0;
       $859 = $858&1;
       if ($859) {
        label = 72;
        break L1;
       }
       $860 = $row7;
       $861 = $col8;
       $862 = $min_in_row;
       $863 = $min_in_col;
       $864 = $862 + $863;
       __THREW__ = 0;
       invoke_viiid(493,($857|0),($860|0),($861|0),(+$864));
       $865 = __THREW__; __THREW__ = 0;
       $866 = $865&1;
       if ($866) {
        label = 117;
        break L1;
       }
       HEAP32[$441>>2] = $857;
       $286 = $pq;
       $287 = $441;
       $867 = $286;
       $868 = $287;
       $285 = $868;
       $869 = $285;
       $274 = $867;
       $275 = $869;
       $870 = $274;
       $871 = (($870) + 4|0);
       $872 = HEAP32[$871>>2]|0;
       $273 = $870;
       $873 = $273;
       $874 = (($873) + 8|0);
       $272 = $874;
       $875 = $272;
       $271 = $875;
       $876 = $271;
       $877 = HEAP32[$876>>2]|0;
       $878 = ($872>>>0)<($877>>>0);
       if ($878) {
        __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i$i,$870,1);
        $270 = $870;
        $879 = $270;
        $880 = (($879) + 8|0);
        $269 = $880;
        $881 = $269;
        $268 = $881;
        $882 = $268;
        $883 = (($870) + 4|0);
        $884 = HEAP32[$883>>2]|0;
        $266 = $884;
        $885 = $266;
        $886 = $275;
        $251 = $886;
        $887 = $251;
        $262 = $882;
        $263 = $885;
        $264 = $887;
        $888 = $262;
        $889 = $263;
        $890 = $264;
        $261 = $890;
        $891 = $261;
        ;HEAP8[$260+0>>0]=HEAP8[$265+0>>0]|0;
        $257 = $888;
        $258 = $889;
        $259 = $891;
        $892 = $257;
        $893 = $258;
        $894 = $259;
        $256 = $894;
        $895 = $256;
        $253 = $892;
        $254 = $893;
        $255 = $895;
        $896 = $254;
        $897 = ($896|0)==(0|0);
        if (!($897)) {
         $898 = $255;
         $252 = $898;
         $899 = $252;
         $900 = HEAP32[$899>>2]|0;
         HEAP32[$896>>2] = $900;
        }
        __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i$i);
        $901 = (($870) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = (($902) + 4|0);
        HEAP32[$901>>2] = $903;
       } else {
        $904 = $275;
        $267 = $904;
        $905 = $267;
        __THREW__ = 0;
        invoke_vii(465,($870|0),($905|0));
        $906 = __THREW__; __THREW__ = 0;
        $907 = $906&1;
        if ($907) {
         label = 72;
         break L1;
        }
       }
       $250 = $867;
       $908 = $250;
       $909 = HEAP32[$908>>2]|0;
       $248 = $908;
       $249 = $909;
       $910 = $249;
       $246 = $288;
       $247 = $910;
       $911 = $246;
       $912 = $247;
       HEAP32[$911>>2] = $912;
       $245 = $867;
       $913 = $245;
       $914 = (($913) + 4|0);
       $915 = HEAP32[$914>>2]|0;
       $243 = $913;
       $244 = $915;
       $916 = $244;
       $241 = $289;
       $242 = $916;
       $917 = $241;
       $918 = $242;
       HEAP32[$917>>2] = $918;
       ;HEAP8[$282+0>>0]=HEAP8[$290+0>>0]|0;
       ;HEAP8[$283+0>>0]=HEAP8[$289+0>>0]|0;HEAP8[$283+1>>0]=HEAP8[$289+1>>0]|0;HEAP8[$283+2>>0]=HEAP8[$289+2>>0]|0;HEAP8[$283+3>>0]=HEAP8[$289+3>>0]|0;
       ;HEAP8[$284+0>>0]=HEAP8[$288+0>>0]|0;HEAP8[$284+1>>0]=HEAP8[$288+1>>0]|0;HEAP8[$284+2>>0]=HEAP8[$288+2>>0]|0;HEAP8[$284+3>>0]=HEAP8[$288+3>>0]|0;
       ;HEAP32[$280+0>>2]=HEAP32[$284+0>>2]|0;
       ;HEAP32[$281+0>>2]=HEAP32[$283+0>>2]|0;
       $278 = $283;
       $279 = $284;
       $919 = $278;
       $277 = $919;
       $920 = $277;
       $921 = HEAP32[$920>>2]|0;
       $922 = $279;
       $276 = $922;
       $923 = $276;
       $924 = HEAP32[$923>>2]|0;
       $925 = $921;
       $926 = $924;
       $927 = (($925) - ($926))|0;
       $928 = (($927|0) / 4)&-1;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$280+0>>2]|0;
       ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$281+0>>2]|0;
       __ZNSt3__19__sift_upIRZN7croutes10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEES7_NS4_INS1_6answerIdEEEEPNS_5dequeIPKNS1_8net_bondIdEENS_9allocatorISF_EEEENS_6vectorIbNSG_IbEEEESM_EUlRKPSD_SP_E_NS_11__wrap_iterIPSN_EEEEvT0_SV_T_NS_15iterator_traitsISV_E15difference_typeE($$byval_copy,$$byval_copy1,$282,$928);
      }
     }
     $931 = $col8;
     $932 = (($931) + 1)|0;
     $col8 = $932;
    }
   }
   $933 = $row7;
   $934 = (($933) + 1)|0;
   $row7 = $934;
  }
  $240 = $max_items;
  $935 = $240;
  $239 = $935;
  $936 = $239;
  $238 = $936;
  HEAP32[$936>>2] = 0;
  $937 = (($936) + 4|0);
  HEAP32[$937>>2] = 0;
  $938 = (($936) + 8|0);
  $236 = $938;
  HEAP32[$237>>2] = 0;
  $939 = $236;
  $235 = $237;
  $940 = $235;
  $941 = HEAP32[$940>>2]|0;
  $233 = $939;
  HEAP32[$234>>2] = $941;
  $942 = $233;
  $232 = $942;
  $231 = $234;
  $943 = $231;
  $944 = HEAP32[$943>>2]|0;
  HEAP32[$942>>2] = $944;
  while(1) {
   $230 = $pq;
   $945 = $230;
   $229 = $945;
   $946 = $229;
   $947 = HEAP32[$946>>2]|0;
   $948 = (($946) + 4|0);
   $949 = HEAP32[$948>>2]|0;
   $950 = ($947|0)==($949|0);
   $951 = $950 ^ 1;
   if (!($951)) {
    break;
   }
   $228 = $max_items;
   $952 = $228;
   $953 = HEAP32[$952>>2]|0;
   $954 = (($952) + 4|0);
   $955 = HEAP32[$954>>2]|0;
   $956 = ($953|0)==($955|0);
   if ($956) {
    label = 131;
   } else {
    $227 = $max_items;
    $957 = $227;
    $958 = (($957) + 4|0);
    $959 = HEAP32[$958>>2]|0;
    $960 = (($959) + -4|0);
    $961 = HEAP32[$960>>2]|0;
    __THREW__ = 0;
    $962 = (invoke_ii(491,($961|0))|0);
    $963 = __THREW__; __THREW__ = 0;
    $964 = $963&1;
    if ($964) {
     label = 149;
     break L1;
    }
    $965 = +HEAPF64[$962>>3];
    $225 = $pq;
    $966 = $225;
    $224 = $966;
    $967 = $224;
    $968 = HEAP32[$967>>2]|0;
    $969 = HEAP32[$968>>2]|0;
    __THREW__ = 0;
    $970 = (invoke_ii(491,($969|0))|0);
    $971 = __THREW__; __THREW__ = 0;
    $972 = $971&1;
    if ($972) {
     label = 149;
     break L1;
    }
    $973 = +HEAPF64[$970>>3];
    $974 = $965 == $973;
    if ($974) {
     label = 131;
    } else {
     $141 = $pq;
     $1098 = $141;
     $140 = $1098;
     $1099 = $140;
     $1100 = HEAP32[$1099>>2]|0;
     $1101 = HEAP32[$1100>>2]|0;
     $b1 = $1101;
     $136 = $pq;
     $1102 = $136;
     $135 = $1102;
     $1103 = $135;
     $1104 = HEAP32[$1103>>2]|0;
     $133 = $1103;
     $134 = $1104;
     $1105 = $134;
     $131 = $137;
     $132 = $1105;
     $1106 = $131;
     $1107 = $132;
     HEAP32[$1106>>2] = $1107;
     $112 = $1102;
     $1108 = $112;
     $1109 = (($1108) + 4|0);
     $1110 = HEAP32[$1109>>2]|0;
     $110 = $1108;
     $111 = $1110;
     $1111 = $111;
     $108 = $138;
     $109 = $1111;
     $1112 = $108;
     $1113 = $109;
     HEAP32[$1112>>2] = $1113;
     ;HEAP8[$105+0>>0]=HEAP8[$139+0>>0]|0;
     ;HEAP8[$106+0>>0]=HEAP8[$138+0>>0]|0;HEAP8[$106+1>>0]=HEAP8[$138+1>>0]|0;HEAP8[$106+2>>0]=HEAP8[$138+2>>0]|0;HEAP8[$106+3>>0]=HEAP8[$138+3>>0]|0;
     ;HEAP8[$107+0>>0]=HEAP8[$137+0>>0]|0;HEAP8[$107+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$137+3>>0]|0;
     ;HEAP32[$103+0>>2]=HEAP32[$107+0>>2]|0;
     ;HEAP32[$104+0>>2]=HEAP32[$106+0>>2]|0;
     $101 = $106;
     $102 = $107;
     $1114 = $101;
     $100 = $1114;
     $1115 = $100;
     $1116 = HEAP32[$1115>>2]|0;
     $1117 = $102;
     $99 = $1117;
     $1118 = $99;
     $1119 = HEAP32[$1118>>2]|0;
     $1120 = $1116;
     $1121 = $1119;
     $1122 = (($1120) - ($1121))|0;
     $1123 = (($1122|0) / 4)&-1;
     ;HEAP8[$97+0>>0]=HEAP8[$104+0>>0]|0;HEAP8[$97+1>>0]=HEAP8[$104+1>>0]|0;HEAP8[$97+2>>0]=HEAP8[$104+2>>0]|0;HEAP8[$97+3>>0]=HEAP8[$104+3>>0]|0;
     ;HEAP8[$98+0>>0]=HEAP8[$103+0>>0]|0;HEAP8[$98+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[$103+3>>0]|0;
     $92 = $105;
     $93 = $1123;
     $1124 = $93;
     $1125 = ($1124|0)>(1);
     if ($1125) {
      $91 = $98;
      $1126 = $91;
      $1127 = HEAP32[$1126>>2]|0;
      $90 = $97;
      $1128 = $90;
      $1129 = HEAP32[$1128>>2]|0;
      $1130 = (($1129) + -4|0);
      HEAP32[$1128>>2] = $1130;
      $84 = $1128;
      $1131 = $84;
      $1132 = HEAP32[$1131>>2]|0;
      $88 = $1127;
      $89 = $1132;
      $1133 = $88;
      $87 = $1133;
      $1134 = $87;
      $1135 = HEAP32[$1134>>2]|0;
      HEAP32[$__t$i$i$i$i34>>2] = $1135;
      $1136 = $89;
      $85 = $1136;
      $1137 = $85;
      $1138 = HEAP32[$1137>>2]|0;
      $1139 = $88;
      HEAP32[$1139>>2] = $1138;
      $86 = $__t$i$i$i$i34;
      $1140 = $86;
      $1141 = HEAP32[$1140>>2]|0;
      $1142 = $89;
      HEAP32[$1142>>2] = $1141;
      ;HEAP32[$94+0>>2]=HEAP32[$98+0>>2]|0;
      ;HEAP32[$95+0>>2]=HEAP32[$97+0>>2]|0;
      $1143 = $92;
      $1144 = $93;
      $1145 = (($1144) - 1)|0;
      ;HEAP32[$96+0>>2]=HEAP32[$98+0>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$94+0>>2]|0;
      ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$95+0>>2]|0;
      ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$96+0>>2]|0;
      invoke_viiiii(495,($$byval_copy5|0),($$byval_copy6|0),($1143|0),($1145|0),($$byval_copy7|0));
      $1146 = __THREW__; __THREW__ = 0;
      $1147 = $1146&1;
      if ($1147) {
       label = 149;
       break L1;
      }
     }
     $130 = $1102;
     $1148 = $130;
     $1149 = (($1148) + 4|0);
     $1150 = HEAP32[$1149>>2]|0;
     $1151 = (($1150) + -4|0);
     $128 = $1148;
     $129 = $1151;
     $1152 = $128;
     $127 = $1152;
     $1153 = $127;
     $1154 = (($1153) + 4|0);
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = HEAP32[$1153>>2]|0;
     $1157 = $1155;
     $1158 = $1156;
     $1159 = (($1157) - ($1158))|0;
     $1160 = (($1159|0) / 4)&-1;
     $__old_size$i$i$i35 = $1160;
     $1161 = $129;
     $125 = $1152;
     $126 = $1161;
     $1162 = $125;
     while(1) {
      $1163 = $126;
      $1164 = (($1162) + 4|0);
      $1165 = HEAP32[$1164>>2]|0;
      $1166 = ($1163|0)!=($1165|0);
      if (!($1166)) {
       break;
      }
      $124 = $1162;
      $1167 = $124;
      $1168 = (($1167) + 8|0);
      $123 = $1168;
      $1169 = $123;
      $122 = $1169;
      $1170 = $122;
      $1171 = (($1162) + 4|0);
      $1172 = HEAP32[$1171>>2]|0;
      $1173 = (($1172) + -4|0);
      HEAP32[$1171>>2] = $1173;
      $121 = $1173;
      $1174 = $121;
      $118 = $1170;
      $119 = $1174;
      $1175 = $118;
      $1176 = $119;
      ;HEAP8[$117+0>>0]=HEAP8[$120+0>>0]|0;
      $115 = $1175;
      $116 = $1176;
      $1177 = $115;
      $1178 = $116;
      $113 = $1177;
      $114 = $1178;
     }
     $1179 = $__old_size$i$i$i35;
     __THREW__ = 0;
     invoke_vii(496,($1152|0),($1179|0));
     $1180 = __THREW__; __THREW__ = 0;
     $1181 = $1180&1;
     if ($1181) {
      label = 158;
      break L1;
     }
     $1184 = $b1;
     $1185 = ($1184|0)==(0|0);
     if (!($1185)) {
      __ZdlPv($1184);
     }
    }
   }
   if ((label|0) == 131) {
    label = 0;
    $222 = $pq;
    $975 = $222;
    $221 = $975;
    $976 = $221;
    $977 = HEAP32[$976>>2]|0;
    $219 = $max_items;
    $220 = $977;
    $978 = $219;
    $979 = (($978) + 4|0);
    $980 = HEAP32[$979>>2]|0;
    $218 = $978;
    $981 = $218;
    $982 = (($981) + 8|0);
    $217 = $982;
    $983 = $217;
    $216 = $983;
    $984 = $216;
    $985 = HEAP32[$984>>2]|0;
    $986 = ($980|0)!=($985|0);
    if ($986) {
     __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i,$978,1);
     $215 = $978;
     $987 = $215;
     $988 = (($987) + 8|0);
     $214 = $988;
     $989 = $214;
     $213 = $989;
     $990 = $213;
     $991 = (($978) + 4|0);
     $992 = HEAP32[$991>>2]|0;
     $212 = $992;
     $993 = $212;
     $994 = $220;
     $208 = $990;
     $209 = $993;
     $210 = $994;
     $995 = $208;
     $996 = $209;
     $997 = $210;
     $207 = $997;
     $998 = $207;
     ;HEAP8[$206+0>>0]=HEAP8[$211+0>>0]|0;
     $203 = $995;
     $204 = $996;
     $205 = $998;
     $999 = $203;
     $1000 = $204;
     $1001 = $205;
     $202 = $1001;
     $1002 = $202;
     $199 = $999;
     $200 = $1000;
     $201 = $1002;
     $1003 = $200;
     $1004 = ($1003|0)==(0|0);
     if (!($1004)) {
      $1005 = $201;
      $198 = $1005;
      $1006 = $198;
      $1007 = HEAP32[$1006>>2]|0;
      HEAP32[$1003>>2] = $1007;
     }
     __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
     $1008 = (($978) + 4|0);
     $1009 = HEAP32[$1008>>2]|0;
     $1010 = (($1009) + 4|0);
     HEAP32[$1008>>2] = $1010;
    } else {
     $1011 = $220;
     __THREW__ = 0;
     invoke_vii(494,($978|0),($1011|0));
     $1012 = __THREW__; __THREW__ = 0;
     $1013 = $1012&1;
     if ($1013) {
      label = 149;
      break L1;
     }
    }
    $194 = $pq;
    $1014 = $194;
    $193 = $1014;
    $1015 = $193;
    $1016 = HEAP32[$1015>>2]|0;
    $191 = $1015;
    $192 = $1016;
    $1017 = $192;
    $189 = $195;
    $190 = $1017;
    $1018 = $189;
    $1019 = $190;
    HEAP32[$1018>>2] = $1019;
    $170 = $1014;
    $1020 = $170;
    $1021 = (($1020) + 4|0);
    $1022 = HEAP32[$1021>>2]|0;
    $168 = $1020;
    $169 = $1022;
    $1023 = $169;
    $166 = $196;
    $167 = $1023;
    $1024 = $166;
    $1025 = $167;
    HEAP32[$1024>>2] = $1025;
    ;HEAP8[$163+0>>0]=HEAP8[$197+0>>0]|0;
    ;HEAP8[$164+0>>0]=HEAP8[$196+0>>0]|0;HEAP8[$164+1>>0]=HEAP8[$196+1>>0]|0;HEAP8[$164+2>>0]=HEAP8[$196+2>>0]|0;HEAP8[$164+3>>0]=HEAP8[$196+3>>0]|0;
    ;HEAP8[$165+0>>0]=HEAP8[$195+0>>0]|0;HEAP8[$165+1>>0]=HEAP8[$195+1>>0]|0;HEAP8[$165+2>>0]=HEAP8[$195+2>>0]|0;HEAP8[$165+3>>0]=HEAP8[$195+3>>0]|0;
    ;HEAP32[$161+0>>2]=HEAP32[$165+0>>2]|0;
    ;HEAP32[$162+0>>2]=HEAP32[$164+0>>2]|0;
    $159 = $164;
    $160 = $165;
    $1026 = $159;
    $158 = $1026;
    $1027 = $158;
    $1028 = HEAP32[$1027>>2]|0;
    $1029 = $160;
    $157 = $1029;
    $1030 = $157;
    $1031 = HEAP32[$1030>>2]|0;
    $1032 = $1028;
    $1033 = $1031;
    $1034 = (($1032) - ($1033))|0;
    $1035 = (($1034|0) / 4)&-1;
    ;HEAP8[$155+0>>0]=HEAP8[$162+0>>0]|0;HEAP8[$155+1>>0]=HEAP8[$162+1>>0]|0;HEAP8[$155+2>>0]=HEAP8[$162+2>>0]|0;HEAP8[$155+3>>0]=HEAP8[$162+3>>0]|0;
    ;HEAP8[$156+0>>0]=HEAP8[$161+0>>0]|0;HEAP8[$156+1>>0]=HEAP8[$161+1>>0]|0;HEAP8[$156+2>>0]=HEAP8[$161+2>>0]|0;HEAP8[$156+3>>0]=HEAP8[$161+3>>0]|0;
    $150 = $163;
    $151 = $1035;
    $1036 = $151;
    $1037 = ($1036|0)>(1);
    if ($1037) {
     $149 = $156;
     $1038 = $149;
     $1039 = HEAP32[$1038>>2]|0;
     $148 = $155;
     $1040 = $148;
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = (($1041) + -4|0);
     HEAP32[$1040>>2] = $1042;
     $142 = $1040;
     $1043 = $142;
     $1044 = HEAP32[$1043>>2]|0;
     $146 = $1039;
     $147 = $1044;
     $1045 = $146;
     $145 = $1045;
     $1046 = $145;
     $1047 = HEAP32[$1046>>2]|0;
     HEAP32[$__t$i$i$i$i>>2] = $1047;
     $1048 = $147;
     $143 = $1048;
     $1049 = $143;
     $1050 = HEAP32[$1049>>2]|0;
     $1051 = $146;
     HEAP32[$1051>>2] = $1050;
     $144 = $__t$i$i$i$i;
     $1052 = $144;
     $1053 = HEAP32[$1052>>2]|0;
     $1054 = $147;
     HEAP32[$1054>>2] = $1053;
     ;HEAP32[$152+0>>2]=HEAP32[$156+0>>2]|0;
     ;HEAP32[$153+0>>2]=HEAP32[$155+0>>2]|0;
     $1055 = $150;
     $1056 = $151;
     $1057 = (($1056) - 1)|0;
     ;HEAP32[$154+0>>2]=HEAP32[$156+0>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$152+0>>2]|0;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$153+0>>2]|0;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$154+0>>2]|0;
     invoke_viiiii(495,($$byval_copy2|0),($$byval_copy3|0),($1055|0),($1057|0),($$byval_copy4|0));
     $1058 = __THREW__; __THREW__ = 0;
     $1059 = $1058&1;
     if ($1059) {
      label = 149;
      break L1;
     }
    }
    $188 = $1014;
    $1060 = $188;
    $1061 = (($1060) + 4|0);
    $1062 = HEAP32[$1061>>2]|0;
    $1063 = (($1062) + -4|0);
    $186 = $1060;
    $187 = $1063;
    $1064 = $186;
    $185 = $1064;
    $1065 = $185;
    $1066 = (($1065) + 4|0);
    $1067 = HEAP32[$1066>>2]|0;
    $1068 = HEAP32[$1065>>2]|0;
    $1069 = $1067;
    $1070 = $1068;
    $1071 = (($1069) - ($1070))|0;
    $1072 = (($1071|0) / 4)&-1;
    $__old_size$i$i$i = $1072;
    $1073 = $187;
    $183 = $1064;
    $184 = $1073;
    $1074 = $183;
    while(1) {
     $1075 = $184;
     $1076 = (($1074) + 4|0);
     $1077 = HEAP32[$1076>>2]|0;
     $1078 = ($1075|0)!=($1077|0);
     if (!($1078)) {
      break;
     }
     $182 = $1074;
     $1079 = $182;
     $1080 = (($1079) + 8|0);
     $181 = $1080;
     $1081 = $181;
     $180 = $1081;
     $1082 = $180;
     $1083 = (($1074) + 4|0);
     $1084 = HEAP32[$1083>>2]|0;
     $1085 = (($1084) + -4|0);
     HEAP32[$1083>>2] = $1085;
     $179 = $1085;
     $1086 = $179;
     $176 = $1082;
     $177 = $1086;
     $1087 = $176;
     $1088 = $177;
     ;HEAP8[$175+0>>0]=HEAP8[$178+0>>0]|0;
     $173 = $1087;
     $174 = $1088;
     $1089 = $173;
     $1090 = $174;
     $171 = $1089;
     $172 = $1090;
    }
    $1091 = $__old_size$i$i$i;
    __THREW__ = 0;
    invoke_vii(496,($1064|0),($1091|0));
    $1092 = __THREW__; __THREW__ = 0;
    $1093 = $1092&1;
    if ($1093) {
     label = 146;
     break L1;
    }
   }
  }
  $82 = $max_items;
  $83 = 0;
  $1186 = $82;
  $1187 = $83;
  $1188 = HEAP32[$1186>>2]|0;
  $1189 = (($1188) + ($1187<<2)|0);
  $1190 = HEAP32[$1189>>2]|0;
  __THREW__ = 0;
  $1191 = (invoke_ii(491,($1190|0))|0);
  $1192 = __THREW__; __THREW__ = 0;
  $1193 = $1192&1;
  if ($1193) {
   label = 149;
   break;
  }
  $1194 = +HEAPF64[$1191>>3];
  $81 = $cdata;
  $1195 = $81;
  $1196 = HEAP32[$1195>>2]|0;
  __THREW__ = 0;
  $1197 = (+invoke_di(490,($1196|0)));
  $1198 = __THREW__; __THREW__ = 0;
  $1199 = $1198&1;
  if ($1199) {
   label = 149;
   break;
  }
  $1200 = $1194 == $1197;
  do {
   if ($1200) {
    $__range = $max_items;
    $1201 = $__range;
    $80 = $1201;
    $1202 = $80;
    $1203 = HEAP32[$1202>>2]|0;
    $78 = $1202;
    $79 = $1203;
    $1204 = $79;
    $76 = $__begin;
    $77 = $1204;
    $1205 = $76;
    $1206 = $77;
    HEAP32[$1205>>2] = $1206;
    $1207 = $__range;
    $75 = $1207;
    $1208 = $75;
    $1209 = (($1208) + 4|0);
    $1210 = HEAP32[$1209>>2]|0;
    $73 = $1208;
    $74 = $1210;
    $1211 = $74;
    $71 = $__end;
    $72 = $1211;
    $1212 = $71;
    $1213 = $72;
    HEAP32[$1212>>2] = $1213;
    while(1) {
     $69 = $__begin;
     $70 = $__end;
     $1214 = $69;
     $1215 = $70;
     $67 = $1214;
     $68 = $1215;
     $1216 = $67;
     $66 = $1216;
     $1217 = $66;
     $1218 = HEAP32[$1217>>2]|0;
     $1219 = $68;
     $65 = $1219;
     $1220 = $65;
     $1221 = HEAP32[$1220>>2]|0;
     $1222 = ($1218|0)==($1221|0);
     $1223 = $1222 ^ 1;
     if (!($1223)) {
      break;
     }
     $64 = $__begin;
     $1224 = $64;
     $1225 = HEAP32[$1224>>2]|0;
     $b = $1225;
     $46 = $ans;
     $1226 = $46;
     $1227 = HEAP32[$1226>>2]|0;
     $1228 = $429;
     $44 = $data;
     $1229 = $44;
     $1230 = HEAP32[$1229>>2]|0;
     $1231 = $b;
     $1232 = HEAP32[$1231>>2]|0;
     __THREW__ = 0;
     $1233 = (invoke_ii(438,($1232|0))|0);
     $1234 = __THREW__; __THREW__ = 0;
     $1235 = $1234&1;
     if ($1235) {
      label = 149;
      break L1;
     }
     $1236 = $b;
     $1237 = HEAP32[$1236>>2]|0;
     __THREW__ = 0;
     $1238 = (invoke_ii(441,($1237|0))|0);
     $1239 = __THREW__; __THREW__ = 0;
     $1240 = $1239&1;
     if ($1240) {
      label = 149;
      break L1;
     }
     __THREW__ = 0;
     $1241 = (invoke_iiii(470,($1230|0),($1233|0),($1238|0))|0);
     $1242 = __THREW__; __THREW__ = 0;
     $1243 = $1242&1;
     if ($1243) {
      label = 149;
      break L1;
     }
     __THREW__ = 0;
     invoke_viii(471,($1227|0),($1228|0),($1241|0));
     $1244 = __THREW__; __THREW__ = 0;
     $1245 = $1244&1;
     if ($1245) {
      label = 149;
      break L1;
     }
     $1246 = $b;
     $1247 = HEAP32[$1246>>2]|0;
     $1248 = ($1247|0)==(0|0);
     if (!($1248)) {
      __ZdlPv($1247);
     }
     $43 = $__begin;
     $1249 = $43;
     $1250 = HEAP32[$1249>>2]|0;
     $1251 = (($1250) + 4|0);
     HEAP32[$1249>>2] = $1251;
    }
    $433 = 3;
   } else {
    $16 = $max_items;
    $1252 = $16;
    $1253 = (($1252) + 4|0);
    $1254 = HEAP32[$1253>>2]|0;
    $1255 = HEAP32[$1252>>2]|0;
    $1256 = $1254;
    $1257 = $1255;
    $1258 = (($1256) - ($1257))|0;
    $1259 = (($1258|0) / 4)&-1;
    $1260 = ($1259>>>0)>(1);
    $1261 = $1260&1;
    $recursive = $1261;
    $1262 = $429;
    $old_bundle = $1262;
    $k = 0;
    while(1) {
     $1263 = $k;
     $6 = $max_items;
     $1264 = $6;
     $1265 = (($1264) + 4|0);
     $1266 = HEAP32[$1265>>2]|0;
     $1267 = HEAP32[$1264>>2]|0;
     $1268 = $1266;
     $1269 = $1267;
     $1270 = (($1268) - ($1269))|0;
     $1271 = (($1270|0) / 4)&-1;
     $1272 = ($1263>>>0)<($1271>>>0);
     if (!($1272)) {
      break;
     }
     $1273 = $k;
     $4 = $max_items;
     $5 = $1273;
     $1274 = $4;
     $1275 = $5;
     $1276 = HEAP32[$1274>>2]|0;
     $1277 = (($1276) + ($1275<<2)|0);
     $b12 = $1277;
     $3 = $max_items;
     $1278 = $3;
     $1279 = (($1278) + 4|0);
     $1280 = HEAP32[$1279>>2]|0;
     $1281 = HEAP32[$1278>>2]|0;
     $1282 = $1280;
     $1283 = $1281;
     $1284 = (($1282) - ($1283))|0;
     $1285 = (($1284|0) / 4)&-1;
     $1286 = ($1285>>>0)>(1);
     if ($1286) {
      $2 = $ans;
      $1287 = $2;
      $1288 = HEAP32[$1287>>2]|0;
      $1289 = $old_bundle;
      __THREW__ = 0;
      $1290 = (invoke_iii(497,($1288|0),($1289|0))|0);
      $1291 = __THREW__; __THREW__ = 0;
      $1292 = $1291&1;
      if ($1292) {
       label = 149;
       break L1;
      }
      $429 = $1290;
     }
     $1 = $ans;
     $1293 = $1;
     $1294 = HEAP32[$1293>>2]|0;
     $1295 = $429;
     $0 = $data;
     $1296 = $0;
     $1297 = HEAP32[$1296>>2]|0;
     $1298 = $b12;
     $1299 = HEAP32[$1298>>2]|0;
     __THREW__ = 0;
     $1300 = (invoke_ii(438,($1299|0))|0);
     $1301 = __THREW__; __THREW__ = 0;
     $1302 = $1301&1;
     if ($1302) {
      label = 149;
      break L1;
     }
     $1303 = $b12;
     $1304 = HEAP32[$1303>>2]|0;
     __THREW__ = 0;
     $1305 = (invoke_ii(441,($1304|0))|0);
     $1306 = __THREW__; __THREW__ = 0;
     $1307 = $1306&1;
     if ($1307) {
      label = 149;
      break L1;
     }
     __THREW__ = 0;
     $1308 = (invoke_iiii(470,($1297|0),($1300|0),($1305|0))|0);
     $1309 = __THREW__; __THREW__ = 0;
     $1310 = $1309&1;
     if ($1310) {
      label = 149;
      break L1;
     }
     __THREW__ = 0;
     invoke_viii(471,($1294|0),($1295|0),($1308|0));
     $1311 = __THREW__; __THREW__ = 0;
     $1312 = $1311&1;
     if ($1312) {
      label = 149;
      break L1;
     }
     $1313 = $b12;
     $1314 = HEAP32[$1313>>2]|0;
     __THREW__ = 0;
     $1315 = (invoke_ii(438,($1314|0))|0);
     $1316 = __THREW__; __THREW__ = 0;
     $1317 = $1316&1;
     if ($1317) {
      label = 149;
      break L1;
     }
     $12 = $skip_rows;
     $13 = $1315;
     $1318 = $12;
     $1319 = $13;
     $10 = $1318;
     $11 = $1319;
     $1320 = $10;
     $1321 = HEAP32[$1320>>2]|0;
     $1322 = $11;
     $1323 = (($1322>>>0) / 32)&-1;
     $1324 = (($1321) + ($1323<<2)|0);
     $1325 = $11;
     $1326 = (($1325>>>0) % 32)&-1;
     $1327 = 1 << $1326;
     $7 = $442;
     $8 = $1324;
     $9 = $1327;
     $1328 = $7;
     $1329 = $8;
     HEAP32[$1328>>2] = $1329;
     $1330 = (($1328) + 4|0);
     $1331 = $9;
     HEAP32[$1330>>2] = $1331;
     $14 = $442;
     $15 = 1;
     $1332 = $14;
     $1333 = $15;
     $1334 = $1333&1;
     if ($1334) {
      $1335 = (($1332) + 4|0);
      $1336 = HEAP32[$1335>>2]|0;
      $1337 = HEAP32[$1332>>2]|0;
      $1338 = HEAP32[$1337>>2]|0;
      $1339 = $1338 | $1336;
      HEAP32[$1337>>2] = $1339;
     } else {
      $1340 = (($1332) + 4|0);
      $1341 = HEAP32[$1340>>2]|0;
      $1342 = $1341 ^ -1;
      $1343 = HEAP32[$1332>>2]|0;
      $1344 = HEAP32[$1343>>2]|0;
      $1345 = $1344 & $1342;
      HEAP32[$1343>>2] = $1345;
     }
     $1346 = $b12;
     $1347 = HEAP32[$1346>>2]|0;
     __THREW__ = 0;
     $1348 = (invoke_ii(441,($1347|0))|0);
     $1349 = __THREW__; __THREW__ = 0;
     $1350 = $1349&1;
     if ($1350) {
      label = 149;
      break L1;
     }
     $22 = $skip_cols;
     $23 = $1348;
     $1351 = $22;
     $1352 = $23;
     $20 = $1351;
     $21 = $1352;
     $1353 = $20;
     $1354 = HEAP32[$1353>>2]|0;
     $1355 = $21;
     $1356 = (($1355>>>0) / 32)&-1;
     $1357 = (($1354) + ($1356<<2)|0);
     $1358 = $21;
     $1359 = (($1358>>>0) % 32)&-1;
     $1360 = 1 << $1359;
     $17 = $443;
     $18 = $1357;
     $19 = $1360;
     $1361 = $17;
     $1362 = $18;
     HEAP32[$1361>>2] = $1362;
     $1363 = (($1361) + 4|0);
     $1364 = $19;
     HEAP32[$1363>>2] = $1364;
     $24 = $443;
     $25 = 1;
     $1365 = $24;
     $1366 = $25;
     $1367 = $1366&1;
     if ($1367) {
      $1368 = (($1365) + 4|0);
      $1369 = HEAP32[$1368>>2]|0;
      $1370 = HEAP32[$1365>>2]|0;
      $1371 = HEAP32[$1370>>2]|0;
      $1372 = $1371 | $1369;
      HEAP32[$1370>>2] = $1372;
     } else {
      $1373 = (($1365) + 4|0);
      $1374 = HEAP32[$1373>>2]|0;
      $1375 = $1374 ^ -1;
      $1376 = HEAP32[$1365>>2]|0;
      $1377 = HEAP32[$1376>>2]|0;
      $1378 = $1377 & $1375;
      HEAP32[$1376>>2] = $1378;
     }
     $row13 = 0;
     $row13 = 0;
     while(1) {
      $1379 = $row13;
      $1380 = $size;
      $1381 = ($1379|0)<($1380|0);
      if (!($1381)) {
       break;
      }
      $1382 = $row13;
      $31 = $skip_rows;
      $32 = $1382;
      $1383 = $31;
      $1384 = $32;
      $29 = $1383;
      $30 = $1384;
      $1385 = $29;
      $1386 = HEAP32[$1385>>2]|0;
      $1387 = $30;
      $1388 = (($1387>>>0) / 32)&-1;
      $1389 = (($1386) + ($1388<<2)|0);
      $1390 = $30;
      $1391 = (($1390>>>0) % 32)&-1;
      $1392 = 1 << $1391;
      $26 = $444;
      $27 = $1389;
      $28 = $1392;
      $1393 = $26;
      $1394 = $27;
      HEAP32[$1393>>2] = $1394;
      $1395 = (($1393) + 4|0);
      $1396 = $28;
      HEAP32[$1395>>2] = $1396;
      $33 = $444;
      $1397 = $33;
      $1398 = HEAP32[$1397>>2]|0;
      $1399 = HEAP32[$1398>>2]|0;
      $1400 = (($1397) + 4|0);
      $1401 = HEAP32[$1400>>2]|0;
      $1402 = $1399 & $1401;
      $1403 = ($1402|0)!=(0);
      if ($1403) {
      } else {
       $col14 = 0;
       $col14 = 0;
       while(1) {
        $1404 = $col14;
        $1405 = $size;
        $1406 = ($1404|0)<($1405|0);
        if (!($1406)) {
         break;
        }
        $1407 = $col14;
        $39 = $skip_cols;
        $40 = $1407;
        $1408 = $39;
        $1409 = $40;
        $37 = $1408;
        $38 = $1409;
        $1410 = $37;
        $1411 = HEAP32[$1410>>2]|0;
        $1412 = $38;
        $1413 = (($1412>>>0) / 32)&-1;
        $1414 = (($1411) + ($1413<<2)|0);
        $1415 = $38;
        $1416 = (($1415>>>0) % 32)&-1;
        $1417 = 1 << $1416;
        $34 = $445;
        $35 = $1414;
        $36 = $1417;
        $1418 = $34;
        $1419 = $35;
        HEAP32[$1418>>2] = $1419;
        $1420 = (($1418) + 4|0);
        $1421 = $36;
        HEAP32[$1420>>2] = $1421;
        $41 = $445;
        $1422 = $41;
        $1423 = HEAP32[$1422>>2]|0;
        $1424 = HEAP32[$1423>>2]|0;
        $1425 = (($1422) + 4|0);
        $1426 = HEAP32[$1425>>2]|0;
        $1427 = $1424 & $1426;
        $1428 = ($1427|0)!=(0);
        if ($1428) {
        } else {
         $42 = $cdata;
         $1429 = $42;
         $1430 = HEAP32[$1429>>2]|0;
         $1431 = $row13;
         $1432 = $col14;
         __THREW__ = 0;
         $1433 = (invoke_iiii(470,($1430|0),($1431|0),($1432|0))|0);
         $1434 = __THREW__; __THREW__ = 0;
         $1435 = $1434&1;
         if ($1435) {
          label = 149;
          break L1;
         }
         __THREW__ = 0;
         $1436 = (invoke_ii(491,($1433|0))|0);
         $1437 = __THREW__; __THREW__ = 0;
         $1438 = $1437&1;
         if ($1438) {
          label = 149;
          break L1;
         }
         $1439 = +HEAPF64[$1436>>3];
         $45 = $cdata;
         $1440 = $45;
         $1441 = HEAP32[$1440>>2]|0;
         __THREW__ = 0;
         $1442 = (+invoke_di(490,($1441|0)));
         $1443 = __THREW__; __THREW__ = 0;
         $1444 = $1443&1;
         if ($1444) {
          label = 149;
          break L1;
         }
         $1445 = $1439 == $1442;
         if ($1445) {
          label = 213;
          break;
         }
        }
        $1446 = $col14;
        $1447 = (($1446) + 1)|0;
        $col14 = $1447;
       }
       if ((label|0) == 213) {
        label = 0;
       }
       $1448 = $col14;
       $1449 = $size;
       $1450 = ($1448|0)>=($1449|0);
       if ($1450) {
        label = 217;
        break;
       }
      }
      $1451 = $row13;
      $1452 = (($1451) + 1)|0;
      $row13 = $1452;
     }
     if ((label|0) == 217) {
      label = 0;
     }
     $col15 = 0;
     $col15 = 0;
     while(1) {
      $1453 = $col15;
      $1454 = $size;
      $1455 = ($1453|0)<($1454|0);
      if (!($1455)) {
       break;
      }
      $1456 = $col15;
      $52 = $skip_cols;
      $53 = $1456;
      $1457 = $52;
      $1458 = $53;
      $50 = $1457;
      $51 = $1458;
      $1459 = $50;
      $1460 = HEAP32[$1459>>2]|0;
      $1461 = $51;
      $1462 = (($1461>>>0) / 32)&-1;
      $1463 = (($1460) + ($1462<<2)|0);
      $1464 = $51;
      $1465 = (($1464>>>0) % 32)&-1;
      $1466 = 1 << $1465;
      $47 = $446;
      $48 = $1463;
      $49 = $1466;
      $1467 = $47;
      $1468 = $48;
      HEAP32[$1467>>2] = $1468;
      $1469 = (($1467) + 4|0);
      $1470 = $49;
      HEAP32[$1469>>2] = $1470;
      $54 = $446;
      $1471 = $54;
      $1472 = HEAP32[$1471>>2]|0;
      $1473 = HEAP32[$1472>>2]|0;
      $1474 = (($1471) + 4|0);
      $1475 = HEAP32[$1474>>2]|0;
      $1476 = $1473 & $1475;
      $1477 = ($1476|0)!=(0);
      if ($1477) {
      } else {
       $row116 = 0;
       $row116 = 0;
       while(1) {
        $1478 = $row116;
        $1479 = $size;
        $1480 = ($1478|0)<($1479|0);
        if (!($1480)) {
         break;
        }
        $1481 = $row116;
        $60 = $skip_rows;
        $61 = $1481;
        $1482 = $60;
        $1483 = $61;
        $58 = $1482;
        $59 = $1483;
        $1484 = $58;
        $1485 = HEAP32[$1484>>2]|0;
        $1486 = $59;
        $1487 = (($1486>>>0) / 32)&-1;
        $1488 = (($1485) + ($1487<<2)|0);
        $1489 = $59;
        $1490 = (($1489>>>0) % 32)&-1;
        $1491 = 1 << $1490;
        $55 = $447;
        $56 = $1488;
        $57 = $1491;
        $1492 = $55;
        $1493 = $56;
        HEAP32[$1492>>2] = $1493;
        $1494 = (($1492) + 4|0);
        $1495 = $57;
        HEAP32[$1494>>2] = $1495;
        $62 = $447;
        $1496 = $62;
        $1497 = HEAP32[$1496>>2]|0;
        $1498 = HEAP32[$1497>>2]|0;
        $1499 = (($1496) + 4|0);
        $1500 = HEAP32[$1499>>2]|0;
        $1501 = $1498 & $1500;
        $1502 = ($1501|0)!=(0);
        if ($1502) {
        } else {
         $63 = $cdata;
         $1503 = $63;
         $1504 = HEAP32[$1503>>2]|0;
         $1505 = $row116;
         $1506 = $col15;
         __THREW__ = 0;
         $1507 = (invoke_iiii(470,($1504|0),($1505|0),($1506|0))|0);
         $1508 = __THREW__; __THREW__ = 0;
         $1509 = $1508&1;
         if ($1509) {
          label = 149;
          break L1;
         }
         __THREW__ = 0;
         $1510 = (invoke_ii(491,($1507|0))|0);
         $1511 = __THREW__; __THREW__ = 0;
         $1512 = $1511&1;
         if ($1512) {
          label = 149;
          break L1;
         }
         $1513 = +HEAPF64[$1510>>3];
         $223 = $cdata;
         $1514 = $223;
         $1515 = HEAP32[$1514>>2]|0;
         __THREW__ = 0;
         $1516 = (+invoke_di(490,($1515|0)));
         $1517 = __THREW__; __THREW__ = 0;
         $1518 = $1517&1;
         if ($1518) {
          label = 149;
          break L1;
         }
         $1519 = $1513 == $1516;
         if ($1519) {
          label = 234;
          break;
         }
        }
        $1520 = $row116;
        $1521 = (($1520) + 1)|0;
        $row116 = $1521;
       }
       if ((label|0) == 234) {
        label = 0;
       }
       $1522 = $row116;
       $1523 = $size;
       $1524 = ($1522|0)>=($1523|0);
       if ($1524) {
        label = 238;
        break;
       }
      }
      $1525 = $col15;
      $1526 = (($1525) + 1)|0;
      $col15 = $1526;
     }
     if ((label|0) == 238) {
      label = 0;
     }
     $226 = $cdata;
     $1527 = $226;
     $1528 = HEAP32[$1527>>2]|0;
     $1529 = $row13;
     $1530 = $col15;
     __THREW__ = 0;
     $1531 = (invoke_iiii(470,($1528|0),($1529|0),($1530|0))|0);
     $1532 = __THREW__; __THREW__ = 0;
     $1533 = $1532&1;
     if ($1533) {
      label = 149;
      break L1;
     }
     __THREW__ = 0;
     $1534 = (invoke_ii(491,($1531|0))|0);
     $1535 = __THREW__; __THREW__ = 0;
     $1536 = $1535&1;
     if ($1536) {
      label = 149;
      break L1;
     }
     $1537 = +HEAPF64[$1534>>3];
     $prev_dist = $1537;
     $1538 = $row13;
     $1539 = $size;
     $1540 = ($1538|0)<($1539|0);
     do {
      if ($1540) {
       $1541 = $col15;
       $1542 = $size;
       $1543 = ($1541|0)<($1542|0);
       if (!($1543)) {
        break;
       }
       $292 = $cdata;
       $1544 = $292;
       $1545 = HEAP32[$1544>>2]|0;
       __THREW__ = 0;
       $1546 = (+invoke_di(490,($1545|0)));
       $1547 = __THREW__; __THREW__ = 0;
       $1548 = $1547&1;
       if ($1548) {
        label = 149;
        break L1;
       }
       $300 = $cdata;
       $1549 = $300;
       $1550 = HEAP32[$1549>>2]|0;
       $1551 = $row13;
       $1552 = $col15;
       __THREW__ = 0;
       $1553 = (invoke_iiii(470,($1550|0),($1551|0),($1552|0))|0);
       $1554 = __THREW__; __THREW__ = 0;
       $1555 = $1554&1;
       if ($1555) {
        label = 149;
        break L1;
       }
       __THREW__ = 0;
       $1556 = (invoke_ii(491,($1553|0))|0);
       $1557 = __THREW__; __THREW__ = 0;
       $1558 = $1557&1;
       if ($1558) {
        label = 149;
        break L1;
       }
       HEAPF64[$1556>>3] = $1546;
      }
     } while(0);
     $1559 = $recursive;
     $1560 = $1559&1;
     if ($1560) {
      $310 = $448;
      $311 = $data;
      $1561 = $310;
      $1562 = $311;
      $1563 = HEAP32[$1562>>2]|0;
      HEAP32[$1561>>2] = $1563;
      $1564 = (($1561) + 4|0);
      $1565 = $311;
      $1566 = (($1565) + 4|0);
      $1567 = HEAP32[$1566>>2]|0;
      HEAP32[$1564>>2] = $1567;
      $1568 = (($1561) + 4|0);
      $1569 = HEAP32[$1568>>2]|0;
      $1570 = ($1569|0)!=(0|0);
      if ($1570) {
       $1571 = (($1561) + 4|0);
       $1572 = HEAP32[$1571>>2]|0;
       __ZNSt3__119__shared_weak_count12__add_sharedEv($1572);
      }
      $313 = $449;
      $314 = $cdata;
      $1573 = $313;
      $1574 = $314;
      $1575 = HEAP32[$1574>>2]|0;
      HEAP32[$1573>>2] = $1575;
      $1576 = (($1573) + 4|0);
      $1577 = $314;
      $1578 = (($1577) + 4|0);
      $1579 = HEAP32[$1578>>2]|0;
      HEAP32[$1576>>2] = $1579;
      $1580 = (($1573) + 4|0);
      $1581 = HEAP32[$1580>>2]|0;
      $1582 = ($1581|0)!=(0|0);
      if ($1582) {
       $1583 = (($1573) + 4|0);
       $1584 = HEAP32[$1583>>2]|0;
       __ZNSt3__119__shared_weak_count12__add_sharedEv($1584);
      }
      $316 = $450;
      $317 = $ans;
      $1585 = $316;
      $1586 = $317;
      $1587 = HEAP32[$1586>>2]|0;
      HEAP32[$1585>>2] = $1587;
      $1588 = (($1585) + 4|0);
      $1589 = $317;
      $1590 = (($1589) + 4|0);
      $1591 = HEAP32[$1590>>2]|0;
      HEAP32[$1588>>2] = $1591;
      $1592 = (($1585) + 4|0);
      $1593 = HEAP32[$1592>>2]|0;
      $1594 = ($1593|0)!=(0|0);
      if ($1594) {
       $1595 = (($1585) + 4|0);
       $1596 = HEAP32[$1595>>2]|0;
       __ZNSt3__119__shared_weak_count12__add_sharedEv($1596);
      }
      $1597 = $429;
      __THREW__ = 0;
      invoke_vii(468,($451|0),($skip_rows|0));
      $1598 = __THREW__; __THREW__ = 0;
      $1599 = $1598&1;
      if ($1599) {
       label = 274;
       break L1;
      }
      __THREW__ = 0;
      invoke_vii(468,($452|0),($skip_cols|0));
      $1600 = __THREW__; __THREW__ = 0;
      $1601 = $1600&1;
      if ($1601) {
       label = 275;
       break L1;
      }
      __THREW__ = 0;
      invoke_viiiiiii(492,($455|0),($448|0),($449|0),($450|0),($1597|0),($451|0),($452|0));
      $1602 = __THREW__; __THREW__ = 0;
      $1603 = $1602&1;
      if ($1603) {
       label = 276;
       break L1;
      }
      __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($452);
      __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($451);
      __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($450);
      __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($449);
      __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($448);
      $1604 = $b12;
      $1605 = HEAP32[$1604>>2]|0;
      __THREW__ = 0;
      $1606 = (invoke_ii(438,($1605|0))|0);
      $1607 = __THREW__; __THREW__ = 0;
      $1608 = $1607&1;
      if ($1608) {
       label = 149;
       break L1;
      }
      $355 = $skip_rows;
      $356 = $1606;
      $1609 = $355;
      $1610 = $356;
      $353 = $1609;
      $354 = $1610;
      $1611 = $353;
      $1612 = HEAP32[$1611>>2]|0;
      $1613 = $354;
      $1614 = (($1613>>>0) / 32)&-1;
      $1615 = (($1612) + ($1614<<2)|0);
      $1616 = $354;
      $1617 = (($1616>>>0) % 32)&-1;
      $1618 = 1 << $1617;
      $350 = $453;
      $351 = $1615;
      $352 = $1618;
      $1619 = $350;
      $1620 = $351;
      HEAP32[$1619>>2] = $1620;
      $1621 = (($1619) + 4|0);
      $1622 = $352;
      HEAP32[$1621>>2] = $1622;
      $357 = $453;
      $358 = 0;
      $1623 = $357;
      $1624 = $358;
      $1625 = $1624&1;
      if ($1625) {
       $1626 = (($1623) + 4|0);
       $1627 = HEAP32[$1626>>2]|0;
       $1628 = HEAP32[$1623>>2]|0;
       $1629 = HEAP32[$1628>>2]|0;
       $1630 = $1629 | $1627;
       HEAP32[$1628>>2] = $1630;
      } else {
       $1631 = (($1623) + 4|0);
       $1632 = HEAP32[$1631>>2]|0;
       $1633 = $1632 ^ -1;
       $1634 = HEAP32[$1623>>2]|0;
       $1635 = HEAP32[$1634>>2]|0;
       $1636 = $1635 & $1633;
       HEAP32[$1634>>2] = $1636;
      }
      $1637 = $b12;
      $1638 = HEAP32[$1637>>2]|0;
      __THREW__ = 0;
      $1639 = (invoke_ii(441,($1638|0))|0);
      $1640 = __THREW__; __THREW__ = 0;
      $1641 = $1640&1;
      if ($1641) {
       label = 149;
       break L1;
      }
      $371 = $skip_cols;
      $372 = $1639;
      $1642 = $371;
      $1643 = $372;
      $369 = $1642;
      $370 = $1643;
      $1644 = $369;
      $1645 = HEAP32[$1644>>2]|0;
      $1646 = $370;
      $1647 = (($1646>>>0) / 32)&-1;
      $1648 = (($1645) + ($1647<<2)|0);
      $1649 = $370;
      $1650 = (($1649>>>0) % 32)&-1;
      $1651 = 1 << $1650;
      $366 = $454;
      $367 = $1648;
      $368 = $1651;
      $1652 = $366;
      $1653 = $367;
      HEAP32[$1652>>2] = $1653;
      $1654 = (($1652) + 4|0);
      $1655 = $368;
      HEAP32[$1654>>2] = $1655;
      $373 = $454;
      $374 = 0;
      $1656 = $373;
      $1657 = $374;
      $1658 = $1657&1;
      if ($1658) {
       $1659 = (($1656) + 4|0);
       $1660 = HEAP32[$1659>>2]|0;
       $1661 = HEAP32[$1656>>2]|0;
       $1662 = HEAP32[$1661>>2]|0;
       $1663 = $1662 | $1660;
       HEAP32[$1661>>2] = $1663;
      } else {
       $1664 = (($1656) + 4|0);
       $1665 = HEAP32[$1664>>2]|0;
       $1666 = $1665 ^ -1;
       $1667 = HEAP32[$1656>>2]|0;
       $1668 = HEAP32[$1667>>2]|0;
       $1669 = $1668 & $1666;
       HEAP32[$1667>>2] = $1669;
      }
      $1670 = $row13;
      $1671 = $size;
      $1672 = ($1670|0)<($1671|0);
      do {
       if ($1672) {
        $1673 = $col15;
        $1674 = $size;
        $1675 = ($1673|0)<($1674|0);
        if (!($1675)) {
         break;
        }
        $1676 = $prev_dist;
        $375 = $cdata;
        $1677 = $375;
        $1678 = HEAP32[$1677>>2]|0;
        $1679 = $row13;
        $1680 = $col15;
        __THREW__ = 0;
        $1681 = (invoke_iiii(470,($1678|0),($1679|0),($1680|0))|0);
        $1682 = __THREW__; __THREW__ = 0;
        $1683 = $1682&1;
        if ($1683) {
         label = 149;
         break L1;
        }
        __THREW__ = 0;
        $1684 = (invoke_ii(491,($1681|0))|0);
        $1685 = __THREW__; __THREW__ = 0;
        $1686 = $1685&1;
        if ($1686) {
         label = 149;
         break L1;
        }
        HEAPF64[$1684>>3] = $1676;
       }
      } while(0);
     }
     $1693 = $k;
     $1694 = (($1693) + 1)|0;
     $k = $1694;
    }
    $__range17 = $max_items;
    $1695 = $__range17;
    $393 = $1695;
    $1696 = $393;
    $1697 = HEAP32[$1696>>2]|0;
    $391 = $1696;
    $392 = $1697;
    $1698 = $392;
    $389 = $__begin18;
    $390 = $1698;
    $1699 = $389;
    $1700 = $390;
    HEAP32[$1699>>2] = $1700;
    $1701 = $__range17;
    $398 = $1701;
    $1702 = $398;
    $1703 = (($1702) + 4|0);
    $1704 = HEAP32[$1703>>2]|0;
    $396 = $1702;
    $397 = $1704;
    $1705 = $397;
    $394 = $__end19;
    $395 = $1705;
    $1706 = $394;
    $1707 = $395;
    HEAP32[$1706>>2] = $1707;
    while(1) {
     $403 = $__begin18;
     $404 = $__end19;
     $1708 = $403;
     $1709 = $404;
     $401 = $1708;
     $402 = $1709;
     $1710 = $401;
     $400 = $1710;
     $1711 = $400;
     $1712 = HEAP32[$1711>>2]|0;
     $1713 = $402;
     $399 = $1713;
     $1714 = $399;
     $1715 = HEAP32[$1714>>2]|0;
     $1716 = ($1712|0)==($1715|0);
     $1717 = $1716 ^ 1;
     if (!($1717)) {
      break;
     }
     $405 = $__begin18;
     $1718 = $405;
     $1719 = HEAP32[$1718>>2]|0;
     $b120 = $1719;
     $1720 = $b120;
     $1721 = HEAP32[$1720>>2]|0;
     $1722 = ($1721|0)==(0|0);
     if (!($1722)) {
      __ZdlPv($1721);
     }
     $406 = $__begin18;
     $1723 = $406;
     $1724 = HEAP32[$1723>>2]|0;
     $1725 = (($1724) + 4|0);
     HEAP32[$1723>>2] = $1725;
    }
    $1726 = $recursive;
    $1727 = $1726&1;
    if (!($1727)) {
     $433 = 0;
     break;
    }
    $407 = $ans;
    $1728 = $407;
    $1729 = HEAP32[$1728>>2]|0;
    $1730 = $old_bundle;
    __THREW__ = 0;
    invoke_vii(498,($1729|0),($1730|0));
    $1731 = __THREW__; __THREW__ = 0;
    $1732 = $1731&1;
    if ($1732) {
     label = 149;
     break L1;
    }
    $433 = 3;
   }
  } while(0);
  __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($max_items);
  __ZNSt3__114priority_queueIPN7croutes8net_bondIdEENS_6vectorIS4_NS_9allocatorIS4_EEEEZNS1_10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEESE_NSB_INS1_6answerIdEEEEPNS_5dequeIPKS3_NS6_ISK_EEEENS5_IbNS6_IbEEEESP_EUlRKS4_SR_E_ED2Ev($pq);
  $cleanup$dest = $433;
  if ((($cleanup$dest|0) == 3)) {
   label = 296;
   break;
  } else if (!((($cleanup$dest|0) == 0))) {
   label = 301;
   break;
  }
 }
 switch (label|0) {
  case 15: {
   $513 = ___cxa_find_matching_catch()|0;
   $514 = tempRet0;
   $430 = $513;
   $431 = $514;
   break;
  }
  case 21: {
   $433 = 1;
   label = 297;
   break;
  }
  case 52: {
   $433 = 1;
   label = 297;
   break;
  }
  case 72: {
   $709 = ___cxa_find_matching_catch()|0;
   $710 = tempRet0;
   $430 = $709;
   $431 = $710;
   label = 295;
   break;
  }
  case 117: {
   $929 = ___cxa_find_matching_catch()|0;
   $930 = tempRet0;
   $430 = $929;
   $431 = $930;
   __ZdlPv($857);
   label = 295;
   break;
  }
  case 146: {
   $1094 = ___cxa_find_matching_catch(0|0)|0;
   $1095 = tempRet0;
   ___clang_call_terminate($1094);
   // unreachable;
   break;
  }
  case 149: {
   $1096 = ___cxa_find_matching_catch()|0;
   $1097 = tempRet0;
   $430 = $1096;
   $431 = $1097;
   label = 294;
   break;
  }
  case 158: {
   $1182 = ___cxa_find_matching_catch(0|0)|0;
   $1183 = tempRet0;
   ___clang_call_terminate($1182);
   // unreachable;
   break;
  }
  case 274: {
   $1687 = ___cxa_find_matching_catch()|0;
   $1688 = tempRet0;
   $430 = $1687;
   $431 = $1688;
   label = 278;
   break;
  }
  case 275: {
   $1689 = ___cxa_find_matching_catch()|0;
   $1690 = tempRet0;
   $430 = $1689;
   $431 = $1690;
   label = 277;
   break;
  }
  case 276: {
   $1691 = ___cxa_find_matching_catch()|0;
   $1692 = tempRet0;
   $430 = $1691;
   $431 = $1692;
   __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($452);
   label = 277;
   break;
  }
  case 296: {
   $433 = 0;
   label = 297;
   break;
  }
  case 301: {
   // unreachable;
   break;
  }
 }
 if ((label|0) == 277) {
  __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($451);
  label = 278;
 }
 else if ((label|0) == 297) {
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($cdata);
  $cleanup$dest21 = $433;
  if ((($cleanup$dest21|0) == 1) | (($cleanup$dest21|0) == 0)) {
   STACKTOP = sp;return;
  } else {
   // unreachable;
  }
 }
 if ((label|0) == 278) {
  __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($450);
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($449);
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($448);
  label = 294;
 }
 if ((label|0) == 294) {
  __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($max_items);
  label = 295;
 }
 if ((label|0) == 295) {
  __ZNSt3__114priority_queueIPN7croutes8net_bondIdEENS_6vectorIS4_NS_9allocatorIS4_EEEEZNS1_10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEESE_NSB_INS1_6answerIdEEEEPNS_5dequeIPKS3_NS6_ISK_EEEENS5_IbNS6_IbEEEESP_EUlRKS4_SR_E_ED2Ev($pq);
 }
 __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($cdata);
 $1733 = $430;
 $1734 = $431;
 ___resumeException($1733|0);
 // unreachable;
}
function __ZN7croutes8net_bondIdEC2Eiid($this,$from,$to,$distance) {
 $this = $this|0;
 $from = $from|0;
 $to = $to|0;
 $distance = +$distance;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $from;
 $2 = $to;
 $3 = $distance;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = (($4) + 4|0);
 $7 = $2;
 HEAP32[$6>>2] = $7;
 $8 = (($4) + 8|0);
 $9 = $3;
 HEAPF64[$8>>3] = $9;
 STACKTOP = sp;return;
}
function __ZN7croutes6answerIdE11copy_bundleEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEE($this,$bundle) {
 $this = $this|0;
 $bundle = $bundle|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp;
 $15 = sp + 121|0;
 $__annotator$i = sp + 120|0;
 $28 = sp + 12|0;
 $26 = $this;
 $27 = $bundle;
 $31 = $26;
 $32 = (__Znwj(24)|0);
 $33 = $27;
 __THREW__ = 0;
 invoke_vii(499,($32|0),($33|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $29 = $77;
  $30 = $78;
  __ZdlPv($32);
  $79 = $29;
  $80 = $30;
  ___resumeException($79|0);
  // unreachable;
 }
 HEAP32[$28>>2] = $32;
 $24 = $31;
 $25 = $28;
 $36 = $24;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $23 = $36;
 $39 = $23;
 $40 = (($39) + 8|0);
 $22 = $40;
 $41 = $22;
 $21 = $41;
 $42 = $21;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($38>>>0)<($43>>>0);
 if (!($44)) {
  $70 = $25;
  $17 = $70;
  $71 = $17;
  __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE21__push_back_slow_pathISA_EEvOT_($36,$71);
  $0 = $31;
  $72 = $0;
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + -4|0);
  $76 = HEAP32[$75>>2]|0;
  STACKTOP = sp;return ($76|0);
 }
 __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotatorC2ERKSC_j($__annotator$i,$36,1);
 $20 = $36;
 $45 = $20;
 $46 = (($45) + 8|0);
 $19 = $46;
 $47 = $19;
 $18 = $47;
 $48 = $18;
 $49 = (($36) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $16 = $50;
 $51 = $16;
 $52 = $25;
 $1 = $52;
 $53 = $1;
 $12 = $48;
 $13 = $51;
 $14 = $53;
 $54 = $12;
 $55 = $13;
 $56 = $14;
 $11 = $56;
 $57 = $11;
 ;HEAP8[$10+0>>0]=HEAP8[$15+0>>0]|0;
 $7 = $54;
 $8 = $55;
 $9 = $57;
 $58 = $7;
 $59 = $8;
 $60 = $9;
 $6 = $60;
 $61 = $6;
 $3 = $58;
 $4 = $59;
 $5 = $61;
 $62 = $4;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $64 = $5;
  $2 = $64;
  $65 = $2;
  $66 = HEAP32[$65>>2]|0;
  HEAP32[$62>>2] = $66;
 }
 __ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
 $67 = (($36) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 4|0);
 HEAP32[$67>>2] = $69;
 $0 = $31;
 $72 = $0;
 $73 = (($72) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + -4|0);
 $76 = HEAP32[$75>>2]|0;
 STACKTOP = sp;return ($76|0);
}
function __ZN7croutes6answerIdE13delete_bundleEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEE($this,$bundle) {
 $this = $this|0;
 $bundle = $bundle|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n$i$i$i = 0, $__old_size$i$i = 0, $__p$i = 0, $__ps$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 24|0;
 $14 = sp + 16|0;
 $36 = sp + 8|0;
 $39 = sp + 324|0;
 $56 = sp + 100|0;
 $57 = sp;
 $69 = sp + 48|0;
 $70 = sp + 44|0;
 $71 = sp + 40|0;
 $72 = sp + 36|0;
 $73 = sp + 32|0;
 $74 = sp + 28|0;
 $68 = $this;
 HEAP32[$69>>2] = $bundle;
 $75 = $68;
 $67 = $75;
 $76 = $67;
 $77 = HEAP32[$76>>2]|0;
 $65 = $76;
 $66 = $77;
 $78 = $66;
 $63 = $72;
 $64 = $78;
 $79 = $63;
 $80 = $64;
 HEAP32[$79>>2] = $80;
 $62 = $75;
 $81 = $62;
 $82 = (($81) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $60 = $81;
 $61 = $83;
 $84 = $61;
 $58 = $73;
 $59 = $84;
 $85 = $58;
 $86 = $59;
 HEAP32[$85>>2] = $86;
 ;HEAP8[$13+0>>0]=HEAP8[$73+0>>0]|0;HEAP8[$13+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$73+3>>0]|0;
 ;HEAP8[$14+0>>0]=HEAP8[$72+0>>0]|0;HEAP8[$14+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$14+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$14+3>>0]=HEAP8[$72+3>>0]|0;
 $12 = $69;
 while(1) {
  $10 = $14;
  $11 = $13;
  $87 = $10;
  $88 = $11;
  $8 = $87;
  $9 = $88;
  $89 = $8;
  $7 = $89;
  $90 = $7;
  $91 = HEAP32[$90>>2]|0;
  $92 = $9;
  $6 = $92;
  $93 = $6;
  $94 = HEAP32[$93>>2]|0;
  $95 = ($91|0)==($94|0);
  $96 = $95 ^ 1;
  if (!($96)) {
   break;
  }
  $4 = $14;
  $97 = $4;
  $98 = HEAP32[$97>>2]|0;
  $99 = HEAP32[$98>>2]|0;
  $100 = $12;
  $101 = HEAP32[$100>>2]|0;
  $102 = ($99|0)==($101|0);
  if ($102) {
   label = 4;
   break;
  }
  $5 = $14;
  $103 = $5;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 4|0);
  HEAP32[$103>>2] = $105;
 }
 if ((label|0) == 4) {
 }
 ;HEAP32[$71+0>>2]=HEAP32[$14+0>>2]|0;
 $1 = $70;
 $2 = $71;
 $3 = 0;
 $106 = $1;
 $107 = $2;
 $0 = $107;
 $108 = $0;
 $109 = HEAP32[$108>>2]|0;
 HEAP32[$106>>2] = $109;
 ;HEAP8[$57+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$57+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$70+3>>0]|0;
 $55 = $75;
 $110 = $55;
 $54 = $110;
 $111 = $54;
 $53 = $111;
 $112 = $53;
 $113 = HEAP32[$112>>2]|0;
 $51 = $112;
 $52 = $113;
 $114 = $52;
 $49 = $56;
 $50 = $114;
 $115 = $49;
 $116 = $50;
 HEAP32[$115>>2] = $116;
 $30 = $57;
 $31 = $56;
 $117 = $30;
 $29 = $117;
 $118 = $29;
 $119 = HEAP32[$118>>2]|0;
 $120 = $31;
 $28 = $120;
 $121 = $28;
 $122 = HEAP32[$121>>2]|0;
 $123 = $119;
 $124 = $122;
 $125 = (($123) - ($124))|0;
 $126 = (($125|0) / 4)&-1;
 $__ps$i = $126;
 $127 = HEAP32[$110>>2]|0;
 $128 = $__ps$i;
 $129 = (($127) + ($128<<2)|0);
 $__p$i = $129;
 $130 = $__p$i;
 $26 = $110;
 $27 = $130;
 $131 = $27;
 $24 = $74;
 $25 = $131;
 $132 = $24;
 $133 = $25;
 HEAP32[$132>>2] = $133;
 $134 = $__p$i;
 $135 = (($134) + 4|0);
 $136 = (($110) + 4|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = $__p$i;
 $21 = $135;
 $22 = $137;
 $23 = $138;
 $139 = $21;
 $20 = $139;
 $140 = $20;
 $141 = $22;
 $15 = $141;
 $142 = $15;
 $143 = $23;
 $16 = $143;
 $144 = $16;
 $17 = $140;
 $18 = $142;
 $19 = $144;
 $145 = $18;
 $146 = $17;
 $147 = $145;
 $148 = $146;
 $149 = (($147) - ($148))|0;
 $150 = (($149|0) / 4)&-1;
 $__n$i$i$i = $150;
 $151 = $19;
 $152 = $17;
 $153 = $__n$i$i$i;
 $154 = $153<<2;
 _memmove(($151|0),($152|0),($154|0))|0;
 $155 = $19;
 $156 = $__n$i$i$i;
 $157 = (($155) + ($156<<2)|0);
 $47 = $110;
 $48 = $157;
 $158 = $47;
 $46 = $158;
 $159 = $46;
 $160 = (($159) + 4|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = HEAP32[$159>>2]|0;
 $163 = $161;
 $164 = $162;
 $165 = (($163) - ($164))|0;
 $166 = (($165|0) / 4)&-1;
 $__old_size$i$i = $166;
 $167 = $48;
 $44 = $158;
 $45 = $167;
 $168 = $44;
 while(1) {
  $169 = $45;
  $170 = (($168) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = ($169|0)!=($171|0);
  if (!($172)) {
   break;
  }
  $43 = $168;
  $173 = $43;
  $174 = (($173) + 8|0);
  $42 = $174;
  $175 = $42;
  $41 = $175;
  $176 = $41;
  $177 = (($168) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = (($178) + -4|0);
  HEAP32[$177>>2] = $179;
  $40 = $179;
  $180 = $40;
  $37 = $176;
  $38 = $180;
  $181 = $37;
  $182 = $38;
  ;HEAP8[$36+0>>0]=HEAP8[$39+0>>0]|0;
  $34 = $181;
  $35 = $182;
  $183 = $34;
  $184 = $35;
  $32 = $183;
  $33 = $184;
 }
 $185 = $__old_size$i$i;
 __THREW__ = 0;
 invoke_vii(500,($158|0),($185|0));
 $186 = __THREW__; __THREW__ = 0;
 $187 = $186&1;
 if ($187) {
  $188 = ___cxa_find_matching_catch(0|0)|0;
  $189 = tempRet0;
  ___clang_call_terminate($188);
  // unreachable;
 }
 $190 = HEAP32[$69>>2]|0;
 $191 = ($190|0)==(0|0);
 if ($191) {
  STACKTOP = sp;return;
 }
 __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($190);
 __ZdlPv($190);
 STACKTOP = sp;return;
}
function __ZNSt3__114priority_queueIPN7croutes8net_bondIdEENS_6vectorIS4_NS_9allocatorIS4_EEEEZNS1_10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEESE_NSB_INS1_6answerIdEEEEPNS_5dequeIPKS3_NS6_ISK_EEEENS5_IbNS6_IbEEEESP_EUlRKS4_SR_E_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE31__annotate_contiguous_containerEPKvSE_SE_SE_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEEC2ERKS8_($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 200|0;
 $$byval_copy = sp + 192|0;
 $6 = sp + 160|0;
 $7 = sp + 32|0;
 $10 = sp + 148|0;
 $11 = sp + 214|0;
 $12 = sp + 24|0;
 $17 = sp + 128|0;
 $18 = sp + 16|0;
 $21 = sp + 116|0;
 $22 = sp + 213|0;
 $23 = sp + 8|0;
 $26 = sp + 212|0;
 $31 = sp + 211|0;
 $32 = sp + 210|0;
 $34 = sp;
 $36 = sp + 209|0;
 $42 = sp + 208|0;
 $43 = sp + 56|0;
 $44 = sp + 48|0;
 $40 = $this;
 $41 = $__c;
 $47 = $40;
 $48 = $41;
 $39 = $48;
 $49 = $39;
 $50 = (($49) + 20|0);
 $38 = $50;
 $51 = $38;
 $37 = $51;
 $52 = $37;
 $35 = $52;
 $53 = $35;
 ;HEAP8[$34+0>>0]=HEAP8[$36+0>>0]|0;
 $33 = $53;
 $29 = $47;
 $30 = $42;
 $54 = $29;
 $55 = $30;
 $27 = $31;
 $28 = $55;
 $24 = $54;
 $25 = $31;
 $56 = $24;
 HEAP32[$56>>2] = 0;
 $57 = (($56) + 4|0);
 HEAP32[$57>>2] = 0;
 $58 = (($56) + 8|0);
 HEAP32[$58>>2] = 0;
 $59 = (($56) + 12|0);
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;
 $20 = $59;
 HEAP32[$21>>2] = 0;
 $60 = $20;
 $19 = $21;
 $61 = $19;
 $62 = HEAP32[$61>>2]|0;
 $13 = $23;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;
 $16 = $60;
 HEAP32[$17>>2] = $62;
 $63 = $16;
 $15 = $18;
 $14 = $17;
 $64 = $14;
 $65 = HEAP32[$64>>2]|0;
 HEAP32[$63>>2] = $65;
 $66 = (($54) + 16|0);
 HEAP32[$66>>2] = 0;
 $67 = (($54) + 20|0);
 ;HEAP8[$12+0>>0]=HEAP8[$32+0>>0]|0;
 $9 = $67;
 HEAP32[$10>>2] = 0;
 $68 = $9;
 $8 = $10;
 $69 = $8;
 $70 = HEAP32[$69>>2]|0;
 $2 = $12;
 ;HEAP8[$7+0>>0]=HEAP8[$11+0>>0]|0;
 $5 = $68;
 HEAP32[$6>>2] = $70;
 $71 = $5;
 $4 = $7;
 $3 = $6;
 $72 = $3;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$71>>2] = $73;
 $74 = $41;
 $0 = $74;
 $75 = $0;
 __ZNKSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($43,$75);
 $76 = $41;
 $1 = $76;
 $77 = $1;
 __ZNKSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($44,$77);
 __THREW__ = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$43+4>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$44+4>>2]|0;
 invoke_viiii(501,($47|0),($$byval_copy|0),($$byval_copy1|0),(0|0));
 $78 = __THREW__; __THREW__ = 0;
 $79 = $78&1;
 if (!($79)) {
  STACKTOP = sp;return;
 }
 $80 = ___cxa_find_matching_catch()|0;
 $81 = tempRet0;
 $45 = $80;
 $46 = $81;
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($47);
 $82 = $45;
 $83 = $46;
 ___resumeException($82|0);
 // unreachable;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE8__appendINS_16__deque_iteratorIS5_PKS5_RSB_PKSC_iLi1024EEEEEvT_SH_PNS_9enable_ifIXsr21__is_forward_iteratorISH_EE5valueEvE4typeE($this,$__f,$__l,$0) {
 $this = $this|0;
 $__f = $__f|0;
 $__l = $__l|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__back_capacity = 0, $__i = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 40|0;
 $31 = sp + 277|0;
 $44 = sp + 32|0;
 $45 = sp + 24|0;
 $46 = sp + 16|0;
 $47 = sp + 104|0;
 $48 = sp + 96|0;
 $49 = sp + 276|0;
 $50 = sp + 8|0;
 $51 = sp;
 $54 = sp + 72|0;
 $55 = sp + 64|0;
 $__i = sp + 48|0;
 $52 = $this;
 $53 = $0;
 $56 = $52;
 ;HEAP32[$54+0>>2]=HEAP32[$__f+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$__f+4>>2]|0;
 ;HEAP32[$55+0>>2]=HEAP32[$__l+0>>2]|0;HEAP32[$55+4>>2]=HEAP32[$__l+4>>2]|0;
 ;HEAP8[$50+0>>0]=HEAP8[$55+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$55+3>>0]|0;HEAP8[$50+4>>0]=HEAP8[$55+4>>0]|0;HEAP8[$50+5>>0]=HEAP8[$55+5>>0]|0;HEAP8[$50+6>>0]=HEAP8[$55+6>>0]|0;HEAP8[$50+7>>0]=HEAP8[$55+7>>0]|0;
 ;HEAP8[$51+0>>0]=HEAP8[$54+0>>0]|0;HEAP8[$51+1>>0]=HEAP8[$54+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$54+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$54+3>>0]|0;HEAP8[$51+4>>0]=HEAP8[$54+4>>0]|0;HEAP8[$51+5>>0]=HEAP8[$54+5>>0]|0;HEAP8[$51+6>>0]=HEAP8[$54+6>>0]|0;HEAP8[$51+7>>0]=HEAP8[$54+7>>0]|0;
 ;HEAP32[$47+0>>2]=HEAP32[$51+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$51+4>>2]|0;
 ;HEAP32[$48+0>>2]=HEAP32[$50+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$50+4>>2]|0;
 ;HEAP8[$44+0>>0]=HEAP8[$49+0>>0]|0;
 ;HEAP8[$45+0>>0]=HEAP8[$48+0>>0]|0;HEAP8[$45+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$45+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$45+3>>0]=HEAP8[$48+3>>0]|0;HEAP8[$45+4>>0]=HEAP8[$48+4>>0]|0;HEAP8[$45+5>>0]=HEAP8[$48+5>>0]|0;HEAP8[$45+6>>0]=HEAP8[$48+6>>0]|0;HEAP8[$45+7>>0]=HEAP8[$48+7>>0]|0;
 ;HEAP8[$46+0>>0]=HEAP8[$47+0>>0]|0;HEAP8[$46+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$47+3>>0]|0;HEAP8[$46+4>>0]=HEAP8[$47+4>>0]|0;HEAP8[$46+5>>0]=HEAP8[$47+5>>0]|0;HEAP8[$46+6>>0]=HEAP8[$47+6>>0]|0;HEAP8[$46+7>>0]=HEAP8[$47+7>>0]|0;
 $42 = $45;
 $43 = $46;
 $57 = $42;
 $58 = $43;
 $39 = $57;
 $40 = $58;
 $59 = $39;
 $60 = $40;
 $37 = $59;
 $38 = $60;
 $61 = $37;
 $62 = (($61) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $38;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($63|0)==($66|0);
 $68 = $67 ^ 1;
 if ($68) {
  $69 = $42;
  $70 = HEAP32[$69>>2]|0;
  $71 = $43;
  $72 = HEAP32[$71>>2]|0;
  $73 = $70;
  $74 = $72;
  $75 = (($73) - ($74))|0;
  $76 = (($75|0) / 4)&-1;
  $77 = $76<<10;
  $78 = $42;
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $42;
  $82 = HEAP32[$81>>2]|0;
  $83 = HEAP32[$82>>2]|0;
  $84 = $80;
  $85 = $83;
  $86 = (($84) - ($85))|0;
  $87 = (($86|0) / 4)&-1;
  $88 = (($77) + ($87))|0;
  $89 = $43;
  $90 = (($89) + 4|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $43;
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$93>>2]|0;
  $95 = $91;
  $96 = $94;
  $97 = (($95) - ($96))|0;
  $98 = (($97|0) / 4)&-1;
  $99 = (($88) - ($98))|0;
  $41 = $99;
 } else {
  $41 = 0;
 }
 $100 = $41;
 $__n = $100;
 $10 = $56;
 $101 = $10;
 $102 = (($101) + 20|0);
 $9 = $102;
 $103 = $9;
 $8 = $103;
 $104 = $8;
 $__a = $104;
 $7 = $56;
 $105 = $7;
 $6 = $105;
 $106 = $6;
 $5 = $106;
 $107 = $5;
 $108 = (($107) + 8|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($107) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $109;
 $113 = $111;
 $114 = (($112) - ($113))|0;
 $115 = (($114|0) / 4)&-1;
 $116 = ($115|0)==(0);
 if ($116) {
  $137 = 0;
 } else {
  $4 = $106;
  $117 = $4;
  $118 = (($117) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($117) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $119;
  $123 = $121;
  $124 = (($122) - ($123))|0;
  $125 = (($124|0) / 4)&-1;
  $126 = $125<<10;
  $127 = (($126) - 1)|0;
  $137 = $127;
 }
 $128 = (($105) + 16|0);
 $129 = HEAP32[$128>>2]|0;
 $3 = $105;
 $130 = $3;
 $131 = (($130) + 20|0);
 $2 = $131;
 $132 = $2;
 $1 = $132;
 $133 = $1;
 $134 = HEAP32[$133>>2]|0;
 $135 = (($129) + ($134))|0;
 $136 = (($137) - ($135))|0;
 $__back_capacity = $136;
 $138 = $__n;
 $139 = $__back_capacity;
 $140 = ($138>>>0)>($139>>>0);
 if ($140) {
  $141 = $__n;
  $142 = $__back_capacity;
  $143 = (($141) - ($142))|0;
  __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE19__add_back_capacityEj($56,$143);
 }
 __ZNSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($__i,$56);
 while(1) {
  $13 = $__f;
  $14 = $__l;
  $144 = $13;
  $145 = $14;
  $11 = $144;
  $12 = $145;
  $146 = $11;
  $147 = (($146) + 4|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $12;
  $150 = (($149) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ($148|0)==($151|0);
  $153 = $152 ^ 1;
  if (!($153)) {
   break;
  }
  $154 = $__a;
  $15 = $__i;
  $155 = $15;
  $156 = (($155) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $16 = $157;
  $158 = $16;
  $17 = $__f;
  $159 = $17;
  $160 = (($159) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  $28 = $154;
  $29 = $158;
  $30 = $161;
  $162 = $28;
  $163 = $29;
  $164 = $30;
  $27 = $164;
  $165 = $27;
  ;HEAP8[$26+0>>0]=HEAP8[$31+0>>0]|0;
  $23 = $162;
  $24 = $163;
  $25 = $165;
  $166 = $23;
  $167 = $24;
  $168 = $25;
  $22 = $168;
  $169 = $22;
  $19 = $166;
  $20 = $167;
  $21 = $169;
  $170 = $20;
  $171 = ($170|0)==(0|0);
  if (!($171)) {
   $172 = $21;
   $18 = $172;
   $173 = $18;
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$170>>2] = $174;
  }
  $32 = $__i;
  $175 = $32;
  $176 = (($175) + 4|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = (($177) + 4|0);
  HEAP32[$176>>2] = $178;
  $179 = HEAP32[$175>>2]|0;
  $180 = HEAP32[$179>>2]|0;
  $181 = $178;
  $182 = $180;
  $183 = (($181) - ($182))|0;
  $184 = (($183|0) / 4)&-1;
  $185 = ($184|0)==(1024);
  if ($185) {
   $186 = HEAP32[$175>>2]|0;
   $187 = (($186) + 4|0);
   HEAP32[$175>>2] = $187;
   $188 = HEAP32[$175>>2]|0;
   $189 = HEAP32[$188>>2]|0;
   $190 = (($175) + 4|0);
   HEAP32[$190>>2] = $189;
  }
  $33 = $__f;
  $191 = $33;
  $192 = (($191) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = (($193) + 4|0);
  HEAP32[$192>>2] = $194;
  $195 = HEAP32[$191>>2]|0;
  $196 = HEAP32[$195>>2]|0;
  $197 = $194;
  $198 = $196;
  $199 = (($197) - ($198))|0;
  $200 = (($199|0) / 4)&-1;
  $201 = ($200|0)==(1024);
  if ($201) {
   $202 = HEAP32[$191>>2]|0;
   $203 = (($202) + 4|0);
   HEAP32[$191>>2] = $203;
   $204 = HEAP32[$191>>2]|0;
   $205 = HEAP32[$204>>2]|0;
   $206 = (($191) + 4|0);
   HEAP32[$206>>2] = $205;
  }
  $36 = $56;
  $207 = $36;
  $208 = (($207) + 20|0);
  $35 = $208;
  $209 = $35;
  $34 = $209;
  $210 = $34;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 1)|0;
  HEAP32[$210>>2] = $212;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = (($10) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($9) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = (($37) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__deque_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 1024)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($6) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 1024)&-1;
  $26 = (($22) + ($25<<2)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = (($28) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE19__add_back_capacityEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0;
 var $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0;
 var $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0;
 var $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0;
 var $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0;
 var $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0;
 var $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0;
 var $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0;
 var $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0;
 var $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0;
 var $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0;
 var $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0;
 var $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0;
 var $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0;
 var $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0;
 var $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0;
 var $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0;
 var $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0;
 var $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0;
 var $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0;
 var $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0;
 var $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0;
 var $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0;
 var $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0;
 var $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0;
 var $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0;
 var $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0;
 var $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0;
 var $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0;
 var $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__a = 0, $__buf = 0, $__c$i = 0, $__c$i17 = 0, $__c$i32 = 0, $__d$i = 0, $__d$i16 = 0;
 var $__d$i31 = 0, $__ds = 0, $__front_capacity = 0, $__i = 0, $__i2 = 0, $__n$i$i$i = 0, $__n$i$i$i15 = 0, $__n$i$i$i30 = 0, $__nb = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i14 = 0, $__t$i$i29 = 0, $__t$i1$i = 0, $__t$i1$i13 = 0, $__t$i1$i28 = 0, $__t$i18 = 0, $__t$i2$i = 0;
 var $__t$i2$i12 = 0, $__t$i2$i27 = 0, $__t$i3 = 0, $__t$i3$i = 0, $__t$i3$i11 = 0, $__t$i3$i26 = 0, $__t$i33 = 0, $__t$i4 = 0, $__t$i5 = 0, $__t$i6 = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1776|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy10 = sp + 1748|0;
 $$byval_copy9 = sp + 1744|0;
 $$byval_copy8 = sp + 1740|0;
 $$byval_copy7 = sp + 1736|0;
 $$byval_copy6 = sp + 1732|0;
 $$byval_copy = sp + 1728|0;
 $15 = sp + 80|0;
 $18 = sp + 1762|0;
 $36 = sp + 72|0;
 $39 = sp + 1761|0;
 $__t$i3$i26 = sp + 1560|0;
 $__t$i2$i27 = sp + 1536|0;
 $__t$i1$i28 = sp + 1512|0;
 $__t$i$i29 = sp + 1464|0;
 $90 = sp + 64|0;
 $95 = sp + 1760|0;
 $101 = sp + 1316|0;
 $102 = sp + 1312|0;
 $__t$i33 = sp + 1292|0;
 $103 = sp + 1288|0;
 $106 = sp + 1276|0;
 $111 = sp + 56|0;
 $114 = sp + 1759|0;
 $159 = sp + 48|0;
 $162 = sp + 1758|0;
 $__t$i3$i11 = sp + 1044|0;
 $__t$i2$i12 = sp + 1020|0;
 $__t$i1$i13 = sp + 996|0;
 $__t$i$i14 = sp + 948|0;
 $213 = sp + 40|0;
 $218 = sp + 1757|0;
 $224 = sp + 800|0;
 $225 = sp + 796|0;
 $__t$i18 = sp + 776|0;
 $226 = sp + 772|0;
 $229 = sp + 760|0;
 $232 = sp + 32|0;
 $235 = sp + 1756|0;
 $250 = sp + 24|0;
 $253 = sp + 1755|0;
 $__t$i3$i = sp + 656|0;
 $__t$i2$i = sp + 632|0;
 $__t$i1$i = sp + 608|0;
 $__t$i$i = sp + 560|0;
 $304 = sp + 16|0;
 $309 = sp + 1754|0;
 $315 = sp + 412|0;
 $316 = sp + 408|0;
 $__t$i6 = sp + 388|0;
 $317 = sp + 384|0;
 $320 = sp + 372|0;
 $323 = sp + 8|0;
 $326 = sp + 1753|0;
 $335 = sp;
 $338 = sp + 1752|0;
 $__t$i5 = sp + 292|0;
 $__t$i4 = sp + 268|0;
 $__t$i3 = sp + 244|0;
 $__t$i = sp + 196|0;
 $__nb = sp + 156|0;
 $__front_capacity = sp + 152|0;
 $__pt = sp + 148|0;
 $373 = sp + 144|0;
 $374 = sp + 140|0;
 $__pt1 = sp + 136|0;
 $__buf = sp + 112|0;
 $375 = sp + 108|0;
 $376 = sp + 104|0;
 $377 = sp + 100|0;
 $371 = $this;
 $372 = $__n;
 $380 = $371;
 $370 = $380;
 $381 = $370;
 $382 = (($381) + 20|0);
 $369 = $382;
 $383 = $369;
 $368 = $383;
 $384 = $368;
 $__a = $384;
 $385 = $372;
 $367 = $380;
 $386 = $367;
 $387 = (($386) + 8|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = (($386) + 4|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = ($388|0)==($390|0);
 $392 = $391&1;
 $393 = (($385) + ($392))|0;
 $366 = $393;
 $394 = $366;
 $395 = (($394>>>0) / 1024)&-1;
 $396 = $366;
 $397 = (($396>>>0) % 1024)&-1;
 $398 = ($397|0)!=(0);
 $399 = $398&1;
 $400 = (($395) + ($399))|0;
 HEAP32[$__nb>>2] = $400;
 $365 = $380;
 $401 = $365;
 $402 = (($401) + 16|0);
 $403 = HEAP32[$402>>2]|0;
 $404 = (($403>>>0) / 1024)&-1;
 HEAP32[$__front_capacity>>2] = $404;
 $336 = $__front_capacity;
 $337 = $__nb;
 $405 = $336;
 $406 = $337;
 ;HEAP8[$335+0>>0]=HEAP8[$338+0>>0]|0;
 $333 = $405;
 $334 = $406;
 $407 = $334;
 $408 = $333;
 $330 = $335;
 $331 = $407;
 $332 = $408;
 $409 = $331;
 $410 = HEAP32[$409>>2]|0;
 $411 = $332;
 $412 = HEAP32[$411>>2]|0;
 $413 = ($410>>>0)<($412>>>0);
 if ($413) {
  $414 = $334;
  $417 = $414;
 } else {
  $415 = $333;
  $417 = $415;
 }
 $416 = HEAP32[$417>>2]|0;
 HEAP32[$__front_capacity>>2] = $416;
 $418 = HEAP32[$__front_capacity>>2]|0;
 $419 = HEAP32[$__nb>>2]|0;
 $420 = (($419) - ($418))|0;
 HEAP32[$__nb>>2] = $420;
 $421 = HEAP32[$__nb>>2]|0;
 $422 = ($421|0)==(0);
 if ($422) {
  $423 = HEAP32[$__front_capacity>>2]|0;
  $424 = $423<<10;
  $425 = (($380) + 16|0);
  $426 = HEAP32[$425>>2]|0;
  $427 = (($426) - ($424))|0;
  HEAP32[$425>>2] = $427;
  while(1) {
   $428 = HEAP32[$__front_capacity>>2]|0;
   $429 = ($428>>>0)>(0);
   if (!($429)) {
    break;
   }
   $237 = $380;
   $430 = $237;
   $431 = (($430) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = HEAP32[$432>>2]|0;
   HEAP32[$__pt>>2] = $433;
   $236 = $380;
   $434 = $236;
   $435 = (($434) + 4|0);
   $436 = HEAP32[$435>>2]|0;
   $437 = (($436) + 4|0);
   $233 = $434;
   $234 = $437;
   $438 = $233;
   $439 = $234;
   ;HEAP8[$232+0>>0]=HEAP8[$235+0>>0]|0;
   $230 = $438;
   $231 = $439;
   $440 = $230;
   $441 = $231;
   $442 = (($440) + 4|0);
   HEAP32[$442>>2] = $441;
   $222 = $380;
   $223 = $__pt;
   $443 = $222;
   $444 = (($443) + 8|0);
   $445 = HEAP32[$444>>2]|0;
   $221 = $443;
   $446 = $221;
   $447 = (($446) + 12|0);
   $220 = $447;
   $448 = $220;
   $219 = $448;
   $449 = $219;
   $450 = HEAP32[$449>>2]|0;
   $451 = ($445|0)==($450|0);
   if ($451) {
    $452 = (($443) + 4|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = HEAP32[$443>>2]|0;
    $455 = ($453>>>0)>($454>>>0);
    if ($455) {
     $456 = (($443) + 4|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = HEAP32[$443>>2]|0;
     $459 = $457;
     $460 = $458;
     $461 = (($459) - ($460))|0;
     $462 = (($461|0) / 4)&-1;
     $__d$i16 = $462;
     $463 = $__d$i16;
     $464 = (($463) + 1)|0;
     $465 = (($464|0) / 2)&-1;
     $__d$i16 = $465;
     $466 = (($443) + 4|0);
     $467 = HEAP32[$466>>2]|0;
     $468 = (($443) + 8|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = (($443) + 4|0);
     $471 = HEAP32[$470>>2]|0;
     $472 = $__d$i16;
     $473 = (0 - ($472))|0;
     $474 = (($471) + ($473<<2)|0);
     $198 = $467;
     $199 = $469;
     $200 = $474;
     $475 = $198;
     $197 = $475;
     $476 = $197;
     $477 = $199;
     $192 = $477;
     $478 = $192;
     $479 = $200;
     $193 = $479;
     $480 = $193;
     $194 = $476;
     $195 = $478;
     $196 = $480;
     $481 = $195;
     $482 = $194;
     $483 = $481;
     $484 = $482;
     $485 = (($483) - ($484))|0;
     $486 = (($485|0) / 4)&-1;
     $__n$i$i$i15 = $486;
     $487 = $196;
     $488 = $194;
     $489 = $__n$i$i$i15;
     $490 = $489<<2;
     _memmove(($487|0),($488|0),($490|0))|0;
     $491 = $196;
     $492 = $__n$i$i$i15;
     $493 = (($491) + ($492<<2)|0);
     $494 = (($443) + 8|0);
     HEAP32[$494>>2] = $493;
     $495 = $__d$i16;
     $496 = (($443) + 4|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = (0 - ($495))|0;
     $499 = (($497) + ($498<<2)|0);
     HEAP32[$496>>2] = $499;
    } else {
     $191 = $443;
     $500 = $191;
     $501 = (($500) + 12|0);
     $190 = $501;
     $502 = $190;
     $189 = $502;
     $503 = $189;
     $504 = HEAP32[$503>>2]|0;
     $505 = HEAP32[$443>>2]|0;
     $506 = $504;
     $507 = $505;
     $508 = (($506) - ($507))|0;
     $509 = (($508|0) / 4)&-1;
     $510 = $509<<1;
     HEAP32[$224>>2] = $510;
     HEAP32[$225>>2] = 1;
     $160 = $224;
     $161 = $225;
     $511 = $160;
     $512 = $161;
     ;HEAP8[$159+0>>0]=HEAP8[$162+0>>0]|0;
     $157 = $511;
     $158 = $512;
     $513 = $157;
     $514 = $158;
     $154 = $159;
     $155 = $513;
     $156 = $514;
     $515 = $155;
     $516 = HEAP32[$515>>2]|0;
     $517 = $156;
     $518 = HEAP32[$517>>2]|0;
     $519 = ($516>>>0)<($518>>>0);
     if ($519) {
      $520 = $158;
      $523 = $520;
     } else {
      $521 = $157;
      $523 = $521;
     }
     $522 = HEAP32[$523>>2]|0;
     $__c$i17 = $522;
     $524 = $__c$i17;
     $525 = $__c$i17;
     $526 = (($525>>>0) / 4)&-1;
     $149 = $443;
     $527 = $149;
     $528 = (($527) + 12|0);
     $148 = $528;
     $529 = $148;
     $147 = $529;
     $530 = $147;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t$i18,$524,$526,$530);
     $531 = (($443) + 4|0);
     $532 = HEAP32[$531>>2]|0;
     $150 = $226;
     $151 = $532;
     $533 = $150;
     $534 = $151;
     HEAP32[$533>>2] = $534;
     $535 = (($443) + 8|0);
     $536 = HEAP32[$535>>2]|0;
     $152 = $229;
     $153 = $536;
     $537 = $152;
     $538 = $153;
     HEAP32[$537>>2] = $538;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$226+0>>2]|0;
     ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$229+0>>2]|0;
     invoke_viii(477,($__t$i18|0),($$byval_copy|0),($$byval_copy6|0));
     $539 = __THREW__; __THREW__ = 0;
     $540 = $539&1;
     if ($540) {
      label = 15;
      break;
     }
     $166 = $443;
     $167 = $__t$i18;
     $541 = $166;
     $165 = $541;
     $542 = $165;
     $543 = HEAP32[$542>>2]|0;
     HEAP32[$__t$i3$i11>>2] = $543;
     $544 = $167;
     $163 = $544;
     $545 = $163;
     $546 = HEAP32[$545>>2]|0;
     $547 = $166;
     HEAP32[$547>>2] = $546;
     $164 = $__t$i3$i11;
     $548 = $164;
     $549 = HEAP32[$548>>2]|0;
     $550 = $167;
     HEAP32[$550>>2] = $549;
     $551 = (($443) + 4|0);
     $552 = (($__t$i18) + 4|0);
     $171 = $551;
     $172 = $552;
     $553 = $171;
     $170 = $553;
     $554 = $170;
     $555 = HEAP32[$554>>2]|0;
     HEAP32[$__t$i2$i12>>2] = $555;
     $556 = $172;
     $168 = $556;
     $557 = $168;
     $558 = HEAP32[$557>>2]|0;
     $559 = $171;
     HEAP32[$559>>2] = $558;
     $169 = $__t$i2$i12;
     $560 = $169;
     $561 = HEAP32[$560>>2]|0;
     $562 = $172;
     HEAP32[$562>>2] = $561;
     $563 = (($443) + 8|0);
     $564 = (($__t$i18) + 8|0);
     $176 = $563;
     $177 = $564;
     $565 = $176;
     $175 = $565;
     $566 = $175;
     $567 = HEAP32[$566>>2]|0;
     HEAP32[$__t$i1$i13>>2] = $567;
     $568 = $177;
     $173 = $568;
     $569 = $173;
     $570 = HEAP32[$569>>2]|0;
     $571 = $176;
     HEAP32[$571>>2] = $570;
     $174 = $__t$i1$i13;
     $572 = $174;
     $573 = HEAP32[$572>>2]|0;
     $574 = $177;
     HEAP32[$574>>2] = $573;
     $180 = $443;
     $575 = $180;
     $576 = (($575) + 12|0);
     $179 = $576;
     $577 = $179;
     $178 = $577;
     $578 = $178;
     $183 = $__t$i18;
     $579 = $183;
     $580 = (($579) + 12|0);
     $182 = $580;
     $581 = $182;
     $181 = $581;
     $582 = $181;
     $187 = $578;
     $188 = $582;
     $583 = $187;
     $186 = $583;
     $584 = $186;
     $585 = HEAP32[$584>>2]|0;
     HEAP32[$__t$i$i14>>2] = $585;
     $586 = $188;
     $184 = $586;
     $587 = $184;
     $588 = HEAP32[$587>>2]|0;
     $589 = $187;
     HEAP32[$589>>2] = $588;
     $185 = $__t$i$i14;
     $590 = $185;
     $591 = HEAP32[$590>>2]|0;
     $592 = $188;
     HEAP32[$592>>2] = $591;
     __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i18);
    }
   }
   $203 = $443;
   $597 = $203;
   $598 = (($597) + 12|0);
   $202 = $598;
   $599 = $202;
   $201 = $599;
   $600 = $201;
   $601 = (($443) + 8|0);
   $602 = HEAP32[$601>>2]|0;
   $204 = $602;
   $603 = $204;
   $604 = $223;
   $215 = $600;
   $216 = $603;
   $217 = $604;
   $605 = $215;
   $606 = $216;
   $607 = $217;
   $214 = $607;
   $608 = $214;
   ;HEAP8[$213+0>>0]=HEAP8[$218+0>>0]|0;
   $210 = $605;
   $211 = $606;
   $212 = $608;
   $609 = $210;
   $610 = $211;
   $611 = $212;
   $209 = $611;
   $612 = $209;
   $206 = $609;
   $207 = $610;
   $208 = $612;
   $613 = $207;
   $614 = ($613|0)==(0|0);
   if (!($614)) {
    $615 = $208;
    $205 = $615;
    $616 = $205;
    $617 = HEAP32[$616>>2]|0;
    HEAP32[$613>>2] = $617;
   }
   $618 = (($443) + 8|0);
   $619 = HEAP32[$618>>2]|0;
   $620 = (($619) + 4|0);
   HEAP32[$618>>2] = $620;
   $621 = HEAP32[$__front_capacity>>2]|0;
   $622 = (($621) + -1)|0;
   HEAP32[$__front_capacity>>2] = $622;
  }
  if ((label|0) == 15) {
   $593 = ___cxa_find_matching_catch()|0;
   $594 = tempRet0;
   $227 = $593;
   $228 = $594;
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i18);
   $595 = $227;
   $596 = $228;
   ___resumeException($595|0);
   // unreachable;
  }
  STACKTOP = sp;return;
 }
 $623 = HEAP32[$__nb>>2]|0;
 $146 = $380;
 $624 = $146;
 $145 = $624;
 $625 = $145;
 $626 = (($625) + 12|0);
 $144 = $626;
 $627 = $144;
 $143 = $627;
 $628 = $143;
 $629 = HEAP32[$628>>2]|0;
 $630 = HEAP32[$624>>2]|0;
 $631 = $629;
 $632 = $630;
 $633 = (($631) - ($632))|0;
 $634 = (($633|0) / 4)&-1;
 $142 = $380;
 $635 = $142;
 $636 = (($635) + 8|0);
 $637 = HEAP32[$636>>2]|0;
 $638 = (($635) + 4|0);
 $639 = HEAP32[$638>>2]|0;
 $640 = $637;
 $641 = $639;
 $642 = (($640) - ($641))|0;
 $643 = (($642|0) / 4)&-1;
 $644 = (($634) - ($643))|0;
 $645 = ($623>>>0)<=($644>>>0);
 L31: do {
  if ($645) {
   while(1) {
    $646 = HEAP32[$__nb>>2]|0;
    $647 = ($646>>>0)>(0);
    if (!($647)) {
     break;
    }
    $141 = $380;
    $648 = $141;
    $140 = $648;
    $649 = $140;
    $650 = (($649) + 12|0);
    $139 = $650;
    $651 = $139;
    $138 = $651;
    $652 = $138;
    $653 = HEAP32[$652>>2]|0;
    $654 = (($648) + 8|0);
    $655 = HEAP32[$654>>2]|0;
    $656 = $653;
    $657 = $655;
    $658 = (($656) - ($657))|0;
    $659 = (($658|0) / 4)&-1;
    $660 = ($659|0)==(0);
    if ($660) {
     label = 26;
     break;
    }
    $661 = $__a;
    $136 = $661;
    $137 = 1024;
    $662 = $136;
    $663 = $137;
    $133 = $662;
    $134 = $663;
    $135 = 0;
    $664 = $134;
    $665 = $664<<2;
    $132 = $665;
    $666 = $132;
    $667 = (__Znwj($666)|0);
    HEAP32[$373>>2] = $667;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE9push_backEOS6_($380,$373);
    $668 = HEAP32[$__nb>>2]|0;
    $669 = (($668) + -1)|0;
    HEAP32[$__nb>>2] = $669;
   }
   if ((label|0) == 26) {
   }
   while(1) {
    $670 = HEAP32[$__nb>>2]|0;
    $671 = ($670>>>0)>(0);
    if (!($671)) {
     break;
    }
    $672 = $__a;
    $130 = $672;
    $131 = 1024;
    $673 = $130;
    $674 = $131;
    $127 = $673;
    $128 = $674;
    $129 = 0;
    $675 = $128;
    $676 = $675<<2;
    $126 = $676;
    $677 = $126;
    $678 = (__Znwj($677)|0);
    HEAP32[$374>>2] = $678;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEENS_9allocatorIS6_EEE10push_frontEOS6_($380,$374);
    $679 = HEAP32[$__nb>>2]|0;
    $680 = (($679) + -1)|0;
    HEAP32[$__nb>>2] = $680;
    $681 = HEAP32[$__front_capacity>>2]|0;
    $682 = (($681) + 1)|0;
    HEAP32[$__front_capacity>>2] = $682;
    $125 = $380;
    $683 = $125;
    $684 = (($683) + 8|0);
    $685 = HEAP32[$684>>2]|0;
    $686 = (($683) + 4|0);
    $687 = HEAP32[$686>>2]|0;
    $688 = $685;
    $689 = $687;
    $690 = (($688) - ($689))|0;
    $691 = (($690|0) / 4)&-1;
    $692 = ($691|0)==(1);
    $693 = $692&1;
    $694 = (1024 - ($693))|0;
    $695 = (($380) + 16|0);
    $696 = HEAP32[$695>>2]|0;
    $697 = (($696) + ($694))|0;
    HEAP32[$695>>2] = $697;
   }
   $698 = HEAP32[$__front_capacity>>2]|0;
   $699 = $698<<10;
   $700 = (($380) + 16|0);
   $701 = HEAP32[$700>>2]|0;
   $702 = (($701) - ($699))|0;
   HEAP32[$700>>2] = $702;
   while(1) {
    $703 = HEAP32[$__front_capacity>>2]|0;
    $704 = ($703>>>0)>(0);
    if (!($704)) {
     label = 49;
     break;
    }
    $124 = $380;
    $705 = $124;
    $706 = (($705) + 4|0);
    $707 = HEAP32[$706>>2]|0;
    $708 = HEAP32[$707>>2]|0;
    HEAP32[$__pt1>>2] = $708;
    $115 = $380;
    $709 = $115;
    $710 = (($709) + 4|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (($711) + 4|0);
    $112 = $709;
    $113 = $712;
    $713 = $112;
    $714 = $113;
    ;HEAP8[$111+0>>0]=HEAP8[$114+0>>0]|0;
    $109 = $713;
    $110 = $714;
    $715 = $109;
    $716 = $110;
    $717 = (($715) + 4|0);
    HEAP32[$717>>2] = $716;
    $99 = $380;
    $100 = $__pt1;
    $718 = $99;
    $719 = (($718) + 8|0);
    $720 = HEAP32[$719>>2]|0;
    $98 = $718;
    $721 = $98;
    $722 = (($721) + 12|0);
    $97 = $722;
    $723 = $97;
    $96 = $723;
    $724 = $96;
    $725 = HEAP32[$724>>2]|0;
    $726 = ($720|0)==($725|0);
    if ($726) {
     $727 = (($718) + 4|0);
     $728 = HEAP32[$727>>2]|0;
     $729 = HEAP32[$718>>2]|0;
     $730 = ($728>>>0)>($729>>>0);
     if ($730) {
      $731 = (($718) + 4|0);
      $732 = HEAP32[$731>>2]|0;
      $733 = HEAP32[$718>>2]|0;
      $734 = $732;
      $735 = $733;
      $736 = (($734) - ($735))|0;
      $737 = (($736|0) / 4)&-1;
      $__d$i31 = $737;
      $738 = $__d$i31;
      $739 = (($738) + 1)|0;
      $740 = (($739|0) / 2)&-1;
      $__d$i31 = $740;
      $741 = (($718) + 4|0);
      $742 = HEAP32[$741>>2]|0;
      $743 = (($718) + 8|0);
      $744 = HEAP32[$743>>2]|0;
      $745 = (($718) + 4|0);
      $746 = HEAP32[$745>>2]|0;
      $747 = $__d$i31;
      $748 = (0 - ($747))|0;
      $749 = (($746) + ($748<<2)|0);
      $75 = $742;
      $76 = $744;
      $77 = $749;
      $750 = $75;
      $74 = $750;
      $751 = $74;
      $752 = $76;
      $69 = $752;
      $753 = $69;
      $754 = $77;
      $70 = $754;
      $755 = $70;
      $71 = $751;
      $72 = $753;
      $73 = $755;
      $756 = $72;
      $757 = $71;
      $758 = $756;
      $759 = $757;
      $760 = (($758) - ($759))|0;
      $761 = (($760|0) / 4)&-1;
      $__n$i$i$i30 = $761;
      $762 = $73;
      $763 = $71;
      $764 = $__n$i$i$i30;
      $765 = $764<<2;
      _memmove(($762|0),($763|0),($765|0))|0;
      $766 = $73;
      $767 = $__n$i$i$i30;
      $768 = (($766) + ($767<<2)|0);
      $769 = (($718) + 8|0);
      HEAP32[$769>>2] = $768;
      $770 = $__d$i31;
      $771 = (($718) + 4|0);
      $772 = HEAP32[$771>>2]|0;
      $773 = (0 - ($770))|0;
      $774 = (($772) + ($773<<2)|0);
      HEAP32[$771>>2] = $774;
     } else {
      $68 = $718;
      $775 = $68;
      $776 = (($775) + 12|0);
      $67 = $776;
      $777 = $67;
      $66 = $777;
      $778 = $66;
      $779 = HEAP32[$778>>2]|0;
      $780 = HEAP32[$718>>2]|0;
      $781 = $779;
      $782 = $780;
      $783 = (($781) - ($782))|0;
      $784 = (($783|0) / 4)&-1;
      $785 = $784<<1;
      HEAP32[$101>>2] = $785;
      HEAP32[$102>>2] = 1;
      $37 = $101;
      $38 = $102;
      $786 = $37;
      $787 = $38;
      ;HEAP8[$36+0>>0]=HEAP8[$39+0>>0]|0;
      $34 = $786;
      $35 = $787;
      $788 = $34;
      $789 = $35;
      $31 = $36;
      $32 = $788;
      $33 = $789;
      $790 = $32;
      $791 = HEAP32[$790>>2]|0;
      $792 = $33;
      $793 = HEAP32[$792>>2]|0;
      $794 = ($791>>>0)<($793>>>0);
      if ($794) {
       $795 = $35;
       $798 = $795;
      } else {
       $796 = $34;
       $798 = $796;
      }
      $797 = HEAP32[$798>>2]|0;
      $__c$i32 = $797;
      $799 = $__c$i32;
      $800 = $__c$i32;
      $801 = (($800>>>0) / 4)&-1;
      $26 = $718;
      $802 = $26;
      $803 = (($802) + 12|0);
      $25 = $803;
      $804 = $25;
      $24 = $804;
      $805 = $24;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__t$i33,$799,$801,$805);
      $806 = (($718) + 4|0);
      $807 = HEAP32[$806>>2]|0;
      $27 = $103;
      $28 = $807;
      $808 = $27;
      $809 = $28;
      HEAP32[$808>>2] = $809;
      $810 = (($718) + 8|0);
      $811 = HEAP32[$810>>2]|0;
      $29 = $106;
      $30 = $811;
      $812 = $29;
      $813 = $30;
      HEAP32[$812>>2] = $813;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$103+0>>2]|0;
      ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$106+0>>2]|0;
      invoke_viii(477,($__t$i33|0),($$byval_copy7|0),($$byval_copy8|0));
      $814 = __THREW__; __THREW__ = 0;
      $815 = $814&1;
      if ($815) {
       label = 43;
       break;
      }
      $43 = $718;
      $44 = $__t$i33;
      $816 = $43;
      $42 = $816;
      $817 = $42;
      $818 = HEAP32[$817>>2]|0;
      HEAP32[$__t$i3$i26>>2] = $818;
      $819 = $44;
      $40 = $819;
      $820 = $40;
      $821 = HEAP32[$820>>2]|0;
      $822 = $43;
      HEAP32[$822>>2] = $821;
      $41 = $__t$i3$i26;
      $823 = $41;
      $824 = HEAP32[$823>>2]|0;
      $825 = $44;
      HEAP32[$825>>2] = $824;
      $826 = (($718) + 4|0);
      $827 = (($__t$i33) + 4|0);
      $48 = $826;
      $49 = $827;
      $828 = $48;
      $47 = $828;
      $829 = $47;
      $830 = HEAP32[$829>>2]|0;
      HEAP32[$__t$i2$i27>>2] = $830;
      $831 = $49;
      $45 = $831;
      $832 = $45;
      $833 = HEAP32[$832>>2]|0;
      $834 = $48;
      HEAP32[$834>>2] = $833;
      $46 = $__t$i2$i27;
      $835 = $46;
      $836 = HEAP32[$835>>2]|0;
      $837 = $49;
      HEAP32[$837>>2] = $836;
      $838 = (($718) + 8|0);
      $839 = (($__t$i33) + 8|0);
      $53 = $838;
      $54 = $839;
      $840 = $53;
      $52 = $840;
      $841 = $52;
      $842 = HEAP32[$841>>2]|0;
      HEAP32[$__t$i1$i28>>2] = $842;
      $843 = $54;
      $50 = $843;
      $844 = $50;
      $845 = HEAP32[$844>>2]|0;
      $846 = $53;
      HEAP32[$846>>2] = $845;
      $51 = $__t$i1$i28;
      $847 = $51;
      $848 = HEAP32[$847>>2]|0;
      $849 = $54;
      HEAP32[$849>>2] = $848;
      $57 = $718;
      $850 = $57;
      $851 = (($850) + 12|0);
      $56 = $851;
      $852 = $56;
      $55 = $852;
      $853 = $55;
      $60 = $__t$i33;
      $854 = $60;
      $855 = (($854) + 12|0);
      $59 = $855;
      $856 = $59;
      $58 = $856;
      $857 = $58;
      $64 = $853;
      $65 = $857;
      $858 = $64;
      $63 = $858;
      $859 = $63;
      $860 = HEAP32[$859>>2]|0;
      HEAP32[$__t$i$i29>>2] = $860;
      $861 = $65;
      $61 = $861;
      $862 = $61;
      $863 = HEAP32[$862>>2]|0;
      $864 = $64;
      HEAP32[$864>>2] = $863;
      $62 = $__t$i$i29;
      $865 = $62;
      $866 = HEAP32[$865>>2]|0;
      $867 = $65;
      HEAP32[$867>>2] = $866;
      __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i33);
     }
    }
    $80 = $718;
    $872 = $80;
    $873 = (($872) + 12|0);
    $79 = $873;
    $874 = $79;
    $78 = $874;
    $875 = $78;
    $876 = (($718) + 8|0);
    $877 = HEAP32[$876>>2]|0;
    $81 = $877;
    $878 = $81;
    $879 = $100;
    $92 = $875;
    $93 = $878;
    $94 = $879;
    $880 = $92;
    $881 = $93;
    $882 = $94;
    $91 = $882;
    $883 = $91;
    ;HEAP8[$90+0>>0]=HEAP8[$95+0>>0]|0;
    $87 = $880;
    $88 = $881;
    $89 = $883;
    $884 = $87;
    $885 = $88;
    $886 = $89;
    $86 = $886;
    $887 = $86;
    $83 = $884;
    $84 = $885;
    $85 = $887;
    $888 = $84;
    $889 = ($888|0)==(0|0);
    if (!($889)) {
     $890 = $85;
     $82 = $890;
     $891 = $82;
     $892 = HEAP32[$891>>2]|0;
     HEAP32[$888>>2] = $892;
    }
    $893 = (($718) + 8|0);
    $894 = HEAP32[$893>>2]|0;
    $895 = (($894) + 4|0);
    HEAP32[$893>>2] = $895;
    $896 = HEAP32[$__front_capacity>>2]|0;
    $897 = (($896) + -1)|0;
    HEAP32[$__front_capacity>>2] = $897;
   }
   if ((label|0) == 43) {
    $868 = ___cxa_find_matching_catch()|0;
    $869 = tempRet0;
    $104 = $868;
    $105 = $869;
    __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i33);
    $870 = $104;
    $871 = $105;
    ___resumeException($870|0);
    // unreachable;
   }
   else if ((label|0) == 49) {
    break;
   }
  } else {
   $898 = HEAP32[$__front_capacity>>2]|0;
   $899 = $898<<10;
   $__ds = $899;
   $23 = $380;
   $900 = $23;
   $22 = $900;
   $901 = $22;
   $902 = (($901) + 12|0);
   $21 = $902;
   $903 = $21;
   $20 = $903;
   $904 = $20;
   $905 = HEAP32[$904>>2]|0;
   $906 = HEAP32[$900>>2]|0;
   $907 = $905;
   $908 = $906;
   $909 = (($907) - ($908))|0;
   $910 = (($909|0) / 4)&-1;
   $911 = $910<<1;
   HEAP32[$375>>2] = $911;
   $912 = HEAP32[$__nb>>2]|0;
   $19 = $380;
   $913 = $19;
   $914 = (($913) + 8|0);
   $915 = HEAP32[$914>>2]|0;
   $916 = (($913) + 4|0);
   $917 = HEAP32[$916>>2]|0;
   $918 = $915;
   $919 = $917;
   $920 = (($918) - ($919))|0;
   $921 = (($920|0) / 4)&-1;
   $922 = (($912) + ($921))|0;
   HEAP32[$376>>2] = $922;
   $16 = $375;
   $17 = $376;
   $923 = $16;
   $924 = $17;
   ;HEAP8[$15+0>>0]=HEAP8[$18+0>>0]|0;
   $13 = $923;
   $14 = $924;
   $925 = $13;
   $926 = $14;
   $10 = $15;
   $11 = $925;
   $12 = $926;
   $927 = $11;
   $928 = HEAP32[$927>>2]|0;
   $929 = $12;
   $930 = HEAP32[$929>>2]|0;
   $931 = ($928>>>0)<($930>>>0);
   if ($931) {
    $932 = $14;
    $935 = $932;
   } else {
    $933 = $13;
    $935 = $933;
   }
   $934 = HEAP32[$935>>2]|0;
   $9 = $380;
   $936 = $9;
   $937 = (($936) + 8|0);
   $938 = HEAP32[$937>>2]|0;
   $939 = (($936) + 4|0);
   $940 = HEAP32[$939>>2]|0;
   $941 = $938;
   $942 = $940;
   $943 = (($941) - ($942))|0;
   $944 = (($943|0) / 4)&-1;
   $945 = HEAP32[$__front_capacity>>2]|0;
   $946 = (($944) - ($945))|0;
   $2 = $380;
   $947 = $2;
   $948 = (($947) + 12|0);
   $1 = $948;
   $949 = $1;
   $0 = $949;
   $950 = $0;
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_($__buf,$934,$946,$950);
   while(1) {
    $951 = HEAP32[$__nb>>2]|0;
    $952 = ($951>>>0)>(0);
    if (!($952)) {
     label = 65;
     break;
    }
    $953 = $__a;
    $7 = $953;
    $8 = 1024;
    $954 = $7;
    $955 = $8;
    $4 = $954;
    $5 = $955;
    $6 = 0;
    $956 = $5;
    $957 = $956<<2;
    $3 = $957;
    $958 = $3;
    __THREW__ = 0;
    $959 = (invoke_ii(430,($958|0))|0);
    $960 = __THREW__; __THREW__ = 0;
    $961 = $960&1;
    if ($961) {
     label = 60;
     break;
    }
    HEAP32[$377>>2] = $959;
    __THREW__ = 0;
    invoke_vii(478,($__buf|0),($377|0));
    $962 = __THREW__; __THREW__ = 0;
    $963 = $962&1;
    if ($963) {
     label = 60;
     break;
    }
    $964 = HEAP32[$__nb>>2]|0;
    $965 = (($964) + -1)|0;
    HEAP32[$__nb>>2] = $965;
   }
   do {
    if ((label|0) == 60) {
     $966 = ___cxa_find_matching_catch(0|0)|0;
     $967 = tempRet0;
     $378 = $966;
     $379 = $967;
     $968 = $378;
     (___cxa_begin_catch(($968|0))|0);
     $107 = $__buf;
     $969 = $107;
     $970 = (($969) + 4|0);
     $971 = HEAP32[$970>>2]|0;
     $__i = $971;
     while(1) {
      $972 = $__i;
      $108 = $__buf;
      $973 = $108;
      $974 = (($973) + 8|0);
      $975 = HEAP32[$974>>2]|0;
      $976 = ($972|0)!=($975|0);
      if (!($976)) {
       break;
      }
      $977 = $__a;
      $978 = $__i;
      $979 = HEAP32[$978>>2]|0;
      $120 = $977;
      $121 = $979;
      $122 = 1024;
      $980 = $120;
      $981 = $121;
      $982 = $122;
      $117 = $980;
      $118 = $981;
      $119 = $982;
      $983 = $118;
      $116 = $983;
      $984 = $116;
      __ZdlPv($984);
      $985 = $__i;
      $986 = (($985) + 4|0);
      $__i = $986;
     }
     __THREW__ = 0;
     invoke_v(479);
     $987 = __THREW__; __THREW__ = 0;
     $988 = $987&1;
     if (!($988)) {
      // unreachable;
     }
     $989 = ___cxa_find_matching_catch()|0;
     $990 = tempRet0;
     $378 = $989;
     $379 = $990;
     __THREW__ = 0;
     invoke_v(480);
     $991 = __THREW__; __THREW__ = 0;
     $992 = $991&1;
     if ($992) {
      $1265 = ___cxa_find_matching_catch(0|0)|0;
      $1266 = tempRet0;
      ___clang_call_terminate($1265);
      // unreachable;
     } else {
      break;
     }
    }
    else if ((label|0) == 65) {
     while(1) {
      $993 = HEAP32[$__front_capacity>>2]|0;
      $994 = ($993>>>0)>(0);
      if (!($994)) {
       label = 91;
       break;
      }
      $123 = $380;
      $995 = $123;
      $996 = (($995) + 4|0);
      $997 = HEAP32[$996>>2]|0;
      $313 = $__buf;
      $314 = $997;
      $998 = $313;
      $999 = (($998) + 8|0);
      $1000 = HEAP32[$999>>2]|0;
      $312 = $998;
      $1001 = $312;
      $1002 = (($1001) + 12|0);
      $311 = $1002;
      $1003 = $311;
      $310 = $1003;
      $1004 = $310;
      $1005 = HEAP32[$1004>>2]|0;
      $1006 = ($1000|0)==($1005|0);
      if ($1006) {
       $1007 = (($998) + 4|0);
       $1008 = HEAP32[$1007>>2]|0;
       $1009 = HEAP32[$998>>2]|0;
       $1010 = ($1008>>>0)>($1009>>>0);
       if ($1010) {
        $1011 = (($998) + 4|0);
        $1012 = HEAP32[$1011>>2]|0;
        $1013 = HEAP32[$998>>2]|0;
        $1014 = $1012;
        $1015 = $1013;
        $1016 = (($1014) - ($1015))|0;
        $1017 = (($1016|0) / 4)&-1;
        $__d$i = $1017;
        $1018 = $__d$i;
        $1019 = (($1018) + 1)|0;
        $1020 = (($1019|0) / 2)&-1;
        $__d$i = $1020;
        $1021 = (($998) + 4|0);
        $1022 = HEAP32[$1021>>2]|0;
        $1023 = (($998) + 8|0);
        $1024 = HEAP32[$1023>>2]|0;
        $1025 = (($998) + 4|0);
        $1026 = HEAP32[$1025>>2]|0;
        $1027 = $__d$i;
        $1028 = (0 - ($1027))|0;
        $1029 = (($1026) + ($1028<<2)|0);
        $289 = $1022;
        $290 = $1024;
        $291 = $1029;
        $1030 = $289;
        $288 = $1030;
        $1031 = $288;
        $1032 = $290;
        $283 = $1032;
        $1033 = $283;
        $1034 = $291;
        $284 = $1034;
        $1035 = $284;
        $285 = $1031;
        $286 = $1033;
        $287 = $1035;
        $1036 = $286;
        $1037 = $285;
        $1038 = $1036;
        $1039 = $1037;
        $1040 = (($1038) - ($1039))|0;
        $1041 = (($1040|0) / 4)&-1;
        $__n$i$i$i = $1041;
        $1042 = $287;
        $1043 = $285;
        $1044 = $__n$i$i$i;
        $1045 = $1044<<2;
        _memmove(($1042|0),($1043|0),($1045|0))|0;
        $1046 = $287;
        $1047 = $__n$i$i$i;
        $1048 = (($1046) + ($1047<<2)|0);
        $1049 = (($998) + 8|0);
        HEAP32[$1049>>2] = $1048;
        $1050 = $__d$i;
        $1051 = (($998) + 4|0);
        $1052 = HEAP32[$1051>>2]|0;
        $1053 = (0 - ($1050))|0;
        $1054 = (($1052) + ($1053<<2)|0);
        HEAP32[$1051>>2] = $1054;
       } else {
        $282 = $998;
        $1055 = $282;
        $1056 = (($1055) + 12|0);
        $281 = $1056;
        $1057 = $281;
        $280 = $1057;
        $1058 = $280;
        $1059 = HEAP32[$1058>>2]|0;
        $1060 = HEAP32[$998>>2]|0;
        $1061 = $1059;
        $1062 = $1060;
        $1063 = (($1061) - ($1062))|0;
        $1064 = (($1063|0) / 4)&-1;
        $1065 = $1064<<1;
        HEAP32[$315>>2] = $1065;
        HEAP32[$316>>2] = 1;
        $251 = $315;
        $252 = $316;
        $1066 = $251;
        $1067 = $252;
        ;HEAP8[$250+0>>0]=HEAP8[$253+0>>0]|0;
        $248 = $1066;
        $249 = $1067;
        $1068 = $248;
        $1069 = $249;
        $245 = $250;
        $246 = $1068;
        $247 = $1069;
        $1070 = $246;
        $1071 = HEAP32[$1070>>2]|0;
        $1072 = $247;
        $1073 = HEAP32[$1072>>2]|0;
        $1074 = ($1071>>>0)<($1073>>>0);
        if ($1074) {
         $1075 = $249;
         $1078 = $1075;
        } else {
         $1076 = $248;
         $1078 = $1076;
        }
        $1077 = HEAP32[$1078>>2]|0;
        $__c$i = $1077;
        $1079 = $__c$i;
        $1080 = $__c$i;
        $1081 = (($1080>>>0) / 4)&-1;
        $240 = $998;
        $1082 = $240;
        $1083 = (($1082) + 12|0);
        $239 = $1083;
        $1084 = $239;
        $238 = $1084;
        $1085 = $238;
        $1086 = (($1085) + 4|0);
        $1087 = HEAP32[$1086>>2]|0;
        __THREW__ = 0;
        invoke_viiii(482,($__t$i6|0),($1079|0),($1081|0),($1087|0));
        $1088 = __THREW__; __THREW__ = 0;
        $1089 = $1088&1;
        if ($1089) {
         label = 89;
         break;
        }
        $1090 = (($998) + 4|0);
        $1091 = HEAP32[$1090>>2]|0;
        $241 = $317;
        $242 = $1091;
        $1092 = $241;
        $1093 = $242;
        HEAP32[$1092>>2] = $1093;
        $1094 = (($998) + 8|0);
        $1095 = HEAP32[$1094>>2]|0;
        $243 = $320;
        $244 = $1095;
        $1096 = $243;
        $1097 = $244;
        HEAP32[$1096>>2] = $1097;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$317+0>>2]|0;
        ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$320+0>>2]|0;
        invoke_viii(477,($__t$i6|0),($$byval_copy9|0),($$byval_copy10|0));
        $1098 = __THREW__; __THREW__ = 0;
        $1099 = $1098&1;
        if ($1099) {
         label = 81;
         break;
        }
        $257 = $998;
        $258 = $__t$i6;
        $1100 = $257;
        $256 = $1100;
        $1101 = $256;
        $1102 = HEAP32[$1101>>2]|0;
        HEAP32[$__t$i3$i>>2] = $1102;
        $1103 = $258;
        $254 = $1103;
        $1104 = $254;
        $1105 = HEAP32[$1104>>2]|0;
        $1106 = $257;
        HEAP32[$1106>>2] = $1105;
        $255 = $__t$i3$i;
        $1107 = $255;
        $1108 = HEAP32[$1107>>2]|0;
        $1109 = $258;
        HEAP32[$1109>>2] = $1108;
        $1110 = (($998) + 4|0);
        $1111 = (($__t$i6) + 4|0);
        $262 = $1110;
        $263 = $1111;
        $1112 = $262;
        $261 = $1112;
        $1113 = $261;
        $1114 = HEAP32[$1113>>2]|0;
        HEAP32[$__t$i2$i>>2] = $1114;
        $1115 = $263;
        $259 = $1115;
        $1116 = $259;
        $1117 = HEAP32[$1116>>2]|0;
        $1118 = $262;
        HEAP32[$1118>>2] = $1117;
        $260 = $__t$i2$i;
        $1119 = $260;
        $1120 = HEAP32[$1119>>2]|0;
        $1121 = $263;
        HEAP32[$1121>>2] = $1120;
        $1122 = (($998) + 8|0);
        $1123 = (($__t$i6) + 8|0);
        $267 = $1122;
        $268 = $1123;
        $1124 = $267;
        $266 = $1124;
        $1125 = $266;
        $1126 = HEAP32[$1125>>2]|0;
        HEAP32[$__t$i1$i>>2] = $1126;
        $1127 = $268;
        $264 = $1127;
        $1128 = $264;
        $1129 = HEAP32[$1128>>2]|0;
        $1130 = $267;
        HEAP32[$1130>>2] = $1129;
        $265 = $__t$i1$i;
        $1131 = $265;
        $1132 = HEAP32[$1131>>2]|0;
        $1133 = $268;
        HEAP32[$1133>>2] = $1132;
        $271 = $998;
        $1134 = $271;
        $1135 = (($1134) + 12|0);
        $270 = $1135;
        $1136 = $270;
        $269 = $1136;
        $1137 = $269;
        $274 = $__t$i6;
        $1138 = $274;
        $1139 = (($1138) + 12|0);
        $273 = $1139;
        $1140 = $273;
        $272 = $1140;
        $1141 = $272;
        $278 = $1137;
        $279 = $1141;
        $1142 = $278;
        $277 = $1142;
        $1143 = $277;
        $1144 = HEAP32[$1143>>2]|0;
        HEAP32[$__t$i$i>>2] = $1144;
        $1145 = $279;
        $275 = $1145;
        $1146 = $275;
        $1147 = HEAP32[$1146>>2]|0;
        $1148 = $278;
        HEAP32[$1148>>2] = $1147;
        $276 = $__t$i$i;
        $1149 = $276;
        $1150 = HEAP32[$1149>>2]|0;
        $1151 = $279;
        HEAP32[$1151>>2] = $1150;
        __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i6);
       }
      }
      $294 = $998;
      $1156 = $294;
      $1157 = (($1156) + 12|0);
      $293 = $1157;
      $1158 = $293;
      $292 = $1158;
      $1159 = $292;
      $1160 = (($1159) + 4|0);
      $1161 = HEAP32[$1160>>2]|0;
      $1162 = (($998) + 8|0);
      $1163 = HEAP32[$1162>>2]|0;
      $295 = $1163;
      $1164 = $295;
      $1165 = $314;
      $306 = $1161;
      $307 = $1164;
      $308 = $1165;
      $1166 = $306;
      $1167 = $307;
      $1168 = $308;
      $305 = $1168;
      $1169 = $305;
      ;HEAP8[$304+0>>0]=HEAP8[$309+0>>0]|0;
      $301 = $1166;
      $302 = $1167;
      $303 = $1169;
      $1170 = $301;
      $1171 = $302;
      $1172 = $303;
      $300 = $1172;
      $1173 = $300;
      $297 = $1170;
      $298 = $1171;
      $299 = $1173;
      $1174 = $298;
      $1175 = ($1174|0)==(0|0);
      if (!($1175)) {
       $1176 = $299;
       $296 = $1176;
       $1177 = $296;
       $1178 = HEAP32[$1177>>2]|0;
       HEAP32[$1174>>2] = $1178;
      }
      $1179 = (($998) + 8|0);
      $1180 = HEAP32[$1179>>2]|0;
      $1181 = (($1180) + 4|0);
      HEAP32[$1179>>2] = $1181;
      $327 = $380;
      $1182 = $327;
      $1183 = (($1182) + 4|0);
      $1184 = HEAP32[$1183>>2]|0;
      $1185 = (($1184) + 4|0);
      $324 = $1182;
      $325 = $1185;
      $1186 = $324;
      $1187 = $325;
      ;HEAP8[$323+0>>0]=HEAP8[$326+0>>0]|0;
      $321 = $1186;
      $322 = $1187;
      $1188 = $321;
      $1189 = $322;
      $1190 = (($1188) + 4|0);
      HEAP32[$1190>>2] = $1189;
      $1191 = HEAP32[$__front_capacity>>2]|0;
      $1192 = (($1191) + -1)|0;
      HEAP32[$__front_capacity>>2] = $1192;
     }
     L119: do {
      if ((label|0) == 81) {
       $1152 = ___cxa_find_matching_catch()|0;
       $1153 = tempRet0;
       $318 = $1152;
       $319 = $1153;
       __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__t$i6);
       $1154 = $318;
       $1155 = $319;
       $eh$lpad$body$index2Z2D = $1155;$eh$lpad$body$indexZ2D = $1154;
      }
      else if ((label|0) == 91) {
       $328 = $380;
       $1195 = $328;
       $1196 = (($1195) + 8|0);
       $1197 = HEAP32[$1196>>2]|0;
       $__i2 = $1197;
       while(1) {
        $1198 = $__i2;
        $329 = $380;
        $1199 = $329;
        $1200 = (($1199) + 4|0);
        $1201 = HEAP32[$1200>>2]|0;
        $1202 = ($1198|0)!=($1201|0);
        if (!($1202)) {
         break;
        }
        $1203 = $__i2;
        $1204 = (($1203) + -4|0);
        $__i2 = $1204;
        __THREW__ = 0;
        invoke_vii(481,($__buf|0),($1204|0));
        $1205 = __THREW__; __THREW__ = 0;
        $1206 = $1205&1;
        if ($1206) {
         label = 89;
         break L119;
        }
       }
       $342 = $380;
       $343 = $__buf;
       $1207 = $342;
       $341 = $1207;
       $1208 = $341;
       $1209 = HEAP32[$1208>>2]|0;
       HEAP32[$__t$i5>>2] = $1209;
       $1210 = $343;
       $339 = $1210;
       $1211 = $339;
       $1212 = HEAP32[$1211>>2]|0;
       $1213 = $342;
       HEAP32[$1213>>2] = $1212;
       $340 = $__t$i5;
       $1214 = $340;
       $1215 = HEAP32[$1214>>2]|0;
       $1216 = $343;
       HEAP32[$1216>>2] = $1215;
       $1217 = (($380) + 4|0);
       $1218 = (($__buf) + 4|0);
       $347 = $1217;
       $348 = $1218;
       $1219 = $347;
       $346 = $1219;
       $1220 = $346;
       $1221 = HEAP32[$1220>>2]|0;
       HEAP32[$__t$i4>>2] = $1221;
       $1222 = $348;
       $344 = $1222;
       $1223 = $344;
       $1224 = HEAP32[$1223>>2]|0;
       $1225 = $347;
       HEAP32[$1225>>2] = $1224;
       $345 = $__t$i4;
       $1226 = $345;
       $1227 = HEAP32[$1226>>2]|0;
       $1228 = $348;
       HEAP32[$1228>>2] = $1227;
       $1229 = (($380) + 8|0);
       $1230 = (($__buf) + 8|0);
       $352 = $1229;
       $353 = $1230;
       $1231 = $352;
       $351 = $1231;
       $1232 = $351;
       $1233 = HEAP32[$1232>>2]|0;
       HEAP32[$__t$i3>>2] = $1233;
       $1234 = $353;
       $349 = $1234;
       $1235 = $349;
       $1236 = HEAP32[$1235>>2]|0;
       $1237 = $352;
       HEAP32[$1237>>2] = $1236;
       $350 = $__t$i3;
       $1238 = $350;
       $1239 = HEAP32[$1238>>2]|0;
       $1240 = $353;
       HEAP32[$1240>>2] = $1239;
       $356 = $380;
       $1241 = $356;
       $1242 = (($1241) + 12|0);
       $355 = $1242;
       $1243 = $355;
       $354 = $1243;
       $1244 = $354;
       $359 = $__buf;
       $1245 = $359;
       $1246 = (($1245) + 12|0);
       $358 = $1246;
       $1247 = $358;
       $357 = $1247;
       $1248 = $357;
       $363 = $1244;
       $364 = $1248;
       $1249 = $363;
       $362 = $1249;
       $1250 = $362;
       $1251 = HEAP32[$1250>>2]|0;
       HEAP32[$__t$i>>2] = $1251;
       $1252 = $364;
       $360 = $1252;
       $1253 = $360;
       $1254 = HEAP32[$1253>>2]|0;
       $1255 = $363;
       HEAP32[$1255>>2] = $1254;
       $361 = $__t$i;
       $1256 = $361;
       $1257 = HEAP32[$1256>>2]|0;
       $1258 = $364;
       HEAP32[$1258>>2] = $1257;
       $1259 = $__ds;
       $1260 = (($380) + 16|0);
       $1261 = HEAP32[$1260>>2]|0;
       $1262 = (($1261) - ($1259))|0;
       HEAP32[$1260>>2] = $1262;
       __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
       break L31;
      }
     } while(0);
     if ((label|0) == 89) {
      $1193 = ___cxa_find_matching_catch()|0;
      $1194 = tempRet0;
      $eh$lpad$body$index2Z2D = $1194;$eh$lpad$body$indexZ2D = $1193;
     }
     $378 = $eh$lpad$body$indexZ2D;
     $379 = $eh$lpad$body$index2Z2D;
    }
   } while(0);
   __ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEED2Ev($__buf);
   $1263 = $378;
   $1264 = $379;
   ___resumeException($1263|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE31__annotate_contiguous_containerEPKvS9_S9_S9_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__111__sift_downIRZN7croutes10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEES7_NS4_INS1_6answerIdEEEEPNS_5dequeIPKNS1_8net_bondIdEENS_9allocatorISF_EEEENS_6vectorIbNSG_IbEEEESM_EUlRKPSD_SP_E_NS_11__wrap_iterIPSN_EEEEvT0_SV_T_NS_15iterator_traitsISV_E15difference_typeESV_($__first,$__last,$__comp,$__len,$__start) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 $__start = $__start|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__child_i = 0, $__top = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__child_i = sp + 16|0;
 $38 = sp + 12|0;
 $__top = sp + 8|0;
 $39 = sp + 4|0;
 $40 = sp;
 $36 = $__comp;
 $37 = $__len;
 $34 = $__start;
 $35 = $__first;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$42>>2]|0;
 $44 = $35;
 $32 = $44;
 $45 = $32;
 $46 = HEAP32[$45>>2]|0;
 $47 = $43;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $__child = $50;
 $51 = $37;
 $52 = ($51|0)<(2);
 if (!($52)) {
  $53 = $37;
  $54 = (($53) - 2)|0;
  $55 = (($54|0) / 2)&-1;
  $56 = $__child;
  $57 = ($55|0)<($56|0);
  if (!($57)) {
   $58 = $__child;
   $59 = $58<<1;
   $60 = (($59) + 1)|0;
   $__child = $60;
   $61 = $__child;
   $28 = $__first;
   $29 = $61;
   $62 = $28;
   ;HEAP32[$__child_i+0>>2]=HEAP32[$62+0>>2]|0;
   $63 = $29;
   $26 = $__child_i;
   $27 = $63;
   $64 = $26;
   $65 = $27;
   $66 = HEAP32[$64>>2]|0;
   $67 = (($66) + ($65<<2)|0);
   HEAP32[$64>>2] = $67;
   $68 = $__child;
   $69 = (($68) + 1)|0;
   $70 = $37;
   $71 = ($69|0)<($70|0);
   if ($71) {
    $72 = $36;
    $23 = $__child_i;
    $73 = $23;
    $74 = HEAP32[$73>>2]|0;
    $6 = $__child_i;
    $7 = 1;
    $75 = $6;
    ;HEAP32[$38+0>>2]=HEAP32[$75+0>>2]|0;
    $76 = $7;
    $4 = $38;
    $5 = $76;
    $77 = $4;
    $78 = $5;
    $79 = HEAP32[$77>>2]|0;
    $80 = (($79) + ($78<<2)|0);
    HEAP32[$77>>2] = $80;
    $0 = $38;
    $81 = $0;
    $82 = HEAP32[$81>>2]|0;
    $83 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($72,$74,$82)|0);
    if ($83) {
     $1 = $__child_i;
     $84 = $1;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 4|0);
     HEAP32[$84>>2] = $86;
     $87 = $__child;
     $88 = (($87) + 1)|0;
     $__child = $88;
    }
   }
   $89 = $36;
   $2 = $__child_i;
   $90 = $2;
   $91 = HEAP32[$90>>2]|0;
   $3 = $__start;
   $92 = $3;
   $93 = HEAP32[$92>>2]|0;
   $94 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($89,$91,$93)|0);
   if ($94) {
    STACKTOP = sp;return;
   }
   $8 = $__start;
   $95 = $8;
   $96 = HEAP32[$95>>2]|0;
   $9 = $96;
   $97 = $9;
   $98 = HEAP32[$97>>2]|0;
   HEAP32[$__top>>2] = $98;
   while(1) {
    $10 = $__child_i;
    $99 = $10;
    $100 = HEAP32[$99>>2]|0;
    $11 = $100;
    $101 = $11;
    $102 = HEAP32[$101>>2]|0;
    $12 = $__start;
    $103 = $12;
    $104 = HEAP32[$103>>2]|0;
    HEAP32[$104>>2] = $102;
    ;HEAP32[$__start+0>>2]=HEAP32[$__child_i+0>>2]|0;
    $105 = $37;
    $106 = (($105) - 2)|0;
    $107 = (($106|0) / 2)&-1;
    $108 = $__child;
    $109 = ($107|0)<($108|0);
    if ($109) {
     label = 11;
     break;
    }
    $110 = $__child;
    $111 = $110<<1;
    $112 = (($111) + 1)|0;
    $__child = $112;
    $113 = $__child;
    $15 = $__first;
    $16 = $113;
    $114 = $15;
    ;HEAP32[$39+0>>2]=HEAP32[$114+0>>2]|0;
    $115 = $16;
    $13 = $39;
    $14 = $115;
    $116 = $13;
    $117 = $14;
    $118 = HEAP32[$116>>2]|0;
    $119 = (($118) + ($117<<2)|0);
    HEAP32[$116>>2] = $119;
    ;HEAP32[$__child_i+0>>2]=HEAP32[$39+0>>2]|0;
    $120 = $__child;
    $121 = (($120) + 1)|0;
    $122 = $37;
    $123 = ($121|0)<($122|0);
    if ($123) {
     $124 = $36;
     $17 = $__child_i;
     $125 = $17;
     $126 = HEAP32[$125>>2]|0;
     $20 = $__child_i;
     $21 = 1;
     $127 = $20;
     ;HEAP32[$40+0>>2]=HEAP32[$127+0>>2]|0;
     $128 = $21;
     $18 = $40;
     $19 = $128;
     $129 = $18;
     $130 = $19;
     $131 = HEAP32[$129>>2]|0;
     $132 = (($131) + ($130<<2)|0);
     HEAP32[$129>>2] = $132;
     $22 = $40;
     $133 = $22;
     $134 = HEAP32[$133>>2]|0;
     $135 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($124,$126,$134)|0);
     if ($135) {
      $24 = $__child_i;
      $136 = $24;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($137) + 4|0);
      HEAP32[$136>>2] = $138;
      $139 = $__child;
      $140 = (($139) + 1)|0;
      $__child = $140;
     }
    }
    $141 = $36;
    $25 = $__child_i;
    $142 = $25;
    $143 = HEAP32[$142>>2]|0;
    $144 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($141,$143,$__top)|0);
    $145 = $144 ^ 1;
    if (!($145)) {
     break;
    }
   }
   if ((label|0) == 11) {
   }
   $30 = $__top;
   $146 = $30;
   $147 = HEAP32[$146>>2]|0;
   $31 = $__start;
   $148 = $31;
   $149 = HEAP32[$148>>2]|0;
   HEAP32[$149>>2] = $147;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($this,$lhs,$rhs) {
 $this = $this|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $lhs;
 $2 = $rhs;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN7croutes8net_bondIdE8distanceEv($4)|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $2;
 $8 = HEAP32[$7>>2]|0;
 $9 = (__ZN7croutes8net_bondIdE8distanceEv($8)|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $6 < $10;
 STACKTOP = sp;return ($11|0);
}
function __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEEC2EjjS7_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(473,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIPN7croutes8net_bondIdEERNS_9allocatorIS4_EEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__19__sift_upIRZN7croutes10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEES7_NS4_INS1_6answerIdEEEEPNS_5dequeIPKNS1_8net_bondIdEENS_9allocatorISF_EEEENS_6vectorIbNSG_IbEEEESM_EUlRKPSD_SP_E_NS_11__wrap_iterIPSN_EEEEvT0_SV_T_NS_15iterator_traitsISV_E15difference_typeE($__first,$__last,$__comp,$__len) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 $__len = $__len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__ptr = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ptr = sp + 8|0;
 $__t = sp + 4|0;
 $21 = sp;
 $19 = $__comp;
 $20 = $__len;
 $22 = $20;
 $23 = ($22|0)>(1);
 if (!($23)) {
  STACKTOP = sp;return;
 }
 $24 = $20;
 $25 = (($24) - 2)|0;
 $26 = (($25|0) / 2)&-1;
 $20 = $26;
 $27 = $20;
 $17 = $__first;
 $18 = $27;
 $28 = $17;
 ;HEAP32[$__ptr+0>>2]=HEAP32[$28+0>>2]|0;
 $29 = $18;
 $15 = $__ptr;
 $16 = $29;
 $30 = $15;
 $31 = $16;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<2)|0);
 HEAP32[$30>>2] = $33;
 $34 = $19;
 $12 = $__ptr;
 $35 = $12;
 $36 = HEAP32[$35>>2]|0;
 $1 = $__last;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + -4|0);
 HEAP32[$37>>2] = $39;
 $0 = $37;
 $40 = $0;
 $41 = HEAP32[$40>>2]|0;
 $42 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($34,$36,$41)|0);
 if ($42) {
  $2 = $__last;
  $43 = $2;
  $44 = HEAP32[$43>>2]|0;
  $3 = $44;
  $45 = $3;
  $46 = HEAP32[$45>>2]|0;
  HEAP32[$__t>>2] = $46;
  while(1) {
   $4 = $__ptr;
   $47 = $4;
   $48 = HEAP32[$47>>2]|0;
   $5 = $48;
   $49 = $5;
   $50 = HEAP32[$49>>2]|0;
   $6 = $__last;
   $51 = $6;
   $52 = HEAP32[$51>>2]|0;
   HEAP32[$52>>2] = $50;
   ;HEAP32[$__last+0>>2]=HEAP32[$__ptr+0>>2]|0;
   $53 = $20;
   $54 = ($53|0)==(0);
   if ($54) {
    label = 5;
    break;
   }
   $55 = $20;
   $56 = (($55) - 1)|0;
   $57 = (($56|0) / 2)&-1;
   $20 = $57;
   $58 = $20;
   $9 = $__first;
   $10 = $58;
   $59 = $9;
   ;HEAP32[$21+0>>2]=HEAP32[$59+0>>2]|0;
   $60 = $10;
   $7 = $21;
   $8 = $60;
   $61 = $7;
   $62 = $8;
   $63 = HEAP32[$61>>2]|0;
   $64 = (($63) + ($62<<2)|0);
   HEAP32[$61>>2] = $64;
   ;HEAP32[$__ptr+0>>2]=HEAP32[$21+0>>2]|0;
   $65 = $19;
   $11 = $__ptr;
   $66 = $11;
   $67 = HEAP32[$66>>2]|0;
   $68 = (__ZZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_ENKUlRKPSC_SO_E_clESO_SO_($65,$67,$__t)|0);
   if (!($68)) {
    break;
   }
  }
  if ((label|0) == 5) {
  }
  $13 = $__t;
  $69 = $13;
  $70 = HEAP32[$69>>2]|0;
  $14 = $__last;
  $71 = $14;
  $72 = HEAP32[$71>>2]|0;
  HEAP32[$72>>2] = $70;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110shared_ptrIN7croutes5ndataIdEEE11make_sharedIJRKS3_EEES4_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 144|0;
 $11 = sp + 136|0;
 $12 = sp + 128|0;
 $13 = sp + 120|0;
 $16 = sp + 706|0;
 $17 = sp + 705|0;
 $18 = sp + 704|0;
 $19 = sp + 703|0;
 $28 = sp + 112|0;
 $29 = sp + 104|0;
 $30 = sp + 96|0;
 $31 = sp + 88|0;
 $34 = sp + 702|0;
 $35 = sp + 701|0;
 $36 = sp + 700|0;
 $37 = sp + 699|0;
 $48 = sp + 80|0;
 $49 = sp + 72|0;
 $50 = sp + 64|0;
 $51 = sp + 56|0;
 $52 = sp + 48|0;
 $55 = sp + 698|0;
 $56 = sp + 552|0;
 $57 = sp + 548|0;
 $58 = sp + 697|0;
 $59 = sp + 696|0;
 $60 = sp + 40|0;
 $61 = sp + 32|0;
 $62 = sp + 24|0;
 $69 = sp + 695|0;
 $70 = sp + 520|0;
 $71 = sp + 516|0;
 $74 = sp + 16|0;
 $114 = sp + 340|0;
 $115 = sp + 8|0;
 $118 = sp + 328|0;
 $119 = sp + 320|0;
 $120 = sp;
 $125 = sp + 296|0;
 $__a2 = sp + 694|0;
 $__hold2 = sp + 168|0;
 $153 = sp + 160|0;
 $154 = sp + 693|0;
 $152 = $__args;
 $151 = $__a2;
 $130 = $__a2;
 $131 = 1;
 $132 = 0;
 $159 = $131;
 $160 = ($159*40)|0;
 $129 = $160;
 $161 = $129;
 $162 = (__Znwj($161)|0);
 $126 = $153;
 $127 = $__a2;
 $128 = 1;
 $163 = $126;
 $164 = $127;
 HEAP32[$163>>2] = $164;
 $165 = (($163) + 4|0);
 $166 = $128;
 HEAP32[$165>>2] = $166;
 $122 = $__hold2;
 $123 = $162;
 $124 = $153;
 $167 = $122;
 $168 = $123;
 $169 = $124;
 $121 = $169;
 $170 = $121;
 ;HEAP32[$125+0>>2]=HEAP32[$170+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[$170+4>>2]|0;
 ;HEAP8[$120+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$120+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$120+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$120+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$120+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$120+7>>0]=HEAP8[$125+7>>0]|0;
 $117 = $167;
 HEAP32[$118>>2] = $168;
 $171 = $117;
 $116 = $118;
 $172 = $116;
 $173 = HEAP32[$172>>2]|0;
 $110 = $120;
 $174 = $110;
 ;HEAP32[$119+0>>2]=HEAP32[$174+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$174+4>>2]|0;
 ;HEAP8[$115+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$115+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$115+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$115+3>>0]=HEAP8[$119+3>>0]|0;HEAP8[$115+4>>0]=HEAP8[$119+4>>0]|0;HEAP8[$115+5>>0]=HEAP8[$119+5>>0]|0;HEAP8[$115+6>>0]=HEAP8[$119+6>>0]|0;HEAP8[$115+7>>0]=HEAP8[$119+7>>0]|0;
 $113 = $171;
 HEAP32[$114>>2] = $173;
 $175 = $113;
 $112 = $114;
 $176 = $112;
 $177 = HEAP32[$176>>2]|0;
 HEAP32[$175>>2] = $177;
 $178 = (($175) + 4|0);
 $111 = $115;
 $179 = $111;
 ;HEAP32[$178+0>>2]=HEAP32[$179+0>>2]|0;HEAP32[$178+4>>2]=HEAP32[$179+4>>2]|0;
 $91 = $__hold2;
 $180 = $91;
 $90 = $180;
 $181 = $90;
 $89 = $181;
 $182 = $89;
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)==(0|0);
 do {
  if (!($184)) {
   $1 = $154;
   $2 = $__a2;
   $185 = $152;
   $0 = $185;
   $186 = $0;
   ;HEAP8[$74+0>>0]=HEAP8[$154+0>>0]|0;
   $67 = $183;
   $68 = $186;
   $187 = $67;
   $65 = $187;
   $66 = 0;
   $188 = $65;
   $189 = $66;
   $63 = $188;
   $64 = $189;
   $190 = $63;
   $191 = (3552 + 8|0);
   HEAP32[$190>>2] = $191;
   $192 = (($190) + 4|0);
   $193 = $64;
   HEAP32[$192>>2] = $193;
   $194 = (3616 + 8|0);
   HEAP32[$188>>2] = $194;
   $195 = (($188) + 8|0);
   $196 = $66;
   HEAP32[$195>>2] = $196;
   $197 = (880 + 8|0);
   HEAP32[$187>>2] = $197;
   $198 = (($187) + 16|0);
   $39 = $74;
   $199 = $39;
   $38 = $199;
   $200 = $38;
   $32 = $70;
   $33 = $200;
   $201 = $32;
   $202 = $33;
   ;HEAP8[$28+0>>0]=HEAP8[$37+0>>0]|0;
   ;HEAP8[$29+0>>0]=HEAP8[$36+0>>0]|0;
   ;HEAP8[$30+0>>0]=HEAP8[$35+0>>0]|0;
   ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
   $26 = $201;
   $27 = $202;
   $203 = $26;
   $204 = $27;
   $25 = $204;
   $205 = $25;
   $23 = $203;
   $24 = $205;
   $206 = $23;
   $207 = $24;
   $22 = $207;
   $208 = $22;
   HEAP32[$206>>2] = $208;
   $209 = $68;
   $3 = $209;
   $210 = $3;
   $21 = $210;
   $211 = $21;
   $20 = $211;
   $212 = $20;
   $14 = $71;
   $15 = $212;
   $213 = $14;
   $214 = $15;
   ;HEAP8[$10+0>>0]=HEAP8[$19+0>>0]|0;
   ;HEAP8[$11+0>>0]=HEAP8[$18+0>>0]|0;
   ;HEAP8[$12+0>>0]=HEAP8[$17+0>>0]|0;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $8 = $213;
   $9 = $214;
   $215 = $8;
   $216 = $9;
   $7 = $216;
   $217 = $7;
   $5 = $215;
   $6 = $217;
   $218 = $5;
   $219 = $6;
   $4 = $219;
   $220 = $4;
   HEAP32[$218>>2] = $220;
   ;HEAP8[$60+0>>0]=HEAP8[$71+0>>0]|0;HEAP8[$60+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$71+3>>0]|0;
   ;HEAP8[$61+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$70+3>>0]|0;
   ;HEAP8[$62+0>>0]=HEAP8[$69+0>>0]|0;
   $54 = $198;
   $221 = $54;
   $53 = $61;
   $222 = $53;
   ;HEAP32[$56+0>>2]=HEAP32[$222+0>>2]|0;
   $40 = $60;
   $223 = $40;
   ;HEAP32[$57+0>>2]=HEAP32[$223+0>>2]|0;
   ;HEAP8[$48+0>>0]=HEAP8[$59+0>>0]|0;
   ;HEAP8[$49+0>>0]=HEAP8[$58+0>>0]|0;
   ;HEAP8[$50+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$57+3>>0]|0;
   ;HEAP8[$51+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;
   ;HEAP8[$52+0>>0]=HEAP8[$55+0>>0]|0;
   $47 = $221;
   $224 = $47;
   $46 = $51;
   $225 = $46;
   $45 = $225;
   $226 = $45;
   $227 = HEAP32[$226>>2]|0;
   $44 = $227;
   $42 = $50;
   $228 = $42;
   $41 = $228;
   $229 = $41;
   $230 = HEAP32[$229>>2]|0;
   $43 = $230;
   $231 = $43;
   __THREW__ = 0;
   invoke_vii(502,($224|0),($231|0));
   $232 = __THREW__; __THREW__ = 0;
   $233 = $232&1;
   if (!($233)) {
    break;
   }
   $234 = ___cxa_find_matching_catch()|0;
   $235 = tempRet0;
   $72 = $234;
   $73 = $235;
   __ZNSt3__114__shared_countD2Ev($187);
   $236 = $72;
   $237 = $73;
   $155 = $236;
   $156 = $237;
   $109 = $__hold2;
   $258 = $109;
   $107 = $258;
   $108 = 0;
   $259 = $107;
   $106 = $259;
   $260 = $106;
   $105 = $260;
   $261 = $105;
   $262 = HEAP32[$261>>2]|0;
   $__tmp$i$i1 = $262;
   $263 = $108;
   $95 = $259;
   $264 = $95;
   $94 = $264;
   $265 = $94;
   HEAP32[$265>>2] = $263;
   $266 = $__tmp$i$i1;
   $267 = ($266|0)!=(0|0);
   if ($267) {
    $93 = $259;
    $268 = $93;
    $92 = $268;
    $269 = $92;
    $270 = (($269) + 4|0);
    $271 = $__tmp$i$i1;
    $103 = $270;
    $104 = $271;
    $272 = $103;
    $273 = HEAP32[$272>>2]|0;
    $274 = $104;
    $275 = (($272) + 4|0);
    $276 = HEAP32[$275>>2]|0;
    $100 = $273;
    $101 = $274;
    $102 = $276;
    $277 = $100;
    $278 = $101;
    $279 = $102;
    $97 = $277;
    $98 = $278;
    $99 = $279;
    $280 = $98;
    $96 = $280;
    $281 = $96;
    __ZdlPv($281);
   }
   $306 = $155;
   $307 = $156;
   ___resumeException($306|0);
   // unreachable;
  }
 } while(0);
 $$expand_i1_val = 0;
 $157 = $$expand_i1_val;
 $75 = $agg$result;
 $238 = $75;
 HEAP32[$238>>2] = 0;
 $239 = (($238) + 4|0);
 HEAP32[$239>>2] = 0;
 $78 = $__hold2;
 $240 = $78;
 $77 = $240;
 $241 = $77;
 $76 = $241;
 $242 = $76;
 $243 = HEAP32[$242>>2]|0;
 $81 = $243;
 $244 = $81;
 $245 = (($244) + 16|0);
 $80 = $245;
 $246 = $80;
 $79 = $246;
 $247 = $79;
 HEAP32[$agg$result>>2] = $247;
 $86 = $__hold2;
 $248 = $86;
 $85 = $248;
 $249 = $85;
 $84 = $249;
 $250 = $84;
 $251 = HEAP32[$250>>2]|0;
 $__t$i = $251;
 $83 = $248;
 $252 = $83;
 $82 = $252;
 $253 = $82;
 HEAP32[$253>>2] = 0;
 $254 = $__t$i;
 $255 = (($agg$result) + 4|0);
 HEAP32[$255>>2] = $254;
 $256 = HEAP32[$agg$result>>2]|0;
 $87 = $agg$result;
 $88 = $256;
 $$expand_i1_val7 = 1;
 $157 = $$expand_i1_val7;
 $158 = 1;
 $$pre_trunc = $157;
 $257 = $$pre_trunc&1;
 if (!($257)) {
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($agg$result);
 }
 $150 = $__hold2;
 $282 = $150;
 $148 = $282;
 $149 = 0;
 $283 = $148;
 $147 = $283;
 $284 = $147;
 $146 = $284;
 $285 = $146;
 $286 = HEAP32[$285>>2]|0;
 $__tmp$i$i = $286;
 $287 = $149;
 $136 = $283;
 $288 = $136;
 $135 = $288;
 $289 = $135;
 HEAP32[$289>>2] = $287;
 $290 = $__tmp$i$i;
 $291 = ($290|0)!=(0|0);
 if (!($291)) {
  STACKTOP = sp;return;
 }
 $134 = $283;
 $292 = $134;
 $133 = $292;
 $293 = $133;
 $294 = (($293) + 4|0);
 $295 = $__tmp$i$i;
 $144 = $294;
 $145 = $295;
 $296 = $144;
 $297 = HEAP32[$296>>2]|0;
 $298 = $145;
 $299 = (($296) + 4|0);
 $300 = HEAP32[$299>>2]|0;
 $141 = $297;
 $142 = $298;
 $143 = $300;
 $301 = $141;
 $302 = $142;
 $303 = $143;
 $138 = $301;
 $139 = $302;
 $140 = $303;
 $304 = $139;
 $137 = $304;
 $305 = $137;
 __ZdlPv($305);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (880 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 16|0);
 __ZNSt3__117__compressed_pairINS_9allocatorIN7croutes5ndataIdEEEES4_ED2Ev($3);
 __ZNSt3__114__shared_countD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEE16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 16|0);
 $1 = $4;
 $5 = $1;
 $0 = $5;
 $6 = $0;
 __ZN7croutes5ndataIdED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEE21__on_zero_shared_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__a = sp + 44|0;
 $10 = $this;
 $11 = $10;
 $12 = (($11) + 16|0);
 $9 = $12;
 $13 = $9;
 $8 = $13;
 $14 = $8;
 $2 = $__a;
 $3 = $14;
 $15 = (($11) + 16|0);
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $5 = $__a;
 $6 = $11;
 $7 = 1;
 $17 = $6;
 $4 = $17;
 $18 = $4;
 __ZdlPv($18);
 STACKTOP = sp;return;
}
function __ZN7croutes5ndataIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $this;
 $11 = $10;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = (($11) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $9 = $14;
  $15 = $9;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$15>>2]|0;
  $19 = $17;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (($21|0) / 4)&-1;
  $23 = ($12>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = (($11) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $i;
  $7 = $25;
  $8 = $26;
  $27 = $7;
  $28 = $8;
  $29 = HEAP32[$27>>2]|0;
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $6 = $31;
  $32 = $6;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$32>>2]|0;
  $36 = $34;
  $37 = $35;
  $38 = (($36) - ($37))|0;
  $39 = (($38|0) / 4)&-1;
  $s = $39;
  $j = 0;
  while(1) {
   $40 = $j;
   $41 = $s;
   $42 = ($40>>>0)<($41>>>0);
   if (!($42)) {
    break;
   }
   $43 = (($11) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $i;
   $4 = $44;
   $5 = $45;
   $46 = $4;
   $47 = $5;
   $48 = HEAP32[$46>>2]|0;
   $49 = (($48) + ($47<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $j;
   $0 = $50;
   $1 = $51;
   $52 = $0;
   $53 = $1;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0|0);
   if (!($57)) {
    __ZdlPv($56);
   }
   $58 = $j;
   $59 = (($58) + 1)|0;
   $j = $59;
  }
  $60 = (($11) + 16|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $i;
  $2 = $61;
  $3 = $62;
  $63 = $2;
  $64 = $3;
  $65 = HEAP32[$63>>2]|0;
  $66 = (($65) + ($64<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(0|0);
  if (!($68)) {
   __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEED2Ev($67);
   __ZdlPv($67);
  }
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $71 = (($11) + 16|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)==(0|0);
 if ($73) {
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEED2Ev($72);
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEENS6_IS9_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEENS6_IS9_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__117__compressed_pairINS_9allocatorIN7croutes5ndataIdEEEES4_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN7croutes5ndataIdEEEES4_Lj1EED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__128__libcpp_compressed_pair_impINS_9allocatorIN7croutes5ndataIdEEEES4_Lj1EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes5ndataIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes5ndataIdEC2ERKS1_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $i = 0, $j = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 8|0;
 $14 = sp + 303|0;
 $__annotator$i1 = sp + 302|0;
 $28 = sp + 192|0;
 $31 = sp + 180|0;
 $38 = sp + 152|0;
 $41 = sp + 140|0;
 $53 = sp;
 $58 = sp + 301|0;
 $__annotator$i = sp + 300|0;
 $row = sp + 28|0;
 $70 = sp + 20|0;
 $68 = $this;
 $69 = $rhs;
 $73 = $68;
 $74 = $69;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$73>>2] = $75;
 $76 = (($73) + 8|0);
 HEAPF64[$76>>3] = inf;
 $77 = (($73) + 16|0);
 $78 = (__Znwj(12)|0);
 $44 = $78;
 $79 = $44;
 $43 = $79;
 $80 = $43;
 $42 = $80;
 HEAP32[$80>>2] = 0;
 $81 = (($80) + 4|0);
 HEAP32[$81>>2] = 0;
 $82 = (($80) + 8|0);
 $40 = $82;
 HEAP32[$41>>2] = 0;
 $83 = $40;
 $39 = $41;
 $84 = $39;
 $85 = HEAP32[$84>>2]|0;
 $37 = $83;
 HEAP32[$38>>2] = $85;
 $86 = $37;
 $36 = $86;
 $35 = $38;
 $87 = $35;
 $88 = HEAP32[$87>>2]|0;
 HEAP32[$86>>2] = $88;
 HEAP32[$77>>2] = $78;
 $89 = (($73) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = HEAP32[$73>>2]|0;
 __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE7reserveEj($90,$91);
 $i = 0;
 L1: while(1) {
  $92 = $i;
  $93 = HEAP32[$73>>2]|0;
  $94 = ($92>>>0)<($93>>>0);
  if (!($94)) {
   label = 23;
   break;
  }
  $95 = (__Znwj(12)|0);
  $34 = $95;
  $96 = $34;
  $33 = $96;
  $97 = $33;
  $32 = $97;
  HEAP32[$97>>2] = 0;
  $98 = (($97) + 4|0);
  HEAP32[$98>>2] = 0;
  $99 = (($97) + 8|0);
  $30 = $99;
  HEAP32[$31>>2] = 0;
  $100 = $30;
  $29 = $31;
  $101 = $29;
  $102 = HEAP32[$101>>2]|0;
  $27 = $100;
  HEAP32[$28>>2] = $102;
  $103 = $27;
  $26 = $103;
  $25 = $28;
  $104 = $25;
  $105 = HEAP32[$104>>2]|0;
  HEAP32[$103>>2] = $105;
  HEAP32[$row>>2] = $95;
  $106 = HEAP32[$row>>2]|0;
  $107 = HEAP32[$73>>2]|0;
  __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE7reserveEj($106,$107);
  $j = 0;
  while(1) {
   $108 = $j;
   $109 = HEAP32[$73>>2]|0;
   $110 = ($108>>>0)<($109>>>0);
   if (!($110)) {
    break;
   }
   $111 = HEAP32[$row>>2]|0;
   $112 = (__Znwj(16)|0);
   $113 = $i;
   $114 = $j;
   $115 = $69;
   $116 = $i;
   $117 = $j;
   __THREW__ = 0;
   $118 = (invoke_iiii(503,($115|0),($116|0),($117|0))|0);
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   if ($120) {
    break L1;
   }
   __THREW__ = 0;
   $121 = (invoke_ii(442,($118|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    break L1;
   }
   $124 = +HEAPF64[$121>>3];
   __THREW__ = 0;
   invoke_viiid(493,($112|0),($113|0),($114|0),(+$124));
   $125 = __THREW__; __THREW__ = 0;
   $126 = $125&1;
   if ($126) {
    break L1;
   }
   HEAP32[$70>>2] = $112;
   $23 = $111;
   $24 = $70;
   $127 = $23;
   $128 = (($127) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   $22 = $127;
   $130 = $22;
   $131 = (($130) + 8|0);
   $21 = $131;
   $132 = $21;
   $20 = $132;
   $133 = $20;
   $134 = HEAP32[$133>>2]|0;
   $135 = ($129>>>0)<($134>>>0);
   if ($135) {
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i1,$127,1);
    $19 = $127;
    $136 = $19;
    $137 = (($136) + 8|0);
    $18 = $137;
    $138 = $18;
    $17 = $138;
    $139 = $17;
    $140 = (($127) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $15 = $141;
    $142 = $15;
    $143 = $24;
    $0 = $143;
    $144 = $0;
    $11 = $139;
    $12 = $142;
    $13 = $144;
    $145 = $11;
    $146 = $12;
    $147 = $13;
    $10 = $147;
    $148 = $10;
    ;HEAP8[$9+0>>0]=HEAP8[$14+0>>0]|0;
    $6 = $145;
    $7 = $146;
    $8 = $148;
    $149 = $6;
    $150 = $7;
    $151 = $8;
    $5 = $151;
    $152 = $5;
    $2 = $149;
    $3 = $150;
    $4 = $152;
    $153 = $3;
    $154 = ($153|0)==(0|0);
    if (!($154)) {
     $155 = $4;
     $1 = $155;
     $156 = $1;
     $157 = HEAP32[$156>>2]|0;
     HEAP32[$153>>2] = $157;
    }
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
    $158 = (($127) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (($159) + 4|0);
    HEAP32[$158>>2] = $160;
   } else {
    $161 = $24;
    $16 = $161;
    $162 = $16;
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($127,$162);
   }
   $163 = $j;
   $164 = (($163) + 1)|0;
   $j = $164;
  }
  $167 = (($73) + 16|0);
  $168 = HEAP32[$167>>2]|0;
  $66 = $168;
  $67 = $row;
  $169 = $66;
  $170 = (($169) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $65 = $169;
  $172 = $65;
  $173 = (($172) + 8|0);
  $64 = $173;
  $174 = $64;
  $63 = $174;
  $175 = $63;
  $176 = HEAP32[$175>>2]|0;
  $177 = ($171|0)!=($176|0);
  if ($177) {
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotatorC2ERKSA_j($__annotator$i,$169,1);
   $62 = $169;
   $178 = $62;
   $179 = (($178) + 8|0);
   $61 = $179;
   $180 = $61;
   $60 = $180;
   $181 = $60;
   $182 = (($169) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $59 = $183;
   $184 = $59;
   $185 = $67;
   $55 = $181;
   $56 = $184;
   $57 = $185;
   $186 = $55;
   $187 = $56;
   $188 = $57;
   $54 = $188;
   $189 = $54;
   ;HEAP8[$53+0>>0]=HEAP8[$58+0>>0]|0;
   $50 = $186;
   $51 = $187;
   $52 = $189;
   $190 = $50;
   $191 = $51;
   $192 = $52;
   $49 = $192;
   $193 = $49;
   $46 = $190;
   $47 = $191;
   $48 = $193;
   $194 = $47;
   $195 = ($194|0)==(0|0);
   if (!($195)) {
    $196 = $48;
    $45 = $196;
    $197 = $45;
    $198 = HEAP32[$197>>2]|0;
    HEAP32[$194>>2] = $198;
   }
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $199 = (($169) + 4|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + 4|0);
   HEAP32[$199>>2] = $201;
  } else {
   $202 = $67;
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE21__push_back_slow_pathIRKS8_EEvOT_($169,$202);
  }
  $203 = $i;
  $204 = (($203) + 1)|0;
  $i = $204;
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
 $165 = ___cxa_find_matching_catch()|0;
 $166 = tempRet0;
 $71 = $165;
 $72 = $166;
 __ZdlPv($112);
 $205 = $71;
 $206 = $72;
 ___resumeException($205|0);
 // unreachable;
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 8|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 4)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 4)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEEC2EjjSB_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(504,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEED2Ev($__v);
  $46 = $11;
  $47 = $12;
  ___resumeException($46|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZNK7croutes5ndataIdE2atEii($this,$from_node,$to_node) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $from_node;
 $6 = $to_node;
 $7 = $4;
 $8 = (($7) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $5;
 $2 = $9;
 $3 = $10;
 $11 = $2;
 $12 = $3;
 $13 = HEAP32[$11>>2]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $6;
 $0 = $15;
 $1 = $16;
 $17 = $0;
 $18 = $1;
 $19 = HEAP32[$17>>2]|0;
 $20 = (($19) + ($18<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 STACKTOP = sp;return ($21|0);
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotatorC2ERKSA_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE21__push_back_slow_pathIRKS8_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEEC2EjjSB_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(504,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEEC2EjjSB_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6vectorIPN7croutes8net_bondIdEENS_9allocatorIS5_EEEERNS6_IS9_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE31__annotate_contiguous_containerEPKvSC_SC_SC_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZN7croutes14prim_euler_algIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (1000 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($1) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $5 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZN7croutes9algorithmIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes14prim_euler_algIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes14prim_euler_algIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes14prim_euler_algIdE10short_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes14prim_euler_algIdE4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes14prim_euler_algIdE12russian_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node_) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node_ = $first_node_|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0;
 var $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0;
 var $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0;
 var $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0;
 var $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0;
 var $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0;
 var $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0;
 var $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0;
 var $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0;
 var $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0;
 var $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0;
 var $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0;
 var $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0;
 var $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0;
 var $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0;
 var $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0;
 var $1283 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0.0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0, $__annotator$i30 = 0, $__annotator$i43 = 0, $__annotator$i5 = 0, $__annotator$i9 = 0, $__n$i$i$i = 0, $__n$i$i$i18 = 0, $__old_size$i$i = 0, $__old_size$i$i19 = 0, $__p$i = 0, $__p$i$i = 0, $__p$i21 = 0, $__ps$i = 0;
 var $__ps$i20 = 0, $active = 0, $back = 0, $back_stack = 0, $bundle = 0, $d = 0, $first_node = 0, $i = 0, $i1 = 0, $it = 0, $j = 0, $less = 0, $lhs = 0, $min_span_tree = 0, $n = 0, $p = 0, $r = 0, $result = 0, $size = 0, $u = 0;
 var $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1952|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 112|0;
 $13 = sp + 1936|0;
 $__annotator$i43 = sp + 1935|0;
 $53 = sp + 104|0;
 $54 = sp + 96|0;
 $55 = sp + 88|0;
 $65 = sp + 80|0;
 $70 = sp + 1934|0;
 $__annotator$i30 = sp + 1933|0;
 $126 = sp + 72|0;
 $129 = sp + 1932|0;
 $146 = sp + 1352|0;
 $147 = sp + 64|0;
 $176 = sp + 56|0;
 $181 = sp + 1931|0;
 $__annotator$i9 = sp + 1930|0;
 $203 = sp + 48|0;
 $208 = sp + 1929|0;
 $__annotator$i5 = sp + 1928|0;
 $240 = sp + 40|0;
 $243 = sp + 1927|0;
 $260 = sp + 908|0;
 $261 = sp + 32|0;
 $291 = sp + 788|0;
 $294 = sp + 776|0;
 $313 = sp + 704|0;
 $316 = sp + 692|0;
 $320 = sp + 676|0;
 $323 = sp + 664|0;
 $344 = sp + 24|0;
 $349 = sp + 1924|0;
 $__annotator$i = sp + 1923|0;
 $388 = sp + 416|0;
 $391 = sp + 404|0;
 $min_span_tree = sp + 344|0;
 $d = sp + 332|0;
 $402 = sp + 16|0;
 $p = sp + 320|0;
 $403 = sp + 316|0;
 $active = sp + 304|0;
 $404 = sp + 1920|0;
 $less = sp + 300|0;
 $405 = sp + 280|0;
 $406 = sp + 272|0;
 $407 = sp + 268|0;
 $n = sp;
 $back_stack = sp + 240|0;
 $result = sp + 224|0;
 $408 = sp + 220|0;
 $409 = sp + 216|0;
 $410 = sp + 212|0;
 $411 = sp + 208|0;
 $412 = sp + 204|0;
 $413 = sp + 200|0;
 $414 = sp + 196|0;
 $back = sp + 192|0;
 $it = sp + 188|0;
 $415 = sp + 184|0;
 $416 = sp + 180|0;
 $417 = sp + 176|0;
 $418 = sp + 172|0;
 $419 = sp + 168|0;
 $420 = sp + 164|0;
 $421 = sp + 160|0;
 $422 = sp + 156|0;
 $423 = sp + 144|0;
 $424 = sp + 128|0;
 $425 = sp + 120|0;
 $397 = $this;
 $398 = $first_node_;
 $396 = $data;
 $427 = $396;
 $428 = HEAP32[$427>>2]|0;
 $429 = (__ZNK7croutes5ndataIdE11nodes_countEv($428)|0);
 $size = $429;
 $$expand_i1_val = 0;
 $399 = $$expand_i1_val;
 __ZN7croutes6answerIdE4initEv($agg$result);
 $first_node = 0;
 L1: while(1) {
  $430 = $first_node;
  $431 = $size;
  $432 = ($430>>>0)<($431>>>0);
  if (!($432)) {
   label = 165;
   break;
  }
  $395 = $agg$result;
  $433 = $395;
  $434 = HEAP32[$433>>2]|0;
  __THREW__ = 0;
  $435 = (invoke_ii(460,($434|0))|0);
  $436 = __THREW__; __THREW__ = 0;
  $437 = $436&1;
  if ($437) {
   label = 19;
   break;
  }
  $bundle = $435;
  $394 = $min_span_tree;
  $438 = $394;
  $393 = $438;
  $439 = $393;
  $392 = $439;
  HEAP32[$439>>2] = 0;
  $440 = (($439) + 4|0);
  HEAP32[$440>>2] = 0;
  $441 = (($439) + 8|0);
  $390 = $441;
  HEAP32[$391>>2] = 0;
  $442 = $390;
  $389 = $391;
  $443 = $389;
  $444 = HEAP32[$443>>2]|0;
  $387 = $442;
  HEAP32[$388>>2] = $444;
  $445 = $387;
  $386 = $445;
  $385 = $388;
  $446 = $385;
  $447 = HEAP32[$446>>2]|0;
  HEAP32[$445>>2] = $447;
  $448 = $size;
  $384 = $data;
  $449 = $384;
  $450 = HEAP32[$449>>2]|0;
  __THREW__ = 0;
  $451 = (+invoke_di(490,($450|0)));
  $452 = __THREW__; __THREW__ = 0;
  $453 = $452&1;
  if ($453) {
   label = 20;
   break;
  }
  HEAPF64[$402>>3] = $451;
  __THREW__ = 0;
  invoke_viii(505,($d|0),($448|0),($402|0));
  $454 = __THREW__; __THREW__ = 0;
  $455 = $454&1;
  if ($455) {
   label = 20;
   break;
  }
  $456 = $size;
  HEAP32[$403>>2] = -1;
  __THREW__ = 0;
  invoke_viii(462,($p|0),($456|0),($403|0));
  $457 = __THREW__; __THREW__ = 0;
  $458 = $457&1;
  if ($458) {
   label = 21;
   break;
  }
  $459 = $size;
  HEAP8[$404>>0] = 1;
  __THREW__ = 0;
  invoke_viii(461,($active|0),($459|0),($404|0));
  $460 = __THREW__; __THREW__ = 0;
  $461 = $460&1;
  if ($461) {
   label = 22;
   break;
  }
  $462 = $first_node;
  $382 = $d;
  $383 = $462;
  $463 = $382;
  $464 = $383;
  $465 = HEAP32[$463>>2]|0;
  $466 = (($465) + ($464<<3)|0);
  HEAPF64[$466>>3] = 0.0;
  HEAP32[$less>>2] = $d;
  $i = 0;
  while(1) {
   $467 = $i;
   $468 = $size;
   $469 = ($467>>>0)<($468>>>0);
   if (!($469)) {
    break;
   }
   $v = -1;
   $j = 0;
   while(1) {
    $470 = $j;
    $471 = $size;
    $472 = ($470>>>0)<($471>>>0);
    if (!($472)) {
     break;
    }
    $473 = $j;
    $380 = $active;
    $381 = $473;
    $474 = $380;
    $475 = $381;
    $378 = $474;
    $379 = $475;
    $476 = $378;
    $477 = HEAP32[$476>>2]|0;
    $478 = $379;
    $479 = (($478>>>0) / 32)&-1;
    $480 = (($477) + ($479<<2)|0);
    $481 = $379;
    $482 = (($481>>>0) % 32)&-1;
    $483 = 1 << $482;
    $375 = $405;
    $376 = $480;
    $377 = $483;
    $484 = $375;
    $485 = $376;
    HEAP32[$484>>2] = $485;
    $486 = (($484) + 4|0);
    $487 = $377;
    HEAP32[$486>>2] = $487;
    $374 = $405;
    $488 = $374;
    $489 = HEAP32[$488>>2]|0;
    $490 = HEAP32[$489>>2]|0;
    $491 = (($488) + 4|0);
    $492 = HEAP32[$491>>2]|0;
    $493 = $490 & $492;
    $494 = ($493|0)!=(0);
    do {
     if ($494) {
      $495 = $v;
      $496 = ($495|0)==(-1);
      if (!($496)) {
       $497 = $j;
       $498 = $v;
       __THREW__ = 0;
       $499 = (invoke_iiii(506,($less|0),($497|0),($498|0))|0);
       $500 = __THREW__; __THREW__ = 0;
       $501 = $500&1;
       if ($501) {
        label = 23;
        break L1;
       }
       if (!($499)) {
        break;
       }
      }
      $502 = $j;
      $v = $502;
     }
    } while(0);
    $513 = $j;
    $514 = (($513) + 1)|0;
    $j = $514;
   }
   $515 = $v;
   $516 = ($515|0)==(-1);
   if ($516) {
    __THREW__ = 0;
    (invoke_iii(507,(2104|0),(1176|0))|0);
    $517 = __THREW__; __THREW__ = 0;
    $518 = $517&1;
    if ($518) {
     label = 23;
     break L1;
    }
   } else {
    $519 = $v;
    $372 = $active;
    $373 = $519;
    $520 = $372;
    $521 = $373;
    $370 = $520;
    $371 = $521;
    $522 = $370;
    $523 = HEAP32[$522>>2]|0;
    $524 = $371;
    $525 = (($524>>>0) / 32)&-1;
    $526 = (($523) + ($525<<2)|0);
    $527 = $371;
    $528 = (($527>>>0) % 32)&-1;
    $529 = 1 << $528;
    $367 = $406;
    $368 = $526;
    $369 = $529;
    $530 = $367;
    $531 = $368;
    HEAP32[$530>>2] = $531;
    $532 = (($530) + 4|0);
    $533 = $369;
    HEAP32[$532>>2] = $533;
    $365 = $406;
    $366 = 0;
    $534 = $365;
    $535 = $366;
    $536 = $535&1;
    if ($536) {
     $537 = (($534) + 4|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = HEAP32[$534>>2]|0;
     $540 = HEAP32[$539>>2]|0;
     $541 = $540 | $538;
     HEAP32[$539>>2] = $541;
    } else {
     $542 = (($534) + 4|0);
     $543 = HEAP32[$542>>2]|0;
     $544 = $543 ^ -1;
     $545 = HEAP32[$534>>2]|0;
     $546 = HEAP32[$545>>2]|0;
     $547 = $546 & $544;
     HEAP32[$545>>2] = $547;
    }
    $548 = $v;
    $363 = $p;
    $364 = $548;
    $549 = $363;
    $550 = $364;
    $551 = HEAP32[$549>>2]|0;
    $552 = (($551) + ($550<<2)|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = ($553|0)!=(-1);
    if ($554) {
     $362 = $data;
     $555 = $362;
     $556 = HEAP32[$555>>2]|0;
     $557 = $v;
     $360 = $p;
     $361 = $557;
     $558 = $360;
     $559 = $361;
     $560 = HEAP32[$558>>2]|0;
     $561 = (($560) + ($559<<2)|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = $v;
     __THREW__ = 0;
     $564 = (invoke_iiii(470,($556|0),($562|0),($563|0))|0);
     $565 = __THREW__; __THREW__ = 0;
     $566 = $565&1;
     if ($566) {
      label = 23;
      break L1;
     }
     HEAP32[$407>>2] = $564;
     $358 = $min_span_tree;
     $359 = $407;
     $567 = $358;
     $568 = (($567) + 4|0);
     $569 = HEAP32[$568>>2]|0;
     $357 = $567;
     $570 = $357;
     $571 = (($570) + 8|0);
     $356 = $571;
     $572 = $356;
     $355 = $572;
     $573 = $355;
     $574 = HEAP32[$573>>2]|0;
     $575 = ($569>>>0)<($574>>>0);
     if ($575) {
      __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$567,1);
      $354 = $567;
      $576 = $354;
      $577 = (($576) + 8|0);
      $353 = $577;
      $578 = $353;
      $352 = $578;
      $579 = $352;
      $580 = (($567) + 4|0);
      $581 = HEAP32[$580>>2]|0;
      $350 = $581;
      $582 = $350;
      $583 = $359;
      $335 = $583;
      $584 = $335;
      $346 = $579;
      $347 = $582;
      $348 = $584;
      $585 = $346;
      $586 = $347;
      $587 = $348;
      $345 = $587;
      $588 = $345;
      ;HEAP8[$344+0>>0]=HEAP8[$349+0>>0]|0;
      $341 = $585;
      $342 = $586;
      $343 = $588;
      $589 = $341;
      $590 = $342;
      $591 = $343;
      $340 = $591;
      $592 = $340;
      $337 = $589;
      $338 = $590;
      $339 = $592;
      $593 = $338;
      $594 = ($593|0)==(0|0);
      if (!($594)) {
       $595 = $339;
       $336 = $595;
       $596 = $336;
       $597 = HEAP32[$596>>2]|0;
       HEAP32[$593>>2] = $597;
      }
      __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
      $598 = (($567) + 4|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = (($599) + 4|0);
      HEAP32[$598>>2] = $600;
     } else {
      $601 = $359;
      $351 = $601;
      $602 = $351;
      __THREW__ = 0;
      invoke_vii(508,($567|0),($602|0));
      $603 = __THREW__; __THREW__ = 0;
      $604 = $603&1;
      if ($604) {
       label = 23;
       break L1;
      }
     }
    }
    $u = 0;
    while(1) {
     $605 = $u;
     $606 = $size;
     $607 = ($605>>>0)<($606>>>0);
     if (!($607)) {
      break;
     }
     $334 = $data;
     $608 = $334;
     $609 = HEAP32[$608>>2]|0;
     $610 = $v;
     $611 = $u;
     __THREW__ = 0;
     $612 = (invoke_iiii(470,($609|0),($610|0),($611|0))|0);
     $613 = __THREW__; __THREW__ = 0;
     $614 = $613&1;
     if ($614) {
      label = 23;
      break L1;
     }
     ;HEAP32[$n+0>>2]=HEAP32[$612+0>>2]|0;HEAP32[$n+4>>2]=HEAP32[$612+4>>2]|0;HEAP32[$n+8>>2]=HEAP32[$612+8>>2]|0;HEAP32[$n+12>>2]=HEAP32[$612+12>>2]|0;
     __THREW__ = 0;
     $615 = (invoke_ii(491,($n|0))|0);
     $616 = __THREW__; __THREW__ = 0;
     $617 = $616&1;
     if ($617) {
      label = 23;
      break L1;
     }
     $618 = +HEAPF64[$615>>3];
     $619 = $u;
     $332 = $d;
     $333 = $619;
     $620 = $332;
     $621 = $333;
     $622 = HEAP32[$620>>2]|0;
     $623 = (($622) + ($621<<3)|0);
     $624 = +HEAPF64[$623>>3];
     $625 = $618 < $624;
     if ($625) {
      __THREW__ = 0;
      $626 = (invoke_ii(491,($n|0))|0);
      $627 = __THREW__; __THREW__ = 0;
      $628 = $627&1;
      if ($628) {
       label = 23;
       break L1;
      }
      $629 = +HEAPF64[$626>>3];
      $630 = $u;
      $330 = $d;
      $331 = $630;
      $631 = $330;
      $632 = $331;
      $633 = HEAP32[$631>>2]|0;
      $634 = (($633) + ($632<<3)|0);
      HEAPF64[$634>>3] = $629;
      $635 = $v;
      $636 = $u;
      $328 = $p;
      $329 = $636;
      $637 = $328;
      $638 = $329;
      $639 = HEAP32[$637>>2]|0;
      $640 = (($639) + ($638<<2)|0);
      HEAP32[$640>>2] = $635;
     }
     $641 = $u;
     $642 = (($641) + 1)|0;
     $u = $642;
    }
   }
   $643 = $i;
   $644 = (($643) + 1)|0;
   $i = $644;
  }
  $327 = $back_stack;
  $645 = $327;
  $326 = $645;
  $646 = $326;
  $325 = $646;
  $647 = $325;
  $324 = $647;
  $648 = $324;
  HEAP32[$648>>2] = 0;
  $649 = (($648) + 4|0);
  HEAP32[$649>>2] = 0;
  $650 = (($648) + 8|0);
  HEAP32[$650>>2] = 0;
  $651 = (($648) + 12|0);
  $322 = $651;
  HEAP32[$323>>2] = 0;
  $652 = $322;
  $321 = $323;
  $653 = $321;
  $654 = HEAP32[$653>>2]|0;
  $319 = $652;
  HEAP32[$320>>2] = $654;
  $655 = $319;
  $318 = $655;
  $317 = $320;
  $656 = $317;
  $657 = HEAP32[$656>>2]|0;
  HEAP32[$655>>2] = $657;
  $658 = (($647) + 16|0);
  HEAP32[$658>>2] = 0;
  $659 = (($647) + 20|0);
  $315 = $659;
  HEAP32[$316>>2] = 0;
  $660 = $315;
  $314 = $316;
  $661 = $314;
  $662 = HEAP32[$661>>2]|0;
  $312 = $660;
  HEAP32[$313>>2] = $662;
  $663 = $312;
  $311 = $663;
  $310 = $313;
  $664 = $310;
  $665 = HEAP32[$664>>2]|0;
  HEAP32[$663>>2] = $665;
  $297 = $result;
  $666 = $297;
  $296 = $666;
  $667 = $296;
  $295 = $667;
  HEAP32[$667>>2] = 0;
  $668 = (($667) + 4|0);
  HEAP32[$668>>2] = 0;
  $669 = (($667) + 8|0);
  $293 = $669;
  HEAP32[$294>>2] = 0;
  $670 = $293;
  $292 = $294;
  $671 = $292;
  $672 = HEAP32[$671>>2]|0;
  $290 = $670;
  HEAP32[$291>>2] = $672;
  $673 = $290;
  $289 = $673;
  $288 = $291;
  $674 = $288;
  $675 = HEAP32[$674>>2]|0;
  HEAP32[$673>>2] = $675;
  $286 = $min_span_tree;
  $287 = 0;
  $676 = $286;
  $677 = $287;
  $678 = HEAP32[$676>>2]|0;
  $679 = (($678) + ($677<<2)|0);
  $680 = HEAP32[$679>>2]|0;
  __THREW__ = 0;
  $681 = (invoke_ii(438,($680|0))|0);
  $682 = __THREW__; __THREW__ = 0;
  $683 = $682&1;
  if ($683) {
   label = 116;
   break;
  }
  HEAP32[$408>>2] = $681;
  $217 = $result;
  $218 = $408;
  $684 = $217;
  $685 = (($684) + 4|0);
  $686 = HEAP32[$685>>2]|0;
  $216 = $684;
  $687 = $216;
  $688 = (($687) + 8|0);
  $215 = $688;
  $689 = $215;
  $214 = $689;
  $690 = $214;
  $691 = HEAP32[$690>>2]|0;
  $692 = ($686>>>0)<($691>>>0);
  if ($692) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i5,$684,1);
   $213 = $684;
   $693 = $213;
   $694 = (($693) + 8|0);
   $212 = $694;
   $695 = $212;
   $211 = $695;
   $696 = $211;
   $697 = (($684) + 4|0);
   $698 = HEAP32[$697>>2]|0;
   $209 = $698;
   $699 = $209;
   $700 = $218;
   $194 = $700;
   $701 = $194;
   $205 = $696;
   $206 = $699;
   $207 = $701;
   $702 = $205;
   $703 = $206;
   $704 = $207;
   $204 = $704;
   $705 = $204;
   ;HEAP8[$203+0>>0]=HEAP8[$208+0>>0]|0;
   $200 = $702;
   $201 = $703;
   $202 = $705;
   $706 = $200;
   $707 = $201;
   $708 = $202;
   $199 = $708;
   $709 = $199;
   $196 = $706;
   $197 = $707;
   $198 = $709;
   $710 = $197;
   $711 = ($710|0)==(0|0);
   if (!($711)) {
    $712 = $198;
    $195 = $712;
    $713 = $195;
    $714 = HEAP32[$713>>2]|0;
    HEAP32[$710>>2] = $714;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i5);
   $715 = (($684) + 4|0);
   $716 = HEAP32[$715>>2]|0;
   $717 = (($716) + 4|0);
   HEAP32[$715>>2] = $717;
  } else {
   $718 = $218;
   $210 = $718;
   $719 = $210;
   __THREW__ = 0;
   invoke_vii(509,($684|0),($719|0));
   $720 = __THREW__; __THREW__ = 0;
   $721 = $720&1;
   if ($721) {
    label = 116;
    break;
   }
  }
  $192 = $min_span_tree;
  $193 = 0;
  $722 = $192;
  $723 = $193;
  $724 = HEAP32[$722>>2]|0;
  $725 = (($724) + ($723<<2)|0);
  $726 = HEAP32[$725>>2]|0;
  __THREW__ = 0;
  $727 = (invoke_ii(441,($726|0))|0);
  $728 = __THREW__; __THREW__ = 0;
  $729 = $728&1;
  if ($729) {
   label = 116;
   break;
  }
  HEAP32[$409>>2] = $727;
  $190 = $result;
  $191 = $409;
  $730 = $190;
  $731 = (($730) + 4|0);
  $732 = HEAP32[$731>>2]|0;
  $189 = $730;
  $733 = $189;
  $734 = (($733) + 8|0);
  $188 = $734;
  $735 = $188;
  $187 = $735;
  $736 = $187;
  $737 = HEAP32[$736>>2]|0;
  $738 = ($732>>>0)<($737>>>0);
  if ($738) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i9,$730,1);
   $186 = $730;
   $739 = $186;
   $740 = (($739) + 8|0);
   $185 = $740;
   $741 = $185;
   $184 = $741;
   $742 = $184;
   $743 = (($730) + 4|0);
   $744 = HEAP32[$743>>2]|0;
   $182 = $744;
   $745 = $182;
   $746 = $191;
   $167 = $746;
   $747 = $167;
   $178 = $742;
   $179 = $745;
   $180 = $747;
   $748 = $178;
   $749 = $179;
   $750 = $180;
   $177 = $750;
   $751 = $177;
   ;HEAP8[$176+0>>0]=HEAP8[$181+0>>0]|0;
   $173 = $748;
   $174 = $749;
   $175 = $751;
   $752 = $173;
   $753 = $174;
   $754 = $175;
   $172 = $754;
   $755 = $172;
   $169 = $752;
   $170 = $753;
   $171 = $755;
   $756 = $170;
   $757 = ($756|0)==(0|0);
   if (!($757)) {
    $758 = $171;
    $168 = $758;
    $759 = $168;
    $760 = HEAP32[$759>>2]|0;
    HEAP32[$756>>2] = $760;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i9);
   $761 = (($730) + 4|0);
   $762 = HEAP32[$761>>2]|0;
   $763 = (($762) + 4|0);
   HEAP32[$761>>2] = $763;
  } else {
   $764 = $191;
   $183 = $764;
   $765 = $183;
   __THREW__ = 0;
   invoke_vii(509,($730|0),($765|0));
   $766 = __THREW__; __THREW__ = 0;
   $767 = $766&1;
   if ($767) {
    label = 116;
    break;
   }
  }
  $165 = $min_span_tree;
  $166 = 0;
  $768 = $165;
  $769 = $166;
  $770 = HEAP32[$768>>2]|0;
  $771 = (($770) + ($769<<2)|0);
  $772 = HEAP32[$771>>2]|0;
  __THREW__ = 0;
  $773 = (invoke_ii(438,($772|0))|0);
  $774 = __THREW__; __THREW__ = 0;
  $775 = $774&1;
  if ($775) {
   label = 116;
   break;
  }
  HEAP32[$410>>2] = $773;
  $163 = $back_stack;
  $164 = $410;
  $776 = $163;
  $777 = $164;
  $162 = $777;
  $778 = $162;
  __THREW__ = 0;
  invoke_vii(510,($776|0),($778|0));
  $779 = __THREW__; __THREW__ = 0;
  $780 = $779&1;
  if ($780) {
   label = 116;
   break;
  }
  $160 = $min_span_tree;
  $161 = 0;
  $781 = $160;
  $782 = $161;
  $783 = HEAP32[$781>>2]|0;
  $784 = (($783) + ($782<<2)|0);
  $785 = HEAP32[$784>>2]|0;
  __THREW__ = 0;
  $786 = (invoke_ii(441,($785|0))|0);
  $787 = __THREW__; __THREW__ = 0;
  $788 = $787&1;
  if ($788) {
   label = 116;
   break;
  }
  HEAP32[$411>>2] = $786;
  $158 = $back_stack;
  $159 = $411;
  $789 = $158;
  $790 = $159;
  $157 = $790;
  $791 = $157;
  __THREW__ = 0;
  invoke_vii(510,($789|0),($791|0));
  $792 = __THREW__; __THREW__ = 0;
  $793 = $792&1;
  if ($793) {
   label = 116;
   break;
  }
  $156 = $min_span_tree;
  $794 = $156;
  $795 = HEAP32[$794>>2]|0;
  $154 = $794;
  $155 = $795;
  $796 = $155;
  $152 = $413;
  $153 = $796;
  $797 = $152;
  $798 = $153;
  HEAP32[$797>>2] = $798;
  $149 = $412;
  $150 = $413;
  $151 = 0;
  $799 = $149;
  $800 = $150;
  $148 = $800;
  $801 = $148;
  $802 = HEAP32[$801>>2]|0;
  HEAP32[$799>>2] = $802;
  ;HEAP8[$147+0>>0]=HEAP8[$412+0>>0]|0;HEAP8[$147+1>>0]=HEAP8[$412+1>>0]|0;HEAP8[$147+2>>0]=HEAP8[$412+2>>0]|0;HEAP8[$147+3>>0]=HEAP8[$412+3>>0]|0;
  $145 = $min_span_tree;
  $803 = $145;
  $144 = $803;
  $804 = $144;
  $143 = $804;
  $805 = $143;
  $806 = HEAP32[$805>>2]|0;
  $141 = $805;
  $142 = $806;
  $807 = $142;
  $139 = $146;
  $140 = $807;
  $808 = $139;
  $809 = $140;
  HEAP32[$808>>2] = $809;
  $120 = $147;
  $121 = $146;
  $810 = $120;
  $119 = $810;
  $811 = $119;
  $812 = HEAP32[$811>>2]|0;
  $813 = $121;
  $118 = $813;
  $814 = $118;
  $815 = HEAP32[$814>>2]|0;
  $816 = $812;
  $817 = $815;
  $818 = (($816) - ($817))|0;
  $819 = (($818|0) / 4)&-1;
  $__ps$i20 = $819;
  $820 = HEAP32[$803>>2]|0;
  $821 = $__ps$i20;
  $822 = (($820) + ($821<<2)|0);
  $__p$i21 = $822;
  $823 = $__p$i21;
  $116 = $803;
  $117 = $823;
  $824 = $117;
  $114 = $414;
  $115 = $824;
  $825 = $114;
  $826 = $115;
  HEAP32[$825>>2] = $826;
  $827 = $__p$i21;
  $828 = (($827) + 4|0);
  $829 = (($803) + 4|0);
  $830 = HEAP32[$829>>2]|0;
  $831 = $__p$i21;
  $111 = $828;
  $112 = $830;
  $113 = $831;
  $832 = $111;
  $110 = $832;
  $833 = $110;
  $834 = $112;
  $105 = $834;
  $835 = $105;
  $836 = $113;
  $106 = $836;
  $837 = $106;
  $107 = $833;
  $108 = $835;
  $109 = $837;
  $838 = $108;
  $839 = $107;
  $840 = $838;
  $841 = $839;
  $842 = (($840) - ($841))|0;
  $843 = (($842|0) / 4)&-1;
  $__n$i$i$i18 = $843;
  $844 = $109;
  $845 = $107;
  $846 = $__n$i$i$i18;
  $847 = $846<<2;
  _memmove(($844|0),($845|0),($847|0))|0;
  $848 = $109;
  $849 = $__n$i$i$i18;
  $850 = (($848) + ($849<<2)|0);
  $137 = $803;
  $138 = $850;
  $851 = $137;
  $136 = $851;
  $852 = $136;
  $853 = (($852) + 4|0);
  $854 = HEAP32[$853>>2]|0;
  $855 = HEAP32[$852>>2]|0;
  $856 = $854;
  $857 = $855;
  $858 = (($856) - ($857))|0;
  $859 = (($858|0) / 4)&-1;
  $__old_size$i$i19 = $859;
  $860 = $138;
  $134 = $851;
  $135 = $860;
  $861 = $134;
  while(1) {
   $862 = $135;
   $863 = (($861) + 4|0);
   $864 = HEAP32[$863>>2]|0;
   $865 = ($862|0)!=($864|0);
   if (!($865)) {
    break;
   }
   $133 = $861;
   $866 = $133;
   $867 = (($866) + 8|0);
   $132 = $867;
   $868 = $132;
   $131 = $868;
   $869 = $131;
   $870 = (($861) + 4|0);
   $871 = HEAP32[$870>>2]|0;
   $872 = (($871) + -4|0);
   HEAP32[$870>>2] = $872;
   $130 = $872;
   $873 = $130;
   $127 = $869;
   $128 = $873;
   $874 = $127;
   $875 = $128;
   ;HEAP8[$126+0>>0]=HEAP8[$129+0>>0]|0;
   $124 = $874;
   $125 = $875;
   $876 = $124;
   $877 = $125;
   $122 = $876;
   $123 = $877;
  }
  $878 = $__old_size$i$i19;
  __THREW__ = 0;
  invoke_vii(511,($851|0),($878|0));
  $879 = __THREW__; __THREW__ = 0;
  $880 = $879&1;
  if ($880) {
   label = 90;
   break;
  }
  while(1) {
   $104 = $back_stack;
   $883 = $104;
   $103 = $883;
   $884 = $103;
   $102 = $884;
   $885 = $102;
   $886 = (($885) + 20|0);
   $101 = $886;
   $887 = $101;
   $100 = $887;
   $888 = $100;
   $889 = HEAP32[$888>>2]|0;
   $890 = ($889|0)==(0);
   $891 = $890 ^ 1;
   if (!($891)) {
    break;
   }
   $99 = $result;
   $892 = $99;
   $893 = (($892) + 4|0);
   $894 = HEAP32[$893>>2]|0;
   $895 = (($894) + -4|0);
   $896 = HEAP32[$895>>2]|0;
   HEAP32[$back>>2] = $896;
   $91 = $min_span_tree;
   $897 = $91;
   $898 = HEAP32[$897>>2]|0;
   $89 = $897;
   $90 = $898;
   $899 = $90;
   $87 = $415;
   $88 = $899;
   $900 = $87;
   $901 = $88;
   HEAP32[$900>>2] = $901;
   $86 = $min_span_tree;
   $902 = $86;
   $903 = (($902) + 4|0);
   $904 = HEAP32[$903>>2]|0;
   $84 = $902;
   $85 = $904;
   $905 = $85;
   $82 = $416;
   $83 = $905;
   $906 = $82;
   $907 = $83;
   HEAP32[$906>>2] = $907;
   HEAP32[$417>>2] = $back;
   ;HEAP8[$53+0>>0]=HEAP8[$417+0>>0]|0;HEAP8[$53+1>>0]=HEAP8[$417+1>>0]|0;HEAP8[$53+2>>0]=HEAP8[$417+2>>0]|0;HEAP8[$53+3>>0]=HEAP8[$417+3>>0]|0;
   ;HEAP8[$54+0>>0]=HEAP8[$416+0>>0]|0;HEAP8[$54+1>>0]=HEAP8[$416+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$416+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$416+3>>0]|0;
   ;HEAP8[$55+0>>0]=HEAP8[$415+0>>0]|0;HEAP8[$55+1>>0]=HEAP8[$415+1>>0]|0;HEAP8[$55+2>>0]=HEAP8[$415+2>>0]|0;HEAP8[$55+3>>0]=HEAP8[$415+3>>0]|0;
   while(1) {
    $51 = $55;
    $52 = $54;
    $908 = $51;
    $909 = $52;
    $49 = $908;
    $50 = $909;
    $910 = $49;
    $48 = $910;
    $911 = $48;
    $912 = HEAP32[$911>>2]|0;
    $913 = $50;
    $47 = $913;
    $914 = $47;
    $915 = HEAP32[$914>>2]|0;
    $916 = ($912|0)==($915|0);
    $917 = $916 ^ 1;
    if (!($917)) {
     break;
    }
    $45 = $55;
    $918 = $45;
    $919 = HEAP32[$918>>2]|0;
    $920 = (__ZZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRPKNS_8net_bondIdEEE_clESB_($53,$919)|0);
    if ($920) {
     label = 99;
     break;
    }
    $46 = $55;
    $921 = $46;
    $922 = HEAP32[$921>>2]|0;
    $923 = (($922) + 4|0);
    HEAP32[$921>>2] = $923;
   }
   if ((label|0) == 99) {
    label = 0;
   }
   ;HEAP32[$it+0>>2]=HEAP32[$55+0>>2]|0;
   $44 = $min_span_tree;
   $924 = $44;
   $925 = (($924) + 4|0);
   $926 = HEAP32[$925>>2]|0;
   $42 = $924;
   $43 = $926;
   $927 = $43;
   $40 = $418;
   $41 = $927;
   $928 = $40;
   $929 = $41;
   HEAP32[$928>>2] = $929;
   $38 = $it;
   $39 = $418;
   $930 = $38;
   $37 = $930;
   $931 = $37;
   $932 = HEAP32[$931>>2]|0;
   $933 = $39;
   $36 = $933;
   $934 = $36;
   $935 = HEAP32[$934>>2]|0;
   $936 = ($932|0)==($935|0);
   if ($936) {
    $35 = $back_stack;
    $937 = $35;
    __THREW__ = 0;
    invoke_vi(512,($937|0));
    $938 = __THREW__; __THREW__ = 0;
    $939 = $938&1;
    if ($939) {
     label = 116;
     break L1;
    }
    $34 = $back_stack;
    $940 = $34;
    $33 = $940;
    $941 = $33;
    $32 = $941;
    $942 = $32;
    $943 = (($942) + 20|0);
    $31 = $943;
    $944 = $31;
    $30 = $944;
    $945 = $30;
    $946 = HEAP32[$945>>2]|0;
    $947 = ($946|0)==(0);
    if (!($947)) {
     $29 = $back_stack;
     $948 = $29;
     $28 = $948;
     $949 = $28;
     $27 = $949;
     $950 = $27;
     $951 = (($950) + 20|0);
     $26 = $951;
     $952 = $26;
     $25 = $952;
     $953 = $25;
     $954 = HEAP32[$953>>2]|0;
     $955 = (($949) + 16|0);
     $956 = HEAP32[$955>>2]|0;
     $957 = (($954) + ($956))|0;
     $958 = (($957) - 1)|0;
     $__p$i$i = $958;
     $24 = $949;
     $959 = $24;
     $960 = (($959) + 4|0);
     $961 = HEAP32[$960>>2]|0;
     $962 = $__p$i$i;
     $963 = (($962>>>0) / 1024)&-1;
     $964 = (($961) + ($963<<2)|0);
     $965 = HEAP32[$964>>2]|0;
     $966 = $__p$i$i;
     $967 = (($966>>>0) % 1024)&-1;
     $968 = (($965) + ($967<<2)|0);
     $21 = $result;
     $22 = $968;
     $969 = $21;
     $970 = (($969) + 4|0);
     $971 = HEAP32[$970>>2]|0;
     $20 = $969;
     $972 = $20;
     $973 = (($972) + 8|0);
     $19 = $973;
     $974 = $19;
     $18 = $974;
     $975 = $18;
     $976 = HEAP32[$975>>2]|0;
     $977 = ($971|0)!=($976|0);
     if ($977) {
      __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i43,$969,1);
      $17 = $969;
      $978 = $17;
      $979 = (($978) + 8|0);
      $16 = $979;
      $980 = $16;
      $15 = $980;
      $981 = $15;
      $982 = (($969) + 4|0);
      $983 = HEAP32[$982>>2]|0;
      $14 = $983;
      $984 = $14;
      $985 = $22;
      $10 = $981;
      $11 = $984;
      $12 = $985;
      $986 = $10;
      $987 = $11;
      $988 = $12;
      $9 = $988;
      $989 = $9;
      ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
      $5 = $986;
      $6 = $987;
      $7 = $989;
      $990 = $5;
      $991 = $6;
      $992 = $7;
      $4 = $992;
      $993 = $4;
      $1 = $990;
      $2 = $991;
      $3 = $993;
      $994 = $2;
      $995 = ($994|0)==(0|0);
      if (!($995)) {
       $996 = $3;
       $0 = $996;
       $997 = $0;
       $998 = HEAP32[$997>>2]|0;
       HEAP32[$994>>2] = $998;
      }
      __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i43);
      $999 = (($969) + 4|0);
      $1000 = HEAP32[$999>>2]|0;
      $1001 = (($1000) + 4|0);
      HEAP32[$999>>2] = $1001;
     } else {
      $1002 = $22;
      __THREW__ = 0;
      invoke_vii(513,($969|0),($1002|0));
      $1003 = __THREW__; __THREW__ = 0;
      $1004 = $1003&1;
      if ($1004) {
       label = 116;
       break L1;
      }
     }
    }
   } else {
    $23 = $it;
    $1007 = $23;
    $1008 = HEAP32[$1007>>2]|0;
    $1009 = HEAP32[$1008>>2]|0;
    __THREW__ = 0;
    $1010 = (invoke_ii(441,($1009|0))|0);
    $1011 = __THREW__; __THREW__ = 0;
    $1012 = $1011&1;
    if ($1012) {
     label = 116;
     break L1;
    }
    HEAP32[$419>>2] = $1010;
    $79 = $result;
    $80 = $419;
    $1013 = $79;
    $1014 = (($1013) + 4|0);
    $1015 = HEAP32[$1014>>2]|0;
    $78 = $1013;
    $1016 = $78;
    $1017 = (($1016) + 8|0);
    $77 = $1017;
    $1018 = $77;
    $76 = $1018;
    $1019 = $76;
    $1020 = HEAP32[$1019>>2]|0;
    $1021 = ($1015>>>0)<($1020>>>0);
    if ($1021) {
     __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i30,$1013,1);
     $75 = $1013;
     $1022 = $75;
     $1023 = (($1022) + 8|0);
     $74 = $1023;
     $1024 = $74;
     $73 = $1024;
     $1025 = $73;
     $1026 = (($1013) + 4|0);
     $1027 = HEAP32[$1026>>2]|0;
     $71 = $1027;
     $1028 = $71;
     $1029 = $80;
     $56 = $1029;
     $1030 = $56;
     $67 = $1025;
     $68 = $1028;
     $69 = $1030;
     $1031 = $67;
     $1032 = $68;
     $1033 = $69;
     $66 = $1033;
     $1034 = $66;
     ;HEAP8[$65+0>>0]=HEAP8[$70+0>>0]|0;
     $62 = $1031;
     $63 = $1032;
     $64 = $1034;
     $1035 = $62;
     $1036 = $63;
     $1037 = $64;
     $61 = $1037;
     $1038 = $61;
     $58 = $1035;
     $59 = $1036;
     $60 = $1038;
     $1039 = $59;
     $1040 = ($1039|0)==(0|0);
     if (!($1040)) {
      $1041 = $60;
      $57 = $1041;
      $1042 = $57;
      $1043 = HEAP32[$1042>>2]|0;
      HEAP32[$1039>>2] = $1043;
     }
     __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i30);
     $1044 = (($1013) + 4|0);
     $1045 = HEAP32[$1044>>2]|0;
     $1046 = (($1045) + 4|0);
     HEAP32[$1044>>2] = $1046;
    } else {
     $1047 = $80;
     $72 = $1047;
     $1048 = $72;
     __THREW__ = 0;
     invoke_vii(509,($1013|0),($1048|0));
     $1049 = __THREW__; __THREW__ = 0;
     $1050 = $1049&1;
     if ($1050) {
      label = 116;
      break L1;
     }
    }
    $81 = $it;
    $1051 = $81;
    $1052 = HEAP32[$1051>>2]|0;
    $1053 = HEAP32[$1052>>2]|0;
    __THREW__ = 0;
    $1054 = (invoke_ii(441,($1053|0))|0);
    $1055 = __THREW__; __THREW__ = 0;
    $1056 = $1055&1;
    if ($1056) {
     label = 116;
     break L1;
    }
    HEAP32[$420>>2] = $1054;
    $93 = $back_stack;
    $94 = $420;
    $1057 = $93;
    $1058 = $94;
    $92 = $1058;
    $1059 = $92;
    __THREW__ = 0;
    invoke_vii(510,($1057|0),($1059|0));
    $1060 = __THREW__; __THREW__ = 0;
    $1061 = $1060&1;
    if ($1061) {
     label = 116;
     break L1;
    }
    $96 = $421;
    $97 = $it;
    $98 = 0;
    $1062 = $96;
    $1063 = $97;
    $95 = $1063;
    $1064 = $95;
    $1065 = HEAP32[$1064>>2]|0;
    HEAP32[$1062>>2] = $1065;
    ;HEAP8[$261+0>>0]=HEAP8[$421+0>>0]|0;HEAP8[$261+1>>0]=HEAP8[$421+1>>0]|0;HEAP8[$261+2>>0]=HEAP8[$421+2>>0]|0;HEAP8[$261+3>>0]=HEAP8[$421+3>>0]|0;
    $259 = $min_span_tree;
    $1066 = $259;
    $258 = $1066;
    $1067 = $258;
    $257 = $1067;
    $1068 = $257;
    $1069 = HEAP32[$1068>>2]|0;
    $255 = $1068;
    $256 = $1069;
    $1070 = $256;
    $253 = $260;
    $254 = $1070;
    $1071 = $253;
    $1072 = $254;
    HEAP32[$1071>>2] = $1072;
    $234 = $261;
    $235 = $260;
    $1073 = $234;
    $233 = $1073;
    $1074 = $233;
    $1075 = HEAP32[$1074>>2]|0;
    $1076 = $235;
    $232 = $1076;
    $1077 = $232;
    $1078 = HEAP32[$1077>>2]|0;
    $1079 = $1075;
    $1080 = $1078;
    $1081 = (($1079) - ($1080))|0;
    $1082 = (($1081|0) / 4)&-1;
    $__ps$i = $1082;
    $1083 = HEAP32[$1066>>2]|0;
    $1084 = $__ps$i;
    $1085 = (($1083) + ($1084<<2)|0);
    $__p$i = $1085;
    $1086 = $__p$i;
    $230 = $1066;
    $231 = $1086;
    $1087 = $231;
    $228 = $422;
    $229 = $1087;
    $1088 = $228;
    $1089 = $229;
    HEAP32[$1088>>2] = $1089;
    $1090 = $__p$i;
    $1091 = (($1090) + 4|0);
    $1092 = (($1066) + 4|0);
    $1093 = HEAP32[$1092>>2]|0;
    $1094 = $__p$i;
    $225 = $1091;
    $226 = $1093;
    $227 = $1094;
    $1095 = $225;
    $224 = $1095;
    $1096 = $224;
    $1097 = $226;
    $219 = $1097;
    $1098 = $219;
    $1099 = $227;
    $220 = $1099;
    $1100 = $220;
    $221 = $1096;
    $222 = $1098;
    $223 = $1100;
    $1101 = $222;
    $1102 = $221;
    $1103 = $1101;
    $1104 = $1102;
    $1105 = (($1103) - ($1104))|0;
    $1106 = (($1105|0) / 4)&-1;
    $__n$i$i$i = $1106;
    $1107 = $223;
    $1108 = $221;
    $1109 = $__n$i$i$i;
    $1110 = $1109<<2;
    _memmove(($1107|0),($1108|0),($1110|0))|0;
    $1111 = $223;
    $1112 = $__n$i$i$i;
    $1113 = (($1111) + ($1112<<2)|0);
    $251 = $1066;
    $252 = $1113;
    $1114 = $251;
    $250 = $1114;
    $1115 = $250;
    $1116 = (($1115) + 4|0);
    $1117 = HEAP32[$1116>>2]|0;
    $1118 = HEAP32[$1115>>2]|0;
    $1119 = $1117;
    $1120 = $1118;
    $1121 = (($1119) - ($1120))|0;
    $1122 = (($1121|0) / 4)&-1;
    $__old_size$i$i = $1122;
    $1123 = $252;
    $248 = $1114;
    $249 = $1123;
    $1124 = $248;
    while(1) {
     $1125 = $249;
     $1126 = (($1124) + 4|0);
     $1127 = HEAP32[$1126>>2]|0;
     $1128 = ($1125|0)!=($1127|0);
     if (!($1128)) {
      break;
     }
     $247 = $1124;
     $1129 = $247;
     $1130 = (($1129) + 8|0);
     $246 = $1130;
     $1131 = $246;
     $245 = $1131;
     $1132 = $245;
     $1133 = (($1124) + 4|0);
     $1134 = HEAP32[$1133>>2]|0;
     $1135 = (($1134) + -4|0);
     HEAP32[$1133>>2] = $1135;
     $244 = $1135;
     $1136 = $244;
     $241 = $1132;
     $242 = $1136;
     $1137 = $241;
     $1138 = $242;
     ;HEAP8[$240+0>>0]=HEAP8[$243+0>>0]|0;
     $238 = $1137;
     $239 = $1138;
     $1139 = $238;
     $1140 = $239;
     $236 = $1139;
     $237 = $1140;
    }
    $1141 = $__old_size$i$i;
    __THREW__ = 0;
    invoke_vii(511,($1114|0),($1141|0));
    $1142 = __THREW__; __THREW__ = 0;
    $1143 = $1142&1;
    if ($1143) {
     label = 133;
     break L1;
    }
   }
  }
  $262 = $result;
  $263 = 0;
  $1146 = $262;
  $1147 = $263;
  $1148 = HEAP32[$1146>>2]|0;
  $1149 = (($1148) + ($1147<<2)|0);
  $1150 = HEAP32[$1149>>2]|0;
  $lhs = $1150;
  $1151 = $lhs;
  $269 = $active;
  $270 = $1151;
  $1152 = $269;
  $1153 = $270;
  $267 = $1152;
  $268 = $1153;
  $1154 = $267;
  $1155 = HEAP32[$1154>>2]|0;
  $1156 = $268;
  $1157 = (($1156>>>0) / 32)&-1;
  $1158 = (($1155) + ($1157<<2)|0);
  $1159 = $268;
  $1160 = (($1159>>>0) % 32)&-1;
  $1161 = 1 << $1160;
  $264 = $423;
  $265 = $1158;
  $266 = $1161;
  $1162 = $264;
  $1163 = $265;
  HEAP32[$1162>>2] = $1163;
  $1164 = (($1162) + 4|0);
  $1165 = $266;
  HEAP32[$1164>>2] = $1165;
  $271 = $423;
  $272 = 1;
  $1166 = $271;
  $1167 = $272;
  $1168 = $1167&1;
  if ($1168) {
   $1169 = (($1166) + 4|0);
   $1170 = HEAP32[$1169>>2]|0;
   $1171 = HEAP32[$1166>>2]|0;
   $1172 = HEAP32[$1171>>2]|0;
   $1173 = $1172 | $1170;
   HEAP32[$1171>>2] = $1173;
  } else {
   $1174 = (($1166) + 4|0);
   $1175 = HEAP32[$1174>>2]|0;
   $1176 = $1175 ^ -1;
   $1177 = HEAP32[$1166>>2]|0;
   $1178 = HEAP32[$1177>>2]|0;
   $1179 = $1178 & $1176;
   HEAP32[$1177>>2] = $1179;
  }
  $i1 = 1;
  while(1) {
   $1180 = $i1;
   $273 = $result;
   $1181 = $273;
   $1182 = (($1181) + 4|0);
   $1183 = HEAP32[$1182>>2]|0;
   $1184 = HEAP32[$1181>>2]|0;
   $1185 = $1183;
   $1186 = $1184;
   $1187 = (($1185) - ($1186))|0;
   $1188 = (($1187|0) / 4)&-1;
   $1189 = (($1188) - 1)|0;
   $1190 = ($1180>>>0)<($1189>>>0);
   if (!($1190)) {
    break;
   }
   $1191 = $i1;
   $274 = $result;
   $275 = $1191;
   $1192 = $274;
   $1193 = $275;
   $1194 = HEAP32[$1192>>2]|0;
   $1195 = (($1194) + ($1193<<2)|0);
   $1196 = HEAP32[$1195>>2]|0;
   $r = $1196;
   $1197 = $r;
   $281 = $active;
   $282 = $1197;
   $1198 = $281;
   $1199 = $282;
   $279 = $1198;
   $280 = $1199;
   $1200 = $279;
   $1201 = HEAP32[$1200>>2]|0;
   $1202 = $280;
   $1203 = (($1202>>>0) / 32)&-1;
   $1204 = (($1201) + ($1203<<2)|0);
   $1205 = $280;
   $1206 = (($1205>>>0) % 32)&-1;
   $1207 = 1 << $1206;
   $276 = $424;
   $277 = $1204;
   $278 = $1207;
   $1208 = $276;
   $1209 = $277;
   HEAP32[$1208>>2] = $1209;
   $1210 = (($1208) + 4|0);
   $1211 = $278;
   HEAP32[$1210>>2] = $1211;
   $283 = $424;
   $1212 = $283;
   $1213 = HEAP32[$1212>>2]|0;
   $1214 = HEAP32[$1213>>2]|0;
   $1215 = (($1212) + 4|0);
   $1216 = HEAP32[$1215>>2]|0;
   $1217 = $1214 & $1216;
   $1218 = ($1217|0)!=(0);
   if (!($1218)) {
    $284 = $agg$result;
    $1219 = $284;
    $1220 = HEAP32[$1219>>2]|0;
    $1221 = $bundle;
    $285 = $data;
    $1222 = $285;
    $1223 = HEAP32[$1222>>2]|0;
    $1224 = $lhs;
    $1225 = $r;
    __THREW__ = 0;
    $1226 = (invoke_iiii(470,($1223|0),($1224|0),($1225|0))|0);
    $1227 = __THREW__; __THREW__ = 0;
    $1228 = $1227&1;
    if ($1228) {
     label = 116;
     break L1;
    }
    __THREW__ = 0;
    invoke_viii(471,($1220|0),($1221|0),($1226|0));
    $1229 = __THREW__; __THREW__ = 0;
    $1230 = $1229&1;
    if ($1230) {
     label = 116;
     break L1;
    }
    $1231 = $r;
    $lhs = $1231;
    $1232 = $r;
    $303 = $active;
    $304 = $1232;
    $1233 = $303;
    $1234 = $304;
    $301 = $1233;
    $302 = $1234;
    $1235 = $301;
    $1236 = HEAP32[$1235>>2]|0;
    $1237 = $302;
    $1238 = (($1237>>>0) / 32)&-1;
    $1239 = (($1236) + ($1238<<2)|0);
    $1240 = $302;
    $1241 = (($1240>>>0) % 32)&-1;
    $1242 = 1 << $1241;
    $298 = $425;
    $299 = $1239;
    $300 = $1242;
    $1243 = $298;
    $1244 = $299;
    HEAP32[$1243>>2] = $1244;
    $1245 = (($1243) + 4|0);
    $1246 = $300;
    HEAP32[$1245>>2] = $1246;
    $305 = $425;
    $306 = 1;
    $1247 = $305;
    $1248 = $306;
    $1249 = $1248&1;
    if ($1249) {
     $1250 = (($1247) + 4|0);
     $1251 = HEAP32[$1250>>2]|0;
     $1252 = HEAP32[$1247>>2]|0;
     $1253 = HEAP32[$1252>>2]|0;
     $1254 = $1253 | $1251;
     HEAP32[$1252>>2] = $1254;
    } else {
     $1255 = (($1247) + 4|0);
     $1256 = HEAP32[$1255>>2]|0;
     $1257 = $1256 ^ -1;
     $1258 = HEAP32[$1247>>2]|0;
     $1259 = HEAP32[$1258>>2]|0;
     $1260 = $1259 & $1257;
     HEAP32[$1258>>2] = $1260;
    }
   }
   $1261 = $i1;
   $1262 = (($1261) + 1)|0;
   $i1 = $1262;
  }
  $307 = $agg$result;
  $1263 = $307;
  $1264 = HEAP32[$1263>>2]|0;
  $1265 = $bundle;
  $308 = $data;
  $1266 = $308;
  $1267 = HEAP32[$1266>>2]|0;
  $1268 = $lhs;
  $309 = $result;
  $1269 = $309;
  $1270 = (($1269) + 4|0);
  $1271 = HEAP32[$1270>>2]|0;
  $1272 = (($1271) + -4|0);
  $1273 = HEAP32[$1272>>2]|0;
  __THREW__ = 0;
  $1274 = (invoke_iiii(470,($1267|0),($1268|0),($1273|0))|0);
  $1275 = __THREW__; __THREW__ = 0;
  $1276 = $1275&1;
  if ($1276) {
   label = 116;
   break;
  }
  __THREW__ = 0;
  invoke_viii(471,($1264|0),($1265|0),($1274|0));
  $1277 = __THREW__; __THREW__ = 0;
  $1278 = $1277&1;
  if ($1278) {
   label = 116;
   break;
  }
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($result);
  __ZNSt3__15stackIiNS_5dequeIiNS_9allocatorIiEEEEED2Ev($back_stack);
  __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($active);
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($p);
  __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($d);
  __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($min_span_tree);
  $1279 = $first_node;
  $1280 = (($1279) + 1)|0;
  $first_node = $1280;
 }
 if ((label|0) == 19) {
  $503 = ___cxa_find_matching_catch()|0;
  $504 = tempRet0;
  $400 = $503;
  $401 = $504;
 }
 else if ((label|0) == 20) {
  $505 = ___cxa_find_matching_catch()|0;
  $506 = tempRet0;
  $400 = $505;
  $401 = $506;
  label = 164;
 }
 else if ((label|0) == 21) {
  $507 = ___cxa_find_matching_catch()|0;
  $508 = tempRet0;
  $400 = $507;
  $401 = $508;
  label = 163;
 }
 else if ((label|0) == 22) {
  $509 = ___cxa_find_matching_catch()|0;
  $510 = tempRet0;
  $400 = $509;
  $401 = $510;
  label = 162;
 }
 else if ((label|0) == 23) {
  $511 = ___cxa_find_matching_catch()|0;
  $512 = tempRet0;
  $400 = $511;
  $401 = $512;
  label = 161;
 }
 else if ((label|0) == 90) {
  $881 = ___cxa_find_matching_catch(0|0)|0;
  $882 = tempRet0;
  ___clang_call_terminate($881);
  // unreachable;
 }
 else if ((label|0) == 116) {
  $1005 = ___cxa_find_matching_catch()|0;
  $1006 = tempRet0;
  $400 = $1005;
  $401 = $1006;
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($result);
  __ZNSt3__15stackIiNS_5dequeIiNS_9allocatorIiEEEEED2Ev($back_stack);
  label = 161;
 }
 else if ((label|0) == 133) {
  $1144 = ___cxa_find_matching_catch(0|0)|0;
  $1145 = tempRet0;
  ___clang_call_terminate($1144);
  // unreachable;
 }
 else if ((label|0) == 165) {
  $$expand_i1_val2 = 1;
  $399 = $$expand_i1_val2;
  $426 = 1;
  $$pre_trunc = $399;
  $1281 = $$pre_trunc&1;
  if ($1281) {
   STACKTOP = sp;return;
  }
  __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
  STACKTOP = sp;return;
 }
 if ((label|0) == 161) {
  __ZNSt3__16vectorIbNS_9allocatorIbEEED2Ev($active);
  label = 162;
 }
 if ((label|0) == 162) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($p);
  label = 163;
 }
 if ((label|0) == 163) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($d);
  label = 164;
 }
 if ((label|0) == 164) {
  __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($min_span_tree);
 }
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 $1282 = $400;
 $1283 = $401;
 ___resumeException($1282|0);
 // unreachable;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEEC2EjRKd($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__a$i = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 141|0;
 $__annotator$i = sp + 140|0;
 $24 = sp + 44|0;
 $27 = sp + 32|0;
 $30 = $this;
 $31 = $__n;
 $32 = $__x;
 $35 = $30;
 $29 = $35;
 $36 = $29;
 $28 = $36;
 HEAP32[$36>>2] = 0;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = (($36) + 8|0);
 $26 = $38;
 HEAP32[$27>>2] = 0;
 $39 = $26;
 $25 = $27;
 $40 = $25;
 $41 = HEAP32[$40>>2]|0;
 $23 = $39;
 HEAP32[$24>>2] = $41;
 $42 = $23;
 $22 = $42;
 $21 = $24;
 $43 = $21;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = $31;
 $46 = ($45>>>0)>(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $31;
 __THREW__ = 0;
 invoke_vii(514,($35|0),($47|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $82 = ___cxa_find_matching_catch()|0;
  $83 = tempRet0;
  $33 = $82;
  $34 = $83;
  __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($35);
  $84 = $33;
  $85 = $34;
  ___resumeException($84|0);
  // unreachable;
 }
 $50 = $31;
 $51 = $32;
 $18 = $35;
 $19 = $50;
 $20 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $__a$i = $56;
 while(1) {
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$52,1);
  $57 = $__a$i;
  $58 = (($52) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $14 = $59;
  $60 = $14;
  $61 = $20;
  $10 = $57;
  $11 = $60;
  $12 = $61;
  $62 = $10;
  $63 = $11;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
  $5 = $62;
  $6 = $63;
  $7 = $65;
  $66 = $5;
  $67 = $6;
  $68 = $7;
  $4 = $68;
  $69 = $4;
  $1 = $66;
  $2 = $67;
  $3 = $69;
  $70 = $2;
  $71 = ($70|0)==(0|0);
  if (!($71)) {
   $72 = $3;
   $0 = $72;
   $73 = $0;
   $74 = +HEAPF64[$73>>3];
   HEAPF64[$70>>3] = $74;
  }
  $75 = (($52) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 8|0);
  HEAP32[$75>>2] = $77;
  $78 = $19;
  $79 = (($78) + -1)|0;
  $19 = $79;
  __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $80 = $19;
  $81 = ($80>>>0)>(0);
  if (!($81)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUliiE_clEii($this,$lhs,$rhs) {
 $this = $this|0;
 $lhs = $lhs|0;
 $rhs = $rhs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = $this;
 $5 = $lhs;
 $6 = $rhs;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = $5;
 $2 = $8;
 $3 = $9;
 $10 = $2;
 $11 = $3;
 $12 = HEAP32[$10>>2]|0;
 $13 = (($12) + ($11<<3)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = HEAP32[$7>>2]|0;
 $16 = $6;
 $0 = $15;
 $1 = $16;
 $17 = $0;
 $18 = $1;
 $19 = HEAP32[$17>>2]|0;
 $20 = (($19) + ($18<<3)|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $14 < $21;
 STACKTOP = sp;return ($22|0);
}
function __ZNSt3__15stackIiNS_5dequeIiNS_9allocatorIiEEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__15dequeIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIdNS_9allocatorIdEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = (($40) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -8|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = (($52) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = (($58) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 8)&-1;
 $11 = $55;
 $12 = $56;
 $13 = $67;
 $68 = $11;
 $69 = $12;
 $70 = $13;
 $8 = $68;
 $9 = $69;
 $10 = $70;
 $71 = $9;
 $7 = $71;
 $72 = $7;
 __ZdlPv($72);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__e = 0, $__i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $15 = $12;
 __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE5clearEv($15);
 $11 = $15;
 $16 = $11;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $__i = $18;
 $10 = $15;
 $19 = $10;
 $20 = (($19) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $__e = $21;
 while(1) {
  $22 = $__i;
  $23 = $__e;
  $24 = ($22|0)!=($23|0);
  if (!($24)) {
   break;
  }
  $9 = $15;
  $25 = $9;
  $26 = (($25) + 20|0);
  $8 = $26;
  $27 = $8;
  $7 = $27;
  $28 = $7;
  $29 = $__i;
  $30 = HEAP32[$29>>2]|0;
  $4 = $28;
  $5 = $30;
  $6 = 1024;
  $31 = $4;
  $32 = $5;
  $33 = $6;
  $1 = $31;
  $2 = $32;
  $3 = $33;
  $34 = $2;
  $0 = $34;
  $35 = $0;
  __ZdlPv($35);
  $36 = $__i;
  $37 = (($36) + 4|0);
  $__i = $37;
 }
 __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEED2Ev($15);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__e = 0, $__i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 177|0;
 $25 = sp;
 $28 = sp + 176|0;
 $__i = sp + 24|0;
 $__e = sp + 16|0;
 $38 = $this;
 $39 = $38;
 $37 = $39;
 $40 = $37;
 $41 = (($40) + 20|0);
 $36 = $41;
 $42 = $36;
 $35 = $42;
 $43 = $35;
 $__a = $43;
 __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE5beginEv($__i,$39);
 __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE3endEv($__e,$39);
 while(1) {
  $33 = $__i;
  $34 = $__e;
  $44 = $33;
  $45 = $34;
  $31 = $44;
  $32 = $45;
  $46 = $31;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $32;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($48|0)==($51|0);
  $53 = $52 ^ 1;
  if (!($53)) {
   break;
  }
  $54 = $__a;
  $15 = $__i;
  $55 = $15;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $58 = $0;
  $6 = $54;
  $7 = $58;
  $59 = $6;
  $60 = $7;
  ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
  $3 = $59;
  $4 = $60;
  $61 = $3;
  $62 = $4;
  $1 = $61;
  $2 = $62;
  $9 = $__i;
  $63 = $9;
  $64 = (($63) + 4|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 4|0);
  HEAP32[$64>>2] = $66;
  $67 = HEAP32[$63>>2]|0;
  $68 = HEAP32[$67>>2]|0;
  $69 = $66;
  $70 = $68;
  $71 = (($69) - ($70))|0;
  $72 = (($71|0) / 4)&-1;
  $73 = ($72|0)==(1024);
  if ($73) {
   $74 = HEAP32[$63>>2]|0;
   $75 = (($74) + 4|0);
   HEAP32[$63>>2] = $75;
   $76 = HEAP32[$63>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($63) + 4|0);
   HEAP32[$78>>2] = $77;
  }
 }
 $12 = $39;
 $79 = $12;
 $80 = (($79) + 20|0);
 $11 = $80;
 $81 = $11;
 $10 = $81;
 $82 = $10;
 HEAP32[$82>>2] = 0;
 while(1) {
  $13 = $39;
  $83 = $13;
  $84 = (($83) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($83) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $85;
  $89 = $87;
  $90 = (($88) - ($89))|0;
  $91 = (($90|0) / 4)&-1;
  $92 = ($91>>>0)>(2);
  if (!($92)) {
   break;
  }
  $93 = $__a;
  $14 = $39;
  $94 = $14;
  $95 = (($94) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = HEAP32[$96>>2]|0;
  $20 = $93;
  $21 = $97;
  $22 = 1024;
  $98 = $20;
  $99 = $21;
  $100 = $22;
  $17 = $98;
  $18 = $99;
  $19 = $100;
  $101 = $18;
  $16 = $101;
  $102 = $16;
  __ZdlPv($102);
  $29 = $39;
  $103 = $29;
  $104 = (($103) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 4|0);
  $26 = $103;
  $27 = $106;
  $107 = $26;
  $108 = $27;
  ;HEAP8[$25+0>>0]=HEAP8[$28+0>>0]|0;
  $23 = $107;
  $24 = $108;
  $109 = $23;
  $110 = $24;
  $111 = (($109) + 4|0);
  HEAP32[$111>>2] = $110;
 }
 $30 = $39;
 $112 = $30;
 $113 = (($112) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($112) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $114;
 $118 = $116;
 $119 = (($117) - ($118))|0;
 $120 = (($119|0) / 4)&-1;
 if ((($120|0) == 1)) {
  $121 = (($39) + 16|0);
  HEAP32[$121>>2] = 512;
  STACKTOP = sp;return;
 } else if ((($120|0) == 2)) {
  $122 = (($39) + 16|0);
  HEAP32[$122>>2] = 1024;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($40) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $22 = $51;
  $52 = $22;
  $19 = $48;
  $20 = $52;
  $53 = $19;
  $54 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  $56 = $17;
  $14 = $55;
  $15 = $56;
 }
 $57 = HEAP32[$34>>2]|0;
 $58 = ($57|0)!=(0|0);
 if (!($58)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $59 = $13;
 $60 = (($59) + 12|0);
 $12 = $60;
 $61 = $12;
 $11 = $61;
 $62 = $11;
 $63 = HEAP32[$34>>2]|0;
 $3 = $34;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $8 = $62;
 $9 = $63;
 $10 = $74;
 $75 = $8;
 $76 = $9;
 $77 = $10;
 $5 = $75;
 $6 = $76;
 $7 = $77;
 $78 = $6;
 $4 = $78;
 $79 = $4;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE5beginEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = $this;
 $6 = $5;
 $4 = $6;
 $7 = $4;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($6) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11>>>0) / 1024)&-1;
 $13 = (($9) + ($12<<2)|0);
 $__mp = $13;
 $14 = $__mp;
 $3 = $6;
 $15 = $3;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)==($19|0);
 if ($20) {
  $27 = 0;
 } else {
  $21 = $__mp;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($6) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24>>>0) % 1024)&-1;
  $26 = (($22) + ($25<<2)|0);
  $27 = $26;
 }
 $0 = $agg$result;
 $1 = $14;
 $2 = $27;
 $28 = $0;
 $29 = $1;
 HEAP32[$28>>2] = $29;
 $30 = (($28) + 4|0);
 $31 = $2;
 HEAP32[$30>>2] = $31;
 STACKTOP = sp;return;
}
function __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE3endEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__mp = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $7 = $9;
 $10 = $7;
 $11 = (($10) + 20|0);
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($9) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + ($16))|0;
 $__p = $17;
 $4 = $9;
 $18 = $4;
 $19 = (($18) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p;
 $22 = (($21>>>0) / 1024)&-1;
 $23 = (($20) + ($22<<2)|0);
 $__mp = $23;
 $24 = $__mp;
 $0 = $9;
 $25 = $0;
 $26 = (($25) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)==($29|0);
 if ($30) {
  $36 = 0;
 } else {
  $31 = $__mp;
  $32 = HEAP32[$31>>2]|0;
  $33 = $__p;
  $34 = (($33>>>0) % 1024)&-1;
  $35 = (($32) + ($34<<2)|0);
  $36 = $35;
 }
 $1 = $agg$result;
 $2 = $24;
 $3 = $36;
 $37 = $1;
 $38 = $2;
 HEAP32[$37>>2] = $38;
 $39 = (($37) + 4|0);
 $40 = $3;
 HEAP32[$39>>2] = $40;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(515,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIiNS_9allocatorIiEEE8pop_backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__p = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 16|0;
 $9 = sp + 222|0;
 $35 = sp + 8|0;
 $38 = sp + 221|0;
 $45 = sp;
 $48 = sp + 220|0;
 $53 = $this;
 $54 = $53;
 $52 = $54;
 $55 = $52;
 $56 = (($55) + 20|0);
 $51 = $56;
 $57 = $51;
 $50 = $57;
 $58 = $50;
 $__a = $58;
 $23 = $54;
 $59 = $23;
 $60 = (($59) + 20|0);
 $22 = $60;
 $61 = $22;
 $21 = $61;
 $62 = $21;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($54) + 16|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($63) + ($65))|0;
 $67 = (($66) - 1)|0;
 $__p = $67;
 $68 = $__a;
 $0 = $54;
 $69 = $0;
 $70 = (($69) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $__p;
 $73 = (($72>>>0) / 1024)&-1;
 $74 = (($71) + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $__p;
 $77 = (($76>>>0) % 1024)&-1;
 $78 = (($75) + ($77<<2)|0);
 $1 = $78;
 $79 = $1;
 $7 = $68;
 $8 = $79;
 $80 = $7;
 $81 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $80;
 $5 = $81;
 $82 = $4;
 $83 = $5;
 $2 = $82;
 $3 = $83;
 $12 = $54;
 $84 = $12;
 $85 = (($84) + 20|0);
 $11 = $85;
 $86 = $11;
 $10 = $86;
 $87 = $10;
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + -1)|0;
 HEAP32[$87>>2] = $89;
 $19 = $54;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $17 = $91;
 $92 = $17;
 $93 = (($92) + 8|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($92) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $94;
 $98 = $96;
 $99 = (($97) - ($98))|0;
 $100 = (($99|0) / 4)&-1;
 $101 = ($100|0)==(0);
 if ($101) {
  $122 = 0;
 } else {
  $16 = $91;
  $102 = $16;
  $103 = (($102) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($102) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $104;
  $108 = $106;
  $109 = (($107) - ($108))|0;
  $110 = (($109|0) / 4)&-1;
  $111 = $110<<10;
  $112 = (($111) - 1)|0;
  $122 = $112;
 }
 $113 = (($90) + 16|0);
 $114 = HEAP32[$113>>2]|0;
 $15 = $90;
 $115 = $15;
 $116 = (($115) + 20|0);
 $14 = $116;
 $117 = $14;
 $13 = $117;
 $118 = $13;
 $119 = HEAP32[$118>>2]|0;
 $120 = (($114) + ($119))|0;
 $121 = (($122) - ($120))|0;
 $123 = ($121>>>0)>=(2048);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = $__a;
 $20 = $54;
 $125 = $20;
 $126 = (($125) + 8|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + -4|0);
 $129 = HEAP32[$128>>2]|0;
 $28 = $124;
 $29 = $129;
 $30 = 1024;
 $130 = $28;
 $131 = $29;
 $132 = $30;
 $25 = $130;
 $26 = $131;
 $27 = $132;
 $133 = $26;
 $24 = $133;
 $134 = $24;
 __ZdlPv($134);
 $49 = $54;
 $135 = $49;
 $136 = (($135) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) + -4|0);
 $46 = $135;
 $47 = $138;
 $139 = $46;
 $140 = $47;
 ;HEAP8[$45+0>>0]=HEAP8[$48+0>>0]|0;
 $43 = $139;
 $44 = $140;
 $141 = $43;
 while(1) {
  $142 = $44;
  $143 = (($141) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($142|0)!=($144|0);
  if (!($145)) {
   break;
  }
  $42 = $141;
  $146 = $42;
  $147 = (($146) + 12|0);
  $41 = $147;
  $148 = $41;
  $40 = $148;
  $149 = $40;
  $150 = (($141) + 8|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + -4|0);
  HEAP32[$150>>2] = $152;
  $39 = $152;
  $153 = $39;
  $36 = $149;
  $37 = $153;
  $154 = $36;
  $155 = $37;
  ;HEAP8[$35+0>>0]=HEAP8[$38+0>>0]|0;
  $33 = $154;
  $34 = $155;
  $156 = $33;
  $157 = $34;
  $31 = $156;
  $32 = $157;
 }
 STACKTOP = sp;return;
}
function __ZZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUlRPKNS_8net_bondIdEEE_clESB_($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZNK7croutes8net_bondIdE4fromEv($4)|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIiNS_9allocatorIiEEE9push_backEOi($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $__a = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $23 = sp + 140|0;
 $32 = sp + 8|0;
 $30 = $this;
 $31 = $__v;
 $33 = $30;
 $29 = $33;
 $34 = $29;
 $35 = (($34) + 20|0);
 $28 = $35;
 $36 = $28;
 $27 = $36;
 $37 = $27;
 $__a = $37;
 $6 = $33;
 $38 = $6;
 $5 = $38;
 $39 = $5;
 $4 = $39;
 $40 = $4;
 $41 = (($40) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $42;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $48 = (($47|0) / 4)&-1;
 $49 = ($48|0)==(0);
 if ($49) {
  $70 = 0;
 } else {
  $3 = $39;
  $50 = $3;
  $51 = (($50) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $52;
  $56 = $54;
  $57 = (($55) - ($56))|0;
  $58 = (($57|0) / 4)&-1;
  $59 = $58<<10;
  $60 = (($59) - 1)|0;
  $70 = $60;
 }
 $61 = (($38) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $2 = $38;
 $63 = $2;
 $64 = (($63) + 20|0);
 $1 = $64;
 $65 = $1;
 $0 = $65;
 $66 = $0;
 $67 = HEAP32[$66>>2]|0;
 $68 = (($62) + ($67))|0;
 $69 = (($70) - ($68))|0;
 $71 = ($69|0)==(0);
 if ($71) {
  __ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv($33);
 }
 $72 = $__a;
 __ZNSt3__112__deque_baseIiNS_9allocatorIiEEE3endEv($32,$33);
 $7 = $32;
 $73 = $7;
 $74 = (($73) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $8 = $75;
 $76 = $8;
 $77 = $31;
 $9 = $77;
 $78 = $9;
 $20 = $72;
 $21 = $76;
 $22 = $78;
 $79 = $20;
 $80 = $21;
 $81 = $22;
 $19 = $81;
 $82 = $19;
 ;HEAP8[$18+0>>0]=HEAP8[$23+0>>0]|0;
 $15 = $79;
 $16 = $80;
 $17 = $82;
 $83 = $15;
 $84 = $16;
 $85 = $17;
 $14 = $85;
 $86 = $14;
 $11 = $83;
 $12 = $84;
 $13 = $86;
 $87 = $12;
 $88 = ($87|0)==(0|0);
 if ($88) {
  $26 = $33;
  $92 = $26;
  $93 = (($92) + 20|0);
  $25 = $93;
  $94 = $25;
  $24 = $94;
  $95 = $24;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$95>>2] = $97;
  STACKTOP = sp;return;
 }
 $89 = $13;
 $10 = $89;
 $90 = $10;
 $91 = HEAP32[$90>>2]|0;
 HEAP32[$87>>2] = $91;
 $26 = $33;
 $92 = $26;
 $93 = (($92) + 20|0);
 $25 = $93;
 $94 = $25;
 $24 = $94;
 $95 = $24;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 1)|0;
 HEAP32[$95>>2] = $97;
 STACKTOP = sp;return;
}
function __ZNSt3__15dequeIiNS_9allocatorIiEEE19__add_back_capacityEv($this) {
 $this = $this|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__buf = 0, $__c$i = 0, $__c$i16 = 0, $__d$i = 0, $__d$i15 = 0, $__i = 0, $__n$i$i$i = 0, $__n$i$i$i14 = 0, $__pt = 0, $__pt1 = 0, $__t$i = 0, $__t$i$i = 0, $__t$i$i13 = 0, $__t$i1$i = 0, $__t$i1$i12 = 0, $__t$i17 = 0, $__t$i2 = 0, $__t$i2$i = 0, $__t$i2$i11 = 0, $__t$i3 = 0;
 var $__t$i3$i = 0, $__t$i3$i10 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy3 = sp + 1252|0;
 $$byval_copy2 = sp + 1248|0;
 $$byval_copy1 = sp + 1244|0;
 $$byval_copy = sp + 1240|0;
 $15 = sp + 48|0;
 $18 = sp + 1262|0;
 $35 = sp + 40|0;
 $38 = sp + 1261|0;
 $__t$i3$i10 = sp + 1076|0;
 $__t$i2$i11 = sp + 1052|0;
 $__t$i1$i12 = sp + 1028|0;
 $__t$i$i13 = sp + 980|0;
 $89 = sp + 32|0;
 $94 = sp + 1260|0;
 $100 = sp + 832|0;
 $101 = sp + 828|0;
 $__t$i17 = sp + 808|0;
 $102 = sp + 804|0;
 $105 = sp + 792|0;
 $109 = sp + 24|0;
 $112 = sp + 1259|0;
 $157 = sp + 16|0;
 $160 = sp + 1258|0;
 $__t$i3$i = sp + 564|0;
 $__t$i2$i = sp + 540|0;
 $__t$i1$i = sp + 516|0;
 $__t$i$i = sp + 468|0;
 $211 = sp + 8|0;
 $216 = sp + 1257|0;
 $222 = sp + 320|0;
 $223 = sp + 316|0;
 $__t$i5 = sp + 296|0;
 $224 = sp + 292|0;
 $227 = sp + 280|0;
 $__t$i4 = sp + 256|0;
 $__t$i3 = sp + 232|0;
 $__t$i2 = sp + 208|0;
 $__t$i = sp + 160|0;
 $256 = sp;
 $259 = sp + 1256|0;
 $__pt = sp + 108|0;
 $267 = sp + 104|0;
 $268 = sp + 100|0;
 $__pt1 = sp + 96|0;
 $__buf = sp + 76|0;
 $269 = sp + 72|0;
 $270 = sp + 68|0;
 $271 = sp + 64|0;
 $266 = $this;
 $274 = $266;
 $265 = $274;
 $275 = $265;
 $276 = (($275) + 20|0);
 $264 = $276;
 $277 = $264;
 $263 = $277;
 $278 = $263;
 $__a = $278;
 $262 = $274;
 $279 = $262;
 $280 = (($279) + 16|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281>>>0)>=(1024);
 if ($282) {
  $283 = (($274) + 16|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) - 1024)|0;
  HEAP32[$283>>2] = $285;
  $261 = $274;
  $286 = $261;
  $287 = (($286) + 4|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = HEAP32[$288>>2]|0;
  HEAP32[$__pt>>2] = $289;
  $260 = $274;
  $290 = $260;
  $291 = (($290) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($292) + 4|0);
  $257 = $290;
  $258 = $293;
  $294 = $257;
  $295 = $258;
  ;HEAP8[$256+0>>0]=HEAP8[$259+0>>0]|0;
  $254 = $294;
  $255 = $295;
  $296 = $254;
  $297 = $255;
  $298 = (($296) + 4|0);
  HEAP32[$298>>2] = $297;
  $220 = $274;
  $221 = $__pt;
  $299 = $220;
  $300 = (($299) + 8|0);
  $301 = HEAP32[$300>>2]|0;
  $219 = $299;
  $302 = $219;
  $303 = (($302) + 12|0);
  $218 = $303;
  $304 = $218;
  $217 = $304;
  $305 = $217;
  $306 = HEAP32[$305>>2]|0;
  $307 = ($301|0)==($306|0);
  if ($307) {
   $308 = (($299) + 4|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[$299>>2]|0;
   $311 = ($309>>>0)>($310>>>0);
   do {
    if ($311) {
     $312 = (($299) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = HEAP32[$299>>2]|0;
     $315 = $313;
     $316 = $314;
     $317 = (($315) - ($316))|0;
     $318 = (($317|0) / 4)&-1;
     $__d$i = $318;
     $319 = $__d$i;
     $320 = (($319) + 1)|0;
     $321 = (($320|0) / 2)&-1;
     $__d$i = $321;
     $322 = (($299) + 4|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = (($299) + 8|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = (($299) + 4|0);
     $327 = HEAP32[$326>>2]|0;
     $328 = $__d$i;
     $329 = (0 - ($328))|0;
     $330 = (($327) + ($329<<2)|0);
     $196 = $323;
     $197 = $325;
     $198 = $330;
     $331 = $196;
     $195 = $331;
     $332 = $195;
     $333 = $197;
     $190 = $333;
     $334 = $190;
     $335 = $198;
     $191 = $335;
     $336 = $191;
     $192 = $332;
     $193 = $334;
     $194 = $336;
     $337 = $193;
     $338 = $192;
     $339 = $337;
     $340 = $338;
     $341 = (($339) - ($340))|0;
     $342 = (($341|0) / 4)&-1;
     $__n$i$i$i = $342;
     $343 = $194;
     $344 = $192;
     $345 = $__n$i$i$i;
     $346 = $345<<2;
     _memmove(($343|0),($344|0),($346|0))|0;
     $347 = $194;
     $348 = $__n$i$i$i;
     $349 = (($347) + ($348<<2)|0);
     $350 = (($299) + 8|0);
     HEAP32[$350>>2] = $349;
     $351 = $__d$i;
     $352 = (($299) + 4|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = (0 - ($351))|0;
     $355 = (($353) + ($354<<2)|0);
     HEAP32[$352>>2] = $355;
    } else {
     $189 = $299;
     $356 = $189;
     $357 = (($356) + 12|0);
     $188 = $357;
     $358 = $188;
     $187 = $358;
     $359 = $187;
     $360 = HEAP32[$359>>2]|0;
     $361 = HEAP32[$299>>2]|0;
     $362 = $360;
     $363 = $361;
     $364 = (($362) - ($363))|0;
     $365 = (($364|0) / 4)&-1;
     $366 = $365<<1;
     HEAP32[$222>>2] = $366;
     HEAP32[$223>>2] = 1;
     $158 = $222;
     $159 = $223;
     $367 = $158;
     $368 = $159;
     ;HEAP8[$157+0>>0]=HEAP8[$160+0>>0]|0;
     $155 = $367;
     $156 = $368;
     $369 = $155;
     $370 = $156;
     $152 = $157;
     $153 = $369;
     $154 = $370;
     $371 = $153;
     $372 = HEAP32[$371>>2]|0;
     $373 = $154;
     $374 = HEAP32[$373>>2]|0;
     $375 = ($372>>>0)<($374>>>0);
     if ($375) {
      $376 = $156;
      $379 = $376;
     } else {
      $377 = $155;
      $379 = $377;
     }
     $378 = HEAP32[$379>>2]|0;
     $__c$i = $378;
     $380 = $__c$i;
     $381 = $__c$i;
     $382 = (($381>>>0) / 4)&-1;
     $147 = $299;
     $383 = $147;
     $384 = (($383) + 12|0);
     $146 = $384;
     $385 = $146;
     $145 = $385;
     $386 = $145;
     __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t$i5,$380,$382,$386);
     $387 = (($299) + 4|0);
     $388 = HEAP32[$387>>2]|0;
     $148 = $224;
     $149 = $388;
     $389 = $148;
     $390 = $149;
     HEAP32[$389>>2] = $390;
     $391 = (($299) + 8|0);
     $392 = HEAP32[$391>>2]|0;
     $150 = $227;
     $151 = $392;
     $393 = $150;
     $394 = $151;
     HEAP32[$393>>2] = $394;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$224+0>>2]|0;
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$227+0>>2]|0;
     invoke_viii(516,($__t$i5|0),($$byval_copy|0),($$byval_copy1|0));
     $395 = __THREW__; __THREW__ = 0;
     $396 = $395&1;
     if ($396) {
      $449 = ___cxa_find_matching_catch()|0;
      $450 = tempRet0;
      $225 = $449;
      $226 = $450;
      __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t$i5);
      $451 = $225;
      $452 = $226;
      ___resumeException($451|0);
      // unreachable;
     } else {
      $164 = $299;
      $165 = $__t$i5;
      $397 = $164;
      $163 = $397;
      $398 = $163;
      $399 = HEAP32[$398>>2]|0;
      HEAP32[$__t$i3$i>>2] = $399;
      $400 = $165;
      $161 = $400;
      $401 = $161;
      $402 = HEAP32[$401>>2]|0;
      $403 = $164;
      HEAP32[$403>>2] = $402;
      $162 = $__t$i3$i;
      $404 = $162;
      $405 = HEAP32[$404>>2]|0;
      $406 = $165;
      HEAP32[$406>>2] = $405;
      $407 = (($299) + 4|0);
      $408 = (($__t$i5) + 4|0);
      $169 = $407;
      $170 = $408;
      $409 = $169;
      $168 = $409;
      $410 = $168;
      $411 = HEAP32[$410>>2]|0;
      HEAP32[$__t$i2$i>>2] = $411;
      $412 = $170;
      $166 = $412;
      $413 = $166;
      $414 = HEAP32[$413>>2]|0;
      $415 = $169;
      HEAP32[$415>>2] = $414;
      $167 = $__t$i2$i;
      $416 = $167;
      $417 = HEAP32[$416>>2]|0;
      $418 = $170;
      HEAP32[$418>>2] = $417;
      $419 = (($299) + 8|0);
      $420 = (($__t$i5) + 8|0);
      $174 = $419;
      $175 = $420;
      $421 = $174;
      $173 = $421;
      $422 = $173;
      $423 = HEAP32[$422>>2]|0;
      HEAP32[$__t$i1$i>>2] = $423;
      $424 = $175;
      $171 = $424;
      $425 = $171;
      $426 = HEAP32[$425>>2]|0;
      $427 = $174;
      HEAP32[$427>>2] = $426;
      $172 = $__t$i1$i;
      $428 = $172;
      $429 = HEAP32[$428>>2]|0;
      $430 = $175;
      HEAP32[$430>>2] = $429;
      $178 = $299;
      $431 = $178;
      $432 = (($431) + 12|0);
      $177 = $432;
      $433 = $177;
      $176 = $433;
      $434 = $176;
      $181 = $__t$i5;
      $435 = $181;
      $436 = (($435) + 12|0);
      $180 = $436;
      $437 = $180;
      $179 = $437;
      $438 = $179;
      $185 = $434;
      $186 = $438;
      $439 = $185;
      $184 = $439;
      $440 = $184;
      $441 = HEAP32[$440>>2]|0;
      HEAP32[$__t$i$i>>2] = $441;
      $442 = $186;
      $182 = $442;
      $443 = $182;
      $444 = HEAP32[$443>>2]|0;
      $445 = $185;
      HEAP32[$445>>2] = $444;
      $183 = $__t$i$i;
      $446 = $183;
      $447 = HEAP32[$446>>2]|0;
      $448 = $186;
      HEAP32[$448>>2] = $447;
      __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t$i5);
      break;
     }
    }
   } while(0);
  }
  $201 = $299;
  $453 = $201;
  $454 = (($453) + 12|0);
  $200 = $454;
  $455 = $200;
  $199 = $455;
  $456 = $199;
  $457 = (($299) + 8|0);
  $458 = HEAP32[$457>>2]|0;
  $202 = $458;
  $459 = $202;
  $460 = $221;
  $213 = $456;
  $214 = $459;
  $215 = $460;
  $461 = $213;
  $462 = $214;
  $463 = $215;
  $212 = $463;
  $464 = $212;
  ;HEAP8[$211+0>>0]=HEAP8[$216+0>>0]|0;
  $208 = $461;
  $209 = $462;
  $210 = $464;
  $465 = $208;
  $466 = $209;
  $467 = $210;
  $207 = $467;
  $468 = $207;
  $204 = $465;
  $205 = $466;
  $206 = $468;
  $469 = $205;
  $470 = ($469|0)==(0|0);
  if (!($470)) {
   $471 = $206;
   $203 = $471;
   $472 = $203;
   $473 = HEAP32[$472>>2]|0;
   HEAP32[$469>>2] = $473;
  }
  $474 = (($299) + 8|0);
  $475 = HEAP32[$474>>2]|0;
  $476 = (($475) + 4|0);
  HEAP32[$474>>2] = $476;
  STACKTOP = sp;return;
 }
 $144 = $274;
 $477 = $144;
 $478 = (($477) + 8|0);
 $479 = HEAP32[$478>>2]|0;
 $480 = (($477) + 4|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = $479;
 $483 = $481;
 $484 = (($482) - ($483))|0;
 $485 = (($484|0) / 4)&-1;
 $143 = $274;
 $486 = $143;
 $142 = $486;
 $487 = $142;
 $488 = (($487) + 12|0);
 $141 = $488;
 $489 = $141;
 $140 = $489;
 $490 = $140;
 $491 = HEAP32[$490>>2]|0;
 $492 = HEAP32[$486>>2]|0;
 $493 = $491;
 $494 = $492;
 $495 = (($493) - ($494))|0;
 $496 = (($495|0) / 4)&-1;
 $497 = ($485>>>0)<($496>>>0);
 L22: do {
  if ($497) {
   $139 = $274;
   $498 = $139;
   $138 = $498;
   $499 = $138;
   $500 = (($499) + 12|0);
   $137 = $500;
   $501 = $137;
   $136 = $501;
   $502 = $136;
   $503 = HEAP32[$502>>2]|0;
   $504 = (($498) + 8|0);
   $505 = HEAP32[$504>>2]|0;
   $506 = $503;
   $507 = $505;
   $508 = (($506) - ($507))|0;
   $509 = (($508|0) / 4)&-1;
   $510 = ($509|0)!=(0);
   if ($510) {
    $511 = $__a;
    $134 = $511;
    $135 = 1024;
    $512 = $134;
    $513 = $135;
    $131 = $512;
    $132 = $513;
    $133 = 0;
    $514 = $132;
    $515 = $514<<2;
    $130 = $515;
    $516 = $130;
    $517 = (__Znwj($516)|0);
    HEAP32[$267>>2] = $517;
    __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_($274,$267);
   } else {
    $518 = $__a;
    $128 = $518;
    $129 = 1024;
    $519 = $128;
    $520 = $129;
    $125 = $519;
    $126 = $520;
    $127 = 0;
    $521 = $126;
    $522 = $521<<2;
    $124 = $522;
    $523 = $124;
    $524 = (__Znwj($523)|0);
    HEAP32[$268>>2] = $524;
    __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_($274,$268);
    $123 = $274;
    $525 = $123;
    $526 = (($525) + 4|0);
    $527 = HEAP32[$526>>2]|0;
    $528 = HEAP32[$527>>2]|0;
    HEAP32[$__pt1>>2] = $528;
    $113 = $274;
    $529 = $113;
    $530 = (($529) + 4|0);
    $531 = HEAP32[$530>>2]|0;
    $532 = (($531) + 4|0);
    $110 = $529;
    $111 = $532;
    $533 = $110;
    $534 = $111;
    ;HEAP8[$109+0>>0]=HEAP8[$112+0>>0]|0;
    $107 = $533;
    $108 = $534;
    $535 = $107;
    $536 = $108;
    $537 = (($535) + 4|0);
    HEAP32[$537>>2] = $536;
    $98 = $274;
    $99 = $__pt1;
    $538 = $98;
    $539 = (($538) + 8|0);
    $540 = HEAP32[$539>>2]|0;
    $97 = $538;
    $541 = $97;
    $542 = (($541) + 12|0);
    $96 = $542;
    $543 = $96;
    $95 = $543;
    $544 = $95;
    $545 = HEAP32[$544>>2]|0;
    $546 = ($540|0)==($545|0);
    if ($546) {
     $547 = (($538) + 4|0);
     $548 = HEAP32[$547>>2]|0;
     $549 = HEAP32[$538>>2]|0;
     $550 = ($548>>>0)>($549>>>0);
     do {
      if ($550) {
       $551 = (($538) + 4|0);
       $552 = HEAP32[$551>>2]|0;
       $553 = HEAP32[$538>>2]|0;
       $554 = $552;
       $555 = $553;
       $556 = (($554) - ($555))|0;
       $557 = (($556|0) / 4)&-1;
       $__d$i15 = $557;
       $558 = $__d$i15;
       $559 = (($558) + 1)|0;
       $560 = (($559|0) / 2)&-1;
       $__d$i15 = $560;
       $561 = (($538) + 4|0);
       $562 = HEAP32[$561>>2]|0;
       $563 = (($538) + 8|0);
       $564 = HEAP32[$563>>2]|0;
       $565 = (($538) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = $__d$i15;
       $568 = (0 - ($567))|0;
       $569 = (($566) + ($568<<2)|0);
       $74 = $562;
       $75 = $564;
       $76 = $569;
       $570 = $74;
       $73 = $570;
       $571 = $73;
       $572 = $75;
       $68 = $572;
       $573 = $68;
       $574 = $76;
       $69 = $574;
       $575 = $69;
       $70 = $571;
       $71 = $573;
       $72 = $575;
       $576 = $71;
       $577 = $70;
       $578 = $576;
       $579 = $577;
       $580 = (($578) - ($579))|0;
       $581 = (($580|0) / 4)&-1;
       $__n$i$i$i14 = $581;
       $582 = $72;
       $583 = $70;
       $584 = $__n$i$i$i14;
       $585 = $584<<2;
       _memmove(($582|0),($583|0),($585|0))|0;
       $586 = $72;
       $587 = $__n$i$i$i14;
       $588 = (($586) + ($587<<2)|0);
       $589 = (($538) + 8|0);
       HEAP32[$589>>2] = $588;
       $590 = $__d$i15;
       $591 = (($538) + 4|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (0 - ($590))|0;
       $594 = (($592) + ($593<<2)|0);
       HEAP32[$591>>2] = $594;
      } else {
       $67 = $538;
       $595 = $67;
       $596 = (($595) + 12|0);
       $66 = $596;
       $597 = $66;
       $65 = $597;
       $598 = $65;
       $599 = HEAP32[$598>>2]|0;
       $600 = HEAP32[$538>>2]|0;
       $601 = $599;
       $602 = $600;
       $603 = (($601) - ($602))|0;
       $604 = (($603|0) / 4)&-1;
       $605 = $604<<1;
       HEAP32[$100>>2] = $605;
       HEAP32[$101>>2] = 1;
       $36 = $100;
       $37 = $101;
       $606 = $36;
       $607 = $37;
       ;HEAP8[$35+0>>0]=HEAP8[$38+0>>0]|0;
       $33 = $606;
       $34 = $607;
       $608 = $33;
       $609 = $34;
       $30 = $35;
       $31 = $608;
       $32 = $609;
       $610 = $31;
       $611 = HEAP32[$610>>2]|0;
       $612 = $32;
       $613 = HEAP32[$612>>2]|0;
       $614 = ($611>>>0)<($613>>>0);
       if ($614) {
        $615 = $34;
        $618 = $615;
       } else {
        $616 = $33;
        $618 = $616;
       }
       $617 = HEAP32[$618>>2]|0;
       $__c$i16 = $617;
       $619 = $__c$i16;
       $620 = $__c$i16;
       $621 = (($620>>>0) / 4)&-1;
       $25 = $538;
       $622 = $25;
       $623 = (($622) + 12|0);
       $24 = $623;
       $624 = $24;
       $23 = $624;
       $625 = $23;
       __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t$i17,$619,$621,$625);
       $626 = (($538) + 4|0);
       $627 = HEAP32[$626>>2]|0;
       $26 = $102;
       $27 = $627;
       $628 = $26;
       $629 = $27;
       HEAP32[$628>>2] = $629;
       $630 = (($538) + 8|0);
       $631 = HEAP32[$630>>2]|0;
       $28 = $105;
       $29 = $631;
       $632 = $28;
       $633 = $29;
       HEAP32[$632>>2] = $633;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$102+0>>2]|0;
       ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$105+0>>2]|0;
       invoke_viii(516,($__t$i17|0),($$byval_copy2|0),($$byval_copy3|0));
       $634 = __THREW__; __THREW__ = 0;
       $635 = $634&1;
       if ($635) {
        $688 = ___cxa_find_matching_catch()|0;
        $689 = tempRet0;
        $103 = $688;
        $104 = $689;
        __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t$i17);
        $690 = $103;
        $691 = $104;
        ___resumeException($690|0);
        // unreachable;
       } else {
        $42 = $538;
        $43 = $__t$i17;
        $636 = $42;
        $41 = $636;
        $637 = $41;
        $638 = HEAP32[$637>>2]|0;
        HEAP32[$__t$i3$i10>>2] = $638;
        $639 = $43;
        $39 = $639;
        $640 = $39;
        $641 = HEAP32[$640>>2]|0;
        $642 = $42;
        HEAP32[$642>>2] = $641;
        $40 = $__t$i3$i10;
        $643 = $40;
        $644 = HEAP32[$643>>2]|0;
        $645 = $43;
        HEAP32[$645>>2] = $644;
        $646 = (($538) + 4|0);
        $647 = (($__t$i17) + 4|0);
        $47 = $646;
        $48 = $647;
        $648 = $47;
        $46 = $648;
        $649 = $46;
        $650 = HEAP32[$649>>2]|0;
        HEAP32[$__t$i2$i11>>2] = $650;
        $651 = $48;
        $44 = $651;
        $652 = $44;
        $653 = HEAP32[$652>>2]|0;
        $654 = $47;
        HEAP32[$654>>2] = $653;
        $45 = $__t$i2$i11;
        $655 = $45;
        $656 = HEAP32[$655>>2]|0;
        $657 = $48;
        HEAP32[$657>>2] = $656;
        $658 = (($538) + 8|0);
        $659 = (($__t$i17) + 8|0);
        $52 = $658;
        $53 = $659;
        $660 = $52;
        $51 = $660;
        $661 = $51;
        $662 = HEAP32[$661>>2]|0;
        HEAP32[$__t$i1$i12>>2] = $662;
        $663 = $53;
        $49 = $663;
        $664 = $49;
        $665 = HEAP32[$664>>2]|0;
        $666 = $52;
        HEAP32[$666>>2] = $665;
        $50 = $__t$i1$i12;
        $667 = $50;
        $668 = HEAP32[$667>>2]|0;
        $669 = $53;
        HEAP32[$669>>2] = $668;
        $56 = $538;
        $670 = $56;
        $671 = (($670) + 12|0);
        $55 = $671;
        $672 = $55;
        $54 = $672;
        $673 = $54;
        $59 = $__t$i17;
        $674 = $59;
        $675 = (($674) + 12|0);
        $58 = $675;
        $676 = $58;
        $57 = $676;
        $677 = $57;
        $63 = $673;
        $64 = $677;
        $678 = $63;
        $62 = $678;
        $679 = $62;
        $680 = HEAP32[$679>>2]|0;
        HEAP32[$__t$i$i13>>2] = $680;
        $681 = $64;
        $60 = $681;
        $682 = $60;
        $683 = HEAP32[$682>>2]|0;
        $684 = $63;
        HEAP32[$684>>2] = $683;
        $61 = $__t$i$i13;
        $685 = $61;
        $686 = HEAP32[$685>>2]|0;
        $687 = $64;
        HEAP32[$687>>2] = $686;
        __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t$i17);
        break;
       }
      }
     } while(0);
    }
    $79 = $538;
    $692 = $79;
    $693 = (($692) + 12|0);
    $78 = $693;
    $694 = $78;
    $77 = $694;
    $695 = $77;
    $696 = (($538) + 8|0);
    $697 = HEAP32[$696>>2]|0;
    $80 = $697;
    $698 = $80;
    $699 = $99;
    $91 = $695;
    $92 = $698;
    $93 = $699;
    $700 = $91;
    $701 = $92;
    $702 = $93;
    $90 = $702;
    $703 = $90;
    ;HEAP8[$89+0>>0]=HEAP8[$94+0>>0]|0;
    $86 = $700;
    $87 = $701;
    $88 = $703;
    $704 = $86;
    $705 = $87;
    $706 = $88;
    $85 = $706;
    $707 = $85;
    $82 = $704;
    $83 = $705;
    $84 = $707;
    $708 = $83;
    $709 = ($708|0)==(0|0);
    if (!($709)) {
     $710 = $84;
     $81 = $710;
     $711 = $81;
     $712 = HEAP32[$711>>2]|0;
     HEAP32[$708>>2] = $712;
    }
    $713 = (($538) + 8|0);
    $714 = HEAP32[$713>>2]|0;
    $715 = (($714) + 4|0);
    HEAP32[$713>>2] = $715;
   }
  } else {
   $22 = $274;
   $716 = $22;
   $21 = $716;
   $717 = $21;
   $718 = (($717) + 12|0);
   $20 = $718;
   $719 = $20;
   $19 = $719;
   $720 = $19;
   $721 = HEAP32[$720>>2]|0;
   $722 = HEAP32[$716>>2]|0;
   $723 = $721;
   $724 = $722;
   $725 = (($723) - ($724))|0;
   $726 = (($725|0) / 4)&-1;
   $727 = $726<<1;
   HEAP32[$269>>2] = $727;
   HEAP32[$270>>2] = 1;
   $16 = $269;
   $17 = $270;
   $728 = $16;
   $729 = $17;
   ;HEAP8[$15+0>>0]=HEAP8[$18+0>>0]|0;
   $13 = $728;
   $14 = $729;
   $730 = $13;
   $731 = $14;
   $10 = $15;
   $11 = $730;
   $12 = $731;
   $732 = $11;
   $733 = HEAP32[$732>>2]|0;
   $734 = $12;
   $735 = HEAP32[$734>>2]|0;
   $736 = ($733>>>0)<($735>>>0);
   if ($736) {
    $737 = $14;
    $740 = $737;
   } else {
    $738 = $13;
    $740 = $738;
   }
   $739 = HEAP32[$740>>2]|0;
   $9 = $274;
   $741 = $9;
   $742 = (($741) + 8|0);
   $743 = HEAP32[$742>>2]|0;
   $744 = (($741) + 4|0);
   $745 = HEAP32[$744>>2]|0;
   $746 = $743;
   $747 = $745;
   $748 = (($746) - ($747))|0;
   $749 = (($748|0) / 4)&-1;
   $8 = $274;
   $750 = $8;
   $751 = (($750) + 12|0);
   $7 = $751;
   $752 = $7;
   $6 = $752;
   $753 = $6;
   __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__buf,$739,$749,$753);
   $754 = $__a;
   $4 = $754;
   $5 = 1024;
   $755 = $4;
   $756 = $5;
   $1 = $755;
   $2 = $756;
   $3 = 0;
   $757 = $2;
   $758 = $757<<2;
   $0 = $758;
   $759 = $0;
   __THREW__ = 0;
   $760 = (invoke_ii(430,($759|0))|0);
   $761 = __THREW__; __THREW__ = 0;
   $762 = $761&1;
   do {
    if ($762) {
     label = 39;
    } else {
     HEAP32[$271>>2] = $760;
     __THREW__ = 0;
     invoke_vii(517,($__buf|0),($271|0));
     $763 = __THREW__; __THREW__ = 0;
     $764 = $763&1;
     if ($764) {
      label = 39;
     } else {
      $121 = $274;
      $785 = $121;
      $786 = (($785) + 8|0);
      $787 = HEAP32[$786>>2]|0;
      $__i = $787;
      while(1) {
       $788 = $__i;
       $122 = $274;
       $789 = $122;
       $790 = (($789) + 4|0);
       $791 = HEAP32[$790>>2]|0;
       $792 = ($788|0)!=($791|0);
       if (!($792)) {
        label = 49;
        break;
       }
       $793 = $__i;
       $794 = (($793) + -4|0);
       $__i = $794;
       __THREW__ = 0;
       invoke_vii(518,($__buf|0),($794|0));
       $795 = __THREW__; __THREW__ = 0;
       $796 = $795&1;
       if ($796) {
        label = 48;
        break;
       }
      }
      if ((label|0) == 48) {
       $797 = ___cxa_find_matching_catch()|0;
       $798 = tempRet0;
       $272 = $797;
       $273 = $798;
       break;
      }
      else if ((label|0) == 49) {
       $231 = $274;
       $232 = $__buf;
       $799 = $231;
       $230 = $799;
       $800 = $230;
       $801 = HEAP32[$800>>2]|0;
       HEAP32[$__t$i4>>2] = $801;
       $802 = $232;
       $228 = $802;
       $803 = $228;
       $804 = HEAP32[$803>>2]|0;
       $805 = $231;
       HEAP32[$805>>2] = $804;
       $229 = $__t$i4;
       $806 = $229;
       $807 = HEAP32[$806>>2]|0;
       $808 = $232;
       HEAP32[$808>>2] = $807;
       $809 = (($274) + 4|0);
       $810 = (($__buf) + 4|0);
       $236 = $809;
       $237 = $810;
       $811 = $236;
       $235 = $811;
       $812 = $235;
       $813 = HEAP32[$812>>2]|0;
       HEAP32[$__t$i3>>2] = $813;
       $814 = $237;
       $233 = $814;
       $815 = $233;
       $816 = HEAP32[$815>>2]|0;
       $817 = $236;
       HEAP32[$817>>2] = $816;
       $234 = $__t$i3;
       $818 = $234;
       $819 = HEAP32[$818>>2]|0;
       $820 = $237;
       HEAP32[$820>>2] = $819;
       $821 = (($274) + 8|0);
       $822 = (($__buf) + 8|0);
       $241 = $821;
       $242 = $822;
       $823 = $241;
       $240 = $823;
       $824 = $240;
       $825 = HEAP32[$824>>2]|0;
       HEAP32[$__t$i2>>2] = $825;
       $826 = $242;
       $238 = $826;
       $827 = $238;
       $828 = HEAP32[$827>>2]|0;
       $829 = $241;
       HEAP32[$829>>2] = $828;
       $239 = $__t$i2;
       $830 = $239;
       $831 = HEAP32[$830>>2]|0;
       $832 = $242;
       HEAP32[$832>>2] = $831;
       $245 = $274;
       $833 = $245;
       $834 = (($833) + 12|0);
       $244 = $834;
       $835 = $244;
       $243 = $835;
       $836 = $243;
       $248 = $__buf;
       $837 = $248;
       $838 = (($837) + 12|0);
       $247 = $838;
       $839 = $247;
       $246 = $839;
       $840 = $246;
       $252 = $836;
       $253 = $840;
       $841 = $252;
       $251 = $841;
       $842 = $251;
       $843 = HEAP32[$842>>2]|0;
       HEAP32[$__t$i>>2] = $843;
       $844 = $253;
       $249 = $844;
       $845 = $249;
       $846 = HEAP32[$845>>2]|0;
       $847 = $252;
       HEAP32[$847>>2] = $846;
       $250 = $__t$i;
       $848 = $250;
       $849 = HEAP32[$848>>2]|0;
       $850 = $253;
       HEAP32[$850>>2] = $849;
       __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__buf);
       break L22;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 39) {
     $765 = ___cxa_find_matching_catch(0|0)|0;
     $766 = tempRet0;
     $272 = $765;
     $273 = $766;
     $767 = $272;
     (___cxa_begin_catch(($767|0))|0);
     $768 = $__a;
     $106 = $__buf;
     $769 = $106;
     $770 = (($769) + 8|0);
     $771 = HEAP32[$770>>2]|0;
     $772 = (($771) + -4|0);
     $773 = HEAP32[$772>>2]|0;
     $118 = $768;
     $119 = $773;
     $120 = 1024;
     $774 = $118;
     $775 = $119;
     $776 = $120;
     $115 = $774;
     $116 = $775;
     $117 = $776;
     $777 = $116;
     $114 = $777;
     $778 = $114;
     __ZdlPv($778);
     __THREW__ = 0;
     invoke_v(479);
     $779 = __THREW__; __THREW__ = 0;
     $780 = $779&1;
     if (!($780)) {
      // unreachable;
     }
     $781 = ___cxa_find_matching_catch()|0;
     $782 = tempRet0;
     $272 = $781;
     $273 = $782;
     __THREW__ = 0;
     invoke_v(480);
     $783 = __THREW__; __THREW__ = 0;
     $784 = $783&1;
     if ($784) {
      $853 = ___cxa_find_matching_catch(0|0)|0;
      $854 = tempRet0;
      ___clang_call_terminate($853);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__buf);
   $851 = $272;
   $852 = $273;
   ___resumeException($851|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE9push_backEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = (($84) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = (($87) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 if ($92) {
  $93 = (($84) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$84>>2]|0;
  $96 = ($94>>>0)>($95>>>0);
  do {
   if ($96) {
    $97 = (($84) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = (($84) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($84) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($84) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = (($84) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = (($84) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
   } else {
    $44 = $84;
    $141 = $44;
    $142 = (($141) + 12|0);
    $43 = $142;
    $143 = $43;
    $42 = $143;
    $144 = $42;
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$84>>2]|0;
    $147 = $145;
    $148 = $146;
    $149 = (($147) - ($148))|0;
    $150 = (($149|0) / 4)&-1;
    $151 = $150<<1;
    HEAP32[$78>>2] = $151;
    HEAP32[$79>>2] = 1;
    $13 = $78;
    $14 = $79;
    $152 = $13;
    $153 = $14;
    ;HEAP8[$12+0>>0]=HEAP8[$15+0>>0]|0;
    $10 = $152;
    $11 = $153;
    $154 = $10;
    $155 = $11;
    $7 = $12;
    $8 = $154;
    $9 = $155;
    $156 = $8;
    $157 = HEAP32[$156>>2]|0;
    $158 = $9;
    $159 = HEAP32[$158>>2]|0;
    $160 = ($157>>>0)<($159>>>0);
    if ($160) {
     $161 = $11;
     $164 = $161;
    } else {
     $162 = $10;
     $164 = $162;
    }
    $163 = HEAP32[$164>>2]|0;
    $__c = $163;
    $165 = $__c;
    $166 = $__c;
    $167 = (($166>>>0) / 4)&-1;
    $2 = $84;
    $168 = $2;
    $169 = (($168) + 12|0);
    $1 = $169;
    $170 = $1;
    $0 = $170;
    $171 = $0;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t,$165,$167,$171);
    $172 = (($84) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $3 = $80;
    $4 = $173;
    $174 = $3;
    $175 = $4;
    HEAP32[$174>>2] = $175;
    $176 = (($84) + 8|0);
    $177 = HEAP32[$176>>2]|0;
    $5 = $83;
    $6 = $177;
    $178 = $5;
    $179 = $6;
    HEAP32[$178>>2] = $179;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$80+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$83+0>>2]|0;
    invoke_viii(516,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $180 = __THREW__; __THREW__ = 0;
    $181 = $180&1;
    if (!($181)) {
     $19 = $84;
     $20 = $__t;
     $182 = $19;
     $18 = $182;
     $183 = $18;
     $184 = HEAP32[$183>>2]|0;
     HEAP32[$__t$i3>>2] = $184;
     $185 = $20;
     $16 = $185;
     $186 = $16;
     $187 = HEAP32[$186>>2]|0;
     $188 = $19;
     HEAP32[$188>>2] = $187;
     $17 = $__t$i3;
     $189 = $17;
     $190 = HEAP32[$189>>2]|0;
     $191 = $20;
     HEAP32[$191>>2] = $190;
     $192 = (($84) + 4|0);
     $193 = (($__t) + 4|0);
     $24 = $192;
     $25 = $193;
     $194 = $24;
     $23 = $194;
     $195 = $23;
     $196 = HEAP32[$195>>2]|0;
     HEAP32[$__t$i2>>2] = $196;
     $197 = $25;
     $21 = $197;
     $198 = $21;
     $199 = HEAP32[$198>>2]|0;
     $200 = $24;
     HEAP32[$200>>2] = $199;
     $22 = $__t$i2;
     $201 = $22;
     $202 = HEAP32[$201>>2]|0;
     $203 = $25;
     HEAP32[$203>>2] = $202;
     $204 = (($84) + 8|0);
     $205 = (($__t) + 8|0);
     $29 = $204;
     $30 = $205;
     $206 = $29;
     $28 = $206;
     $207 = $28;
     $208 = HEAP32[$207>>2]|0;
     HEAP32[$__t$i1>>2] = $208;
     $209 = $30;
     $26 = $209;
     $210 = $26;
     $211 = HEAP32[$210>>2]|0;
     $212 = $29;
     HEAP32[$212>>2] = $211;
     $27 = $__t$i1;
     $213 = $27;
     $214 = HEAP32[$213>>2]|0;
     $215 = $30;
     HEAP32[$215>>2] = $214;
     $33 = $84;
     $216 = $33;
     $217 = (($216) + 12|0);
     $32 = $217;
     $218 = $32;
     $31 = $218;
     $219 = $31;
     $36 = $__t;
     $220 = $36;
     $221 = (($220) + 12|0);
     $35 = $221;
     $222 = $35;
     $34 = $222;
     $223 = $34;
     $40 = $219;
     $41 = $223;
     $224 = $40;
     $39 = $224;
     $225 = $39;
     $226 = HEAP32[$225>>2]|0;
     HEAP32[$__t$i>>2] = $226;
     $227 = $41;
     $37 = $227;
     $228 = $37;
     $229 = HEAP32[$228>>2]|0;
     $230 = $40;
     HEAP32[$230>>2] = $229;
     $38 = $__t$i;
     $231 = $38;
     $232 = HEAP32[$231>>2]|0;
     $233 = $41;
     HEAP32[$233>>2] = $232;
     __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
     break;
    }
    $234 = ___cxa_find_matching_catch()|0;
    $235 = tempRet0;
    $81 = $234;
    $82 = $235;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
    $261 = $81;
    $262 = $82;
    ___resumeException($261|0);
    // unreachable;
   }
  } while(0);
 }
 $56 = $84;
 $236 = $56;
 $237 = (($236) + 12|0);
 $55 = $237;
 $238 = $55;
 $54 = $238;
 $239 = $54;
 $240 = (($84) + 8|0);
 $241 = HEAP32[$240>>2]|0;
 $57 = $241;
 $242 = $57;
 $243 = $77;
 $58 = $243;
 $244 = $58;
 $69 = $239;
 $70 = $242;
 $71 = $244;
 $245 = $69;
 $246 = $70;
 $247 = $71;
 $68 = $247;
 $248 = $68;
 ;HEAP8[$67+0>>0]=HEAP8[$72+0>>0]|0;
 $64 = $245;
 $65 = $246;
 $66 = $248;
 $249 = $64;
 $250 = $65;
 $251 = $66;
 $63 = $251;
 $252 = $63;
 $60 = $249;
 $61 = $250;
 $62 = $252;
 $253 = $61;
 $254 = ($253|0)==(0|0);
 if ($254) {
  $258 = (($84) + 8|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = (($259) + 4|0);
  HEAP32[$258>>2] = $260;
  STACKTOP = sp;return;
 }
 $255 = $62;
 $59 = $255;
 $256 = $59;
 $257 = HEAP32[$256>>2]|0;
 HEAP32[$253>>2] = $257;
 $258 = (($84) + 8|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = (($259) + 4|0);
 HEAP32[$258>>2] = $260;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiNS_9allocatorIS1_EEE10push_frontEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0;
 var $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 396|0;
 $$byval_copy = sp + 392|0;
 $8 = sp + 8|0;
 $11 = sp + 401|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $70 = sp;
 $75 = sp + 400|0;
 $81 = sp + 52|0;
 $82 = sp + 48|0;
 $__t = sp + 28|0;
 $83 = sp + 24|0;
 $86 = sp + 12|0;
 $79 = $this;
 $80 = $__x;
 $87 = $79;
 $88 = (($87) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$87>>2]|0;
 $91 = ($89|0)==($90|0);
 if ($91) {
  $92 = (($87) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  $78 = $87;
  $94 = $78;
  $95 = (($94) + 12|0);
  $77 = $95;
  $96 = $77;
  $76 = $96;
  $97 = $76;
  $98 = HEAP32[$97>>2]|0;
  $99 = ($93>>>0)<($98>>>0);
  do {
   if ($99) {
    $56 = $87;
    $100 = $56;
    $101 = (($100) + 12|0);
    $55 = $101;
    $102 = $55;
    $54 = $102;
    $103 = $54;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($87) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $104;
    $108 = $106;
    $109 = (($107) - ($108))|0;
    $110 = (($109|0) / 4)&-1;
    $__d = $110;
    $111 = $__d;
    $112 = (($111) + 1)|0;
    $113 = (($112|0) / 2)&-1;
    $__d = $113;
    $114 = (($87) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = (($87) + 8|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($87) + 8|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $__d;
    $121 = (($119) + ($120<<2)|0);
    $51 = $115;
    $52 = $117;
    $53 = $121;
    $122 = $51;
    $50 = $122;
    $123 = $50;
    $124 = $52;
    $45 = $124;
    $125 = $45;
    $126 = $53;
    $46 = $126;
    $127 = $46;
    $47 = $123;
    $48 = $125;
    $49 = $127;
    $128 = $48;
    $129 = $47;
    $130 = $128;
    $131 = $129;
    $132 = (($130) - ($131))|0;
    $133 = (($132|0) / 4)&-1;
    $__n$i$i = $133;
    $134 = $__n$i$i;
    $135 = $49;
    $136 = (0 - ($134))|0;
    $137 = (($135) + ($136<<2)|0);
    $49 = $137;
    $138 = $49;
    $139 = $47;
    $140 = $__n$i$i;
    $141 = $140<<2;
    _memmove(($138|0),($139|0),($141|0))|0;
    $142 = $49;
    $143 = (($87) + 4|0);
    HEAP32[$143>>2] = $142;
    $144 = $__d;
    $145 = (($87) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($144<<2)|0);
    HEAP32[$145>>2] = $147;
   } else {
    $18 = $87;
    $148 = $18;
    $149 = (($148) + 12|0);
    $17 = $149;
    $150 = $17;
    $16 = $150;
    $151 = $16;
    $152 = HEAP32[$151>>2]|0;
    $153 = HEAP32[$87>>2]|0;
    $154 = $152;
    $155 = $153;
    $156 = (($154) - ($155))|0;
    $157 = (($156|0) / 4)&-1;
    $158 = $157<<1;
    HEAP32[$81>>2] = $158;
    HEAP32[$82>>2] = 1;
    $9 = $81;
    $10 = $82;
    $159 = $9;
    $160 = $10;
    ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
    $6 = $159;
    $7 = $160;
    $161 = $6;
    $162 = $7;
    $3 = $8;
    $4 = $161;
    $5 = $162;
    $163 = $4;
    $164 = HEAP32[$163>>2]|0;
    $165 = $5;
    $166 = HEAP32[$165>>2]|0;
    $167 = ($164>>>0)<($166>>>0);
    if ($167) {
     $168 = $7;
     $171 = $168;
    } else {
     $169 = $6;
     $171 = $169;
    }
    $170 = HEAP32[$171>>2]|0;
    $__c = $170;
    $172 = $__c;
    $173 = $__c;
    $174 = (($173) + 3)|0;
    $175 = (($174>>>0) / 4)&-1;
    $2 = $87;
    $176 = $2;
    $177 = (($176) + 12|0);
    $1 = $177;
    $178 = $1;
    $0 = $178;
    $179 = $0;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t,$172,$175,$179);
    $180 = (($87) + 4|0);
    $181 = HEAP32[$180>>2]|0;
    $12 = $83;
    $13 = $181;
    $182 = $12;
    $183 = $13;
    HEAP32[$182>>2] = $183;
    $184 = (($87) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $14 = $86;
    $15 = $185;
    $186 = $14;
    $187 = $15;
    HEAP32[$186>>2] = $187;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$83+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$86+0>>2]|0;
    invoke_viii(516,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $188 = __THREW__; __THREW__ = 0;
    $189 = $188&1;
    if (!($189)) {
     $22 = $87;
     $23 = $__t;
     $190 = $22;
     $21 = $190;
     $191 = $21;
     $192 = HEAP32[$191>>2]|0;
     HEAP32[$__t$i3>>2] = $192;
     $193 = $23;
     $19 = $193;
     $194 = $19;
     $195 = HEAP32[$194>>2]|0;
     $196 = $22;
     HEAP32[$196>>2] = $195;
     $20 = $__t$i3;
     $197 = $20;
     $198 = HEAP32[$197>>2]|0;
     $199 = $23;
     HEAP32[$199>>2] = $198;
     $200 = (($87) + 4|0);
     $201 = (($__t) + 4|0);
     $27 = $200;
     $28 = $201;
     $202 = $27;
     $26 = $202;
     $203 = $26;
     $204 = HEAP32[$203>>2]|0;
     HEAP32[$__t$i2>>2] = $204;
     $205 = $28;
     $24 = $205;
     $206 = $24;
     $207 = HEAP32[$206>>2]|0;
     $208 = $27;
     HEAP32[$208>>2] = $207;
     $25 = $__t$i2;
     $209 = $25;
     $210 = HEAP32[$209>>2]|0;
     $211 = $28;
     HEAP32[$211>>2] = $210;
     $212 = (($87) + 8|0);
     $213 = (($__t) + 8|0);
     $32 = $212;
     $33 = $213;
     $214 = $32;
     $31 = $214;
     $215 = $31;
     $216 = HEAP32[$215>>2]|0;
     HEAP32[$__t$i1>>2] = $216;
     $217 = $33;
     $29 = $217;
     $218 = $29;
     $219 = HEAP32[$218>>2]|0;
     $220 = $32;
     HEAP32[$220>>2] = $219;
     $30 = $__t$i1;
     $221 = $30;
     $222 = HEAP32[$221>>2]|0;
     $223 = $33;
     HEAP32[$223>>2] = $222;
     $36 = $87;
     $224 = $36;
     $225 = (($224) + 12|0);
     $35 = $225;
     $226 = $35;
     $34 = $226;
     $227 = $34;
     $39 = $__t;
     $228 = $39;
     $229 = (($228) + 12|0);
     $38 = $229;
     $230 = $38;
     $37 = $230;
     $231 = $37;
     $43 = $227;
     $44 = $231;
     $232 = $43;
     $42 = $232;
     $233 = $42;
     $234 = HEAP32[$233>>2]|0;
     HEAP32[$__t$i>>2] = $234;
     $235 = $44;
     $40 = $235;
     $236 = $40;
     $237 = HEAP32[$236>>2]|0;
     $238 = $43;
     HEAP32[$238>>2] = $237;
     $41 = $__t$i;
     $239 = $41;
     $240 = HEAP32[$239>>2]|0;
     $241 = $44;
     HEAP32[$241>>2] = $240;
     __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
     break;
    }
    $242 = ___cxa_find_matching_catch()|0;
    $243 = tempRet0;
    $84 = $242;
    $85 = $243;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
    $270 = $84;
    $271 = $85;
    ___resumeException($270|0);
    // unreachable;
   }
  } while(0);
 }
 $59 = $87;
 $244 = $59;
 $245 = (($244) + 12|0);
 $58 = $245;
 $246 = $58;
 $57 = $246;
 $247 = $57;
 $248 = (($87) + 4|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = (($249) + -4|0);
 $60 = $250;
 $251 = $60;
 $252 = $80;
 $61 = $252;
 $253 = $61;
 $72 = $247;
 $73 = $251;
 $74 = $253;
 $254 = $72;
 $255 = $73;
 $256 = $74;
 $71 = $256;
 $257 = $71;
 ;HEAP8[$70+0>>0]=HEAP8[$75+0>>0]|0;
 $67 = $254;
 $68 = $255;
 $69 = $257;
 $258 = $67;
 $259 = $68;
 $260 = $69;
 $66 = $260;
 $261 = $66;
 $63 = $258;
 $64 = $259;
 $65 = $261;
 $262 = $64;
 $263 = ($262|0)==(0|0);
 if ($263) {
  $267 = (($87) + 4|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($268) + -4|0);
  HEAP32[$267>>2] = $269;
  STACKTOP = sp;return;
 }
 $264 = $65;
 $62 = $264;
 $265 = $62;
 $266 = HEAP32[$265>>2]|0;
 HEAP32[$262>>2] = $266;
 $267 = (($87) + 4|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = (($268) + -4|0);
 HEAP32[$267>>2] = $269;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE9push_backEOS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 384|0;
 $$byval_copy = sp + 380|0;
 $12 = sp + 8|0;
 $15 = sp + 389|0;
 $__t$i3 = sp + 300|0;
 $__t$i2 = sp + 276|0;
 $__t$i1 = sp + 252|0;
 $__t$i = sp + 204|0;
 $67 = sp;
 $72 = sp + 388|0;
 $78 = sp + 52|0;
 $79 = sp + 48|0;
 $__t = sp + 28|0;
 $80 = sp + 24|0;
 $83 = sp + 12|0;
 $76 = $this;
 $77 = $__x;
 $84 = $76;
 $85 = (($84) + 8|0);
 $86 = HEAP32[$85>>2]|0;
 $75 = $84;
 $87 = $75;
 $88 = (($87) + 12|0);
 $74 = $88;
 $89 = $74;
 $73 = $89;
 $90 = $73;
 $91 = HEAP32[$90>>2]|0;
 $92 = ($86|0)==($91|0);
 if ($92) {
  $93 = (($84) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = HEAP32[$84>>2]|0;
  $96 = ($94>>>0)>($95>>>0);
  do {
   if ($96) {
    $97 = (($84) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = HEAP32[$84>>2]|0;
    $100 = $98;
    $101 = $99;
    $102 = (($100) - ($101))|0;
    $103 = (($102|0) / 4)&-1;
    $__d = $103;
    $104 = $__d;
    $105 = (($104) + 1)|0;
    $106 = (($105|0) / 2)&-1;
    $__d = $106;
    $107 = (($84) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = (($84) + 8|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = (($84) + 4|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = $__d;
    $114 = (0 - ($113))|0;
    $115 = (($112) + ($114<<2)|0);
    $51 = $108;
    $52 = $110;
    $53 = $115;
    $116 = $51;
    $50 = $116;
    $117 = $50;
    $118 = $52;
    $45 = $118;
    $119 = $45;
    $120 = $53;
    $46 = $120;
    $121 = $46;
    $47 = $117;
    $48 = $119;
    $49 = $121;
    $122 = $48;
    $123 = $47;
    $124 = $122;
    $125 = $123;
    $126 = (($124) - ($125))|0;
    $127 = (($126|0) / 4)&-1;
    $__n$i$i = $127;
    $128 = $49;
    $129 = $47;
    $130 = $__n$i$i;
    $131 = $130<<2;
    _memmove(($128|0),($129|0),($131|0))|0;
    $132 = $49;
    $133 = $__n$i$i;
    $134 = (($132) + ($133<<2)|0);
    $135 = (($84) + 8|0);
    HEAP32[$135>>2] = $134;
    $136 = $__d;
    $137 = (($84) + 4|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = (0 - ($136))|0;
    $140 = (($138) + ($139<<2)|0);
    HEAP32[$137>>2] = $140;
   } else {
    $44 = $84;
    $141 = $44;
    $142 = (($141) + 12|0);
    $43 = $142;
    $143 = $43;
    $42 = $143;
    $144 = $42;
    $145 = HEAP32[$144>>2]|0;
    $146 = HEAP32[$84>>2]|0;
    $147 = $145;
    $148 = $146;
    $149 = (($147) - ($148))|0;
    $150 = (($149|0) / 4)&-1;
    $151 = $150<<1;
    HEAP32[$78>>2] = $151;
    HEAP32[$79>>2] = 1;
    $13 = $78;
    $14 = $79;
    $152 = $13;
    $153 = $14;
    ;HEAP8[$12+0>>0]=HEAP8[$15+0>>0]|0;
    $10 = $152;
    $11 = $153;
    $154 = $10;
    $155 = $11;
    $7 = $12;
    $8 = $154;
    $9 = $155;
    $156 = $8;
    $157 = HEAP32[$156>>2]|0;
    $158 = $9;
    $159 = HEAP32[$158>>2]|0;
    $160 = ($157>>>0)<($159>>>0);
    if ($160) {
     $161 = $11;
     $164 = $161;
    } else {
     $162 = $10;
     $164 = $162;
    }
    $163 = HEAP32[$164>>2]|0;
    $__c = $163;
    $165 = $__c;
    $166 = $__c;
    $167 = (($166>>>0) / 4)&-1;
    $2 = $84;
    $168 = $2;
    $169 = (($168) + 12|0);
    $1 = $169;
    $170 = $1;
    $0 = $170;
    $171 = $0;
    $172 = (($171) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t,$165,$167,$173);
    $174 = (($84) + 4|0);
    $175 = HEAP32[$174>>2]|0;
    $3 = $80;
    $4 = $175;
    $176 = $3;
    $177 = $4;
    HEAP32[$176>>2] = $177;
    $178 = (($84) + 8|0);
    $179 = HEAP32[$178>>2]|0;
    $5 = $83;
    $6 = $179;
    $180 = $5;
    $181 = $6;
    HEAP32[$180>>2] = $181;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$80+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$83+0>>2]|0;
    invoke_viii(516,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $182 = __THREW__; __THREW__ = 0;
    $183 = $182&1;
    if (!($183)) {
     $19 = $84;
     $20 = $__t;
     $184 = $19;
     $18 = $184;
     $185 = $18;
     $186 = HEAP32[$185>>2]|0;
     HEAP32[$__t$i3>>2] = $186;
     $187 = $20;
     $16 = $187;
     $188 = $16;
     $189 = HEAP32[$188>>2]|0;
     $190 = $19;
     HEAP32[$190>>2] = $189;
     $17 = $__t$i3;
     $191 = $17;
     $192 = HEAP32[$191>>2]|0;
     $193 = $20;
     HEAP32[$193>>2] = $192;
     $194 = (($84) + 4|0);
     $195 = (($__t) + 4|0);
     $24 = $194;
     $25 = $195;
     $196 = $24;
     $23 = $196;
     $197 = $23;
     $198 = HEAP32[$197>>2]|0;
     HEAP32[$__t$i2>>2] = $198;
     $199 = $25;
     $21 = $199;
     $200 = $21;
     $201 = HEAP32[$200>>2]|0;
     $202 = $24;
     HEAP32[$202>>2] = $201;
     $22 = $__t$i2;
     $203 = $22;
     $204 = HEAP32[$203>>2]|0;
     $205 = $25;
     HEAP32[$205>>2] = $204;
     $206 = (($84) + 8|0);
     $207 = (($__t) + 8|0);
     $29 = $206;
     $30 = $207;
     $208 = $29;
     $28 = $208;
     $209 = $28;
     $210 = HEAP32[$209>>2]|0;
     HEAP32[$__t$i1>>2] = $210;
     $211 = $30;
     $26 = $211;
     $212 = $26;
     $213 = HEAP32[$212>>2]|0;
     $214 = $29;
     HEAP32[$214>>2] = $213;
     $27 = $__t$i1;
     $215 = $27;
     $216 = HEAP32[$215>>2]|0;
     $217 = $30;
     HEAP32[$217>>2] = $216;
     $33 = $84;
     $218 = $33;
     $219 = (($218) + 12|0);
     $32 = $219;
     $220 = $32;
     $31 = $220;
     $221 = $31;
     $36 = $__t;
     $222 = $36;
     $223 = (($222) + 12|0);
     $35 = $223;
     $224 = $35;
     $34 = $224;
     $225 = $34;
     $40 = $221;
     $41 = $225;
     $226 = $40;
     $39 = $226;
     $227 = $39;
     $228 = HEAP32[$227>>2]|0;
     HEAP32[$__t$i>>2] = $228;
     $229 = $41;
     $37 = $229;
     $230 = $37;
     $231 = HEAP32[$230>>2]|0;
     $232 = $40;
     HEAP32[$232>>2] = $231;
     $38 = $__t$i;
     $233 = $38;
     $234 = HEAP32[$233>>2]|0;
     $235 = $41;
     HEAP32[$235>>2] = $234;
     __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
     break;
    }
    $236 = ___cxa_find_matching_catch()|0;
    $237 = tempRet0;
    $81 = $236;
    $82 = $237;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
    $265 = $81;
    $266 = $82;
    ___resumeException($265|0);
    // unreachable;
   }
  } while(0);
 }
 $56 = $84;
 $238 = $56;
 $239 = (($238) + 12|0);
 $55 = $239;
 $240 = $55;
 $54 = $240;
 $241 = $54;
 $242 = (($241) + 4|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = (($84) + 8|0);
 $245 = HEAP32[$244>>2]|0;
 $57 = $245;
 $246 = $57;
 $247 = $77;
 $58 = $247;
 $248 = $58;
 $69 = $243;
 $70 = $246;
 $71 = $248;
 $249 = $69;
 $250 = $70;
 $251 = $71;
 $68 = $251;
 $252 = $68;
 ;HEAP8[$67+0>>0]=HEAP8[$72+0>>0]|0;
 $64 = $249;
 $65 = $250;
 $66 = $252;
 $253 = $64;
 $254 = $65;
 $255 = $66;
 $63 = $255;
 $256 = $63;
 $60 = $253;
 $61 = $254;
 $62 = $256;
 $257 = $61;
 $258 = ($257|0)==(0|0);
 if ($258) {
  $262 = (($84) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($263) + 4|0);
  HEAP32[$262>>2] = $264;
  STACKTOP = sp;return;
 }
 $259 = $62;
 $59 = $259;
 $260 = $59;
 $261 = HEAP32[$260>>2]|0;
 HEAP32[$257>>2] = $261;
 $262 = (($84) + 8|0);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 4|0);
 HEAP32[$262>>2] = $264;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__d = 0, $__n$i$i = 0, $__t = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 392|0;
 $$byval_copy = sp + 388|0;
 $8 = sp + 8|0;
 $11 = sp + 397|0;
 $__t$i3 = sp + 296|0;
 $__t$i2 = sp + 272|0;
 $__t$i1 = sp + 248|0;
 $__t$i = sp + 200|0;
 $69 = sp;
 $74 = sp + 396|0;
 $80 = sp + 52|0;
 $81 = sp + 48|0;
 $__t = sp + 28|0;
 $82 = sp + 24|0;
 $85 = sp + 12|0;
 $78 = $this;
 $79 = $__x;
 $86 = $78;
 $87 = (($86) + 4|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$86>>2]|0;
 $90 = ($88|0)==($89|0);
 if ($90) {
  $91 = (($86) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  $77 = $86;
  $93 = $77;
  $94 = (($93) + 12|0);
  $76 = $94;
  $95 = $76;
  $75 = $95;
  $96 = $75;
  $97 = HEAP32[$96>>2]|0;
  $98 = ($92>>>0)<($97>>>0);
  do {
   if ($98) {
    $56 = $86;
    $99 = $56;
    $100 = (($99) + 12|0);
    $55 = $100;
    $101 = $55;
    $54 = $101;
    $102 = $54;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($86) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $103;
    $107 = $105;
    $108 = (($106) - ($107))|0;
    $109 = (($108|0) / 4)&-1;
    $__d = $109;
    $110 = $__d;
    $111 = (($110) + 1)|0;
    $112 = (($111|0) / 2)&-1;
    $__d = $112;
    $113 = (($86) + 4|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($86) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (($86) + 8|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $__d;
    $120 = (($118) + ($119<<2)|0);
    $51 = $114;
    $52 = $116;
    $53 = $120;
    $121 = $51;
    $50 = $121;
    $122 = $50;
    $123 = $52;
    $45 = $123;
    $124 = $45;
    $125 = $53;
    $46 = $125;
    $126 = $46;
    $47 = $122;
    $48 = $124;
    $49 = $126;
    $127 = $48;
    $128 = $47;
    $129 = $127;
    $130 = $128;
    $131 = (($129) - ($130))|0;
    $132 = (($131|0) / 4)&-1;
    $__n$i$i = $132;
    $133 = $__n$i$i;
    $134 = $49;
    $135 = (0 - ($133))|0;
    $136 = (($134) + ($135<<2)|0);
    $49 = $136;
    $137 = $49;
    $138 = $47;
    $139 = $__n$i$i;
    $140 = $139<<2;
    _memmove(($137|0),($138|0),($140|0))|0;
    $141 = $49;
    $142 = (($86) + 4|0);
    HEAP32[$142>>2] = $141;
    $143 = $__d;
    $144 = (($86) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = (($145) + ($143<<2)|0);
    HEAP32[$144>>2] = $146;
   } else {
    $18 = $86;
    $147 = $18;
    $148 = (($147) + 12|0);
    $17 = $148;
    $149 = $17;
    $16 = $149;
    $150 = $16;
    $151 = HEAP32[$150>>2]|0;
    $152 = HEAP32[$86>>2]|0;
    $153 = $151;
    $154 = $152;
    $155 = (($153) - ($154))|0;
    $156 = (($155|0) / 4)&-1;
    $157 = $156<<1;
    HEAP32[$80>>2] = $157;
    HEAP32[$81>>2] = 1;
    $9 = $80;
    $10 = $81;
    $158 = $9;
    $159 = $10;
    ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
    $6 = $158;
    $7 = $159;
    $160 = $6;
    $161 = $7;
    $3 = $8;
    $4 = $160;
    $5 = $161;
    $162 = $4;
    $163 = HEAP32[$162>>2]|0;
    $164 = $5;
    $165 = HEAP32[$164>>2]|0;
    $166 = ($163>>>0)<($165>>>0);
    if ($166) {
     $167 = $7;
     $170 = $167;
    } else {
     $168 = $6;
     $170 = $168;
    }
    $169 = HEAP32[$170>>2]|0;
    $__c = $169;
    $171 = $__c;
    $172 = $__c;
    $173 = (($172) + 3)|0;
    $174 = (($173>>>0) / 4)&-1;
    $2 = $86;
    $175 = $2;
    $176 = (($175) + 12|0);
    $1 = $176;
    $177 = $1;
    $0 = $177;
    $178 = $0;
    $179 = (($178) + 4|0);
    $180 = HEAP32[$179>>2]|0;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEEC2EjjS4_($__t,$171,$174,$180);
    $181 = (($86) + 4|0);
    $182 = HEAP32[$181>>2]|0;
    $12 = $82;
    $13 = $182;
    $183 = $12;
    $184 = $13;
    HEAP32[$183>>2] = $184;
    $185 = (($86) + 8|0);
    $186 = HEAP32[$185>>2]|0;
    $14 = $85;
    $15 = $186;
    $187 = $14;
    $188 = $15;
    HEAP32[$187>>2] = $188;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$82+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$85+0>>2]|0;
    invoke_viii(516,($__t|0),($$byval_copy|0),($$byval_copy1|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if (!($190)) {
     $22 = $86;
     $23 = $__t;
     $191 = $22;
     $21 = $191;
     $192 = $21;
     $193 = HEAP32[$192>>2]|0;
     HEAP32[$__t$i3>>2] = $193;
     $194 = $23;
     $19 = $194;
     $195 = $19;
     $196 = HEAP32[$195>>2]|0;
     $197 = $22;
     HEAP32[$197>>2] = $196;
     $20 = $__t$i3;
     $198 = $20;
     $199 = HEAP32[$198>>2]|0;
     $200 = $23;
     HEAP32[$200>>2] = $199;
     $201 = (($86) + 4|0);
     $202 = (($__t) + 4|0);
     $27 = $201;
     $28 = $202;
     $203 = $27;
     $26 = $203;
     $204 = $26;
     $205 = HEAP32[$204>>2]|0;
     HEAP32[$__t$i2>>2] = $205;
     $206 = $28;
     $24 = $206;
     $207 = $24;
     $208 = HEAP32[$207>>2]|0;
     $209 = $27;
     HEAP32[$209>>2] = $208;
     $25 = $__t$i2;
     $210 = $25;
     $211 = HEAP32[$210>>2]|0;
     $212 = $28;
     HEAP32[$212>>2] = $211;
     $213 = (($86) + 8|0);
     $214 = (($__t) + 8|0);
     $32 = $213;
     $33 = $214;
     $215 = $32;
     $31 = $215;
     $216 = $31;
     $217 = HEAP32[$216>>2]|0;
     HEAP32[$__t$i1>>2] = $217;
     $218 = $33;
     $29 = $218;
     $219 = $29;
     $220 = HEAP32[$219>>2]|0;
     $221 = $32;
     HEAP32[$221>>2] = $220;
     $30 = $__t$i1;
     $222 = $30;
     $223 = HEAP32[$222>>2]|0;
     $224 = $33;
     HEAP32[$224>>2] = $223;
     $36 = $86;
     $225 = $36;
     $226 = (($225) + 12|0);
     $35 = $226;
     $227 = $35;
     $34 = $227;
     $228 = $34;
     $39 = $__t;
     $229 = $39;
     $230 = (($229) + 12|0);
     $38 = $230;
     $231 = $38;
     $37 = $231;
     $232 = $37;
     $43 = $228;
     $44 = $232;
     $233 = $43;
     $42 = $233;
     $234 = $42;
     $235 = HEAP32[$234>>2]|0;
     HEAP32[$__t$i>>2] = $235;
     $236 = $44;
     $40 = $236;
     $237 = $40;
     $238 = HEAP32[$237>>2]|0;
     $239 = $43;
     HEAP32[$239>>2] = $238;
     $41 = $__t$i;
     $240 = $41;
     $241 = HEAP32[$240>>2]|0;
     $242 = $44;
     HEAP32[$242>>2] = $241;
     __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
     break;
    }
    $243 = ___cxa_find_matching_catch()|0;
    $244 = tempRet0;
    $83 = $243;
    $84 = $244;
    __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($__t);
    $272 = $83;
    $273 = $84;
    ___resumeException($272|0);
    // unreachable;
   }
  } while(0);
 }
 $59 = $86;
 $245 = $59;
 $246 = (($245) + 12|0);
 $58 = $246;
 $247 = $58;
 $57 = $247;
 $248 = $57;
 $249 = (($248) + 4|0);
 $250 = HEAP32[$249>>2]|0;
 $251 = (($86) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($252) + -4|0);
 $60 = $253;
 $254 = $60;
 $255 = $79;
 $71 = $250;
 $72 = $254;
 $73 = $255;
 $256 = $71;
 $257 = $72;
 $258 = $73;
 $70 = $258;
 $259 = $70;
 ;HEAP8[$69+0>>0]=HEAP8[$74+0>>0]|0;
 $66 = $256;
 $67 = $257;
 $68 = $259;
 $260 = $66;
 $261 = $67;
 $262 = $68;
 $65 = $262;
 $263 = $65;
 $62 = $260;
 $63 = $261;
 $64 = $263;
 $264 = $63;
 $265 = ($264|0)==(0|0);
 if ($265) {
  $269 = (($86) + 4|0);
  $270 = HEAP32[$269>>2]|0;
  $271 = (($270) + -4|0);
  HEAP32[$269>>2] = $271;
  STACKTOP = sp;return;
 }
 $266 = $64;
 $61 = $266;
 $267 = $61;
 $268 = HEAP32[$267>>2]|0;
 HEAP32[$264>>2] = $268;
 $269 = (($86) + 4|0);
 $270 = HEAP32[$269>>2]|0;
 $271 = (($270) + -4|0);
 HEAP32[$269>>2] = $271;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE18__construct_at_endINS_13move_iteratorIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp;
 $19 = sp + 100|0;
 $24 = $this;
 $25 = $24;
 $23 = $25;
 $26 = $23;
 $27 = (($26) + 12|0);
 $22 = $27;
 $28 = $22;
 $21 = $28;
 $29 = $21;
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $__a = $31;
 while(1) {
  $2 = $__first;
  $3 = $__last;
  $32 = $2;
  $1 = $32;
  $33 = $1;
  $34 = HEAP32[$33>>2]|0;
  $35 = $3;
  $0 = $35;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)!=($37|0);
  if (!($38)) {
   break;
  }
  $39 = $__a;
  $40 = (($25) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $4 = $41;
  $42 = $4;
  $5 = $__first;
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $16 = $39;
  $17 = $42;
  $18 = $44;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $15 = $47;
  $48 = $15;
  ;HEAP8[$14+0>>0]=HEAP8[$19+0>>0]|0;
  $11 = $45;
  $12 = $46;
  $13 = $48;
  $49 = $11;
  $50 = $12;
  $51 = $13;
  $10 = $51;
  $52 = $10;
  $7 = $49;
  $8 = $50;
  $9 = $52;
  $53 = $8;
  $54 = ($53|0)==(0|0);
  if (!($54)) {
   $55 = $9;
   $6 = $55;
   $56 = $6;
   $57 = HEAP32[$56>>2]|0;
   HEAP32[$53>>2] = $57;
  }
  $58 = (($25) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 4|0);
  HEAP32[$58>>2] = $60;
  $20 = $__first;
  $61 = $20;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 4|0);
  HEAP32[$61>>2] = $63;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(515,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 8|0;
 $13 = sp + 201|0;
 $22 = sp;
 $25 = sp + 200|0;
 $33 = sp + 80|0;
 $34 = sp + 68|0;
 $__v = sp + 20|0;
 $39 = $this;
 $40 = $__x;
 $43 = $39;
 $38 = $43;
 $44 = $38;
 $45 = (($44) + 8|0);
 $37 = $45;
 $46 = $37;
 $36 = $46;
 $47 = $36;
 $__a = $47;
 $35 = $43;
 $48 = $35;
 $49 = (($48) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = HEAP32[$48>>2]|0;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $55 = (($54|0) / 4)&-1;
 $56 = (($55) + 1)|0;
 $32 = $43;
 HEAP32[$33>>2] = $56;
 $57 = $32;
 $58 = (__ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE8max_sizeEv($57)|0);
 $__ms$i = $58;
 $59 = HEAP32[$33>>2]|0;
 $60 = $__ms$i;
 $61 = ($59>>>0)>($60>>>0);
 if ($61) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($57);
  // unreachable;
 }
 $30 = $57;
 $62 = $30;
 $29 = $62;
 $63 = $29;
 $28 = $63;
 $64 = $28;
 $65 = (($64) + 8|0);
 $27 = $65;
 $66 = $27;
 $26 = $66;
 $67 = $26;
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$63>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 4)&-1;
 $__cap$i = $73;
 $74 = $__cap$i;
 $75 = $__ms$i;
 $76 = (($75>>>0) / 2)&-1;
 $77 = ($74>>>0)>=($76>>>0);
 if ($77) {
  $78 = $__ms$i;
  $31 = $78;
 } else {
  $79 = $__cap$i;
  $80 = $79<<1;
  HEAP32[$34>>2] = $80;
  $23 = $34;
  $24 = $33;
  $81 = $23;
  $82 = $24;
  ;HEAP8[$22+0>>0]=HEAP8[$25+0>>0]|0;
  $20 = $81;
  $21 = $82;
  $83 = $20;
  $84 = $21;
  $17 = $22;
  $18 = $83;
  $19 = $84;
  $85 = $18;
  $86 = HEAP32[$85>>2]|0;
  $87 = $19;
  $88 = HEAP32[$87>>2]|0;
  $89 = ($86>>>0)<($88>>>0);
  if ($89) {
   $90 = $21;
   $93 = $90;
  } else {
   $91 = $20;
   $93 = $91;
  }
  $92 = HEAP32[$93>>2]|0;
  $31 = $92;
 }
 $94 = $31;
 $16 = $43;
 $95 = $16;
 $96 = (($95) + 4|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = HEAP32[$95>>2]|0;
 $99 = $97;
 $100 = $98;
 $101 = (($99) - ($100))|0;
 $102 = (($101|0) / 4)&-1;
 $103 = $__a;
 __ZNSt3__114__split_bufferIPKN7croutes8net_bondIdEERNS_9allocatorIS5_EEEC2EjjS8_($__v,$94,$102,$103);
 $104 = $__a;
 $105 = (($__v) + 8|0);
 $106 = HEAP32[$105>>2]|0;
 $15 = $106;
 $107 = $15;
 $108 = $40;
 $14 = $108;
 $109 = $14;
 $10 = $104;
 $11 = $107;
 $12 = $109;
 $110 = $10;
 $111 = $11;
 $112 = $12;
 $9 = $112;
 $113 = $9;
 ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
 $5 = $110;
 $6 = $111;
 $7 = $113;
 $114 = $5;
 $115 = $6;
 $116 = $7;
 $4 = $116;
 $117 = $4;
 $1 = $114;
 $2 = $115;
 $3 = $117;
 $118 = $2;
 $119 = ($118|0)==(0|0);
 if (!($119)) {
  $120 = $3;
  $0 = $120;
  $121 = $0;
  $122 = HEAP32[$121>>2]|0;
  HEAP32[$118>>2] = $122;
 }
 $123 = (($__v) + 8|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = (($124) + 4|0);
 HEAP32[$123>>2] = $125;
 __THREW__ = 0;
 invoke_vii(519,($43|0),($__v|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 if (!($127)) {
  __ZNSt3__114__split_bufferIPKN7croutes8net_bondIdEERNS_9allocatorIS5_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $41 = $128;
 $42 = $129;
 __ZNSt3__114__split_bufferIPKN7croutes8net_bondIdEERNS_9allocatorIS5_EEED2Ev($__v);
 $130 = $41;
 $131 = $42;
 ___resumeException($130|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIPKN7croutes8net_bondIdEERNS_9allocatorIS5_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = (($26) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = (($34) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = (($42) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $52 = $51<<2;
  $3 = $52;
  $53 = $3;
  $54 = (__Znwj($53)|0);
  $55 = $54;
 } else {
  $55 = 0;
 }
 HEAP32[$26>>2] = $55;
 $56 = HEAP32[$26>>2]|0;
 $57 = $24;
 $58 = (($56) + ($57<<2)|0);
 $59 = (($26) + 8|0);
 HEAP32[$59>>2] = $58;
 $60 = (($26) + 4|0);
 HEAP32[$60>>2] = $58;
 $61 = HEAP32[$26>>2]|0;
 $62 = $23;
 $63 = (($61) + ($62<<2)|0);
 $11 = $26;
 $64 = $11;
 $65 = (($64) + 12|0);
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 HEAP32[$67>>2] = $63;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPKN7croutes8net_bondIdEERNS_9allocatorIS5_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -4|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18+0>>0]=HEAP8[$21+0>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = (($61) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = (($64) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $66;
 $9 = $67;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $4 = $82;
 $83 = $4;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 1073741823;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<3;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<3)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIdNS_9allocatorIdEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = (($21) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11+0>>0]=HEAP8[$13+0>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = 536870911;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 if ($36) {
  $37 = $4;
  $40 = $37;
 } else {
  $38 = $3;
  $40 = $38;
 }
 $39 = HEAP32[$40>>2]|0;
 STACKTOP = sp;return ($39|0);
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 8)&-1;
 $39 = (($26) + ($38<<3)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 8)&-1;
 $55 = (($42) + ($54<<3)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<3)|0);
 __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIdNS_9allocatorIdEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN7croutes6nn_algIdED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (1184 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 28|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = (($1) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 $5 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 __ZN7croutes9algorithmIdED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN7croutes6nn_algIdED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes6nn_algIdED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN7croutes6nn_algIdE10short_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes6nn_algIdE4nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes6nn_algIdE12russian_nameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN7croutes6nn_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi($agg$result,$this,$data,$first_node_) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $data = $data|0;
 $first_node_ = $first_node_|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $at_j = 0, $bundle = 0, $current_node = 0, $first_node = 0, $j = 0, $min = 0, $size = 0, $visited = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $visited = sp + 24|0;
 $15 = sp + 20|0;
 $10 = $this;
 $11 = $first_node_;
 $9 = $data;
 $17 = $9;
 $18 = HEAP32[$17>>2]|0;
 $19 = (__ZNK7croutes5ndataIdE11nodes_countEv($18)|0);
 $size = $19;
 $$expand_i1_val = 0;
 $12 = $$expand_i1_val;
 __ZN7croutes6answerIdE4initEv($agg$result);
 $first_node = 0;
 L1: while(1) {
  $20 = $first_node;
  $21 = $size;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   label = 34;
   break;
  }
  $8 = $agg$result;
  $23 = $8;
  $24 = HEAP32[$23>>2]|0;
  __THREW__ = 0;
  $25 = (invoke_ii(460,($24|0))|0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 18;
   break;
  }
  $bundle = $25;
  $28 = $size;
  HEAP32[$15>>2] = 0;
  __THREW__ = 0;
  invoke_viii(462,($visited|0),($28|0),($15|0));
  $29 = __THREW__; __THREW__ = 0;
  $30 = $29&1;
  if ($30) {
   label = 18;
   break;
  }
  $31 = $first_node;
  $current_node = $31;
  while(1) {
   $min = 0;
   $j = 0;
   while(1) {
    $32 = $j;
    $33 = $size;
    $34 = ($32>>>0)<($33>>>0);
    if (!($34)) {
     break;
    }
    $35 = $j;
    $36 = $current_node;
    $37 = ($35|0)!=($36|0);
    if ($37) {
     $7 = $data;
     $38 = $7;
     $39 = HEAP32[$38>>2]|0;
     $40 = $current_node;
     $41 = $j;
     __THREW__ = 0;
     $42 = (invoke_iiii(470,($39|0),($40|0),($41|0))|0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     if ($44) {
      label = 19;
      break L1;
     }
     $at_j = $42;
     $45 = $min;
     $46 = ($45|0)==(0|0);
     if ($46) {
      label = 15;
     } else {
      $47 = $at_j;
      __THREW__ = 0;
      $48 = (invoke_ii(491,($47|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 19;
       break L1;
      }
      $51 = +HEAPF64[$48>>3];
      $52 = $min;
      __THREW__ = 0;
      $53 = (invoke_ii(442,($52|0))|0);
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 19;
       break L1;
      }
      $56 = +HEAPF64[$53>>3];
      $57 = $51 < $56;
      if ($57) {
       label = 15;
      }
     }
     if ((label|0) == 15) {
      label = 0;
      $58 = $j;
      $5 = $visited;
      $6 = $58;
      $59 = $5;
      $60 = $6;
      $61 = HEAP32[$59>>2]|0;
      $62 = (($61) + ($60<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)!=(0);
      if (!($64)) {
       $65 = $at_j;
       $min = $65;
      }
     }
    }
    $70 = $j;
    $71 = (($70) + 1)|0;
    $j = $71;
   }
   $72 = $min;
   $73 = ($72|0)!=(0|0);
   if (!($73)) {
    break;
   }
   $4 = $agg$result;
   $74 = $4;
   $75 = HEAP32[$74>>2]|0;
   $76 = $bundle;
   $77 = $min;
   __THREW__ = 0;
   invoke_viii(471,($75|0),($76|0),($77|0));
   $78 = __THREW__; __THREW__ = 0;
   $79 = $78&1;
   if ($79) {
    label = 19;
    break L1;
   }
   $80 = $current_node;
   $2 = $visited;
   $3 = $80;
   $81 = $2;
   $82 = $3;
   $83 = HEAP32[$81>>2]|0;
   $84 = (($83) + ($82<<2)|0);
   HEAP32[$84>>2] = 1;
   $85 = $min;
   __THREW__ = 0;
   $86 = (invoke_ii(441,($85|0))|0);
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   if ($88) {
    label = 19;
    break L1;
   }
   $current_node = $86;
  }
  $0 = $agg$result;
  $89 = $0;
  $90 = HEAP32[$89>>2]|0;
  $91 = $bundle;
  $1 = $data;
  $92 = $1;
  $93 = HEAP32[$92>>2]|0;
  $94 = $current_node;
  $95 = $first_node;
  __THREW__ = 0;
  $96 = (invoke_iiii(470,($93|0),($94|0),($95|0))|0);
  $97 = __THREW__; __THREW__ = 0;
  $98 = $97&1;
  if ($98) {
   label = 19;
   break;
  }
  __THREW__ = 0;
  invoke_viii(471,($90|0),($91|0),($96|0));
  $99 = __THREW__; __THREW__ = 0;
  $100 = $99&1;
  if ($100) {
   label = 19;
   break;
  }
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($visited);
  $101 = $first_node;
  $102 = (($101) + 1)|0;
  $first_node = $102;
 }
 if ((label|0) == 18) {
  $66 = ___cxa_find_matching_catch()|0;
  $67 = tempRet0;
  $13 = $66;
  $14 = $67;
 }
 else if ((label|0) == 19) {
  $68 = ___cxa_find_matching_catch()|0;
  $69 = tempRet0;
  $13 = $68;
  $14 = $69;
  __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($visited);
 }
 else if ((label|0) == 34) {
  $$expand_i1_val2 = 1;
  $12 = $$expand_i1_val2;
  $16 = 1;
  $$pre_trunc = $12;
  $103 = $$pre_trunc&1;
  if ($103) {
   STACKTOP = sp;return;
  }
  __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
  STACKTOP = sp;return;
 }
 __ZNSt3__110shared_ptrIN7croutes6answerIdEEED2Ev($agg$result);
 $104 = $13;
 $105 = $14;
 ___resumeException($104|0);
 // unreachable;
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 108|0;
 $5 = sp + 92|0;
 $__s = sp + 16|0;
 $25 = sp + 4|0;
 $26 = sp;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(520,($__s|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L1: do {
  if ($29) {
   $122 = ___cxa_find_matching_catch(0|0)|0;
   $123 = tempRet0;
   $23 = $122;
   $24 = $123;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&1;
   L4: do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + -12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($35) + ($38)|0);
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = (($41) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$34>>2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + ($48)|0);
     $10 = $49;
     $50 = $10;
     $51 = (($50) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 176;
     $54 = ($53|0)==(32);
     if ($54) {
      $55 = $21;
      $56 = $22;
      $57 = (($55) + ($56)|0);
      $102 = $57;
     } else {
      $58 = $21;
      $102 = $58;
     }
     $59 = $21;
     $60 = $22;
     $61 = (($59) + ($60)|0);
     $62 = $20;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + ($65)|0);
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $8 = $71;
     $72 = $8;
     $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $74 = (($72) + 76|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($73,$75)|0);
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       invoke_vii(521,($5|0),($77|0));
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 21;
       } else {
        $2 = $5;
        $80 = $2;
        __THREW__ = 0;
        $81 = (invoke_iii(422,($80|0),(6720|0))|0);
        $82 = __THREW__; __THREW__ = 0;
        $83 = $82&1;
        if (!($83)) {
         $84 = $4;
         $0 = $81;
         $1 = $84;
         $85 = $0;
         $86 = HEAP32[$85>>2]|0;
         $87 = (($86) + 28|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $1;
         __THREW__ = 0;
         $90 = (invoke_iii($88|0,($85|0),($89|0))|0);
         $91 = __THREW__; __THREW__ = 0;
         $92 = $91&1;
         if (!($92)) {
          __ZNSt3__16localeD2Ev($5);
          $97 = $90 << 24 >> 24;
          $98 = (($72) + 76|0);
          HEAP32[$98>>2] = $97;
          label = 14;
          break;
         }
        }
        $93 = ___cxa_find_matching_catch(0|0)|0;
        $94 = tempRet0;
        $6 = $93;
        $7 = $94;
        __ZNSt3__16localeD2Ev($5);
        $95 = $6;
        $96 = $7;
        $eh$lpad$body$index2Z2D = $96;$eh$lpad$body$indexZ2D = $95;
       }
      } else {
       label = 14;
      }
     } while(0);
     do {
      if ((label|0) == 14) {
       $99 = (($72) + 76|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = $100&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$25+0>>2]|0;
       invoke_viiiiiii(522,($26|0),($$byval_copy|0),($44|0),($102|0),($61|0),($66|0),($101|0));
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 21;
       } else {
        $9 = $26;
        $105 = $9;
        $106 = HEAP32[$105>>2]|0;
        $107 = ($106|0)==(0|0);
        if ($107) {
         $108 = $20;
         $109 = HEAP32[$108>>2]|0;
         $110 = (($109) + -12|0);
         $111 = HEAP32[$110>>2]|0;
         $112 = (($108) + ($111)|0);
         $13 = $112;
         $14 = 5;
         $113 = $13;
         $114 = $14;
         $11 = $113;
         $12 = $114;
         $115 = $11;
         $116 = (($115) + 16|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = $12;
         $119 = $117 | $118;
         __THREW__ = 0;
         invoke_vii(523,($115|0),($119|0));
         $120 = __THREW__; __THREW__ = 0;
         $121 = $120&1;
         if ($121) {
          label = 21;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 21) {
      $124 = ___cxa_find_matching_catch(0|0)|0;
      $125 = tempRet0;
      $eh$lpad$body$index2Z2D = $125;$eh$lpad$body$indexZ2D = $124;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   $134 = $20;
   STACKTOP = sp;return ($134|0);
  }
 } while(0);
 $126 = $23;
 (___cxa_begin_catch(($126|0))|0);
 $127 = $20;
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + -12|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = (($127) + ($130)|0);
 __THREW__ = 0;
 invoke_vi(524,($131|0));
 $132 = __THREW__; __THREW__ = 0;
 $133 = $132&1;
 if (!($133)) {
  ___cxa_end_catch();
  $134 = $20;
  STACKTOP = sp;return ($134|0);
 }
 $135 = ___cxa_find_matching_catch()|0;
 $136 = tempRet0;
 $23 = $135;
 $24 = $136;
 __THREW__ = 0;
 invoke_v(480);
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 if ($138) {
  $141 = ___cxa_find_matching_catch(0|0)|0;
  $142 = tempRet0;
  ___clang_call_terminate($141);
  // unreachable;
 }
 $139 = $23;
 $140 = $24;
 ___resumeException($139|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0;
 var $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp + 12|0;
 $35 = $__ob;
 $36 = $__op;
 $37 = $__oe;
 $38 = $__iob;
 $39 = $__fl;
 $43 = HEAP32[$__s>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $45 = $37;
 $46 = $35;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $__sz = $49;
 $50 = $38;
 $34 = $50;
 $51 = $34;
 $52 = (($51) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $__ns = $53;
 $54 = $__ns;
 $55 = $__sz;
 $56 = ($54|0)>($55|0);
 if ($56) {
  $57 = $__sz;
  $58 = $__ns;
  $59 = (($58) - ($57))|0;
  $__ns = $59;
 } else {
  $__ns = 0;
 }
 $60 = $36;
 $61 = $35;
 $62 = $60;
 $63 = $61;
 $64 = (($62) - ($63))|0;
 $__np = $64;
 $65 = $__np;
 $66 = ($65|0)>(0);
 do {
  if ($66) {
   $67 = HEAP32[$__s>>2]|0;
   $68 = $35;
   $69 = $__np;
   $26 = $67;
   $27 = $68;
   $28 = $69;
   $70 = $26;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 48|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $27;
   $75 = $28;
   $76 = (FUNCTION_TABLE_iiii[$73 & 1023]($70,$74,$75)|0);
   $77 = $__np;
   $78 = ($76|0)!=($77|0);
   if (!($78)) {
    break;
   }
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $79 = $__ns;
 $80 = ($79|0)>(0);
 do {
  if ($80) {
   $81 = $__ns;
   $82 = $39;
   $23 = $__sp;
   $24 = $81;
   $25 = $82;
   $83 = $23;
   $84 = $24;
   $85 = $25;
   $20 = $83;
   $21 = $84;
   $22 = $85;
   $86 = $20;
   $19 = $86;
   $87 = $19;
   $18 = $87;
   $88 = $18;
   $17 = $88;
   $89 = $21;
   $90 = $22;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($86,$89,$90);
   $91 = HEAP32[$__s>>2]|0;
   $16 = $__sp;
   $92 = $16;
   $15 = $92;
   $93 = $15;
   $14 = $93;
   $94 = $14;
   $13 = $94;
   $95 = $13;
   $12 = $95;
   $96 = $12;
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = $98 & 1;
   $100 = ($99|0)!=(0);
   if ($100) {
    $6 = $93;
    $101 = $6;
    $5 = $101;
    $102 = $5;
    $4 = $102;
    $103 = $4;
    $104 = (($103) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $112 = $105;
   } else {
    $11 = $93;
    $106 = $11;
    $10 = $106;
    $107 = $10;
    $9 = $107;
    $108 = $9;
    $109 = (($108) + 1|0);
    $8 = $109;
    $110 = $8;
    $7 = $110;
    $111 = $7;
    $112 = $111;
   }
   $3 = $112;
   $113 = $3;
   $114 = $__ns;
   $0 = $91;
   $1 = $113;
   $2 = $114;
   $115 = $0;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 48|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $1;
   $120 = $2;
   __THREW__ = 0;
   $121 = (invoke_iiii($118|0,($115|0),($119|0),($120|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    $126 = ___cxa_find_matching_catch()|0;
    $127 = tempRet0;
    $40 = $126;
    $41 = $127;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    $153 = $40;
    $154 = $41;
    ___resumeException($153|0);
    // unreachable;
   }
   $124 = $__ns;
   $125 = ($121|0)!=($124|0);
   if ($125) {
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $42 = 1;
   } else {
    $42 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $42;
   if ((($cleanup$dest|0) == 0)) {
    break;
   } else if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $128 = $37;
 $129 = $36;
 $130 = $128;
 $131 = $129;
 $132 = (($130) - ($131))|0;
 $__np = $132;
 $133 = $__np;
 $134 = ($133|0)>(0);
 do {
  if ($134) {
   $135 = HEAP32[$__s>>2]|0;
   $136 = $36;
   $137 = $__np;
   $29 = $135;
   $30 = $136;
   $31 = $137;
   $138 = $29;
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + 48|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $30;
   $143 = $31;
   $144 = (FUNCTION_TABLE_iiii[$141 & 1023]($138,$142,$143)|0);
   $145 = $__np;
   $146 = ($144|0)!=($145|0);
   if (!($146)) {
    break;
   }
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $147 = $38;
 $32 = $147;
 $33 = 0;
 $148 = $32;
 $149 = (($148) + 12|0);
 $150 = HEAP32[$149>>2]|0;
 $__r$i = $150;
 $151 = $33;
 $152 = (($148) + 12|0);
 HEAP32[$152>>2] = $151;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNK7croutes5ndataIdE12bounds_checkEii($this,$from_node,$to_node) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $from_node;
 $4 = $to_node;
 $7 = $2;
 $8 = $3;
 $9 = ($8|0)<(0);
 if (!($9)) {
  $10 = $3;
  $11 = HEAP32[$7>>2]|0;
  $12 = ($10>>>0)>=($11>>>0);
  if (!($12)) {
   $13 = $4;
   $14 = ($13|0)<(0);
   if (!($14)) {
    $15 = $4;
    $16 = HEAP32[$7>>2]|0;
    $17 = ($15>>>0)>=($16>>>0);
    if (!($17)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $18 = (___cxa_allocate_exception(8)|0);
 $0 = $18;
 $1 = 1480;
 $19 = $0;
 $20 = $1;
 __THREW__ = 0;
 invoke_vii(424,($19|0),($20|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $24 = ___cxa_find_matching_catch()|0;
  $25 = tempRet0;
  $5 = $24;
  $6 = $25;
  ___cxa_free_exception(($18|0));
  $26 = $5;
  $27 = $6;
  ___resumeException($26|0);
  // unreachable;
 } else {
  $23 = (15352 + 8|0);
  HEAP32[$19>>2] = $23;
  ___cxa_throw(($18|0),(15400|0),(378|0));
  // unreachable;
 }
}
function __ZN7croutes17data_inconsistentC2Eii($this,$from_node,$to_node) {
 $this = $this|0;
 $from_node = $from_node|0;
 $to_node = $to_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0;
 var $__a$i$i$i$i1 = 0, $__a$i$i$i$i4 = 0, $__a$i$i$i$i8 = 0, $__i$i$i$i$i = 0, $__i$i$i$i$i2 = 0, $__i$i$i$i$i5 = 0, $__i$i$i$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $74 = sp + 56|0;
 $75 = sp + 44|0;
 $76 = sp + 32|0;
 $77 = sp + 20|0;
 $80 = sp;
 $71 = $this;
 $72 = $from_node;
 $73 = $to_node;
 $81 = $71;
 $70 = $81;
 $82 = $70;
 $83 = (15160 + 8|0);
 HEAP32[$82>>2] = $83;
 $84 = (1408 + 8|0);
 HEAP32[$81>>2] = $84;
 $85 = (($81) + 4|0);
 $86 = $72;
 __THREW__ = 0;
 invoke_vii(525,($77|0),($86|0));
 $87 = __THREW__; __THREW__ = 0;
 $88 = $87&1;
 if ($88) {
  $225 = ___cxa_find_matching_catch()|0;
  $226 = tempRet0;
  $78 = $225;
  $79 = $226;
 } else {
  $57 = 1432;
  $58 = $77;
  $89 = $58;
  $90 = $57;
  __THREW__ = 0;
  $91 = (invoke_iiii(526,($89|0),0,($90|0))|0);
  $92 = __THREW__; __THREW__ = 0;
  $93 = $92&1;
  if ($93) {
   $227 = ___cxa_find_matching_catch()|0;
   $228 = tempRet0;
   $78 = $227;
   $79 = $228;
  } else {
   $56 = $91;
   $94 = $56;
   $54 = $76;
   $55 = $94;
   $95 = $54;
   $96 = $55;
   $52 = $95;
   $53 = $96;
   $97 = $52;
   $98 = $53;
   $51 = $98;
   $99 = $51;
   ;HEAP32[$97+0>>2]=HEAP32[$99+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$97+8>>2]=HEAP32[$99+8>>2]|0;
   $100 = $53;
   $50 = $100;
   $101 = $50;
   $49 = $101;
   $102 = $49;
   $48 = $102;
   $103 = $48;
   $__a$i$i$i$i1 = $103;
   $__i$i$i$i$i2 = 0;
   while(1) {
    $104 = $__i$i$i$i$i2;
    $105 = ($104>>>0)<(3);
    if (!($105)) {
     break;
    }
    $106 = $__i$i$i$i$i2;
    $107 = $__a$i$i$i$i1;
    $108 = (($107) + ($106<<2)|0);
    HEAP32[$108>>2] = 0;
    $109 = $__i$i$i$i$i2;
    $110 = (($109) + 1)|0;
    $__i$i$i$i$i2 = $110;
   }
   $46 = $76;
   $47 = 1464;
   $111 = $46;
   $112 = $47;
   __THREW__ = 0;
   $113 = (invoke_iii(527,($111|0),($112|0))|0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    $229 = ___cxa_find_matching_catch()|0;
    $230 = tempRet0;
    $78 = $229;
    $79 = $230;
   } else {
    $45 = $113;
    $116 = $45;
    $43 = $75;
    $44 = $116;
    $117 = $43;
    $118 = $44;
    $41 = $117;
    $42 = $118;
    $119 = $41;
    $120 = $42;
    $40 = $120;
    $121 = $40;
    ;HEAP32[$119+0>>2]=HEAP32[$121+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$119+8>>2]=HEAP32[$121+8>>2]|0;
    $122 = $42;
    $39 = $122;
    $123 = $39;
    $38 = $123;
    $124 = $38;
    $37 = $124;
    $125 = $37;
    $__a$i$i$i$i4 = $125;
    $__i$i$i$i$i5 = 0;
    while(1) {
     $126 = $__i$i$i$i$i5;
     $127 = ($126>>>0)<(3);
     if (!($127)) {
      break;
     }
     $128 = $__i$i$i$i$i5;
     $129 = $__a$i$i$i$i4;
     $130 = (($129) + ($128<<2)|0);
     HEAP32[$130>>2] = 0;
     $131 = $__i$i$i$i$i5;
     $132 = (($131) + 1)|0;
     $__i$i$i$i$i5 = $132;
    }
    $133 = $73;
    __THREW__ = 0;
    invoke_vii(525,($80|0),($133|0));
    $134 = __THREW__; __THREW__ = 0;
    $135 = $134&1;
    if ($135) {
     $231 = ___cxa_find_matching_catch()|0;
     $232 = tempRet0;
     $78 = $231;
     $79 = $232;
    } else {
     $35 = $75;
     $36 = $80;
     $136 = $35;
     $137 = $36;
     $33 = $136;
     $34 = $137;
     $138 = $33;
     $139 = $34;
     $32 = $139;
     $140 = $32;
     $31 = $140;
     $141 = $31;
     $30 = $141;
     $142 = $30;
     $29 = $142;
     $143 = $29;
     $28 = $143;
     $144 = $28;
     $145 = HEAP8[$144>>0]|0;
     $146 = $145&255;
     $147 = $146 & 1;
     $148 = ($147|0)!=(0);
     if ($148) {
      $22 = $141;
      $149 = $22;
      $21 = $149;
      $150 = $21;
      $20 = $150;
      $151 = $20;
      $152 = (($151) + 8|0);
      $153 = HEAP32[$152>>2]|0;
      $160 = $153;
     } else {
      $27 = $141;
      $154 = $27;
      $26 = $154;
      $155 = $26;
      $25 = $155;
      $156 = $25;
      $157 = (($156) + 1|0);
      $24 = $157;
      $158 = $24;
      $23 = $158;
      $159 = $23;
      $160 = $159;
     }
     $19 = $160;
     $161 = $19;
     $162 = $34;
     $18 = $162;
     $163 = $18;
     $17 = $163;
     $164 = $17;
     $16 = $164;
     $165 = $16;
     $15 = $165;
     $166 = $15;
     $167 = HEAP8[$166>>0]|0;
     $168 = $167&255;
     $169 = $168 & 1;
     $170 = ($169|0)!=(0);
     if ($170) {
      $11 = $163;
      $171 = $11;
      $10 = $171;
      $172 = $10;
      $9 = $172;
      $173 = $9;
      $174 = (($173) + 4|0);
      $175 = HEAP32[$174>>2]|0;
      $182 = $175;
     } else {
      $14 = $163;
      $176 = $14;
      $13 = $176;
      $177 = $13;
      $12 = $177;
      $178 = $12;
      $179 = HEAP8[$178>>0]|0;
      $180 = $179&255;
      $181 = $180 >> 1;
      $182 = $181;
     }
     __THREW__ = 0;
     $183 = (invoke_iiii(528,($138|0),($161|0),($182|0))|0);
     $184 = __THREW__; __THREW__ = 0;
     $185 = $184&1;
     do {
      if ($185) {
       $233 = ___cxa_find_matching_catch()|0;
       $234 = tempRet0;
       $78 = $233;
       $79 = $234;
      } else {
       $8 = $183;
       $186 = $8;
       $6 = $74;
       $7 = $186;
       $187 = $6;
       $188 = $7;
       $4 = $187;
       $5 = $188;
       $189 = $4;
       $190 = $5;
       $3 = $190;
       $191 = $3;
       ;HEAP32[$189+0>>2]=HEAP32[$191+0>>2]|0;HEAP32[$189+4>>2]=HEAP32[$191+4>>2]|0;HEAP32[$189+8>>2]=HEAP32[$191+8>>2]|0;
       $192 = $5;
       $2 = $192;
       $193 = $2;
       $1 = $193;
       $194 = $1;
       $0 = $194;
       $195 = $0;
       $__a$i$i$i$i8 = $195;
       $__i$i$i$i$i9 = 0;
       while(1) {
        $196 = $__i$i$i$i$i9;
        $197 = ($196>>>0)<(3);
        if (!($197)) {
         break;
        }
        $198 = $__i$i$i$i$i9;
        $199 = $__a$i$i$i$i8;
        $200 = (($199) + ($198<<2)|0);
        HEAP32[$200>>2] = 0;
        $201 = $__i$i$i$i$i9;
        $202 = (($201) + 1)|0;
        $__i$i$i$i$i9 = $202;
       }
       $68 = $74;
       $69 = 1472;
       $203 = $68;
       $204 = $69;
       __THREW__ = 0;
       $205 = (invoke_iii(527,($203|0),($204|0))|0);
       $206 = __THREW__; __THREW__ = 0;
       $207 = $206&1;
       if ($207) {
        $235 = ___cxa_find_matching_catch()|0;
        $236 = tempRet0;
        $78 = $235;
        $79 = $236;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($74);
        break;
       }
       $67 = $205;
       $208 = $67;
       $65 = $85;
       $66 = $208;
       $209 = $65;
       $210 = $66;
       $63 = $209;
       $64 = $210;
       $211 = $63;
       $212 = $64;
       $62 = $212;
       $213 = $62;
       ;HEAP32[$211+0>>2]=HEAP32[$213+0>>2]|0;HEAP32[$211+4>>2]=HEAP32[$213+4>>2]|0;HEAP32[$211+8>>2]=HEAP32[$213+8>>2]|0;
       $214 = $64;
       $61 = $214;
       $215 = $61;
       $60 = $215;
       $216 = $60;
       $59 = $216;
       $217 = $59;
       $__a$i$i$i$i = $217;
       $__i$i$i$i$i = 0;
       while(1) {
        $218 = $__i$i$i$i$i;
        $219 = ($218>>>0)<(3);
        if (!($219)) {
         break;
        }
        $220 = $__i$i$i$i$i;
        $221 = $__a$i$i$i$i;
        $222 = (($221) + ($220<<2)|0);
        HEAP32[$222>>2] = 0;
        $223 = $__i$i$i$i$i;
        $224 = (($223) + 1)|0;
        $__i$i$i$i$i = $224;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($74);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($80);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($75);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($76);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($77);
       STACKTOP = sp;return;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($80);
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($75);
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($76);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($77);
 }
 $237 = $78;
 $238 = $79;
 ___resumeException($237|0);
 // unreachable;
}
function __ZN7croutes17data_inconsistentD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (1408 + 8|0);
 HEAP32[$1>>2] = $2;
 $3 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZN7croutes8net_bondIdE12set_distanceEd($this,$distance) {
 $this = $this|0;
 $distance = +$distance;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $distance;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 8|0);
 HEAPF64[$4>>3] = $3;
 STACKTOP = sp;return;
}
function __ZN7croutes17data_inconsistentD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN7croutes17data_inconsistentD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK7croutes17data_inconsistent4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = $this;
 $16 = $15;
 $17 = (($16) + 4|0);
 $14 = $17;
 $18 = $14;
 $13 = $18;
 $19 = $13;
 $12 = $19;
 $20 = $12;
 $11 = $20;
 $21 = $11;
 $10 = $21;
 $22 = $10;
 $9 = $22;
 $23 = $9;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 & 1;
 $27 = ($26|0)!=(0);
 if ($27) {
  $3 = $20;
  $28 = $3;
  $2 = $28;
  $29 = $2;
  $1 = $29;
  $30 = $1;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $39 = $32;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 } else {
  $8 = $20;
  $33 = $8;
  $7 = $33;
  $34 = $7;
  $6 = $34;
  $35 = $6;
  $36 = (($35) + 1|0);
  $5 = $36;
  $37 = $5;
  $4 = $37;
  $38 = $4;
  $39 = $38;
  $0 = $39;
  $40 = $0;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function __ZNSt3__110shared_ptrIN7croutes5ndataIdEEE11make_sharedIJRjEEES4_DpOT_($agg$result,$__args) {
 $agg$result = $agg$result|0;
 $__args = $__args|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a2 = 0, $__hold2 = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 144|0;
 $11 = sp + 136|0;
 $12 = sp + 128|0;
 $13 = sp + 120|0;
 $16 = sp + 706|0;
 $17 = sp + 705|0;
 $18 = sp + 704|0;
 $19 = sp + 703|0;
 $28 = sp + 112|0;
 $29 = sp + 104|0;
 $30 = sp + 96|0;
 $31 = sp + 88|0;
 $34 = sp + 702|0;
 $35 = sp + 701|0;
 $36 = sp + 700|0;
 $37 = sp + 699|0;
 $48 = sp + 80|0;
 $49 = sp + 72|0;
 $50 = sp + 64|0;
 $51 = sp + 56|0;
 $52 = sp + 48|0;
 $55 = sp + 698|0;
 $56 = sp + 552|0;
 $57 = sp + 548|0;
 $58 = sp + 697|0;
 $59 = sp + 696|0;
 $60 = sp + 40|0;
 $61 = sp + 32|0;
 $62 = sp + 24|0;
 $69 = sp + 695|0;
 $70 = sp + 520|0;
 $71 = sp + 516|0;
 $74 = sp + 16|0;
 $114 = sp + 340|0;
 $115 = sp + 8|0;
 $118 = sp + 328|0;
 $119 = sp + 320|0;
 $120 = sp;
 $125 = sp + 296|0;
 $__a2 = sp + 694|0;
 $__hold2 = sp + 168|0;
 $153 = sp + 160|0;
 $154 = sp + 693|0;
 $152 = $__args;
 $151 = $__a2;
 $130 = $__a2;
 $131 = 1;
 $132 = 0;
 $159 = $131;
 $160 = ($159*40)|0;
 $129 = $160;
 $161 = $129;
 $162 = (__Znwj($161)|0);
 $126 = $153;
 $127 = $__a2;
 $128 = 1;
 $163 = $126;
 $164 = $127;
 HEAP32[$163>>2] = $164;
 $165 = (($163) + 4|0);
 $166 = $128;
 HEAP32[$165>>2] = $166;
 $122 = $__hold2;
 $123 = $162;
 $124 = $153;
 $167 = $122;
 $168 = $123;
 $169 = $124;
 $121 = $169;
 $170 = $121;
 ;HEAP32[$125+0>>2]=HEAP32[$170+0>>2]|0;HEAP32[$125+4>>2]=HEAP32[$170+4>>2]|0;
 ;HEAP8[$120+0>>0]=HEAP8[$125+0>>0]|0;HEAP8[$120+1>>0]=HEAP8[$125+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$125+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$125+3>>0]|0;HEAP8[$120+4>>0]=HEAP8[$125+4>>0]|0;HEAP8[$120+5>>0]=HEAP8[$125+5>>0]|0;HEAP8[$120+6>>0]=HEAP8[$125+6>>0]|0;HEAP8[$120+7>>0]=HEAP8[$125+7>>0]|0;
 $117 = $167;
 HEAP32[$118>>2] = $168;
 $171 = $117;
 $116 = $118;
 $172 = $116;
 $173 = HEAP32[$172>>2]|0;
 $110 = $120;
 $174 = $110;
 ;HEAP32[$119+0>>2]=HEAP32[$174+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$174+4>>2]|0;
 ;HEAP8[$115+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$115+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$115+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$115+3>>0]=HEAP8[$119+3>>0]|0;HEAP8[$115+4>>0]=HEAP8[$119+4>>0]|0;HEAP8[$115+5>>0]=HEAP8[$119+5>>0]|0;HEAP8[$115+6>>0]=HEAP8[$119+6>>0]|0;HEAP8[$115+7>>0]=HEAP8[$119+7>>0]|0;
 $113 = $171;
 HEAP32[$114>>2] = $173;
 $175 = $113;
 $112 = $114;
 $176 = $112;
 $177 = HEAP32[$176>>2]|0;
 HEAP32[$175>>2] = $177;
 $178 = (($175) + 4|0);
 $111 = $115;
 $179 = $111;
 ;HEAP32[$178+0>>2]=HEAP32[$179+0>>2]|0;HEAP32[$178+4>>2]=HEAP32[$179+4>>2]|0;
 $91 = $__hold2;
 $180 = $91;
 $90 = $180;
 $181 = $90;
 $89 = $181;
 $182 = $89;
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)==(0|0);
 do {
  if (!($184)) {
   $1 = $154;
   $2 = $__a2;
   $185 = $152;
   $0 = $185;
   $186 = $0;
   ;HEAP8[$74+0>>0]=HEAP8[$154+0>>0]|0;
   $67 = $183;
   $68 = $186;
   $187 = $67;
   $65 = $187;
   $66 = 0;
   $188 = $65;
   $189 = $66;
   $63 = $188;
   $64 = $189;
   $190 = $63;
   $191 = (3552 + 8|0);
   HEAP32[$190>>2] = $191;
   $192 = (($190) + 4|0);
   $193 = $64;
   HEAP32[$192>>2] = $193;
   $194 = (3616 + 8|0);
   HEAP32[$188>>2] = $194;
   $195 = (($188) + 8|0);
   $196 = $66;
   HEAP32[$195>>2] = $196;
   $197 = (880 + 8|0);
   HEAP32[$187>>2] = $197;
   $198 = (($187) + 16|0);
   $39 = $74;
   $199 = $39;
   $38 = $199;
   $200 = $38;
   $32 = $70;
   $33 = $200;
   $201 = $32;
   $202 = $33;
   ;HEAP8[$28+0>>0]=HEAP8[$37+0>>0]|0;
   ;HEAP8[$29+0>>0]=HEAP8[$36+0>>0]|0;
   ;HEAP8[$30+0>>0]=HEAP8[$35+0>>0]|0;
   ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
   $26 = $201;
   $27 = $202;
   $203 = $26;
   $204 = $27;
   $25 = $204;
   $205 = $25;
   $23 = $203;
   $24 = $205;
   $206 = $23;
   $207 = $24;
   $22 = $207;
   $208 = $22;
   HEAP32[$206>>2] = $208;
   $209 = $68;
   $3 = $209;
   $210 = $3;
   $21 = $210;
   $211 = $21;
   $20 = $211;
   $212 = $20;
   $14 = $71;
   $15 = $212;
   $213 = $14;
   $214 = $15;
   ;HEAP8[$10+0>>0]=HEAP8[$19+0>>0]|0;
   ;HEAP8[$11+0>>0]=HEAP8[$18+0>>0]|0;
   ;HEAP8[$12+0>>0]=HEAP8[$17+0>>0]|0;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $8 = $213;
   $9 = $214;
   $215 = $8;
   $216 = $9;
   $7 = $216;
   $217 = $7;
   $5 = $215;
   $6 = $217;
   $218 = $5;
   $219 = $6;
   $4 = $219;
   $220 = $4;
   HEAP32[$218>>2] = $220;
   ;HEAP8[$60+0>>0]=HEAP8[$71+0>>0]|0;HEAP8[$60+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$71+3>>0]|0;
   ;HEAP8[$61+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$70+3>>0]|0;
   ;HEAP8[$62+0>>0]=HEAP8[$69+0>>0]|0;
   $54 = $198;
   $221 = $54;
   $53 = $61;
   $222 = $53;
   ;HEAP32[$56+0>>2]=HEAP32[$222+0>>2]|0;
   $40 = $60;
   $223 = $40;
   ;HEAP32[$57+0>>2]=HEAP32[$223+0>>2]|0;
   ;HEAP8[$48+0>>0]=HEAP8[$59+0>>0]|0;
   ;HEAP8[$49+0>>0]=HEAP8[$58+0>>0]|0;
   ;HEAP8[$50+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$57+3>>0]|0;
   ;HEAP8[$51+0>>0]=HEAP8[$56+0>>0]|0;HEAP8[$51+1>>0]=HEAP8[$56+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$56+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$56+3>>0]|0;
   ;HEAP8[$52+0>>0]=HEAP8[$55+0>>0]|0;
   $47 = $221;
   $224 = $47;
   $46 = $51;
   $225 = $46;
   $45 = $225;
   $226 = $45;
   $227 = HEAP32[$226>>2]|0;
   $44 = $227;
   $42 = $50;
   $228 = $42;
   $41 = $228;
   $229 = $41;
   $230 = HEAP32[$229>>2]|0;
   $43 = $230;
   $231 = $43;
   $232 = HEAP32[$231>>2]|0;
   __THREW__ = 0;
   invoke_vii(529,($224|0),($232|0));
   $233 = __THREW__; __THREW__ = 0;
   $234 = $233&1;
   if (!($234)) {
    break;
   }
   $235 = ___cxa_find_matching_catch()|0;
   $236 = tempRet0;
   $72 = $235;
   $73 = $236;
   __ZNSt3__114__shared_countD2Ev($187);
   $237 = $72;
   $238 = $73;
   $155 = $237;
   $156 = $238;
   $109 = $__hold2;
   $259 = $109;
   $107 = $259;
   $108 = 0;
   $260 = $107;
   $106 = $260;
   $261 = $106;
   $105 = $261;
   $262 = $105;
   $263 = HEAP32[$262>>2]|0;
   $__tmp$i$i1 = $263;
   $264 = $108;
   $95 = $260;
   $265 = $95;
   $94 = $265;
   $266 = $94;
   HEAP32[$266>>2] = $264;
   $267 = $__tmp$i$i1;
   $268 = ($267|0)!=(0|0);
   if ($268) {
    $93 = $260;
    $269 = $93;
    $92 = $269;
    $270 = $92;
    $271 = (($270) + 4|0);
    $272 = $__tmp$i$i1;
    $103 = $271;
    $104 = $272;
    $273 = $103;
    $274 = HEAP32[$273>>2]|0;
    $275 = $104;
    $276 = (($273) + 4|0);
    $277 = HEAP32[$276>>2]|0;
    $100 = $274;
    $101 = $275;
    $102 = $277;
    $278 = $100;
    $279 = $101;
    $280 = $102;
    $97 = $278;
    $98 = $279;
    $99 = $280;
    $281 = $98;
    $96 = $281;
    $282 = $96;
    __ZdlPv($282);
   }
   $307 = $155;
   $308 = $156;
   ___resumeException($307|0);
   // unreachable;
  }
 } while(0);
 $$expand_i1_val = 0;
 $157 = $$expand_i1_val;
 $75 = $agg$result;
 $239 = $75;
 HEAP32[$239>>2] = 0;
 $240 = (($239) + 4|0);
 HEAP32[$240>>2] = 0;
 $78 = $__hold2;
 $241 = $78;
 $77 = $241;
 $242 = $77;
 $76 = $242;
 $243 = $76;
 $244 = HEAP32[$243>>2]|0;
 $81 = $244;
 $245 = $81;
 $246 = (($245) + 16|0);
 $80 = $246;
 $247 = $80;
 $79 = $247;
 $248 = $79;
 HEAP32[$agg$result>>2] = $248;
 $86 = $__hold2;
 $249 = $86;
 $85 = $249;
 $250 = $85;
 $84 = $250;
 $251 = $84;
 $252 = HEAP32[$251>>2]|0;
 $__t$i = $252;
 $83 = $249;
 $253 = $83;
 $82 = $253;
 $254 = $82;
 HEAP32[$254>>2] = 0;
 $255 = $__t$i;
 $256 = (($agg$result) + 4|0);
 HEAP32[$256>>2] = $255;
 $257 = HEAP32[$agg$result>>2]|0;
 $87 = $agg$result;
 $88 = $257;
 $$expand_i1_val7 = 1;
 $157 = $$expand_i1_val7;
 $158 = 1;
 $$pre_trunc = $157;
 $258 = $$pre_trunc&1;
 if (!($258)) {
  __ZNSt3__110shared_ptrIN7croutes5ndataIdEEED2Ev($agg$result);
 }
 $150 = $__hold2;
 $283 = $150;
 $148 = $283;
 $149 = 0;
 $284 = $148;
 $147 = $284;
 $285 = $147;
 $146 = $285;
 $286 = $146;
 $287 = HEAP32[$286>>2]|0;
 $__tmp$i$i = $287;
 $288 = $149;
 $136 = $284;
 $289 = $136;
 $135 = $289;
 $290 = $135;
 HEAP32[$290>>2] = $288;
 $291 = $__tmp$i$i;
 $292 = ($291|0)!=(0|0);
 if (!($292)) {
  STACKTOP = sp;return;
 }
 $134 = $284;
 $293 = $134;
 $133 = $293;
 $294 = $133;
 $295 = (($294) + 4|0);
 $296 = $__tmp$i$i;
 $144 = $295;
 $145 = $296;
 $297 = $144;
 $298 = HEAP32[$297>>2]|0;
 $299 = $145;
 $300 = (($297) + 4|0);
 $301 = HEAP32[$300>>2]|0;
 $141 = $298;
 $142 = $299;
 $143 = $301;
 $302 = $141;
 $303 = $142;
 $304 = $143;
 $138 = $302;
 $139 = $303;
 $140 = $304;
 $305 = $139;
 $137 = $305;
 $306 = $137;
 __ZdlPv($306);
 STACKTOP = sp;return;
}
function __ZN7croutes5ndataIdEC2Ej($this,$nodes_count) {
 $this = $this|0;
 $nodes_count = $nodes_count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $i = 0, $j = 0;
 var $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp + 8|0;
 $14 = sp + 303|0;
 $__annotator$i1 = sp + 302|0;
 $28 = sp + 192|0;
 $31 = sp + 180|0;
 $38 = sp + 152|0;
 $41 = sp + 140|0;
 $53 = sp;
 $58 = sp + 301|0;
 $__annotator$i = sp + 300|0;
 $row = sp + 28|0;
 $70 = sp + 20|0;
 $68 = $this;
 $69 = $nodes_count;
 $73 = $68;
 $74 = $69;
 HEAP32[$73>>2] = $74;
 $75 = (($73) + 8|0);
 HEAPF64[$75>>3] = inf;
 $76 = (($73) + 16|0);
 $77 = (__Znwj(12)|0);
 $44 = $77;
 $78 = $44;
 $43 = $78;
 $79 = $43;
 $42 = $79;
 HEAP32[$79>>2] = 0;
 $80 = (($79) + 4|0);
 HEAP32[$80>>2] = 0;
 $81 = (($79) + 8|0);
 $40 = $81;
 HEAP32[$41>>2] = 0;
 $82 = $40;
 $39 = $41;
 $83 = $39;
 $84 = HEAP32[$83>>2]|0;
 $37 = $82;
 HEAP32[$38>>2] = $84;
 $85 = $37;
 $36 = $85;
 $35 = $38;
 $86 = $35;
 $87 = HEAP32[$86>>2]|0;
 HEAP32[$85>>2] = $87;
 HEAP32[$76>>2] = $77;
 $88 = (($73) + 16|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = HEAP32[$73>>2]|0;
 __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE7reserveEj($89,$90);
 $i = 0;
 L1: while(1) {
  $91 = $i;
  $92 = HEAP32[$73>>2]|0;
  $93 = ($91>>>0)<($92>>>0);
  if (!($93)) {
   label = 21;
   break;
  }
  $94 = (__Znwj(12)|0);
  $34 = $94;
  $95 = $34;
  $33 = $95;
  $96 = $33;
  $32 = $96;
  HEAP32[$96>>2] = 0;
  $97 = (($96) + 4|0);
  HEAP32[$97>>2] = 0;
  $98 = (($96) + 8|0);
  $30 = $98;
  HEAP32[$31>>2] = 0;
  $99 = $30;
  $29 = $31;
  $100 = $29;
  $101 = HEAP32[$100>>2]|0;
  $27 = $99;
  HEAP32[$28>>2] = $101;
  $102 = $27;
  $26 = $102;
  $25 = $28;
  $103 = $25;
  $104 = HEAP32[$103>>2]|0;
  HEAP32[$102>>2] = $104;
  HEAP32[$row>>2] = $94;
  $105 = HEAP32[$row>>2]|0;
  $106 = HEAP32[$73>>2]|0;
  __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE7reserveEj($105,$106);
  $j = 0;
  while(1) {
   $107 = $j;
   $108 = HEAP32[$73>>2]|0;
   $109 = ($107>>>0)<($108>>>0);
   if (!($109)) {
    break;
   }
   $110 = HEAP32[$row>>2]|0;
   $111 = (__Znwj(16)|0);
   $112 = $i;
   $113 = $j;
   __THREW__ = 0;
   invoke_viiid(493,($111|0),($112|0),($113|0),0.0);
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    break L1;
   }
   HEAP32[$70>>2] = $111;
   $23 = $110;
   $24 = $70;
   $116 = $23;
   $117 = (($116) + 4|0);
   $118 = HEAP32[$117>>2]|0;
   $22 = $116;
   $119 = $22;
   $120 = (($119) + 8|0);
   $21 = $120;
   $121 = $21;
   $20 = $121;
   $122 = $20;
   $123 = HEAP32[$122>>2]|0;
   $124 = ($118>>>0)<($123>>>0);
   if ($124) {
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotatorC2ERKS7_j($__annotator$i1,$116,1);
    $19 = $116;
    $125 = $19;
    $126 = (($125) + 8|0);
    $18 = $126;
    $127 = $18;
    $17 = $127;
    $128 = $17;
    $129 = (($116) + 4|0);
    $130 = HEAP32[$129>>2]|0;
    $15 = $130;
    $131 = $15;
    $132 = $24;
    $0 = $132;
    $133 = $0;
    $11 = $128;
    $12 = $131;
    $13 = $133;
    $134 = $11;
    $135 = $12;
    $136 = $13;
    $10 = $136;
    $137 = $10;
    ;HEAP8[$9+0>>0]=HEAP8[$14+0>>0]|0;
    $6 = $134;
    $7 = $135;
    $8 = $137;
    $138 = $6;
    $139 = $7;
    $140 = $8;
    $5 = $140;
    $141 = $5;
    $2 = $138;
    $3 = $139;
    $4 = $141;
    $142 = $3;
    $143 = ($142|0)==(0|0);
    if (!($143)) {
     $144 = $4;
     $1 = $144;
     $145 = $1;
     $146 = HEAP32[$145>>2]|0;
     HEAP32[$142>>2] = $146;
    }
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
    $147 = (($116) + 4|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (($148) + 4|0);
    HEAP32[$147>>2] = $149;
   } else {
    $150 = $24;
    $16 = $150;
    $151 = $16;
    __ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_($116,$151);
   }
   $152 = $j;
   $153 = (($152) + 1)|0;
   $j = $153;
  }
  $156 = (($73) + 16|0);
  $157 = HEAP32[$156>>2]|0;
  $66 = $157;
  $67 = $row;
  $158 = $66;
  $159 = (($158) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $65 = $158;
  $161 = $65;
  $162 = (($161) + 8|0);
  $64 = $162;
  $163 = $64;
  $63 = $163;
  $164 = $63;
  $165 = HEAP32[$164>>2]|0;
  $166 = ($160|0)!=($165|0);
  if ($166) {
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotatorC2ERKSA_j($__annotator$i,$158,1);
   $62 = $158;
   $167 = $62;
   $168 = (($167) + 8|0);
   $61 = $168;
   $169 = $61;
   $60 = $169;
   $170 = $60;
   $171 = (($158) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $59 = $172;
   $173 = $59;
   $174 = $67;
   $55 = $170;
   $56 = $173;
   $57 = $174;
   $175 = $55;
   $176 = $56;
   $177 = $57;
   $54 = $177;
   $178 = $54;
   ;HEAP8[$53+0>>0]=HEAP8[$58+0>>0]|0;
   $50 = $175;
   $51 = $176;
   $52 = $178;
   $179 = $50;
   $180 = $51;
   $181 = $52;
   $49 = $181;
   $182 = $49;
   $46 = $179;
   $47 = $180;
   $48 = $182;
   $183 = $47;
   $184 = ($183|0)==(0|0);
   if (!($184)) {
    $185 = $48;
    $45 = $185;
    $186 = $45;
    $187 = HEAP32[$186>>2]|0;
    HEAP32[$183>>2] = $187;
   }
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $188 = (($158) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (($189) + 4|0);
   HEAP32[$188>>2] = $190;
  } else {
   $191 = $67;
   __ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE21__push_back_slow_pathIRKS8_EEvOT_($158,$191);
  }
  $192 = $i;
  $193 = (($192) + 1)|0;
  $i = $193;
 }
 if ((label|0) == 21) {
  STACKTOP = sp;return;
 }
 $154 = ___cxa_find_matching_catch()|0;
 $155 = tempRet0;
 $71 = $154;
 $72 = $155;
 __ZdlPv($111);
 $194 = $71;
 $195 = $72;
 ___resumeException($194|0);
 // unreachable;
}
function __ZNKSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSC_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0;
 var $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = sp + 8|0;
 $22 = sp + 637|0;
 $__lhs_sz$i$i$i1 = sp + 400|0;
 $__rhs_sz$i$i$i2 = sp + 396|0;
 $92 = sp;
 $95 = sp + 636|0;
 $__lhs_sz$i$i$i = sp + 104|0;
 $__rhs_sz$i$i$i = sp + 100|0;
 $150 = $this;
 $151 = $__parent;
 $152 = $__k;
 $153 = $150;
 $148 = $153;
 $154 = $148;
 $147 = $154;
 $155 = $147;
 $156 = (($155) + 4|0);
 $146 = $156;
 $157 = $146;
 $145 = $157;
 $158 = $145;
 $144 = $158;
 $159 = $144;
 $143 = $159;
 $160 = $143;
 $161 = HEAP32[$160>>2]|0;
 $__nd = $161;
 $162 = $__nd;
 $163 = ($162|0)!=(0|0);
 if (!($163)) {
  $142 = $153;
  $447 = $142;
  $448 = (($447) + 4|0);
  $141 = $448;
  $449 = $141;
  $140 = $449;
  $450 = $140;
  $139 = $450;
  $451 = $139;
  $138 = $451;
  $452 = $138;
  $453 = $151;
  HEAP32[$453>>2] = $452;
  $454 = $151;
  $455 = HEAP32[$454>>2]|0;
  $456 = HEAP32[$455>>2]|0;
  $149 = $456;
  $457 = $149;
  STACKTOP = sp;return ($457|0);
 }
 while(1) {
  $72 = $153;
  $164 = $72;
  $165 = (($164) + 8|0);
  $71 = $165;
  $166 = $71;
  $70 = $166;
  $167 = $70;
  $69 = $167;
  $168 = $69;
  $169 = $152;
  $170 = $__nd;
  $171 = (($170) + 16|0);
  $62 = $168;
  $63 = $169;
  $64 = $171;
  $172 = $63;
  $173 = $64;
  $60 = $172;
  $61 = $173;
  $174 = $60;
  $175 = $61;
  $58 = $174;
  $59 = $175;
  $176 = $58;
  $56 = $176;
  $177 = $56;
  $55 = $177;
  $178 = $55;
  $54 = $178;
  $179 = $54;
  $53 = $179;
  $180 = $53;
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $182 & 1;
  $184 = ($183|0)!=(0);
  if ($184) {
   $49 = $177;
   $185 = $49;
   $48 = $185;
   $186 = $48;
   $47 = $186;
   $187 = $47;
   $188 = (($187) + 4|0);
   $189 = HEAP32[$188>>2]|0;
   $196 = $189;
  } else {
   $52 = $177;
   $190 = $52;
   $51 = $190;
   $191 = $51;
   $50 = $191;
   $192 = $50;
   $193 = HEAP8[$192>>0]|0;
   $194 = $193&255;
   $195 = $194 >> 1;
   $196 = $195;
  }
  HEAP32[$__lhs_sz$i$i$i1>>2] = $196;
  $197 = $59;
  $46 = $197;
  $198 = $46;
  $45 = $198;
  $199 = $45;
  $44 = $199;
  $200 = $44;
  $43 = $200;
  $201 = $43;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $39 = $198;
   $206 = $39;
   $38 = $206;
   $207 = $38;
   $37 = $207;
   $208 = $37;
   $209 = (($208) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $42 = $198;
   $211 = $42;
   $41 = $211;
   $212 = $41;
   $40 = $212;
   $213 = $40;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__rhs_sz$i$i$i2>>2] = $217;
  $36 = $176;
  $218 = $36;
  $35 = $218;
  $219 = $35;
  $34 = $219;
  $220 = $34;
  $33 = $220;
  $221 = $33;
  $32 = $221;
  $222 = $32;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $26 = $219;
   $227 = $26;
   $25 = $227;
   $228 = $25;
   $24 = $228;
   $229 = $24;
   $230 = (($229) + 8|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $31 = $219;
   $232 = $31;
   $30 = $232;
   $233 = $30;
   $29 = $233;
   $234 = $29;
   $235 = (($234) + 1|0);
   $28 = $235;
   $236 = $28;
   $27 = $236;
   $237 = $27;
   $238 = $237;
  }
  $23 = $238;
  $239 = $23;
  $240 = $59;
  $13 = $240;
  $241 = $13;
  $12 = $241;
  $242 = $12;
  $11 = $242;
  $243 = $11;
  $10 = $243;
  $244 = $10;
  $9 = $244;
  $245 = $9;
  $246 = HEAP8[$245>>0]|0;
  $247 = $246&255;
  $248 = $247 & 1;
  $249 = ($248|0)!=(0);
  if ($249) {
   $3 = $242;
   $250 = $3;
   $2 = $250;
   $251 = $2;
   $1 = $251;
   $252 = $1;
   $253 = (($252) + 8|0);
   $254 = HEAP32[$253>>2]|0;
   $261 = $254;
  } else {
   $8 = $242;
   $255 = $8;
   $7 = $255;
   $256 = $7;
   $6 = $256;
   $257 = $6;
   $258 = (($257) + 1|0);
   $5 = $258;
   $259 = $5;
   $4 = $259;
   $260 = $4;
   $261 = $260;
  }
  $0 = $261;
  $262 = $0;
  $20 = $__lhs_sz$i$i$i1;
  $21 = $__rhs_sz$i$i$i2;
  $263 = $20;
  $264 = $21;
  ;HEAP8[$19+0>>0]=HEAP8[$22+0>>0]|0;
  $17 = $263;
  $18 = $264;
  $265 = $18;
  $266 = $17;
  $14 = $19;
  $15 = $265;
  $16 = $266;
  $267 = $15;
  $268 = HEAP32[$267>>2]|0;
  $269 = $16;
  $270 = HEAP32[$269>>2]|0;
  $271 = ($268>>>0)<($270>>>0);
  if ($271) {
   $272 = $18;
   $275 = $272;
  } else {
   $273 = $17;
   $275 = $273;
  }
  $274 = HEAP32[$275>>2]|0;
  __THREW__ = 0;
  $276 = (invoke_iiii(457,($239|0),($262|0),($274|0))|0);
  $277 = __THREW__; __THREW__ = 0;
  $278 = $277&1;
  if ($278) {
   label = 26;
   break;
  }
  $__result$i$i$i3 = $276;
  $279 = $__result$i$i$i3;
  $280 = ($279|0)!=(0);
  do {
   if ($280) {
    $281 = $__result$i$i$i3;
    $57 = $281;
   } else {
    $282 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $283 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $284 = ($282>>>0)<($283>>>0);
    if ($284) {
     $57 = -1;
     break;
    }
    $285 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $286 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $287 = ($285>>>0)>($286>>>0);
    if ($287) {
     $57 = 1;
     break;
    } else {
     $57 = 0;
     break;
    }
   }
  } while(0);
  $290 = $57;
  $291 = ($290|0)<(0);
  if ($291) {
   $292 = $__nd;
   $293 = HEAP32[$292>>2]|0;
   $294 = ($293|0)!=(0|0);
   if (!($294)) {
    label = 30;
    break;
   }
   $295 = $__nd;
   $296 = HEAP32[$295>>2]|0;
   $__nd = $296;
  } else {
   $67 = $153;
   $302 = $67;
   $303 = (($302) + 8|0);
   $66 = $303;
   $304 = $66;
   $65 = $304;
   $305 = $65;
   $68 = $305;
   $306 = $68;
   $307 = $__nd;
   $308 = (($307) + 16|0);
   $309 = $152;
   $135 = $306;
   $136 = $308;
   $137 = $309;
   $310 = $136;
   $311 = $137;
   $133 = $310;
   $134 = $311;
   $312 = $133;
   $313 = $134;
   $131 = $312;
   $132 = $313;
   $314 = $131;
   $129 = $314;
   $315 = $129;
   $128 = $315;
   $316 = $128;
   $127 = $316;
   $317 = $127;
   $126 = $317;
   $318 = $126;
   $319 = HEAP8[$318>>0]|0;
   $320 = $319&255;
   $321 = $320 & 1;
   $322 = ($321|0)!=(0);
   if ($322) {
    $122 = $315;
    $323 = $122;
    $121 = $323;
    $324 = $121;
    $120 = $324;
    $325 = $120;
    $326 = (($325) + 4|0);
    $327 = HEAP32[$326>>2]|0;
    $334 = $327;
   } else {
    $125 = $315;
    $328 = $125;
    $124 = $328;
    $329 = $124;
    $123 = $329;
    $330 = $123;
    $331 = HEAP8[$330>>0]|0;
    $332 = $331&255;
    $333 = $332 >> 1;
    $334 = $333;
   }
   HEAP32[$__lhs_sz$i$i$i>>2] = $334;
   $335 = $132;
   $119 = $335;
   $336 = $119;
   $118 = $336;
   $337 = $118;
   $117 = $337;
   $338 = $117;
   $116 = $338;
   $339 = $116;
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = $341 & 1;
   $343 = ($342|0)!=(0);
   if ($343) {
    $112 = $336;
    $344 = $112;
    $111 = $344;
    $345 = $111;
    $110 = $345;
    $346 = $110;
    $347 = (($346) + 4|0);
    $348 = HEAP32[$347>>2]|0;
    $355 = $348;
   } else {
    $115 = $336;
    $349 = $115;
    $114 = $349;
    $350 = $114;
    $113 = $350;
    $351 = $113;
    $352 = HEAP8[$351>>0]|0;
    $353 = $352&255;
    $354 = $353 >> 1;
    $355 = $354;
   }
   HEAP32[$__rhs_sz$i$i$i>>2] = $355;
   $109 = $314;
   $356 = $109;
   $108 = $356;
   $357 = $108;
   $107 = $357;
   $358 = $107;
   $106 = $358;
   $359 = $106;
   $105 = $359;
   $360 = $105;
   $361 = HEAP8[$360>>0]|0;
   $362 = $361&255;
   $363 = $362 & 1;
   $364 = ($363|0)!=(0);
   if ($364) {
    $99 = $357;
    $365 = $99;
    $98 = $365;
    $366 = $98;
    $97 = $366;
    $367 = $97;
    $368 = (($367) + 8|0);
    $369 = HEAP32[$368>>2]|0;
    $376 = $369;
   } else {
    $104 = $357;
    $370 = $104;
    $103 = $370;
    $371 = $103;
    $102 = $371;
    $372 = $102;
    $373 = (($372) + 1|0);
    $101 = $373;
    $374 = $101;
    $100 = $374;
    $375 = $100;
    $376 = $375;
   }
   $96 = $376;
   $377 = $96;
   $378 = $132;
   $86 = $378;
   $379 = $86;
   $85 = $379;
   $380 = $85;
   $84 = $380;
   $381 = $84;
   $83 = $381;
   $382 = $83;
   $82 = $382;
   $383 = $82;
   $384 = HEAP8[$383>>0]|0;
   $385 = $384&255;
   $386 = $385 & 1;
   $387 = ($386|0)!=(0);
   if ($387) {
    $76 = $380;
    $388 = $76;
    $75 = $388;
    $389 = $75;
    $74 = $389;
    $390 = $74;
    $391 = (($390) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $399 = $392;
   } else {
    $81 = $380;
    $393 = $81;
    $80 = $393;
    $394 = $80;
    $79 = $394;
    $395 = $79;
    $396 = (($395) + 1|0);
    $78 = $396;
    $397 = $78;
    $77 = $397;
    $398 = $77;
    $399 = $398;
   }
   $73 = $399;
   $400 = $73;
   $93 = $__lhs_sz$i$i$i;
   $94 = $__rhs_sz$i$i$i;
   $401 = $93;
   $402 = $94;
   ;HEAP8[$92+0>>0]=HEAP8[$95+0>>0]|0;
   $90 = $401;
   $91 = $402;
   $403 = $91;
   $404 = $90;
   $87 = $92;
   $88 = $403;
   $89 = $404;
   $405 = $88;
   $406 = HEAP32[$405>>2]|0;
   $407 = $89;
   $408 = HEAP32[$407>>2]|0;
   $409 = ($406>>>0)<($408>>>0);
   if ($409) {
    $410 = $91;
    $413 = $410;
   } else {
    $411 = $90;
    $413 = $411;
   }
   $412 = HEAP32[$413>>2]|0;
   __THREW__ = 0;
   $414 = (invoke_iiii(457,($377|0),($400|0),($412|0))|0);
   $415 = __THREW__; __THREW__ = 0;
   $416 = $415&1;
   if ($416) {
    label = 55;
    break;
   }
   $__result$i$i$i = $414;
   $417 = $__result$i$i$i;
   $418 = ($417|0)!=(0);
   do {
    if ($418) {
     $419 = $__result$i$i$i;
     $130 = $419;
    } else {
     $420 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $421 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $422 = ($420>>>0)<($421>>>0);
     if ($422) {
      $130 = -1;
      break;
     }
     $423 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $424 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $425 = ($423>>>0)>($424>>>0);
     if ($425) {
      $130 = 1;
      break;
     } else {
      $130 = 0;
      break;
     }
    }
   } while(0);
   $428 = $130;
   $429 = ($428|0)<(0);
   if (!($429)) {
    label = 61;
    break;
   }
   $430 = $__nd;
   $431 = (($430) + 4|0);
   $432 = HEAP32[$431>>2]|0;
   $433 = ($432|0)!=(0|0);
   if (!($433)) {
    label = 59;
    break;
   }
   $434 = $__nd;
   $435 = (($434) + 4|0);
   $436 = HEAP32[$435>>2]|0;
   $__nd = $436;
  }
 }
 if ((label|0) == 26) {
  $288 = ___cxa_find_matching_catch(0|0)|0;
  $289 = tempRet0;
  ___clang_call_terminate($288);
  // unreachable;
 }
 else if ((label|0) == 30) {
  $297 = $__nd;
  $298 = $151;
  HEAP32[$298>>2] = $297;
  $299 = $151;
  $300 = HEAP32[$299>>2]|0;
  $301 = HEAP32[$300>>2]|0;
  $149 = $301;
  $457 = $149;
  STACKTOP = sp;return ($457|0);
 }
 else if ((label|0) == 55) {
  $426 = ___cxa_find_matching_catch(0|0)|0;
  $427 = tempRet0;
  ___clang_call_terminate($426);
  // unreachable;
 }
 else if ((label|0) == 59) {
  $437 = $__nd;
  $438 = $151;
  HEAP32[$438>>2] = $437;
  $439 = $151;
  $440 = HEAP32[$439>>2]|0;
  $441 = (($440) + 4|0);
  $442 = HEAP32[$441>>2]|0;
  $149 = $442;
  $457 = $149;
  STACKTOP = sp;return ($457|0);
 }
 else if ((label|0) == 61) {
  $443 = $__nd;
  $444 = $151;
  HEAP32[$444>>2] = $443;
  $445 = $151;
  $446 = HEAP32[$445>>2]|0;
  $149 = $446;
  $457 = $149;
  STACKTOP = sp;return ($457|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<4;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<4)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 85|0;
 $__annotator = sp + 84|0;
 $18 = $this;
 $19 = $__first;
 $20 = $__last;
 $21 = $18;
 $16 = $21;
 $22 = $16;
 $23 = (($22) + 8|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $__a = $25;
 while(1) {
  $26 = $19;
  $27 = $20;
  $28 = ($26|0)!=($27|0);
  if (!($28)) {
   break;
  }
  __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$21,1);
  $29 = $__a;
  $30 = (($21) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $17 = $31;
  $32 = $17;
  $33 = $19;
  $10 = $29;
  $11 = $32;
  $12 = $33;
  $34 = $10;
  $35 = $11;
  $36 = $12;
  $9 = $36;
  $37 = $9;
  ;HEAP8[$8+0>>0]=HEAP8[$13+0>>0]|0;
  $5 = $34;
  $6 = $35;
  $7 = $37;
  $38 = $5;
  $39 = $6;
  $40 = $7;
  $4 = $40;
  $41 = $4;
  $1 = $38;
  $2 = $39;
  $3 = $41;
  $42 = $2;
  $43 = ($42|0)==(0|0);
  if (!($43)) {
   $44 = $3;
   $0 = $44;
   $45 = $0;
   __ZN8picojson5valueC2ERKS0_($42,$45);
  }
  __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $46 = (($21) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 16|0);
  HEAP32[$46>>2] = $48;
  $49 = $19;
  $50 = (($49) + 16|0);
  $19 = $50;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN8picojson5valueENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $14 = $30;
 $33 = $14;
 $34 = HEAP32[$33>>2]|0;
 $12 = $33;
 $13 = $34;
 $35 = $12;
 while(1) {
  $36 = $13;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $10 = $35;
  $40 = $10;
  $41 = (($40) + 8|0);
  $9 = $41;
  $42 = $9;
  $8 = $42;
  $43 = $8;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -16|0);
  HEAP32[$44>>2] = $46;
  $11 = $46;
  $47 = $11;
  $5 = $43;
  $6 = $47;
  $48 = $5;
  $49 = $6;
  ;HEAP8[$4+0>>0]=HEAP8[$7+0>>0]|0;
  $2 = $48;
  $3 = $49;
  $50 = $2;
  $51 = $3;
  $0 = $50;
  $1 = $51;
  $52 = $1;
  __ZN8picojson5valueD2Ev($52);
 }
 $17 = $30;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$30>>2]|0;
 $21 = $30;
 $58 = $21;
 $20 = $58;
 $59 = $20;
 $60 = (($59) + 8|0);
 $19 = $60;
 $61 = $19;
 $18 = $61;
 $62 = $18;
 $63 = HEAP32[$62>>2]|0;
 $64 = HEAP32[$58>>2]|0;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = (($67|0) / 16)&-1;
 $26 = $56;
 $27 = $57;
 $28 = $68;
 $69 = $26;
 $70 = $27;
 $71 = $28;
 $23 = $69;
 $24 = $70;
 $25 = $71;
 $72 = $24;
 $22 = $72;
 $73 = $22;
 __ZdlPv($73);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 48|0;
 $11 = sp + 8|0;
 $14 = sp + 36|0;
 $15 = sp + 93|0;
 $16 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$16+0>>0]=HEAP8[$23+0>>0]|0;
 $13 = $29;
 HEAP32[$14>>2] = 0;
 $30 = $13;
 $12 = $14;
 $31 = $12;
 $32 = HEAP32[$31>>2]|0;
 $6 = $16;
 ;HEAP8[$11+0>>0]=HEAP8[$15+0>>0]|0;
 $9 = $30;
 HEAP32[$10>>2] = $32;
 $33 = $9;
 $8 = $11;
 $7 = $10;
 $34 = $7;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $4 = $24;
 $36 = $4;
 $37 = (($36) + 4|0);
 $3 = $37;
 $38 = $3;
 $2 = $38;
 $39 = $2;
 $1 = $39;
 $40 = $1;
 $0 = $40;
 $41 = $0;
 $5 = $24;
 $42 = $5;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNK8picojson5value10_serializeEi($agg$result,$this,$indent) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $indent = $indent|0;
 var $$byval_copy = 0, $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $15 = sp + 12|0;
 $12 = $this;
 $13 = $indent;
 $19 = $12;
 $$expand_i1_val = 0;
 $14 = $$expand_i1_val;
 $11 = $agg$result;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $8 = $22;
 $23 = $8;
 $7 = $23;
 $6 = $21;
 $24 = $6;
 $5 = $24;
 $25 = $5;
 $4 = $25;
 $26 = $4;
 $__a$i$i$i = $26;
 $__i$i$i$i = 0;
 while(1) {
  $27 = $__i$i$i$i;
  $28 = ($27>>>0)<(3);
  if (!($28)) {
   break;
  }
  $29 = $__i$i$i$i;
  $30 = $__a$i$i$i;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = 0;
  $32 = $__i$i$i$i;
  $33 = (($32) + 1)|0;
  $__i$i$i$i = $33;
 }
 $3 = $agg$result;
 $34 = $3;
 $1 = $15;
 $2 = $34;
 $35 = $1;
 $36 = $2;
 $0 = $36;
 $37 = $0;
 HEAP32[$35>>2] = $37;
 $38 = $13;
 __THREW__ = 0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$15+0>>2]|0;
 invoke_viii(530,($19|0),($$byval_copy|0),($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $16 = $42;
  $17 = $43;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
  $44 = $16;
  $45 = $17;
  ___resumeException($44|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 $14 = $$expand_i1_val2;
 $18 = 1;
 $$pre_trunc = $14;
 $41 = $$pre_trunc&1;
 if ($41) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNK8picojson5value10_serializeINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($this,$oi,$indent) {
 $this = $this|0;
 $oi = $oi|0;
 $indent = $indent|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy8 = sp + 848|0;
 $$byval_copy7 = sp + 844|0;
 $$byval_copy6 = sp + 840|0;
 $$byval_copy5 = sp + 836|0;
 $$byval_copy4 = sp + 832|0;
 $$byval_copy3 = sp + 828|0;
 $$byval_copy2 = sp + 824|0;
 $$byval_copy1 = sp + 820|0;
 $$byval_copy = sp + 816|0;
 $13 = sp + 64|0;
 $19 = sp + 740|0;
 $21 = sp + 56|0;
 $23 = sp + 728|0;
 $24 = sp + 48|0;
 $26 = sp + 40|0;
 $36 = sp + 684|0;
 $38 = sp + 32|0;
 $40 = sp + 672|0;
 $41 = sp + 24|0;
 $49 = sp + 16|0;
 $55 = sp + 620|0;
 $57 = sp + 8|0;
 $59 = sp + 608|0;
 $60 = sp;
 $163 = sp + 196|0;
 $164 = sp + 192|0;
 $165 = sp + 860|0;
 $i = sp + 188|0;
 $166 = sp + 184|0;
 $167 = sp + 180|0;
 $168 = sp + 176|0;
 $169 = sp + 172|0;
 $170 = sp + 859|0;
 $171 = sp + 168|0;
 $172 = sp + 164|0;
 $173 = sp + 160|0;
 $174 = sp + 156|0;
 $175 = sp + 858|0;
 $176 = sp + 152|0;
 $177 = sp + 857|0;
 $i1 = sp + 148|0;
 $178 = sp + 144|0;
 $179 = sp + 140|0;
 $180 = sp + 136|0;
 $181 = sp + 132|0;
 $182 = sp + 128|0;
 $183 = sp + 124|0;
 $184 = sp + 856|0;
 $185 = sp + 120|0;
 $186 = sp + 116|0;
 $187 = sp + 112|0;
 $188 = sp + 855|0;
 $189 = sp + 108|0;
 $190 = sp + 854|0;
 $191 = sp + 104|0;
 $192 = sp + 100|0;
 $193 = sp + 96|0;
 $194 = sp + 853|0;
 $195 = sp + 84|0;
 $196 = sp + 80|0;
 $199 = sp + 68|0;
 $200 = sp + 852|0;
 $161 = $this;
 $162 = $indent;
 $201 = $161;
 $202 = HEAP32[$201>>2]|0;
 do {
  if ((($202|0) == 4)) {
   $159 = $oi;
   $160 = 0;
   $205 = $159;
   ;HEAP32[$164+0>>2]=HEAP32[$205+0>>2]|0;
   $158 = $164;
   $206 = $158;
   HEAP8[$165>>0] = 91;
   $156 = $206;
   $157 = $165;
   $207 = $156;
   $208 = HEAP32[$207>>2]|0;
   $209 = $157;
   $155 = $209;
   $210 = $155;
   $211 = HEAP8[$210>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($208,$211);
   $212 = $162;
   $213 = ($212|0)!=(-1);
   if ($213) {
    $214 = $162;
    $215 = (($214) + 1)|0;
    $162 = $215;
   }
   $216 = (($201) + 8|0);
   $217 = HEAP32[$216>>2]|0;
   $154 = $217;
   $218 = $154;
   $219 = HEAP32[$218>>2]|0;
   $152 = $218;
   $153 = $219;
   $220 = $153;
   $150 = $166;
   $151 = $220;
   $221 = $150;
   $222 = $151;
   HEAP32[$221>>2] = $222;
   $145 = $i;
   $146 = $166;
   $147 = 0;
   $223 = $145;
   $224 = $146;
   $144 = $224;
   $225 = $144;
   $226 = HEAP32[$225>>2]|0;
   HEAP32[$223>>2] = $226;
   while(1) {
    $227 = (($201) + 8|0);
    $228 = HEAP32[$227>>2]|0;
    $143 = $228;
    $229 = $143;
    $230 = (($229) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $141 = $229;
    $142 = $231;
    $232 = $142;
    $139 = $167;
    $140 = $232;
    $233 = $139;
    $234 = $140;
    HEAP32[$233>>2] = $234;
    $134 = $i;
    $135 = $167;
    $235 = $134;
    $236 = $135;
    $132 = $235;
    $133 = $236;
    $237 = $132;
    $131 = $237;
    $238 = $131;
    $239 = HEAP32[$238>>2]|0;
    $240 = $133;
    $130 = $240;
    $241 = $130;
    $242 = HEAP32[$241>>2]|0;
    $243 = ($239|0)==($242|0);
    $244 = $243 ^ 1;
    if (!($244)) {
     break;
    }
    $245 = (($201) + 8|0);
    $246 = HEAP32[$245>>2]|0;
    $126 = $246;
    $247 = $126;
    $248 = HEAP32[$247>>2]|0;
    $124 = $247;
    $125 = $248;
    $249 = $125;
    $122 = $168;
    $123 = $249;
    $250 = $122;
    $251 = $123;
    HEAP32[$250>>2] = $251;
    $114 = $i;
    $115 = $168;
    $252 = $114;
    $253 = $115;
    $112 = $252;
    $113 = $253;
    $254 = $112;
    $111 = $254;
    $255 = $111;
    $256 = HEAP32[$255>>2]|0;
    $257 = $113;
    $110 = $257;
    $258 = $110;
    $259 = HEAP32[$258>>2]|0;
    $260 = ($256|0)==($259|0);
    $261 = $260 ^ 1;
    if ($261) {
     $98 = $oi;
     $99 = 0;
     $262 = $98;
     ;HEAP32[$169+0>>2]=HEAP32[$262+0>>2]|0;
     $91 = $169;
     $263 = $91;
     HEAP8[$170>>0] = 44;
     $86 = $263;
     $87 = $170;
     $264 = $86;
     $265 = HEAP32[$264>>2]|0;
     $266 = $87;
     $85 = $266;
     $267 = $85;
     $268 = HEAP8[$267>>0]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($265,$268);
    }
    $269 = $162;
    $270 = ($269|0)!=(-1);
    if ($270) {
     ;HEAP32[$171+0>>2]=HEAP32[$oi+0>>2]|0;
     $271 = $162;
     ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$171+0>>2]|0;
     __ZN8picojson5value7_indentINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($$byval_copy1,$271);
    }
    $84 = $i;
    $272 = $84;
    $273 = HEAP32[$272>>2]|0;
    ;HEAP32[$172+0>>2]=HEAP32[$oi+0>>2]|0;
    $274 = $162;
    ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$172+0>>2]|0;
    __ZNK8picojson5value10_serializeINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($273,$$byval_copy2,$274);
    $74 = $i;
    $275 = $74;
    $276 = HEAP32[$275>>2]|0;
    $277 = (($276) + 16|0);
    HEAP32[$275>>2] = $277;
   }
   $278 = $162;
   $279 = ($278|0)!=(-1);
   if ($279) {
    $280 = $162;
    $281 = (($280) + -1)|0;
    $162 = $281;
    $282 = (($201) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $70 = $283;
    $284 = $70;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($284) + 4|0);
    $287 = HEAP32[$286>>2]|0;
    $288 = ($285|0)==($287|0);
    if (!($288)) {
     ;HEAP32[$173+0>>2]=HEAP32[$oi+0>>2]|0;
     $289 = $162;
     ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$173+0>>2]|0;
     __ZN8picojson5value7_indentINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($$byval_copy3,$289);
    }
   }
   $7 = $oi;
   $8 = 0;
   $290 = $7;
   ;HEAP32[$174+0>>2]=HEAP32[$290+0>>2]|0;
   $0 = $174;
   $291 = $0;
   HEAP8[$175>>0] = 93;
   $2 = $291;
   $3 = $175;
   $292 = $2;
   $293 = HEAP32[$292>>2]|0;
   $294 = $3;
   $1 = $294;
   $295 = $1;
   $296 = HEAP8[$295>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($293,$296);
  } else if ((($202|0) == 5)) {
   $4 = $oi;
   $5 = 0;
   $297 = $4;
   ;HEAP32[$176+0>>2]=HEAP32[$297+0>>2]|0;
   $6 = $176;
   $298 = $6;
   HEAP8[$177>>0] = 123;
   $10 = $298;
   $11 = $177;
   $299 = $10;
   $300 = HEAP32[$299>>2]|0;
   $301 = $11;
   $9 = $301;
   $302 = $9;
   $303 = HEAP8[$302>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($300,$303);
   $304 = $162;
   $305 = ($304|0)!=(-1);
   if ($305) {
    $306 = $162;
    $307 = (($306) + 1)|0;
    $162 = $307;
   }
   $308 = (($201) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $18 = $309;
   $310 = $18;
   $17 = $310;
   $311 = $17;
   $16 = $311;
   $312 = $16;
   $313 = HEAP32[$312>>2]|0;
   $14 = $19;
   $15 = $313;
   $314 = $14;
   $315 = $15;
   HEAP32[$314>>2] = $315;
   ;HEAP8[$13+0>>0]=HEAP8[$19+0>>0]|0;HEAP8[$13+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$19+3>>0]|0;
   $12 = $178;
   $316 = $12;
   ;HEAP32[$316+0>>2]=HEAP32[$13+0>>2]|0;
   ;HEAP8[$24+0>>0]=HEAP8[$178+0>>0]|0;HEAP8[$24+1>>0]=HEAP8[$178+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$178+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$178+3>>0]|0;
   $22 = $i1;
   $317 = $22;
   ;HEAP32[$23+0>>2]=HEAP32[$24+0>>2]|0;
   ;HEAP8[$21+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$23+3>>0]|0;
   $20 = $317;
   $318 = $20;
   $319 = HEAP32[$21>>2]|0;
   HEAP32[$318>>2] = $319;
   while(1) {
    $320 = (($201) + 8|0);
    $321 = HEAP32[$320>>2]|0;
    $35 = $321;
    $322 = $35;
    $34 = $322;
    $323 = $34;
    $33 = $323;
    $324 = $33;
    $325 = (($324) + 4|0);
    $32 = $325;
    $326 = $32;
    $31 = $326;
    $327 = $31;
    $30 = $327;
    $328 = $30;
    $29 = $328;
    $329 = $29;
    $27 = $36;
    $28 = $329;
    $330 = $27;
    $331 = $28;
    HEAP32[$330>>2] = $331;
    ;HEAP8[$26+0>>0]=HEAP8[$36+0>>0]|0;HEAP8[$26+1>>0]=HEAP8[$36+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$36+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$36+3>>0]|0;
    $25 = $180;
    $332 = $25;
    ;HEAP32[$332+0>>2]=HEAP32[$26+0>>2]|0;
    ;HEAP8[$41+0>>0]=HEAP8[$180+0>>0]|0;HEAP8[$41+1>>0]=HEAP8[$180+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$180+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$180+3>>0]|0;
    $39 = $179;
    $333 = $39;
    ;HEAP32[$40+0>>2]=HEAP32[$41+0>>2]|0;
    ;HEAP8[$38+0>>0]=HEAP8[$40+0>>0]|0;HEAP8[$38+1>>0]=HEAP8[$40+1>>0]|0;HEAP8[$38+2>>0]=HEAP8[$40+2>>0]|0;HEAP8[$38+3>>0]=HEAP8[$40+3>>0]|0;
    $37 = $333;
    $334 = $37;
    $335 = HEAP32[$38>>2]|0;
    HEAP32[$334>>2] = $335;
    $46 = $i1;
    $47 = $179;
    $336 = $46;
    $337 = $47;
    $44 = $336;
    $45 = $337;
    $338 = $44;
    $339 = $45;
    $42 = $338;
    $43 = $339;
    $340 = $42;
    $341 = HEAP32[$340>>2]|0;
    $342 = $43;
    $343 = HEAP32[$342>>2]|0;
    $344 = ($341|0)==($343|0);
    $345 = $344 ^ 1;
    if (!($345)) {
     break;
    }
    $346 = (($201) + 8|0);
    $347 = HEAP32[$346>>2]|0;
    $54 = $347;
    $348 = $54;
    $53 = $348;
    $349 = $53;
    $52 = $349;
    $350 = $52;
    $351 = HEAP32[$350>>2]|0;
    $50 = $55;
    $51 = $351;
    $352 = $50;
    $353 = $51;
    HEAP32[$352>>2] = $353;
    ;HEAP8[$49+0>>0]=HEAP8[$55+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$55+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$55+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$55+3>>0]|0;
    $48 = $182;
    $354 = $48;
    ;HEAP32[$354+0>>2]=HEAP32[$49+0>>2]|0;
    ;HEAP8[$60+0>>0]=HEAP8[$182+0>>0]|0;HEAP8[$60+1>>0]=HEAP8[$182+1>>0]|0;HEAP8[$60+2>>0]=HEAP8[$182+2>>0]|0;HEAP8[$60+3>>0]=HEAP8[$182+3>>0]|0;
    $58 = $181;
    $355 = $58;
    ;HEAP32[$59+0>>2]=HEAP32[$60+0>>2]|0;
    ;HEAP8[$57+0>>0]=HEAP8[$59+0>>0]|0;HEAP8[$57+1>>0]=HEAP8[$59+1>>0]|0;HEAP8[$57+2>>0]=HEAP8[$59+2>>0]|0;HEAP8[$57+3>>0]=HEAP8[$59+3>>0]|0;
    $56 = $355;
    $356 = $56;
    $357 = HEAP32[$57>>2]|0;
    HEAP32[$356>>2] = $357;
    $65 = $i1;
    $66 = $181;
    $358 = $65;
    $359 = $66;
    $63 = $358;
    $64 = $359;
    $360 = $63;
    $361 = $64;
    $61 = $360;
    $62 = $361;
    $362 = $61;
    $363 = HEAP32[$362>>2]|0;
    $364 = $62;
    $365 = HEAP32[$364>>2]|0;
    $366 = ($363|0)==($365|0);
    $367 = $366 ^ 1;
    if ($367) {
     $67 = $oi;
     $68 = 0;
     $368 = $67;
     ;HEAP32[$183+0>>2]=HEAP32[$368+0>>2]|0;
     $69 = $183;
     $369 = $69;
     HEAP8[$184>>0] = 44;
     $72 = $369;
     $73 = $184;
     $370 = $72;
     $371 = HEAP32[$370>>2]|0;
     $372 = $73;
     $71 = $372;
     $373 = $71;
     $374 = HEAP8[$373>>0]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($371,$374);
    }
    $375 = $162;
    $376 = ($375|0)!=(-1);
    if ($376) {
     ;HEAP32[$185+0>>2]=HEAP32[$oi+0>>2]|0;
     $377 = $162;
     ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$185+0>>2]|0;
     __ZN8picojson5value7_indentINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($$byval_copy4,$377);
    }
    $83 = $i1;
    $378 = $83;
    $82 = $378;
    $379 = $82;
    $380 = HEAP32[$379>>2]|0;
    $381 = (($380) + 16|0);
    $81 = $381;
    $382 = $81;
    $80 = $382;
    $383 = $80;
    $79 = $383;
    $384 = $79;
    $78 = $384;
    $385 = $78;
    ;HEAP32[$186+0>>2]=HEAP32[$oi+0>>2]|0;
    ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$186+0>>2]|0;
    __ZN8picojson13serialize_strINSt3__120back_insert_iteratorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEvRKS8_T_($385,$$byval_copy5);
    $88 = $oi;
    $89 = 0;
    $386 = $88;
    ;HEAP32[$187+0>>2]=HEAP32[$386+0>>2]|0;
    $90 = $187;
    $387 = $90;
    HEAP8[$188>>0] = 58;
    $93 = $387;
    $94 = $188;
    $388 = $93;
    $389 = HEAP32[$388>>2]|0;
    $390 = $94;
    $92 = $390;
    $391 = $92;
    $392 = HEAP8[$391>>0]|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($389,$392);
    $393 = $162;
    $394 = ($393|0)!=(-1);
    if ($394) {
     $95 = $oi;
     $96 = 0;
     $395 = $95;
     ;HEAP32[$189+0>>2]=HEAP32[$395+0>>2]|0;
     $97 = $189;
     $396 = $97;
     HEAP8[$190>>0] = 32;
     $101 = $396;
     $102 = $190;
     $397 = $101;
     $398 = HEAP32[$397>>2]|0;
     $399 = $102;
     $100 = $399;
     $400 = $100;
     $401 = HEAP8[$400>>0]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($398,$401);
    }
    $108 = $i1;
    $402 = $108;
    $107 = $402;
    $403 = $107;
    $404 = HEAP32[$403>>2]|0;
    $405 = (($404) + 16|0);
    $106 = $405;
    $406 = $106;
    $105 = $406;
    $407 = $105;
    $104 = $407;
    $408 = $104;
    $103 = $408;
    $409 = $103;
    $410 = (($409) + 16|0);
    ;HEAP32[$191+0>>2]=HEAP32[$oi+0>>2]|0;
    $411 = $162;
    ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$191+0>>2]|0;
    __ZNK8picojson5value10_serializeINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($410,$$byval_copy6,$411);
    $117 = $i1;
    $412 = $117;
    $116 = $412;
    $413 = $116;
    $414 = HEAP32[$413>>2]|0;
    $415 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($414)|0);
    HEAP32[$413>>2] = $415;
   }
   $416 = $162;
   $417 = ($416|0)!=(-1);
   if ($417) {
    $418 = $162;
    $419 = (($418) + -1)|0;
    $162 = $419;
    $420 = (($201) + 8|0);
    $421 = HEAP32[$420>>2]|0;
    $121 = $421;
    $422 = $121;
    $120 = $422;
    $423 = $120;
    $424 = (($423) + 8|0);
    $119 = $424;
    $425 = $119;
    $118 = $425;
    $426 = $118;
    $427 = HEAP32[$426>>2]|0;
    $428 = ($427|0)==(0);
    if (!($428)) {
     ;HEAP32[$192+0>>2]=HEAP32[$oi+0>>2]|0;
     $429 = $162;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$192+0>>2]|0;
     __ZN8picojson5value7_indentINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($$byval_copy7,$429);
    }
   }
   $127 = $oi;
   $128 = 0;
   $430 = $127;
   ;HEAP32[$193+0>>2]=HEAP32[$430+0>>2]|0;
   $129 = $193;
   $431 = $129;
   HEAP8[$194>>0] = 125;
   $137 = $431;
   $138 = $194;
   $432 = $137;
   $433 = HEAP32[$432>>2]|0;
   $434 = $138;
   $136 = $434;
   $435 = $136;
   $436 = HEAP8[$435>>0]|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($433,$436);
  } else if ((($202|0) == 3)) {
   $203 = (($201) + 8|0);
   $204 = HEAP32[$203>>2]|0;
   ;HEAP32[$163+0>>2]=HEAP32[$oi+0>>2]|0;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$163+0>>2]|0;
   __ZN8picojson13serialize_strINSt3__120back_insert_iteratorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEvRKS8_T_($204,$$byval_copy);
  } else {
   __ZNK8picojson5value6to_strEv($195,$201);
   ;HEAP32[$196+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$196+0>>2]|0;
   invoke_vii(531,($195|0),($$byval_copy8|0));
   $437 = __THREW__; __THREW__ = 0;
   $438 = $437&1;
   if (!($438)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($195);
    break;
   }
   $439 = ___cxa_find_matching_catch()|0;
   $440 = tempRet0;
   $197 = $439;
   $198 = $440;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($195);
   $450 = $197;
   $451 = $198;
   ___resumeException($450|0);
   // unreachable;
  }
 } while(0);
 $441 = $162;
 $442 = ($441|0)==(0);
 if (!($442)) {
  STACKTOP = sp;return;
 }
 $148 = $oi;
 $149 = 0;
 $443 = $148;
 ;HEAP32[$199+0>>2]=HEAP32[$443+0>>2]|0;
 $109 = $199;
 $444 = $109;
 HEAP8[$200>>0] = 10;
 $76 = $444;
 $77 = $200;
 $445 = $76;
 $446 = HEAP32[$445>>2]|0;
 $447 = $77;
 $75 = $447;
 $448 = $75;
 $449 = HEAP8[$448>>0]|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($446,$449);
 STACKTOP = sp;return;
}
function __ZN8picojson13serialize_strINSt3__120back_insert_iteratorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEvRKS8_T_($s,$oi) {
 $s = $s|0;
 $oi = $oi|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy7 = sp + 772|0;
 $$byval_copy6 = sp + 768|0;
 $$byval_copy5 = sp + 764|0;
 $$byval_copy4 = sp + 760|0;
 $$byval_copy3 = sp + 756|0;
 $$byval_copy2 = sp + 752|0;
 $$byval_copy1 = sp + 748|0;
 $$byval_copy = sp + 744|0;
 $vararg_buffer = sp + 24|0;
 $91 = sp + 16|0;
 $99 = sp + 8|0;
 $103 = sp + 336|0;
 $104 = sp + 332|0;
 $105 = sp;
 $141 = sp + 188|0;
 $142 = sp + 784|0;
 $i = sp + 184|0;
 $143 = sp + 180|0;
 $144 = sp + 168|0;
 $145 = sp + 164|0;
 $148 = sp + 144|0;
 $149 = sp + 140|0;
 $150 = sp + 128|0;
 $151 = sp + 124|0;
 $152 = sp + 112|0;
 $153 = sp + 108|0;
 $154 = sp + 96|0;
 $155 = sp + 92|0;
 $156 = sp + 80|0;
 $157 = sp + 76|0;
 $158 = sp + 64|0;
 $159 = sp + 60|0;
 $160 = sp + 48|0;
 $161 = sp + 44|0;
 $buf = sp + 777|0;
 $162 = sp + 40|0;
 $163 = sp + 36|0;
 $164 = sp + 32|0;
 $165 = sp + 28|0;
 $166 = sp + 776|0;
 $140 = $s;
 $138 = $oi;
 $139 = 0;
 $167 = $138;
 ;HEAP32[$141+0>>2]=HEAP32[$167+0>>2]|0;
 $134 = $141;
 $168 = $134;
 HEAP8[$142>>0] = 34;
 $126 = $168;
 $127 = $142;
 $169 = $126;
 $170 = HEAP32[$169>>2]|0;
 $171 = $127;
 $125 = $171;
 $172 = $125;
 $173 = HEAP8[$172>>0]|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($170,$173);
 $174 = $140;
 $124 = $174;
 $175 = $124;
 $123 = $175;
 $176 = $123;
 $122 = $176;
 $177 = $122;
 $121 = $177;
 $178 = $121;
 $120 = $178;
 $179 = $120;
 $180 = HEAP8[$179>>0]|0;
 $181 = $180&255;
 $182 = $181 & 1;
 $183 = ($182|0)!=(0);
 if ($183) {
  $114 = $176;
  $184 = $114;
  $113 = $184;
  $185 = $113;
  $112 = $185;
  $186 = $112;
  $187 = (($186) + 8|0);
  $188 = HEAP32[$187>>2]|0;
  $195 = $188;
 } else {
  $119 = $176;
  $189 = $119;
  $118 = $189;
  $190 = $118;
  $117 = $190;
  $191 = $117;
  $192 = (($191) + 1|0);
  $116 = $192;
  $193 = $116;
  $115 = $193;
  $194 = $115;
  $195 = $194;
 }
 $110 = $i;
 $111 = $195;
 $196 = $110;
 $197 = $111;
 HEAP32[$196>>2] = $197;
 L5: while(1) {
  $198 = $140;
  $90 = $198;
  $199 = $90;
  $89 = $199;
  $200 = $89;
  $88 = $200;
  $201 = $88;
  $87 = $201;
  $202 = $87;
  $86 = $202;
  $203 = $86;
  $204 = HEAP8[$203>>0]|0;
  $205 = $204&255;
  $206 = $205 & 1;
  $207 = ($206|0)!=(0);
  if ($207) {
   $80 = $200;
   $208 = $80;
   $79 = $208;
   $209 = $79;
   $78 = $209;
   $210 = $78;
   $211 = (($210) + 8|0);
   $212 = HEAP32[$211>>2]|0;
   $239 = $212;
  } else {
   $85 = $200;
   $213 = $85;
   $84 = $213;
   $214 = $84;
   $83 = $214;
   $215 = $83;
   $216 = (($215) + 1|0);
   $82 = $216;
   $217 = $82;
   $81 = $217;
   $218 = $81;
   $239 = $218;
  }
  $75 = $199;
  $219 = $75;
  $74 = $219;
  $220 = $74;
  $73 = $220;
  $221 = $73;
  $72 = $221;
  $222 = $72;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $68 = $219;
   $227 = $68;
   $67 = $227;
   $228 = $67;
   $66 = $228;
   $229 = $66;
   $230 = (($229) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $240 = $231;
  } else {
   $71 = $219;
   $232 = $71;
   $70 = $232;
   $233 = $70;
   $69 = $233;
   $234 = $69;
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = $236 >> 1;
   $240 = $237;
  }
  $238 = (($239) + ($240)|0);
  $76 = $143;
  $77 = $238;
  $241 = $76;
  $242 = $77;
  HEAP32[$241>>2] = $242;
  $61 = $i;
  $62 = $143;
  $243 = $61;
  $244 = $62;
  $59 = $243;
  $60 = $244;
  $245 = $59;
  $58 = $245;
  $246 = $58;
  $247 = HEAP32[$246>>2]|0;
  $248 = $60;
  $57 = $248;
  $249 = $57;
  $250 = HEAP32[$249>>2]|0;
  $251 = ($247|0)==($250|0);
  $252 = $251 ^ 1;
  if (!($252)) {
   label = 47;
   break;
  }
  $49 = $i;
  $253 = $49;
  $254 = HEAP32[$253>>2]|0;
  $255 = HEAP8[$254>>0]|0;
  $256 = $255 << 24 >> 24;
  switch ($256|0) {
  case 47:  {
   $33 = $150;
   $34 = 1592;
   $281 = $33;
   $282 = $34;
   $31 = $281;
   $32 = $282;
   $283 = $31;
   $30 = $283;
   $284 = $30;
   $29 = $284;
   $285 = $29;
   $28 = $285;
   $286 = $32;
   $287 = $32;
   $288 = (__ZNSt3__111char_traitsIcE6lengthEPKc($287)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($283,$286,$288);
   ;HEAP32[$151+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$151+0>>2]|0;
   invoke_vii(531,($150|0),($$byval_copy2|0));
   $289 = __THREW__; __THREW__ = 0;
   $290 = $289&1;
   if ($290) {
    label = 21;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($150);
   break;
  }
  case 9:  {
   $55 = $160;
   $56 = 1632;
   $341 = $55;
   $342 = $56;
   $53 = $341;
   $54 = $342;
   $343 = $53;
   $52 = $343;
   $344 = $52;
   $51 = $344;
   $345 = $51;
   $50 = $345;
   $346 = $54;
   $347 = $54;
   $348 = (__ZNSt3__111char_traitsIcE6lengthEPKc($347)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($343,$346,$348);
   ;HEAP32[$161+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$161+0>>2]|0;
   invoke_vii(531,($160|0),($$byval_copy7|0));
   $349 = __THREW__; __THREW__ = 0;
   $350 = $349&1;
   if ($350) {
    label = 36;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($160);
   break;
  }
  case 8:  {
   $26 = $152;
   $27 = 1600;
   $293 = $26;
   $294 = $27;
   $24 = $293;
   $25 = $294;
   $295 = $24;
   $23 = $295;
   $296 = $23;
   $22 = $296;
   $297 = $22;
   $21 = $297;
   $298 = $25;
   $299 = $25;
   $300 = (__ZNSt3__111char_traitsIcE6lengthEPKc($299)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($295,$298,$300);
   ;HEAP32[$153+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$153+0>>2]|0;
   invoke_vii(531,($152|0),($$byval_copy3|0));
   $301 = __THREW__; __THREW__ = 0;
   $302 = $301&1;
   if ($302) {
    label = 24;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($152);
   break;
  }
  case 92:  {
   $40 = $148;
   $41 = 1584;
   $269 = $40;
   $270 = $41;
   $38 = $269;
   $39 = $270;
   $271 = $38;
   $37 = $271;
   $272 = $37;
   $36 = $272;
   $273 = $36;
   $35 = $273;
   $274 = $39;
   $275 = $39;
   $276 = (__ZNSt3__111char_traitsIcE6lengthEPKc($275)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($271,$274,$276);
   ;HEAP32[$149+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$149+0>>2]|0;
   invoke_vii(531,($148|0),($$byval_copy1|0));
   $277 = __THREW__; __THREW__ = 0;
   $278 = $277&1;
   if ($278) {
    label = 18;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($148);
   break;
  }
  case 12:  {
   $19 = $154;
   $20 = 1608;
   $305 = $19;
   $306 = $20;
   $17 = $305;
   $18 = $306;
   $307 = $17;
   $16 = $307;
   $308 = $16;
   $15 = $308;
   $309 = $15;
   $14 = $309;
   $310 = $18;
   $311 = $18;
   $312 = (__ZNSt3__111char_traitsIcE6lengthEPKc($311)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($307,$310,$312);
   ;HEAP32[$155+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$155+0>>2]|0;
   invoke_vii(531,($154|0),($$byval_copy4|0));
   $313 = __THREW__; __THREW__ = 0;
   $314 = $313&1;
   if ($314) {
    label = 27;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($154);
   break;
  }
  case 10:  {
   $12 = $156;
   $13 = 1616;
   $317 = $12;
   $318 = $13;
   $10 = $317;
   $11 = $318;
   $319 = $10;
   $9 = $319;
   $320 = $9;
   $8 = $320;
   $321 = $8;
   $7 = $321;
   $322 = $11;
   $323 = $11;
   $324 = (__ZNSt3__111char_traitsIcE6lengthEPKc($323)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($319,$322,$324);
   ;HEAP32[$157+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$157+0>>2]|0;
   invoke_vii(531,($156|0),($$byval_copy5|0));
   $325 = __THREW__; __THREW__ = 0;
   $326 = $325&1;
   if ($326) {
    label = 30;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($156);
   break;
  }
  case 13:  {
   $5 = $158;
   $6 = 1624;
   $329 = $5;
   $330 = $6;
   $3 = $329;
   $4 = $330;
   $331 = $3;
   $2 = $331;
   $332 = $2;
   $1 = $332;
   $333 = $1;
   $0 = $333;
   $334 = $4;
   $335 = $4;
   $336 = (__ZNSt3__111char_traitsIcE6lengthEPKc($335)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($331,$334,$336);
   ;HEAP32[$159+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$159+0>>2]|0;
   invoke_vii(531,($158|0),($$byval_copy6|0));
   $337 = __THREW__; __THREW__ = 0;
   $338 = $337&1;
   if ($338) {
    label = 33;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($158);
   break;
  }
  case 34:  {
   $47 = $144;
   $48 = 1576;
   $257 = $47;
   $258 = $48;
   $45 = $257;
   $46 = $258;
   $259 = $45;
   $44 = $259;
   $260 = $44;
   $43 = $260;
   $261 = $43;
   $42 = $261;
   $262 = $46;
   $263 = $46;
   $264 = (__ZNSt3__111char_traitsIcE6lengthEPKc($263)|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($259,$262,$264);
   ;HEAP32[$145+0>>2]=HEAP32[$oi+0>>2]|0;
   __THREW__ = 0;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$145+0>>2]|0;
   invoke_vii(531,($144|0),($$byval_copy|0));
   $265 = __THREW__; __THREW__ = 0;
   $266 = $265&1;
   if ($266) {
    label = 15;
    break L5;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($144);
   break;
  }
  default: {
   $63 = $i;
   $353 = $63;
   $354 = HEAP32[$353>>2]|0;
   $355 = HEAP8[$354>>0]|0;
   $356 = $355&255;
   $357 = ($356|0)<(32);
   if ($357) {
    label = 39;
   } else {
    $64 = $i;
    $358 = $64;
    $359 = HEAP32[$358>>2]|0;
    $360 = HEAP8[$359>>0]|0;
    $361 = $360 << 24 >> 24;
    $362 = ($361|0)==(127);
    if ($362) {
     label = 39;
    } else {
     $106 = $oi;
     $107 = 0;
     $384 = $106;
     ;HEAP32[$164+0>>2]=HEAP32[$384+0>>2]|0;
     $108 = $164;
     $385 = $108;
     $109 = $i;
     $386 = $109;
     $387 = HEAP32[$386>>2]|0;
     $128 = $385;
     $129 = $387;
     $388 = $128;
     $389 = HEAP32[$388>>2]|0;
     $390 = $129;
     $391 = HEAP8[$390>>0]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($389,$391);
    }
   }
   if ((label|0) == 39) {
    label = 0;
    $65 = $i;
    $363 = $65;
    $364 = HEAP32[$363>>2]|0;
    $365 = HEAP8[$364>>0]|0;
    $366 = $365 << 24 >> 24;
    $367 = $366 & 255;
    HEAP32[$vararg_buffer>>2] = $367;
    (_snprintf($buf,7,1640,$vararg_buffer)|0);
    $368 = (($buf) + 6|0);
    ;HEAP32[$162+0>>2]=HEAP32[$oi+0>>2]|0;
    ;HEAP8[$105+0>>0]=HEAP8[$162+0>>0]|0;HEAP8[$105+1>>0]=HEAP8[$162+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$162+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$162+3>>0]|0;
    $101 = $buf;
    $102 = $368;
    $369 = $101;
    $100 = $369;
    $370 = $100;
    $371 = $102;
    $92 = $371;
    $372 = $92;
    ;HEAP32[$104+0>>2]=HEAP32[$105+0>>2]|0;
    ;HEAP8[$91+0>>0]=HEAP8[$104+0>>0]|0;HEAP8[$91+1>>0]=HEAP8[$104+1>>0]|0;HEAP8[$91+2>>0]=HEAP8[$104+2>>0]|0;HEAP8[$91+3>>0]=HEAP8[$104+3>>0]|0;
    ;HEAP32[$103+0>>2]=HEAP32[$91+0>>2]|0;
    ;HEAP8[$99+0>>0]=HEAP8[$103+0>>0]|0;HEAP8[$99+1>>0]=HEAP8[$103+1>>0]|0;HEAP8[$99+2>>0]=HEAP8[$103+2>>0]|0;HEAP8[$99+3>>0]=HEAP8[$103+3>>0]|0;
    $97 = $370;
    $98 = $372;
    while(1) {
     $373 = $97;
     $374 = $98;
     $375 = ($373|0)!=($374|0);
     if (!($375)) {
      break;
     }
     $96 = $99;
     $376 = $96;
     $377 = $97;
     $93 = $376;
     $94 = $377;
     $378 = $93;
     $379 = HEAP32[$378>>2]|0;
     $380 = $94;
     $381 = HEAP8[$380>>0]|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($379,$381);
     $382 = $97;
     $383 = (($382) + 1|0);
     $97 = $383;
     $95 = $99;
    }
    ;HEAP32[$163+0>>2]=HEAP32[$99+0>>2]|0;
   }
  }
  }
  $130 = $i;
  $392 = $130;
  $393 = HEAP32[$392>>2]|0;
  $394 = (($393) + 1|0);
  HEAP32[$392>>2] = $394;
 }
 if ((label|0) == 15) {
  $267 = ___cxa_find_matching_catch()|0;
  $268 = tempRet0;
  $146 = $267;
  $147 = $268;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($144);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $279 = ___cxa_find_matching_catch()|0;
  $280 = tempRet0;
  $146 = $279;
  $147 = $280;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($148);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 21) {
  $291 = ___cxa_find_matching_catch()|0;
  $292 = tempRet0;
  $146 = $291;
  $147 = $292;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($150);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $146 = $303;
  $147 = $304;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($152);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $315 = ___cxa_find_matching_catch()|0;
  $316 = tempRet0;
  $146 = $315;
  $147 = $316;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($154);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 30) {
  $327 = ___cxa_find_matching_catch()|0;
  $328 = tempRet0;
  $146 = $327;
  $147 = $328;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($156);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $339 = ___cxa_find_matching_catch()|0;
  $340 = tempRet0;
  $146 = $339;
  $147 = $340;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($158);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 36) {
  $351 = ___cxa_find_matching_catch()|0;
  $352 = tempRet0;
  $146 = $351;
  $147 = $352;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($160);
  $402 = $146;
  $403 = $147;
  ___resumeException($402|0);
  // unreachable;
 }
 else if ((label|0) == 47) {
  $131 = $oi;
  $132 = 0;
  $395 = $131;
  ;HEAP32[$165+0>>2]=HEAP32[$395+0>>2]|0;
  $133 = $165;
  $396 = $133;
  HEAP8[$166>>0] = 34;
  $136 = $396;
  $137 = $166;
  $397 = $136;
  $398 = HEAP32[$397>>2]|0;
  $399 = $137;
  $135 = $399;
  $400 = $135;
  $401 = HEAP8[$400>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($398,$401);
  STACKTOP = sp;return;
 }
}
function __ZN8picojson5value7_indentINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i($oi,$indent) {
 $oi = $oi|0;
 $indent = $indent|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 8|0;
 $14 = sp + 65|0;
 $15 = sp;
 $16 = sp + 64|0;
 $12 = $indent;
 $10 = $oi;
 $11 = 0;
 $17 = $10;
 ;HEAP32[$13+0>>2]=HEAP32[$17+0>>2]|0;
 $6 = $13;
 $18 = $6;
 HEAP8[$14>>0] = 10;
 $1 = $18;
 $2 = $14;
 $19 = $1;
 $20 = HEAP32[$19>>2]|0;
 $21 = $2;
 $0 = $21;
 $22 = $0;
 $23 = HEAP8[$22>>0]|0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($20,$23);
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = $12;
  $26 = $25<<1;
  $27 = ($24|0)<($26|0);
  if (!($27)) {
   break;
  }
  $3 = $oi;
  $4 = 0;
  $28 = $3;
  ;HEAP32[$15+0>>2]=HEAP32[$28+0>>2]|0;
  $5 = $15;
  $29 = $5;
  HEAP8[$16>>0] = 32;
  $8 = $29;
  $9 = $16;
  $30 = $8;
  $31 = HEAP32[$30>>2]|0;
  $32 = $9;
  $7 = $32;
  $33 = $7;
  $34 = HEAP8[$33>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($31,$34);
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 STACKTOP = sp;return;
}
function __ZN8picojson4copyINSt3__120back_insert_iteratorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEvRKS8_T_($s,$oi) {
 $s = $s|0;
 $oi = $oi|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $25 = sp + 64|0;
 $26 = sp + 56|0;
 $39 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 32|0;
 $42 = sp + 24|0;
 $43 = sp + 168|0;
 $44 = sp + 164|0;
 $45 = sp + 160|0;
 $46 = sp + 156|0;
 $47 = sp + 152|0;
 $48 = sp + 148|0;
 $49 = sp + 16|0;
 $50 = sp + 8|0;
 $51 = sp;
 $68 = sp + 80|0;
 $69 = sp + 76|0;
 $70 = sp + 72|0;
 $71 = sp + 68|0;
 $67 = $s;
 $72 = $67;
 $66 = $72;
 $73 = $66;
 $65 = $73;
 $74 = $65;
 $64 = $74;
 $75 = $64;
 $63 = $75;
 $76 = $63;
 $62 = $76;
 $77 = $62;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 & 1;
 $81 = ($80|0)!=(0);
 if ($81) {
  $56 = $74;
  $82 = $56;
  $55 = $82;
  $83 = $55;
  $54 = $83;
  $84 = $54;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $93 = $86;
 } else {
  $61 = $74;
  $87 = $61;
  $60 = $87;
  $88 = $60;
  $59 = $88;
  $89 = $59;
  $90 = (($89) + 1|0);
  $58 = $90;
  $91 = $58;
  $57 = $91;
  $92 = $57;
  $93 = $92;
 }
 $52 = $68;
 $53 = $93;
 $94 = $52;
 $95 = $53;
 HEAP32[$94>>2] = $95;
 $96 = $67;
 $24 = $96;
 $97 = $24;
 $23 = $97;
 $98 = $23;
 $22 = $98;
 $99 = $22;
 $21 = $99;
 $100 = $21;
 $20 = $100;
 $101 = $20;
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 & 1;
 $105 = ($104|0)!=(0);
 if ($105) {
  $14 = $98;
  $106 = $14;
  $13 = $106;
  $107 = $13;
  $12 = $107;
  $108 = $12;
  $109 = (($108) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $137 = $110;
 } else {
  $19 = $98;
  $111 = $19;
  $18 = $111;
  $112 = $18;
  $17 = $112;
  $113 = $17;
  $114 = (($113) + 1|0);
  $16 = $114;
  $115 = $16;
  $15 = $115;
  $116 = $15;
  $137 = $116;
 }
 $9 = $97;
 $117 = $9;
 $8 = $117;
 $118 = $8;
 $7 = $118;
 $119 = $7;
 $6 = $119;
 $120 = $6;
 $121 = HEAP8[$120>>0]|0;
 $122 = $121&255;
 $123 = $122 & 1;
 $124 = ($123|0)!=(0);
 if ($124) {
  $2 = $117;
  $125 = $2;
  $1 = $125;
  $126 = $1;
  $0 = $126;
  $127 = $0;
  $128 = (($127) + 4|0);
  $129 = HEAP32[$128>>2]|0;
  $138 = $129;
 } else {
  $5 = $117;
  $130 = $5;
  $4 = $130;
  $131 = $4;
  $3 = $131;
  $132 = $3;
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = $134 >> 1;
  $138 = $135;
 }
 $136 = (($137) + ($138)|0);
 $10 = $69;
 $11 = $136;
 $139 = $10;
 $140 = $11;
 HEAP32[$139>>2] = $140;
 ;HEAP32[$70+0>>2]=HEAP32[$oi+0>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$70+3>>0]|0;
 ;HEAP8[$50+0>>0]=HEAP8[$69+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$69+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$69+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$69+3>>0]|0;
 ;HEAP8[$51+0>>0]=HEAP8[$68+0>>0]|0;HEAP8[$51+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$51+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$51+3>>0]=HEAP8[$68+3>>0]|0;
 ;HEAP32[$44+0>>2]=HEAP32[$51+0>>2]|0;
 ;HEAP8[$42+0>>0]=HEAP8[$44+0>>0]|0;HEAP8[$42+1>>0]=HEAP8[$44+1>>0]|0;HEAP8[$42+2>>0]=HEAP8[$44+2>>0]|0;HEAP8[$42+3>>0]=HEAP8[$44+3>>0]|0;
 ;HEAP32[$43+0>>2]=HEAP32[$42+0>>2]|0;
 ;HEAP32[$46+0>>2]=HEAP32[$50+0>>2]|0;
 ;HEAP8[$26+0>>0]=HEAP8[$46+0>>0]|0;HEAP8[$26+1>>0]=HEAP8[$46+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$46+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$46+3>>0]|0;
 ;HEAP32[$45+0>>2]=HEAP32[$26+0>>2]|0;
 ;HEAP32[$48+0>>2]=HEAP32[$49+0>>2]|0;
 ;HEAP8[$25+0>>0]=HEAP8[$48+0>>0]|0;HEAP8[$25+1>>0]=HEAP8[$48+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$48+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$48+3>>0]|0;
 ;HEAP32[$47+0>>2]=HEAP32[$25+0>>2]|0;
 ;HEAP8[$39+0>>0]=HEAP8[$47+0>>0]|0;HEAP8[$39+1>>0]=HEAP8[$47+1>>0]|0;HEAP8[$39+2>>0]=HEAP8[$47+2>>0]|0;HEAP8[$39+3>>0]=HEAP8[$47+3>>0]|0;
 ;HEAP8[$40+0>>0]=HEAP8[$45+0>>0]|0;HEAP8[$40+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$40+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$40+3>>0]=HEAP8[$45+3>>0]|0;
 ;HEAP8[$41+0>>0]=HEAP8[$43+0>>0]|0;HEAP8[$41+1>>0]=HEAP8[$43+1>>0]|0;HEAP8[$41+2>>0]=HEAP8[$43+2>>0]|0;HEAP8[$41+3>>0]=HEAP8[$43+3>>0]|0;
 while(1) {
  $37 = $41;
  $38 = $40;
  $141 = $37;
  $142 = $38;
  $35 = $141;
  $36 = $142;
  $143 = $35;
  $34 = $143;
  $144 = $34;
  $145 = HEAP32[$144>>2]|0;
  $146 = $36;
  $33 = $146;
  $147 = $33;
  $148 = HEAP32[$147>>2]|0;
  $149 = ($145|0)==($148|0);
  $150 = $149 ^ 1;
  if (!($150)) {
   break;
  }
  $28 = $39;
  $151 = $28;
  $27 = $41;
  $152 = $27;
  $153 = HEAP32[$152>>2]|0;
  $29 = $151;
  $30 = $153;
  $154 = $29;
  $155 = HEAP32[$154>>2]|0;
  $156 = $30;
  $157 = HEAP8[$156>>0]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($155,$157);
  $31 = $41;
  $158 = $31;
  $159 = HEAP32[$158>>2]|0;
  $160 = (($159) + 1|0);
  HEAP32[$158>>2] = $160;
  $32 = $39;
 }
 ;HEAP32[$71+0>>2]=HEAP32[$39+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK8picojson5value6to_strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $__a$i$i$i = 0, $__a$i$i$i$i = 0;
 var $__a$i$i$i$i1 = 0, $__i$i$i$i = 0, $__i$i$i$i$i = 0, $__i$i$i$i$i2 = 0, $buf = 0, $decimal_point = 0, $decimal_point_len = 0, $p = 0, $tmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 8|0;
 $buf = sp + 376|0;
 $tmp = sp;
 $72 = sp + 36|0;
 $73 = sp + 24|0;
 $71 = $this;
 $76 = $71;
 $77 = HEAP32[$76>>2]|0;
 switch ($77|0) {
 case 1:  {
  $86 = (($76) + 8|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&1;
  $89 = $88 ? 6960 : 6992;
  $62 = $agg$result;
  $63 = $89;
  $90 = $62;
  $91 = $63;
  $60 = $90;
  $61 = $91;
  $92 = $60;
  $59 = $92;
  $93 = $59;
  $58 = $93;
  $94 = $58;
  $57 = $94;
  $95 = $61;
  $96 = $61;
  $97 = (__ZNSt3__111char_traitsIcE6lengthEPKc($96)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($92,$95,$97);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $193 = (($76) + 8|0);
  $194 = HEAP32[$193>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$194);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $13 = $agg$result;
  $14 = 1560;
  $203 = $13;
  $204 = $14;
  $11 = $203;
  $12 = $204;
  $205 = $11;
  $10 = $205;
  $206 = $10;
  $9 = $206;
  $207 = $9;
  $8 = $207;
  $208 = $12;
  $209 = $12;
  $210 = (__ZNSt3__111char_traitsIcE6lengthEPKc($209)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($205,$208,$210);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $98 = (($76) + 8|0);
  $99 = +HEAPF64[$98>>3];
  $100 = (+Math_abs((+$99)));
  $101 = $100 < 9007199254740992.0;
  if ($101) {
   $102 = (($76) + 8|0);
   $103 = +HEAPF64[$102>>3];
   $104 = (+_modf($103,$tmp));
   $105 = $104 == 0.0;
   $107 = $105;
  } else {
   $107 = 0;
  }
  $106 = $107 ? 1536 : 1544;
  $108 = (($76) + 8|0);
  $109 = +HEAPF64[$108>>3];
  HEAPF64[tempDoublePtr>>3]=$109;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  (_snprintf($buf,256,$106,$vararg_buffer)|0);
  $110 = (_localeconv()|0);
  $111 = HEAP32[$110>>2]|0;
  $decimal_point = $111;
  $112 = $decimal_point;
  $113 = (_strcmp($112,17464)|0);
  $114 = ($113|0)!=(0);
  do {
   if ($114) {
    $115 = $decimal_point;
    $116 = (_strlen(($115|0))|0);
    $decimal_point_len = $116;
    $p = $buf;
    while(1) {
     $117 = $p;
     $118 = HEAP8[$117>>0]|0;
     $119 = $118 << 24 >> 24;
     $120 = ($119|0)!=(0);
     if (!($120)) {
      label = 26;
      break;
     }
     $121 = $p;
     $122 = $decimal_point;
     $123 = $decimal_point_len;
     $124 = (_strncmp($121,$122,$123)|0);
     $125 = ($124|0)==(0);
     if ($125) {
      break;
     }
     $183 = $p;
     $184 = (($183) + 1|0);
     $p = $184;
    }
    if ((label|0) == 26) {
     break;
    }
    $126 = $p;
    $54 = $73;
    $55 = $buf;
    $56 = $126;
    $127 = $54;
    $53 = $127;
    $128 = $53;
    $52 = $128;
    $129 = $52;
    $51 = $129;
    $130 = $55;
    $131 = $56;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($127,$130,$131);
    $49 = $73;
    $50 = 17464;
    $132 = $49;
    $133 = $50;
    __THREW__ = 0;
    $134 = (invoke_iii(527,($132|0),($133|0))|0);
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    do {
     if ($136) {
      $179 = ___cxa_find_matching_catch()|0;
      $180 = tempRet0;
      $74 = $179;
      $75 = $180;
     } else {
      $48 = $134;
      $137 = $48;
      $46 = $72;
      $47 = $137;
      $138 = $46;
      $139 = $47;
      $44 = $138;
      $45 = $139;
      $140 = $44;
      $141 = $45;
      $43 = $141;
      $142 = $43;
      ;HEAP32[$140+0>>2]=HEAP32[$142+0>>2]|0;HEAP32[$140+4>>2]=HEAP32[$142+4>>2]|0;HEAP32[$140+8>>2]=HEAP32[$142+8>>2]|0;
      $143 = $45;
      $42 = $143;
      $144 = $42;
      $41 = $144;
      $145 = $41;
      $40 = $145;
      $146 = $40;
      $__a$i$i$i$i = $146;
      $__i$i$i$i$i = 0;
      while(1) {
       $147 = $__i$i$i$i$i;
       $148 = ($147>>>0)<(3);
       if (!($148)) {
        break;
       }
       $149 = $__i$i$i$i$i;
       $150 = $__a$i$i$i$i;
       $151 = (($150) + ($149<<2)|0);
       HEAP32[$151>>2] = 0;
       $152 = $__i$i$i$i$i;
       $153 = (($152) + 1)|0;
       $__i$i$i$i$i = $153;
      }
      $154 = $p;
      $155 = $decimal_point_len;
      $156 = (($154) + ($155)|0);
      $38 = $72;
      $39 = $156;
      $157 = $38;
      $158 = $39;
      __THREW__ = 0;
      $159 = (invoke_iii(527,($157|0),($158|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       $181 = ___cxa_find_matching_catch()|0;
       $182 = tempRet0;
       $74 = $181;
       $75 = $182;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($72);
       break;
      }
      $37 = $159;
      $162 = $37;
      $35 = $agg$result;
      $36 = $162;
      $163 = $35;
      $164 = $36;
      $33 = $163;
      $34 = $164;
      $165 = $33;
      $166 = $34;
      $32 = $166;
      $167 = $32;
      ;HEAP32[$165+0>>2]=HEAP32[$167+0>>2]|0;HEAP32[$165+4>>2]=HEAP32[$167+4>>2]|0;HEAP32[$165+8>>2]=HEAP32[$167+8>>2]|0;
      $168 = $34;
      $31 = $168;
      $169 = $31;
      $30 = $169;
      $170 = $30;
      $29 = $170;
      $171 = $29;
      $__a$i$i$i$i1 = $171;
      $__i$i$i$i$i2 = 0;
      while(1) {
       $172 = $__i$i$i$i$i2;
       $173 = ($172>>>0)<(3);
       if (!($173)) {
        break;
       }
       $174 = $__i$i$i$i$i2;
       $175 = $__a$i$i$i$i1;
       $176 = (($175) + ($174<<2)|0);
       HEAP32[$176>>2] = 0;
       $177 = $__i$i$i$i$i2;
       $178 = (($177) + 1)|0;
       $__i$i$i$i$i2 = $178;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($72);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($73);
      STACKTOP = sp;return;
     }
    } while(0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($73);
    $216 = $74;
    $217 = $75;
    ___resumeException($216|0);
    // unreachable;
   }
  } while(0);
  $27 = $agg$result;
  $28 = $buf;
  $185 = $27;
  $186 = $28;
  $25 = $185;
  $26 = $186;
  $187 = $25;
  $24 = $187;
  $188 = $24;
  $23 = $188;
  $189 = $23;
  $22 = $189;
  $190 = $26;
  $191 = $26;
  $192 = (__ZNSt3__111char_traitsIcE6lengthEPKc($191)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($187,$190,$192);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $20 = $agg$result;
  $21 = 1552;
  $195 = $20;
  $196 = $21;
  $18 = $195;
  $19 = $196;
  $197 = $18;
  $17 = $197;
  $198 = $17;
  $16 = $198;
  $199 = $16;
  $15 = $199;
  $200 = $19;
  $201 = $19;
  $202 = (__ZNSt3__111char_traitsIcE6lengthEPKc($201)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($197,$200,$202);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $69 = $agg$result;
  $70 = 1528;
  $78 = $69;
  $79 = $70;
  $67 = $78;
  $68 = $79;
  $80 = $67;
  $66 = $80;
  $81 = $66;
  $65 = $81;
  $82 = $65;
  $64 = $82;
  $83 = $68;
  $84 = $68;
  $85 = (__ZNSt3__111char_traitsIcE6lengthEPKc($84)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($80,$83,$85);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $211 = (___cxa_allocate_exception(8)|0);
  __THREW__ = 0;
  invoke_vii(423,($211|0),(1568|0));
  $212 = __THREW__; __THREW__ = 0;
  $213 = $212&1;
  if (!($213)) {
   ___cxa_throw(($211|0),(15440|0),(381|0));
   // unreachable;
  }
  $214 = ___cxa_find_matching_catch()|0;
  $215 = tempRet0;
  $74 = $214;
  $75 = $215;
  ___cxa_free_exception(($211|0));
  $216 = $74;
  $217 = $75;
  ___resumeException($216|0);
  // unreachable;
 }
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $34 = sp + 8|0;
 $36 = sp + 214|0;
 $43 = sp;
 $46 = sp + 213|0;
 $50 = sp + 212|0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 ;HEAP8[$43+0>>0]=HEAP8[$46+0>>0]|0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 ;HEAP8[$34+0>>0]=HEAP8[$36+0>>0]|0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = (($68) - 16)|0;
 $70 = ($61>>>0)>($69>>>0);
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51);
  // unreachable;
 }
 $71 = $__sz;
 $72 = ($71>>>0)<(11);
 if ($72) {
  $73 = $__sz;
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76&255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79>>0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = (($82) + 1|0);
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $86 = $__sz;
  $1 = $86;
  $87 = $1;
  $88 = ($87>>>0)<(11);
  if ($88) {
   $95 = 11;
  } else {
   $89 = $1;
   $90 = (($89) + 1)|0;
   $0 = $90;
   $91 = $0;
   $92 = (($91) + 15)|0;
   $93 = $92 & -16;
   $95 = $93;
  }
  $94 = (($95) - 1)|0;
  $__cap = $94;
  $4 = $51;
  $96 = $4;
  $3 = $96;
  $97 = $3;
  $2 = $97;
  $98 = $2;
  $99 = $__cap;
  $100 = (($99) + 1)|0;
  $14 = $98;
  $15 = $100;
  $101 = $14;
  $102 = $15;
  $11 = $101;
  $12 = $102;
  $13 = 0;
  $103 = $12;
  $10 = $103;
  $104 = $10;
  $105 = (__Znwj($104)|0);
  $__p = $105;
  $106 = $__p;
  $18 = $51;
  $19 = $106;
  $107 = $18;
  $108 = $19;
  $17 = $107;
  $109 = $17;
  $16 = $109;
  $110 = $16;
  $111 = (($110) + 8|0);
  HEAP32[$111>>2] = $108;
  $112 = $__cap;
  $113 = (($112) + 1)|0;
  $22 = $51;
  $23 = $113;
  $114 = $22;
  $115 = $23;
  $116 = 1 | $115;
  $21 = $114;
  $117 = $21;
  $20 = $117;
  $118 = $20;
  HEAP32[$118>>2] = $116;
  $119 = $__sz;
  $26 = $51;
  $27 = $119;
  $120 = $26;
  $121 = $27;
  $25 = $120;
  $122 = $25;
  $24 = $122;
  $123 = $24;
  $124 = (($123) + 4|0);
  HEAP32[$124>>2] = $121;
 }
 while(1) {
  $125 = $48;
  $126 = $49;
  $127 = ($125|0)!=($126|0);
  if (!($127)) {
   break;
  }
  $128 = $__p;
  $129 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($128,$129);
  $130 = $48;
  $131 = (($130) + 1|0);
  $48 = $131;
  $132 = $__p;
  $133 = (($132) + 1|0);
  $__p = $133;
 }
 $134 = $__p;
 HEAP8[$50>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($134,$50);
 STACKTOP = sp;return;
}
function __Z13__DOUBLE_BITSd($__f) {
 $__f = +$__f;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $__u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__u = sp;
 $0 = $__f;
 $1 = $0;
 HEAPF64[$__u>>3] = $1;
 $2 = $__u;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 tempRet0 = $7;
 STACKTOP = sp;return ($4|0);
}
function __ZN8picojson5value4swapERS0_($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, $__t$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i1 = sp;
 $__t$i = sp + 16|0;
 $10 = $this;
 $11 = $x;
 $12 = $10;
 $13 = $11;
 $8 = $12;
 $9 = $13;
 $14 = $8;
 $7 = $14;
 $15 = $7;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$__t$i>>2] = $16;
 $17 = $9;
 $5 = $17;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $20 = $8;
 HEAP32[$20>>2] = $19;
 $6 = $__t$i;
 $21 = $6;
 $22 = HEAP32[$21>>2]|0;
 $23 = $9;
 HEAP32[$23>>2] = $22;
 $24 = (($12) + 8|0);
 $25 = $11;
 $26 = (($25) + 8|0);
 $3 = $24;
 $4 = $26;
 $27 = $3;
 $2 = $27;
 $28 = $2;
 ;HEAP32[$__t$i1+0>>2]=HEAP32[$28+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$28+4>>2]|0;
 $29 = $3;
 $30 = $4;
 $0 = $30;
 $31 = $0;
 ;HEAP32[$29+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;
 $32 = $4;
 $1 = $__t$i1;
 $33 = $1;
 ;HEAP32[$32+0>>2]=HEAP32[$33+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$33+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK8picojson5value2isINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEEbv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(4);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8picojson5value2isIdEEbv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(2);
 STACKTOP = sp;return ($3|0);
}
function __ZNK8picojson5value2isINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEEbv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(5);
 STACKTOP = sp;return ($3|0);
}
function __ZN8picojson5parseINSt3__111__wrap_iterIPKcEEEET_RNS_5valueERKS6_SA_PNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($agg$result,$out,$first,$last,$err) {
 $agg$result = $agg$result|0;
 $out = $out|0;
 $first = $first|0;
 $last = $last|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ctx = sp;
 $0 = $out;
 $1 = $first;
 $2 = $last;
 $3 = $err;
 $4 = $0;
 __ZN8picojson21default_parse_contextC2EPNS_5valueE($ctx,$4);
 $5 = $1;
 $6 = $2;
 $7 = $3;
 __ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEET0_RT_RKS7_SB_PNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result,$ctx,$5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN8picojson21default_parse_contextC2EPNS_5valueE($this,$out) {
 $this = $this|0;
 $out = $out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $out;
 $2 = $0;
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEET0_RT_RKS7_SB_PNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($agg$result,$ctx,$first,$last,$err) {
 $agg$result = $agg$result|0;
 $ctx = $ctx|0;
 $first = $first|0;
 $last = $last|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ch = 0, $in = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $in = sp + 8|0;
 $buf = sp + 56|0;
 $2 = $ctx;
 $3 = $first;
 $4 = $last;
 $5 = $err;
 $6 = $3;
 $7 = $4;
 __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEEC2ERKS5_S8_($in,$6,$7);
 $8 = $2;
 $9 = (__ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($8,$in)|0);
 if ($9) {
  __ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE3curEv($agg$result,$in);
  STACKTOP = sp;return;
 }
 $10 = $5;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  __ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE3curEv($agg$result,$in);
  STACKTOP = sp;return;
 }
 $12 = (__ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE4lineEv($in)|0);
 HEAP32[$vararg_buffer>>2] = $12;
 (_snprintf($buf,64,1864,$vararg_buffer)|0);
 $13 = $5;
 $0 = $13;
 $1 = $buf;
 $14 = $0;
 $15 = $1;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($14,$15)|0);
 while(1) {
  $16 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($in)|0);
  $ch = $16;
  $17 = $ch;
  $18 = ($17|0)==(-1);
  if ($18) {
   break;
  }
  $19 = $ch;
  $20 = ($19|0)==(10);
  if ($20) {
   break;
  }
  $21 = $ch;
  $22 = ($21|0)>=(32);
  if ($22) {
   $23 = $5;
   $24 = $ch;
   $25 = $24&255;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,$25);
  }
 }
 __ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE3curEv($agg$result,$in);
 STACKTOP = sp;return;
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEEC2ERKS5_S8_($this,$first,$last) {
 $this = $this|0;
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $first;
 $2 = $last;
 $3 = $0;
 $4 = $1;
 ;HEAP32[$3+0>>2]=HEAP32[$4+0>>2]|0;
 $5 = (($3) + 4|0);
 $6 = $2;
 ;HEAP32[$5+0>>2]=HEAP32[$6+0>>2]|0;
 $7 = (($3) + 8|0);
 HEAP32[$7>>2] = -1;
 $8 = (($3) + 12|0);
 HEAP8[$8>>0] = 0;
 $9 = (($3) + 16|0);
 HEAP32[$9>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($ctx,$in) {
 $ctx = $ctx|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$expand_i1_val18 = 0, $$expand_i1_val2 = 0, $$expand_i1_val20 = 0, $$expand_i1_val22 = 0, $$expand_i1_val24 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch = 0, $endp = 0, $f = 0.0;
 var $num_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $75 = sp + 60|0;
 $78 = sp + 40|0;
 $79 = sp + 28|0;
 $endp = sp + 24|0;
 $num_str = sp + 12|0;
 $73 = $ctx;
 $74 = $in;
 $81 = $74;
 __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE7skip_wsEv($81);
 $82 = $74;
 $83 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($82)|0);
 $ch = $83;
 $84 = $ch;
 switch ($84|0) {
 case 110:  {
  $85 = $74;
  $45 = $75;
  $46 = 1896;
  $86 = $45;
  $87 = $46;
  $43 = $86;
  $44 = $87;
  $88 = $43;
  $42 = $88;
  $89 = $42;
  $41 = $89;
  $90 = $41;
  $40 = $90;
  $91 = $44;
  $92 = $44;
  $93 = (__ZNSt3__111char_traitsIcE6lengthEPKc($92)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($88,$91,$93);
  __THREW__ = 0;
  $94 = (invoke_iii(532,($85|0),($75|0))|0);
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  do {
   if (!($96)) {
    if ($94) {
     $97 = $73;
     __THREW__ = 0;
     $98 = (invoke_ii(533,($97|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      break;
     }
     $260 = $98;
    } else {
     $260 = 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($75);
    if ($260) {
     $$expand_i1_val = 1;
     $72 = $$expand_i1_val;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    } else {
     $$expand_i1_val2 = 0;
     $72 = $$expand_i1_val2;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    }
   }
  } while(0);
  $101 = ___cxa_find_matching_catch()|0;
  $102 = tempRet0;
  $76 = $101;
  $77 = $102;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($75);
  $258 = $76;
  $259 = $77;
  ___resumeException($258|0);
  // unreachable;
  break;
 }
 case 91:  {
  $142 = $73;
  $143 = $74;
  $144 = (__ZN8picojson12_parse_arrayINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($142,$143)|0);
  $$expand_i1_val14 = $144&1;
  $72 = $$expand_i1_val14;
  $$pre_trunc = $72;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
  break;
 }
 case 34:  {
  $139 = $73;
  $140 = $74;
  $141 = (__ZN8picojson21default_parse_context12parse_stringINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EE($139,$140)|0);
  $$expand_i1_val12 = $141&1;
  $72 = $$expand_i1_val12;
  $$pre_trunc = $72;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
  break;
 }
 case 102:  {
  $103 = $74;
  $38 = $78;
  $39 = 1904;
  $104 = $38;
  $105 = $39;
  $36 = $104;
  $37 = $105;
  $106 = $36;
  $35 = $106;
  $107 = $35;
  $34 = $107;
  $108 = $34;
  $33 = $108;
  $109 = $37;
  $110 = $37;
  $111 = (__ZNSt3__111char_traitsIcE6lengthEPKc($110)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($106,$109,$111);
  __THREW__ = 0;
  $112 = (invoke_iii(532,($103|0),($78|0))|0);
  $113 = __THREW__; __THREW__ = 0;
  $114 = $113&1;
  do {
   if (!($114)) {
    if ($112) {
     $115 = $73;
     __THREW__ = 0;
     $116 = (invoke_iii(534,($115|0),0)|0);
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      break;
     }
     $261 = $116;
    } else {
     $261 = 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($78);
    if ($261) {
     $$expand_i1_val4 = 1;
     $72 = $$expand_i1_val4;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    } else {
     $$expand_i1_val6 = 0;
     $72 = $$expand_i1_val6;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    }
   }
  } while(0);
  $119 = ___cxa_find_matching_catch()|0;
  $120 = tempRet0;
  $76 = $119;
  $77 = $120;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($78);
  $258 = $76;
  $259 = $77;
  ___resumeException($258|0);
  // unreachable;
  break;
 }
 case 123:  {
  $145 = $73;
  $146 = $74;
  $147 = (__ZN8picojson13_parse_objectINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($145,$146)|0);
  $$expand_i1_val16 = $147&1;
  $72 = $$expand_i1_val16;
  $$pre_trunc = $72;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
  break;
 }
 case 116:  {
  $121 = $74;
  $31 = $79;
  $32 = 1912;
  $122 = $31;
  $123 = $32;
  $29 = $122;
  $30 = $123;
  $124 = $29;
  $28 = $124;
  $125 = $28;
  $27 = $125;
  $126 = $27;
  $26 = $126;
  $127 = $30;
  $128 = $30;
  $129 = (__ZNSt3__111char_traitsIcE6lengthEPKc($128)|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($124,$127,$129);
  __THREW__ = 0;
  $130 = (invoke_iii(532,($121|0),($79|0))|0);
  $131 = __THREW__; __THREW__ = 0;
  $132 = $131&1;
  do {
   if (!($132)) {
    if ($130) {
     $133 = $73;
     __THREW__ = 0;
     $134 = (invoke_iii(534,($133|0),1)|0);
     $135 = __THREW__; __THREW__ = 0;
     $136 = $135&1;
     if ($136) {
      break;
     }
     $262 = $134;
    } else {
     $262 = 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($79);
    if ($262) {
     $$expand_i1_val8 = 1;
     $72 = $$expand_i1_val8;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    } else {
     $$expand_i1_val10 = 0;
     $72 = $$expand_i1_val10;
     $$pre_trunc = $72;
     $257 = $$pre_trunc&1;
     STACKTOP = sp;return ($257|0);
    }
   }
  } while(0);
  $137 = ___cxa_find_matching_catch()|0;
  $138 = tempRet0;
  $76 = $137;
  $77 = $138;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($79);
  $258 = $76;
  $259 = $77;
  ___resumeException($258|0);
  // unreachable;
  break;
 }
 default: {
  $148 = $ch;
  $149 = (48)<=($148|0);
  if ($149) {
   $150 = $ch;
   $151 = ($150|0)<=(57);
   if (!($151)) {
    label = 31;
   }
  } else {
   label = 31;
  }
  if ((label|0) == 31) {
   $152 = $ch;
   $153 = ($152|0)==(45);
   if (!($153)) {
    $256 = $74;
    __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($256);
    $$expand_i1_val24 = 0;
    $72 = $$expand_i1_val24;
    $$pre_trunc = $72;
    $257 = $$pre_trunc&1;
    STACKTOP = sp;return ($257|0);
   }
  }
  $154 = $74;
  __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($154);
  $155 = $74;
  __ZN8picojson13_parse_numberINSt3__111__wrap_iterIPKcEEEENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS_5inputIT_EE($num_str,$155);
  $10 = $num_str;
  $156 = $10;
  $9 = $156;
  $157 = $9;
  $8 = $157;
  $158 = $8;
  $7 = $158;
  $159 = $7;
  $6 = $159;
  $160 = $6;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $2 = $157;
   $165 = $2;
   $1 = $165;
   $166 = $1;
   $0 = $166;
   $167 = $0;
   $168 = (($167) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $177 = $169;
  } else {
   $5 = $157;
   $170 = $5;
   $4 = $170;
   $171 = $4;
   $3 = $171;
   $172 = $3;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 1;
   $177 = $175;
  }
  $176 = ($177|0)==(0);
  do {
   if ($176) {
    $$expand_i1_val18 = 0;
    $72 = $$expand_i1_val18;
    $80 = 1;
   } else {
    $25 = $num_str;
    $178 = $25;
    $24 = $178;
    $179 = $24;
    $23 = $179;
    $180 = $23;
    $22 = $180;
    $181 = $22;
    $21 = $181;
    $182 = $21;
    $20 = $182;
    $183 = $20;
    $184 = HEAP8[$183>>0]|0;
    $185 = $184&255;
    $186 = $185 & 1;
    $187 = ($186|0)!=(0);
    if ($187) {
     $14 = $180;
     $188 = $14;
     $13 = $188;
     $189 = $13;
     $12 = $189;
     $190 = $12;
     $191 = (($190) + 8|0);
     $192 = HEAP32[$191>>2]|0;
     $199 = $192;
    } else {
     $19 = $180;
     $193 = $19;
     $18 = $193;
     $194 = $18;
     $17 = $194;
     $195 = $17;
     $196 = (($195) + 1|0);
     $16 = $196;
     $197 = $16;
     $15 = $197;
     $198 = $15;
     $199 = $198;
    }
    $11 = $199;
    $200 = $11;
    __THREW__ = 0;
    $201 = (+invoke_dii(535,($200|0),($endp|0)));
    $202 = __THREW__; __THREW__ = 0;
    $203 = $202&1;
    if (!($203)) {
     $f = $201;
     $204 = HEAP32[$endp>>2]|0;
     $61 = $num_str;
     $205 = $61;
     $60 = $205;
     $206 = $60;
     $59 = $206;
     $207 = $59;
     $58 = $207;
     $208 = $58;
     $57 = $208;
     $209 = $57;
     $56 = $209;
     $210 = $56;
     $211 = HEAP8[$210>>0]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $50 = $207;
      $215 = $50;
      $49 = $215;
      $216 = $49;
      $48 = $216;
      $217 = $48;
      $218 = (($217) + 8|0);
      $219 = HEAP32[$218>>2]|0;
      $226 = $219;
     } else {
      $55 = $207;
      $220 = $55;
      $54 = $220;
      $221 = $54;
      $53 = $221;
      $222 = $53;
      $223 = (($222) + 1|0);
      $52 = $223;
      $224 = $52;
      $51 = $224;
      $225 = $51;
      $226 = $225;
     }
     $47 = $226;
     $227 = $47;
     $71 = $num_str;
     $228 = $71;
     $70 = $228;
     $229 = $70;
     $69 = $229;
     $230 = $69;
     $68 = $230;
     $231 = $68;
     $232 = HEAP8[$231>>0]|0;
     $233 = $232&255;
     $234 = $233 & 1;
     $235 = ($234|0)!=(0);
     if ($235) {
      $64 = $228;
      $236 = $64;
      $63 = $236;
      $237 = $63;
      $62 = $237;
      $238 = $62;
      $239 = (($238) + 4|0);
      $240 = HEAP32[$239>>2]|0;
      $248 = $240;
     } else {
      $67 = $228;
      $241 = $67;
      $66 = $241;
      $242 = $66;
      $65 = $242;
      $243 = $65;
      $244 = HEAP8[$243>>0]|0;
      $245 = $244&255;
      $246 = $245 >> 1;
      $248 = $246;
     }
     $247 = (($227) + ($248)|0);
     $249 = ($204|0)==($247|0);
     if (!($249)) {
      $$expand_i1_val22 = 0;
      $72 = $$expand_i1_val22;
      $80 = 1;
      break;
     }
     $250 = $73;
     $251 = $f;
     __THREW__ = 0;
     (invoke_iid(536,($250|0),(+$251))|0);
     $252 = __THREW__; __THREW__ = 0;
     $253 = $252&1;
     if (!($253)) {
      $$expand_i1_val20 = 1;
      $72 = $$expand_i1_val20;
      $80 = 1;
      break;
     }
    }
    $254 = ___cxa_find_matching_catch()|0;
    $255 = tempRet0;
    $76 = $254;
    $77 = $255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($num_str);
    $258 = $76;
    $259 = $77;
    ___resumeException($258|0);
    // unreachable;
   }
  } while(0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($num_str);
  $$pre_trunc = $72;
  $257 = $$pre_trunc&1;
  STACKTOP = sp;return ($257|0);
 }
 }
 return (0)|0;
}
function __ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE4lineEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = $this;
 $8 = $7;
 $9 = (($8) + 12|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&1;
 if ($11) {
  $12 = (($8) + 12|0);
  HEAP8[$12>>0] = 0;
  $13 = (($8) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $6 = $14;
  $41 = $6;
  STACKTOP = sp;return ($41|0);
 }
 $15 = (($8) + 4|0);
 $4 = $8;
 $5 = $15;
 $16 = $4;
 $3 = $16;
 $17 = $3;
 $18 = HEAP32[$17>>2]|0;
 $19 = $5;
 $2 = $19;
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = ($18|0)==($21|0);
 if ($22) {
  $23 = (($8) + 8|0);
  HEAP32[$23>>2] = -1;
  $6 = -1;
  $41 = $6;
  STACKTOP = sp;return ($41|0);
 }
 $24 = (($8) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(10);
 if ($26) {
  $27 = (($8) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  HEAP32[$27>>2] = $29;
 }
 $0 = $8;
 $30 = $0;
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP8[$31>>0]|0;
 $33 = $32 << 24 >> 24;
 $34 = $33 & 255;
 $35 = (($8) + 8|0);
 HEAP32[$35>>2] = $34;
 $1 = $8;
 $36 = $1;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1|0);
 HEAP32[$36>>2] = $38;
 $39 = (($8) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $6 = $40;
 $41 = $6;
 STACKTOP = sp;return ($41|0);
}
function __ZNK8picojson5inputINSt3__111__wrap_iterIPKcEEE3curEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$1+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE7skip_wsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 while(1) {
  $2 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($1)|0);
  $ch = $2;
  $3 = $ch;
  $4 = ($3|0)==(32);
  if (!($4)) {
   $5 = $ch;
   $6 = ($5|0)==(9);
   if (!($6)) {
    $7 = $ch;
    $8 = ($7|0)==(10);
    if (!($8)) {
     $9 = $ch;
     $10 = ($9|0)==(13);
     if (!($10)) {
      break;
     }
    }
   }
  }
 }
 __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($1);
 STACKTOP = sp;return;
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE5matchERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$pattern) {
 $this = $this|0;
 $pattern = $pattern|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pi = sp + 4|0;
 $51 = sp;
 $49 = $this;
 $50 = $pattern;
 $52 = $49;
 $53 = $50;
 $47 = $53;
 $54 = $47;
 $46 = $54;
 $55 = $46;
 $45 = $55;
 $56 = $45;
 $44 = $56;
 $57 = $44;
 $43 = $57;
 $58 = $43;
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 & 1;
 $62 = ($61|0)!=(0);
 if ($62) {
  $37 = $55;
  $63 = $37;
  $36 = $63;
  $64 = $36;
  $35 = $64;
  $65 = $35;
  $66 = (($65) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $74 = $67;
 } else {
  $42 = $55;
  $68 = $42;
  $41 = $68;
  $69 = $41;
  $40 = $69;
  $70 = $40;
  $71 = (($70) + 1|0);
  $39 = $71;
  $72 = $39;
  $38 = $72;
  $73 = $38;
  $74 = $73;
 }
 $33 = $pi;
 $34 = $74;
 $75 = $33;
 $76 = $34;
 HEAP32[$75>>2] = $76;
 while(1) {
  $77 = $50;
  $31 = $77;
  $78 = $31;
  $30 = $78;
  $79 = $30;
  $29 = $79;
  $80 = $29;
  $28 = $80;
  $81 = $28;
  $27 = $81;
  $82 = $27;
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = $84 & 1;
  $86 = ($85|0)!=(0);
  if ($86) {
   $21 = $79;
   $87 = $21;
   $20 = $87;
   $88 = $20;
   $19 = $88;
   $89 = $19;
   $90 = (($89) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $118 = $91;
  } else {
   $26 = $79;
   $92 = $26;
   $25 = $92;
   $93 = $25;
   $24 = $93;
   $94 = $24;
   $95 = (($94) + 1|0);
   $23 = $95;
   $96 = $23;
   $22 = $96;
   $97 = $22;
   $118 = $97;
  }
  $16 = $78;
  $98 = $16;
  $15 = $98;
  $99 = $15;
  $14 = $99;
  $100 = $14;
  $13 = $100;
  $101 = $13;
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = $103 & 1;
  $105 = ($104|0)!=(0);
  if ($105) {
   $9 = $98;
   $106 = $9;
   $8 = $106;
   $107 = $8;
   $7 = $107;
   $108 = $7;
   $109 = (($108) + 4|0);
   $110 = HEAP32[$109>>2]|0;
   $119 = $110;
  } else {
   $12 = $98;
   $111 = $12;
   $11 = $111;
   $112 = $11;
   $10 = $112;
   $113 = $10;
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = $115 >> 1;
   $119 = $116;
  }
  $117 = (($118) + ($119)|0);
  $17 = $51;
  $18 = $117;
  $120 = $17;
  $121 = $18;
  HEAP32[$120>>2] = $121;
  $4 = $pi;
  $5 = $51;
  $122 = $4;
  $123 = $5;
  $2 = $122;
  $3 = $123;
  $124 = $2;
  $1 = $124;
  $125 = $1;
  $126 = HEAP32[$125>>2]|0;
  $127 = $3;
  $0 = $127;
  $128 = $0;
  $129 = HEAP32[$128>>2]|0;
  $130 = ($126|0)==($129|0);
  $131 = $130 ^ 1;
  if (!($131)) {
   label = 16;
   break;
  }
  $132 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($52)|0);
  $6 = $pi;
  $133 = $6;
  $134 = HEAP32[$133>>2]|0;
  $135 = HEAP8[$134>>0]|0;
  $136 = $135 << 24 >> 24;
  $137 = ($132|0)!=($136|0);
  if ($137) {
   label = 13;
   break;
  }
  $32 = $pi;
  $138 = $32;
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + 1|0);
  HEAP32[$138>>2] = $140;
 }
 if ((label|0) == 13) {
  __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($52);
  $$expand_i1_val = 0;
  $48 = $$expand_i1_val;
  $$pre_trunc = $48;
  $141 = $$pre_trunc&1;
  STACKTOP = sp;return ($141|0);
 }
 else if ((label|0) == 16) {
  $$expand_i1_val2 = 1;
  $48 = $$expand_i1_val2;
  $$pre_trunc = $48;
  $141 = $$pre_trunc&1;
  STACKTOP = sp;return ($141|0);
 }
 return (0)|0;
}
function __ZN8picojson21default_parse_context8set_nullEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 __ZN8picojson5valueC2Ev($1);
 __THREW__ = 0;
 (invoke_iii(440,($5|0),($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8picojson5valueD2Ev($1);
  STACKTOP = sp;return 1;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 __ZN8picojson5valueD2Ev($1);
 $10 = $2;
 $11 = $3;
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson21default_parse_context8set_boolEb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $5 = $b&1;
 $1 = $5;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $8&1;
 __ZN8picojson5valueC2Eb($2,$9);
 __THREW__ = 0;
 (invoke_iii(440,($7|0),($2|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  __ZN8picojson5valueD2Ev($2);
  STACKTOP = sp;return 1;
 }
 $12 = ___cxa_find_matching_catch()|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN8picojson5valueD2Ev($2);
 $14 = $3;
 $15 = $4;
 ___resumeException($14|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson21default_parse_context12parse_stringINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EE($this,$in) {
 $this = $this|0;
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $in;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 __ZN8picojson5valueC2Eib($2,3,0);
 __THREW__ = 0;
 (invoke_iii(440,($6|0),($2|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  __ZN8picojson5valueD2Ev($2);
  $9 = HEAP32[$5>>2]|0;
  $10 = (__ZN8picojson5value3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEERT_v($9)|0);
  $11 = $1;
  $12 = (__ZN8picojson13_parse_stringINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($10,$11)|0);
  STACKTOP = sp;return ($12|0);
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $3 = $13;
 $4 = $14;
 __ZN8picojson5valueD2Ev($2);
 $15 = $3;
 $16 = $4;
 ___resumeException($15|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson12_parse_arrayINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($ctx,$in) {
 $ctx = $ctx|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $ctx;
 $2 = $in;
 $3 = $1;
 $4 = (__ZN8picojson21default_parse_context17parse_array_startEv($3)|0);
 do {
  if ($4) {
   $idx = 0;
   $5 = $2;
   $6 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($5,93)|0);
   if ($6) {
    $7 = $1;
    $8 = $idx;
    $9 = (__ZN8picojson21default_parse_context16parse_array_stopEj($7,$8)|0);
    $$expand_i1_val2 = $9&1;
    $0 = $$expand_i1_val2;
    break;
   }
   while(1) {
    $10 = $1;
    $11 = $2;
    $12 = $idx;
    $13 = (__ZN8picojson21default_parse_context16parse_array_itemINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EEj($10,$11,$12)|0);
    if (!($13)) {
     label = 7;
     break;
    }
    $14 = $idx;
    $15 = (($14) + 1)|0;
    $idx = $15;
    $16 = $2;
    $17 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($16,44)|0);
    if (!($17)) {
     break;
    }
   }
   if ((label|0) == 7) {
    $$expand_i1_val4 = 0;
    $0 = $$expand_i1_val4;
    break;
   }
   $18 = $2;
   $19 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($18,93)|0);
   if ($19) {
    $20 = $1;
    $21 = $idx;
    $22 = (__ZN8picojson21default_parse_context16parse_array_stopEj($20,$21)|0);
    $23 = $22;
   } else {
    $23 = 0;
   }
   $$expand_i1_val6 = $23&1;
   $0 = $$expand_i1_val6;
  } else {
   $$expand_i1_val = 0;
   $0 = $$expand_i1_val;
  }
 } while(0);
 $$pre_trunc = $0;
 $24 = $$pre_trunc&1;
 STACKTOP = sp;return ($24|0);
}
function __ZN8picojson13_parse_objectINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($ctx,$in) {
 $ctx = $ctx|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $cleanup$dest = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $key = sp + 12|0;
 $9 = $ctx;
 $10 = $in;
 $14 = $9;
 $15 = (__ZN8picojson21default_parse_context18parse_object_startEv($14)|0);
 if (!($15)) {
  $$expand_i1_val = 0;
  $8 = $$expand_i1_val;
  $$pre_trunc = $8;
  $55 = $$pre_trunc&1;
  STACKTOP = sp;return ($55|0);
 }
 $16 = $10;
 $17 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($16,125)|0);
 if ($17) {
  $$expand_i1_val2 = 1;
  $8 = $$expand_i1_val2;
  $$pre_trunc = $8;
  $55 = $$pre_trunc&1;
  STACKTOP = sp;return ($55|0);
 }
 L9: while(1) {
  $7 = $key;
  $18 = $7;
  $6 = $18;
  $19 = $6;
  $5 = $19;
  $20 = $5;
  $4 = $20;
  $21 = $4;
  $3 = $21;
  $2 = $19;
  $22 = $2;
  $1 = $22;
  $23 = $1;
  $0 = $23;
  $24 = $0;
  $__a$i$i$i = $24;
  $__i$i$i$i = 0;
  while(1) {
   $25 = $__i$i$i$i;
   $26 = ($25>>>0)<(3);
   if (!($26)) {
    break;
   }
   $27 = $__i$i$i$i;
   $28 = $__a$i$i$i;
   $29 = (($28) + ($27<<2)|0);
   HEAP32[$29>>2] = 0;
   $30 = $__i$i$i$i;
   $31 = (($30) + 1)|0;
   $__i$i$i$i = $31;
  }
  $32 = $10;
  __THREW__ = 0;
  $33 = (invoke_iii(537,($32|0),34)|0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   label = 16;
   break;
  }
  do {
   if ($33) {
    $36 = $10;
    __THREW__ = 0;
    $37 = (invoke_iii(538,($key|0),($36|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     label = 16;
     break L9;
    }
    if ($37) {
     $40 = $10;
     __THREW__ = 0;
     $41 = (invoke_iii(537,($40|0),58)|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      label = 16;
      break L9;
     }
     if ($41) {
      $46 = $9;
      $47 = $10;
      __THREW__ = 0;
      $48 = (invoke_iiii(539,($46|0),($47|0),($key|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 16;
       break L9;
      }
      if ($48) {
       $13 = 0;
       break;
      } else {
       $$expand_i1_val6 = 0;
       $8 = $$expand_i1_val6;
       $13 = 1;
       break;
      }
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
   } else {
    label = 15;
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   $$expand_i1_val4 = 0;
   $8 = $$expand_i1_val4;
   $13 = 1;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key);
  $cleanup$dest = $13;
  if ((($cleanup$dest|0) == 1)) {
   label = 25;
   break;
  } else if (!((($cleanup$dest|0) == 0))) {
   label = 27;
   break;
  }
  $51 = $10;
  $52 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($51,44)|0);
  if (!($52)) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 16) {
  $44 = ___cxa_find_matching_catch()|0;
  $45 = tempRet0;
  $11 = $44;
  $12 = $45;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($key);
  $56 = $11;
  $57 = $12;
  ___resumeException($56|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $53 = $10;
  $54 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($53,125)|0);
  $$expand_i1_val8 = $54&1;
  $8 = $$expand_i1_val8;
  $$pre_trunc = $8;
  $55 = $$pre_trunc&1;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 25) {
  $$pre_trunc = $8;
  $55 = $$pre_trunc&1;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 27) {
  // unreachable;
 }
 return (0)|0;
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(-1);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = (($3) + 12|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&1;
 if (!($9)) {
  $15 = (($3) + 12|0);
  HEAP8[$15>>0] = 1;
  STACKTOP = sp;return;
 }
 $10 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($10|0),(1920|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if (!($12)) {
  ___cxa_throw(($10|0),(15440|0),(381|0));
  // unreachable;
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $1 = $13;
 $2 = $14;
 ___cxa_free_exception(($10|0));
 $16 = $1;
 $17 = $2;
 ___resumeException($16|0);
 // unreachable;
}
function __ZN8picojson13_parse_numberINSt3__111__wrap_iterIPKcEEEENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERNS_5inputIT_EE($agg$result,$in) {
 $agg$result = $agg$result|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $in;
 $$expand_i1_val = 0;
 $11 = $$expand_i1_val;
 $9 = $agg$result;
 $15 = $9;
 $8 = $15;
 $16 = $8;
 $7 = $16;
 $17 = $7;
 $6 = $17;
 $18 = $6;
 $5 = $18;
 $4 = $16;
 $19 = $4;
 $3 = $19;
 $20 = $3;
 $2 = $20;
 $21 = $2;
 $__a$i$i$i = $21;
 $__i$i$i$i = 0;
 while(1) {
  $22 = $__i$i$i$i;
  $23 = ($22>>>0)<(3);
  if (!($23)) {
   break;
  }
  $24 = $__i$i$i$i;
  $25 = $__a$i$i$i;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = $__i$i$i$i;
  $28 = (($27) + 1)|0;
  $__i$i$i$i = $28;
 }
 while(1) {
  $29 = $10;
  __THREW__ = 0;
  $30 = (invoke_ii(540,($29|0))|0);
  $31 = __THREW__; __THREW__ = 0;
  $32 = $31&1;
  if ($32) {
   break;
  }
  $ch = $30;
  $33 = $ch;
  $34 = (48)<=($33|0);
  if ($34) {
   $35 = $ch;
   $36 = ($35|0)<=(57);
   if ($36) {
    label = 13;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $37 = $ch;
   $38 = ($37|0)==(43);
   if ($38) {
    label = 13;
   } else {
    $39 = $ch;
    $40 = ($39|0)==(45);
    if ($40) {
     label = 13;
    } else {
     $41 = $ch;
     $42 = ($41|0)==(101);
     if ($42) {
      label = 13;
     } else {
      $43 = $ch;
      $44 = ($43|0)==(69);
      if ($44) {
       label = 13;
      } else {
       $51 = $ch;
       $52 = ($51|0)==(46);
       if (!($52)) {
        label = 21;
        break;
       }
       __THREW__ = 0;
       $53 = (invoke_i(542)|0);
       $54 = __THREW__; __THREW__ = 0;
       $55 = $54&1;
       if ($55) {
        break;
       }
       $56 = HEAP32[$53>>2]|0;
       $0 = $agg$result;
       $1 = $56;
       $57 = $0;
       $58 = $1;
       __THREW__ = 0;
       (invoke_iii(527,($57|0),($58|0))|0);
       $59 = __THREW__; __THREW__ = 0;
       $60 = $59&1;
       if ($60) {
        break;
       }
      }
     }
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $45 = $ch;
   $46 = $45&255;
   __THREW__ = 0;
   invoke_vii(541,($agg$result|0),($46|0));
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    break;
   }
  }
 }
 if ((label|0) == 21) {
  $61 = $10;
  __THREW__ = 0;
  invoke_vi(543,($61|0));
  $62 = __THREW__; __THREW__ = 0;
  $63 = $62&1;
  if (!($63)) {
   $$expand_i1_val2 = 1;
   $11 = $$expand_i1_val2;
   $14 = 1;
   $$pre_trunc = $11;
   $64 = $$pre_trunc&1;
   if ($64) {
    STACKTOP = sp;return;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   STACKTOP = sp;return;
  }
 }
 $49 = ___cxa_find_matching_catch()|0;
 $50 = tempRet0;
 $12 = $49;
 $13 = $50;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
 $65 = $12;
 $66 = $13;
 ___resumeException($65|0);
 // unreachable;
}
function __ZN8picojson21default_parse_context10set_numberEd($this,$f) {
 $this = $this|0;
 $f = +$f;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $f;
 $5 = $0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 __ZN8picojson5valueC2Ed($2,$7);
 __THREW__ = 0;
 (invoke_iii(440,($6|0),($2|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __ZN8picojson5valueD2Ev($2);
  STACKTOP = sp;return 1;
 }
 $10 = ___cxa_find_matching_catch()|0;
 $11 = tempRet0;
 $3 = $10;
 $4 = $11;
 __ZN8picojson5valueD2Ev($2);
 $12 = $3;
 $13 = $4;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson21default_parse_context18parse_object_startEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 __ZN8picojson5valueC2Eib($1,5,0);
 __THREW__ = 0;
 (invoke_iii(440,($5|0),($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8picojson5valueD2Ev($1);
  STACKTOP = sp;return 1;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 __ZN8picojson5valueD2Ev($1);
 $10 = $2;
 $11 = $3;
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi($this,$expect) {
 $this = $this|0;
 $expect = $expect|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $expect;
 $3 = $1;
 __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE7skip_wsEv($3);
 $4 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($3)|0);
 $5 = $2;
 $6 = ($4|0)!=($5|0);
 if ($6) {
  __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($3);
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $7 = $$pre_trunc&1;
  STACKTOP = sp;return ($7|0);
 } else {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $7 = $$pre_trunc&1;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZN8picojson13_parse_stringINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in;
 L1: while(1) {
  $3 = $2;
  $4 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($3)|0);
  $ch = $4;
  $5 = $ch;
  $6 = ($5|0)<(32);
  if ($6) {
   label = 3;
   break;
  }
  $8 = $ch;
  $9 = ($8|0)==(34);
  if ($9) {
   label = 5;
   break;
  }
  $10 = $ch;
  $11 = ($10|0)==(92);
  if ($11) {
   $12 = $2;
   $13 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($12)|0);
   $ch = $13;
   $14 = ($13|0)==(-1);
   if ($14) {
    label = 8;
    break;
   }
   $15 = $ch;
   switch ($15|0) {
   case 110:  {
    $21 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($21,10);
    break;
   }
   case 116:  {
    $23 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($23,9);
    break;
   }
   case 117:  {
    $24 = $1;
    $25 = $2;
    $26 = (__ZN8picojson16_parse_codepointINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($24,$25)|0);
    if (!($26)) {
     label = 19;
     break L1;
    }
    break;
   }
   case 98:  {
    $19 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($19,8);
    break;
   }
   case 102:  {
    $20 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($20,12);
    break;
   }
   case 92:  {
    $17 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($17,92);
    break;
   }
   case 114:  {
    $22 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($22,13);
    break;
   }
   case 34:  {
    $16 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($16,34);
    break;
   }
   case 47:  {
    $18 = $1;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($18,47);
    break;
   }
   default: {
    label = 21;
    break L1;
   }
   }
  } else {
   $27 = $1;
   $28 = $ch;
   $29 = $28&255;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($27,$29);
  }
 }
 if ((label|0) == 3) {
  $7 = $2;
  __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($7);
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 5) {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 8) {
  $$expand_i1_val4 = 0;
  $0 = $$expand_i1_val4;
  $$pre_trunc = $0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 19) {
  $$expand_i1_val6 = 0;
  $0 = $$expand_i1_val6;
  $$pre_trunc = $0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 else if ((label|0) == 21) {
  $$expand_i1_val8 = 0;
  $0 = $$expand_i1_val8;
  $$pre_trunc = $0;
  $30 = $$pre_trunc&1;
  STACKTOP = sp;return ($30|0);
 }
 return (0)|0;
}
function __ZN8picojson21default_parse_context17parse_object_itemINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$in,$key) {
 $this = $this|0;
 $in = $in|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ctx = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ctx = sp;
 $0 = $this;
 $1 = $in;
 $2 = $key;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN8picojson5value3getINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEERT_v($4)|0);
 $o = $5;
 $6 = $o;
 $7 = $2;
 $8 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_($6,$7)|0);
 __ZN8picojson21default_parse_contextC2EPNS_5valueE($ctx,$8);
 $9 = $1;
 $10 = (__ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($ctx,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN8picojson16_parse_codepointINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($out,$in) {
 $out = $out|0;
 $in = $in|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $8 = 0, $9 = 0, $second = 0, $uni_ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in;
 $3 = $2;
 $4 = (__ZN8picojson14_parse_quadhexINSt3__111__wrap_iterIPKcEEEEiRNS_5inputIT_EE($3)|0);
 $uni_ch = $4;
 $5 = ($4|0)==(-1);
 if ($5) {
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $75 = $$pre_trunc&1;
  STACKTOP = sp;return ($75|0);
 }
 $6 = $uni_ch;
 $7 = (55296)<=($6|0);
 do {
  if ($7) {
   $8 = $uni_ch;
   $9 = ($8|0)<=(57343);
   if ($9) {
    $10 = $uni_ch;
    $11 = (56320)<=($10|0);
    if ($11) {
     $$expand_i1_val2 = 0;
     $0 = $$expand_i1_val2;
     $$pre_trunc = $0;
     $75 = $$pre_trunc&1;
     STACKTOP = sp;return ($75|0);
    }
    $12 = $2;
    $13 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($12)|0);
    $14 = ($13|0)!=(92);
    if (!($14)) {
     $15 = $2;
     $16 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($15)|0);
     $17 = ($16|0)!=(117);
     if (!($17)) {
      $19 = $2;
      $20 = (__ZN8picojson14_parse_quadhexINSt3__111__wrap_iterIPKcEEEEiRNS_5inputIT_EE($19)|0);
      $second = $20;
      $21 = $second;
      $22 = (56320)<=($21|0);
      if ($22) {
       $23 = $second;
       $24 = ($23|0)<=(57343);
       if ($24) {
        $25 = $uni_ch;
        $26 = (($25) - 55296)|0;
        $27 = $26 << 10;
        $28 = $second;
        $29 = (($28) - 56320)|0;
        $30 = $29 & 1023;
        $31 = $27 | $30;
        $uni_ch = $31;
        $32 = $uni_ch;
        $33 = (($32) + 65536)|0;
        $uni_ch = $33;
        break;
       }
      }
      $$expand_i1_val6 = 0;
      $0 = $$expand_i1_val6;
      $$pre_trunc = $0;
      $75 = $$pre_trunc&1;
      STACKTOP = sp;return ($75|0);
     }
    }
    $18 = $2;
    __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($18);
    $$expand_i1_val4 = 0;
    $0 = $$expand_i1_val4;
    $$pre_trunc = $0;
    $75 = $$pre_trunc&1;
    STACKTOP = sp;return ($75|0);
   }
  }
 } while(0);
 $34 = $uni_ch;
 $35 = ($34|0)<(128);
 if ($35) {
  $36 = $1;
  $37 = $uni_ch;
  $38 = $37&255;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($36,$38);
 } else {
  $39 = $uni_ch;
  $40 = ($39|0)<(2048);
  if ($40) {
   $41 = $1;
   $42 = $uni_ch;
   $43 = $42 >> 6;
   $44 = 192 | $43;
   $45 = $44&255;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($41,$45);
  } else {
   $46 = $uni_ch;
   $47 = ($46|0)<(65536);
   if ($47) {
    $48 = $1;
    $49 = $uni_ch;
    $50 = $49 >> 12;
    $51 = 224 | $50;
    $52 = $51&255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($48,$52);
   } else {
    $53 = $1;
    $54 = $uni_ch;
    $55 = $54 >> 18;
    $56 = 240 | $55;
    $57 = $56&255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($53,$57);
    $58 = $1;
    $59 = $uni_ch;
    $60 = $59 >> 12;
    $61 = $60 & 63;
    $62 = 128 | $61;
    $63 = $62&255;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($58,$63);
   }
   $64 = $1;
   $65 = $uni_ch;
   $66 = $65 >> 6;
   $67 = $66 & 63;
   $68 = 128 | $67;
   $69 = $68&255;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($64,$69);
  }
  $70 = $1;
  $71 = $uni_ch;
  $72 = $71 & 63;
  $73 = 128 | $72;
  $74 = $73&255;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($70,$74);
 }
 $$expand_i1_val8 = 1;
 $0 = $$expand_i1_val8;
 $$pre_trunc = $0;
 $75 = $$pre_trunc&1;
 STACKTOP = sp;return ($75|0);
}
function __ZN8picojson14_parse_quadhexINSt3__111__wrap_iterIPKcEEEEiRNS_5inputIT_EE($in) {
 $in = $in|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hex = 0, $i = 0, $uni_ch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $in;
 $uni_ch = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(4);
  if (!($3)) {
   label = 19;
   break;
  }
  $4 = $1;
  $5 = (__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv($4)|0);
  $hex = $5;
  $6 = ($5|0)==(-1);
  if ($6) {
   label = 4;
   break;
  }
  $7 = $hex;
  $8 = (48)<=($7|0);
  if ($8) {
   $9 = $hex;
   $10 = ($9|0)<=(57);
   if ($10) {
    $11 = $hex;
    $12 = (($11) - 48)|0;
    $hex = $12;
   } else {
    label = 8;
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $13 = $hex;
   $14 = (65)<=($13|0);
   if ($14) {
    $15 = $hex;
    $16 = ($15|0)<=(70);
    if ($16) {
     $17 = $hex;
     $18 = (($17) - 55)|0;
     $hex = $18;
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    label = 0;
    $19 = $hex;
    $20 = (97)<=($19|0);
    if (!($20)) {
     label = 14;
     break;
    }
    $21 = $hex;
    $22 = ($21|0)<=(102);
    if (!($22)) {
     label = 14;
     break;
    }
    $23 = $hex;
    $24 = (($23) - 87)|0;
    $hex = $24;
   }
  }
  $26 = $uni_ch;
  $27 = $26<<4;
  $28 = $hex;
  $29 = (($27) + ($28))|0;
  $uni_ch = $29;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 if ((label|0) == 4) {
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 14) {
  $25 = $1;
  __ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv($25);
  $0 = -1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 19) {
  $32 = $uni_ch;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZN8picojson5valueC2Eib($this,$type,$0) {
 $this = $this|0;
 $type = $type|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 84|0;
 $7 = sp + 72|0;
 $12 = sp;
 $14 = sp + 102|0;
 $15 = sp + 101|0;
 $24 = $this;
 $25 = $type;
 $27 = $0&1;
 $26 = $27;
 $28 = $24;
 $29 = $25;
 HEAP32[$28>>2] = $29;
 $30 = $25;
 switch ($30|0) {
 case 3:  {
  $33 = (__Znwj(12)|0);
  $23 = $33;
  $34 = $23;
  $22 = $34;
  $35 = $22;
  $21 = $35;
  $36 = $21;
  $20 = $36;
  $37 = $20;
  $19 = $37;
  $18 = $35;
  $38 = $18;
  $17 = $38;
  $39 = $17;
  $16 = $39;
  $40 = $16;
  $__a$i$i$i = $40;
  $__i$i$i$i = 0;
  while(1) {
   $41 = $__i$i$i$i;
   $42 = ($41>>>0)<(3);
   if (!($42)) {
    break;
   }
   $43 = $__i$i$i$i;
   $44 = $__a$i$i$i;
   $45 = (($44) + ($43<<2)|0);
   HEAP32[$45>>2] = 0;
   $46 = $__i$i$i$i;
   $47 = (($46) + 1)|0;
   $__i$i$i$i = $47;
  }
  $48 = (($28) + 8|0);
  HEAP32[$48>>2] = $33;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $49 = (__Znwj(12)|0);
  $10 = $49;
  $50 = $10;
  $9 = $50;
  $51 = $9;
  $8 = $51;
  HEAP32[$51>>2] = 0;
  $52 = (($51) + 4|0);
  HEAP32[$52>>2] = 0;
  $53 = (($51) + 8|0);
  $6 = $53;
  HEAP32[$7>>2] = 0;
  $54 = $6;
  $5 = $7;
  $55 = $5;
  $56 = HEAP32[$55>>2]|0;
  $3 = $54;
  HEAP32[$4>>2] = $56;
  $57 = $3;
  $2 = $57;
  $1 = $4;
  $58 = $1;
  $59 = HEAP32[$58>>2]|0;
  HEAP32[$57>>2] = $59;
  $60 = (($28) + 8|0);
  HEAP32[$60>>2] = $49;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $31 = (($28) + 8|0);
  HEAP8[$31>>0] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $61 = (__Znwj(12)|0);
  $13 = $61;
  $62 = $13;
  ;HEAP8[$12+0>>0]=HEAP8[$15+0>>0]|0;
  $11 = $14;
  __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSE_($62,$14);
  $63 = (($28) + 8|0);
  HEAP32[$63>>2] = $61;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $32 = (($28) + 8|0);
  HEAPF64[$32>>3] = 0.0;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN8picojson21default_parse_context17parse_array_startEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 __ZN8picojson5valueC2Eib($1,4,0);
 __THREW__ = 0;
 (invoke_iii(440,($5|0),($1|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZN8picojson5valueD2Ev($1);
  STACKTOP = sp;return 1;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $2 = $8;
 $3 = $9;
 __ZN8picojson5valueD2Ev($1);
 $10 = $2;
 $11 = $3;
 ___resumeException($10|0);
 // unreachable;
 return (0)|0;
}
function __ZN8picojson21default_parse_context16parse_array_stopEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return 1;
}
function __ZN8picojson21default_parse_context16parse_array_itemINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EEj($this,$in,$0) {
 $this = $this|0;
 $in = $in|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $__annotator$i = 0, $a = 0, $ctx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 16|0;
 $16 = sp + 145|0;
 $__annotator$i = sp + 144|0;
 $30 = sp;
 $ctx = sp + 20|0;
 $27 = $this;
 $28 = $in;
 $29 = $0;
 $33 = $27;
 $34 = HEAP32[$33>>2]|0;
 $35 = (__ZN8picojson5value3getINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEERT_v($34)|0);
 $a = $35;
 $36 = $a;
 __ZN8picojson5valueC2Ev($30);
 $25 = $36;
 $26 = $30;
 $37 = $25;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $24 = $37;
 $40 = $24;
 $41 = (($40) + 8|0);
 $23 = $41;
 $42 = $23;
 $22 = $42;
 $43 = $22;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($39>>>0)<($44>>>0);
 do {
  if ($45) {
   __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$37,1);
   $21 = $37;
   $46 = $21;
   $47 = (($46) + 8|0);
   $20 = $47;
   $48 = $20;
   $19 = $48;
   $49 = $19;
   $50 = (($37) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $17 = $51;
   $52 = $17;
   $53 = $26;
   $2 = $53;
   $54 = $2;
   $13 = $49;
   $14 = $52;
   $15 = $54;
   $55 = $13;
   $56 = $14;
   $57 = $15;
   $12 = $57;
   $58 = $12;
   ;HEAP8[$11+0>>0]=HEAP8[$16+0>>0]|0;
   $8 = $55;
   $9 = $56;
   $10 = $58;
   $59 = $8;
   $60 = $9;
   $61 = $10;
   $7 = $61;
   $62 = $7;
   $4 = $59;
   $5 = $60;
   $6 = $62;
   $63 = $5;
   $64 = ($63|0)==(0|0);
   if (!($64)) {
    $65 = $6;
    $3 = $65;
    $66 = $3;
    __THREW__ = 0;
    invoke_vii(444,($63|0),($66|0));
    $67 = __THREW__; __THREW__ = 0;
    $68 = $67&1;
    if ($68) {
     label = 10;
     break;
    }
   }
   __ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $69 = (($37) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 16|0);
   HEAP32[$69>>2] = $71;
   label = 8;
  } else {
   $72 = $26;
   $18 = $72;
   $73 = $18;
   __THREW__ = 0;
   invoke_vii(445,($37|0),($73|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    label = 10;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  __ZN8picojson5valueD2Ev($30);
  $76 = $a;
  $1 = $76;
  $77 = $1;
  $78 = (($77) + 4|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + -16|0);
  __ZN8picojson21default_parse_contextC2EPNS_5valueE($ctx,$80);
  $81 = $28;
  $82 = (__ZN8picojson6_parseINS_21default_parse_contextENSt3__111__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE($ctx,$81)|0);
  STACKTOP = sp;return ($82|0);
 }
 else if ((label|0) == 10) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  $31 = $83;
  $32 = $84;
  __ZN8picojson5valueD2Ev($30);
  $85 = $31;
  $86 = $32;
  ___resumeException($85|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZN8picojson5value3getINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEERT_v($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (__ZNK8picojson5value2isINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbv($3)|0);
 if ($4) {
  $10 = (($3) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $5 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($5|0),(1936|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  ___cxa_throw(($5|0),(15440|0),(381|0));
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 ___cxa_free_exception(($5|0));
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
 return (0)|0;
}
function __ZNK8picojson5value2isINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 STACKTOP = sp;return ($3|0);
}
function __ZN8picojson5valueC2Eb($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $2 = $b&1;
 $1 = $2;
 $3 = $0;
 HEAP32[$3>>2] = 1;
 $4 = $1;
 $5 = $4&1;
 $6 = (($3) + 8|0);
 $7 = $5&1;
 HEAP8[$6>>0] = $7;
 STACKTOP = sp;return;
}
function __GLOBAL__sub_I_main_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(2728,$0,2784);
 HEAP32[2016>>2] = ((4080 + 12|0));
 HEAP32[((2016 + 8|0))>>2] = ((4080 + 32|0));
 HEAP32[((2016 + 4|0))>>2] = 0;
 $1 = HEAP32[4080>>2]|0;
 $2 = (2016 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(544,($2|0),(2728|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((2016 + 8|0)));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (2016 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (2016 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(2832,$9,((2784 + 8|0)));
 HEAP32[2104>>2] = ((4160 + 12|0));
 HEAP32[((2104 + 4|0))>>2] = ((4160 + 32|0));
 $10 = HEAP32[4160>>2]|0;
 $11 = (2104 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(544,($11|0),(2832|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((2104 + 4|0)));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (2104 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (2104 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(2880,$18,((2784 + 16|0)));
 HEAP32[2192>>2] = ((4160 + 12|0));
 HEAP32[((2192 + 4|0))>>2] = ((4160 + 32|0));
 $19 = (2192 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(544,($19|0),(2880|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((2192 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (2192 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (2192 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[2192>>2]|0;
 $27 = (($26) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (2192 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[2280>>2] = ((4160 + 12|0));
 HEAP32[((2280 + 4|0))>>2] = ((4160 + 32|0));
 $31 = (2280 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(544,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((2280 + 4|0)));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (2280 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (2280 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[2016>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (2016 + ($$sum19)|0);
 HEAP32[$41>>2] = 2104;
 $42 = HEAP32[2192>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (2192 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[2192>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (2192 + ($$sum21)|0);
 HEAP32[$51>>2] = 2104;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(2928,$0,((2784 + 24|0)));
 HEAP32[2368>>2] = ((4120 + 12|0));
 HEAP32[((2368 + 8|0))>>2] = ((4120 + 32|0));
 HEAP32[((2368 + 4|0))>>2] = 0;
 $52 = HEAP32[4120>>2]|0;
 $53 = (2368 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(544,($53|0),(2928|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((2368 + 8|0)));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (2368 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (2368 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(2984,$9,((2784 + 32|0)));
 HEAP32[2456>>2] = ((4200 + 12|0));
 HEAP32[((2456 + 4|0))>>2] = ((4200 + 32|0));
 $60 = HEAP32[4200>>2]|0;
 $61 = (2456 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(544,($61|0),(2984|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((2456 + 4|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (2456 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (2456 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(3032,$18,((2784 + 40|0)));
 HEAP32[2544>>2] = ((4200 + 12|0));
 HEAP32[((2544 + 4|0))>>2] = ((4200 + 32|0));
 $68 = (2544 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(544,($68|0),(3032|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((2544 + 4|0)));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (2544 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (2544 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[2544>>2]|0;
 $76 = (($75) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (2544 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[2632>>2] = ((4200 + 12|0));
 HEAP32[((2632 + 4|0))>>2] = ((4200 + 32|0));
 $80 = (2632 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(544,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((2632 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (2632 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (2632 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[2368>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (2368 + ($$sum23)|0);
  HEAP32[$90>>2] = 2456;
  $91 = HEAP32[2544>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (2544 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[2544>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (2544 + ($$sum25)|0);
  HEAP32[$100>>2] = 2456;
  return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(545,(2104|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(545,(2280|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(546,(2456|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(546,(2632|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__114__shared_countD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __ZNSt3__119__shared_weak_countD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__119__shared_weak_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 return;
}
function __ZNSt3__119__shared_weak_count16__release_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__114__shared_count16__release_sharedEv($this)|0);
 if ($0) {
  __ZNSt3__119__shared_weak_count14__release_weakEv($this);
 }
 return;
}
function __ZNSt3__119__shared_weak_count14__release_weakEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[$this>>2]|0;
  $4 = (($3) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 1023]($this);
 }
 return;
}
function __ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15208 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(547,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15232 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(547,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15232 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(547,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = HEAP32[$condition>>2]|0;
  $11 = ($9|0)==($10|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = HEAP32[$code>>2]|0;
  $4 = ($3|0)==($condition|0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = HEAP8[$what_arg>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = $3&255;
    $9 = $8 >>> 1;
    $11 = $9;
   } else {
    $6 = (($what_arg) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $11 = $7;
   }
   $10 = ($11|0)==(0);
   if ($10) {
    $17 = $1;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,3704)|0);
    $$pre = HEAP32[$ec>>2]|0;
    $17 = $$pre;
   }
   $12 = (($ec) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 24|0);
   $16 = HEAP32[$15>>2]|0;
   FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
   $18 = HEAP8[$0>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $25 = (($0) + 1|0);
    $26 = $18&255;
    $27 = $26 >>> 1;
    $28 = $25;$29 = $27;
   } else {
    $21 = (($0) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    $28 = $22;$29 = $24;
   }
   __THREW__ = 0;
   (invoke_iiii(528,($what_arg|0),($28|0),($29|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    $32 = ___cxa_find_matching_catch()|0;
    $33 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    ___resumeException($32|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    break;
   }
  }
 } while(0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(548,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $$0 = $19;$$01 = $18;
  } else {
   __THREW__ = 0;
   invoke_vii(549,($this|0),($0|0));
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $20 = ___cxa_find_matching_catch()|0;
    $21 = tempRet0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    $$0 = $21;$$01 = $20;
    break;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
    HEAP32[$this>>2] = ((3712 + 8|0));
    $7 = (($this) + 8|0);
    $8 = $ec;
    $9 = $8;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($8) + 4)|0;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = $7;
    $15 = $14;
    HEAP32[$15>>2] = $10;
    $16 = (($14) + 4)|0;
    $17 = $16;
    HEAP32[$17>>2] = $13;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((3856|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((3880|0),(3856|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   HEAP32[$flag>>2] = 1;
   __THREW__ = 0;
   (invoke_ii(550,(3856|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if (!($7)) {
    __THREW__ = 0;
    invoke_vi($func|0,($arg|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(551,(3856|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[$flag>>2] = -1;
      __THREW__ = 0;
      (invoke_ii(550,(3856|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_ii(552,(3880|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        break;
       }
      }
     }
    }
   }
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   (___cxa_begin_catch(($16|0))|0);
   __THREW__ = 0;
   (invoke_ii(551,(3856|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if (!($19)) {
    HEAP32[$flag>>2] = 0;
    __THREW__ = 0;
    (invoke_ii(550,(3856|0))|0);
    $20 = __THREW__; __THREW__ = 0;
    $21 = $20&1;
    if (!($21)) {
     __THREW__ = 0;
     (invoke_ii(552,(3880|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if (!($23)) {
      __THREW__ = 0;
      invoke_v(479);
      $24 = __THREW__; __THREW__ = 0;
      $25 = $24&1;
      if (!($25)) {
       // unreachable;
      }
     }
    }
   }
   $26 = ___cxa_find_matching_catch()|0;
   $27 = tempRet0;
   __THREW__ = 0;
   invoke_v(480);
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   } else {
    ___resumeException($26|0);
    // unreachable;
   }
  } else {
   (_pthread_mutex_unlock((3856|0))|0);
  }
 } while(0);
 return;
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(424,($0|0),(3928|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15288 + 8|0));
  ___cxa_throw(($0|0),(15336|0),(378|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(424,($0|0),(3928|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15352 + 8|0));
  ___cxa_throw(($0|0),(15400|0),(378|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 1|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   _memmove(($14|0),($__s|0),($__n|0))|0;
   $15 = (($14) + ($__n)|0);
   HEAP8[$15>>0] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 do {
  if ($7) {
   $9 = (($__n) - ($8))|0;
   (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  } else {
   if ($2) {
    $14 = ((($this) + ($__n)|0) + 1|0);
    HEAP8[$14>>0] = 0;
    $15 = $__n << 1;
    $16 = $15&255;
    HEAP8[$this>>0] = $16;
    break;
   } else {
    $10 = (($this) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($11) + ($__n)|0);
    HEAP8[$12>>0] = 0;
    $13 = (($this) + 4|0);
    HEAP32[$13>>2] = $__n;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $15 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $15 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $16 = $13;
  } else {
   $10 = (($this) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $16 = $11;
  }
  $14 = (($15) - ($16))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($15))|0;
   $19 = (($18) + ($16))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = (($this) + 1|0);
   $27 = $25;
  } else {
   $23 = (($this) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($16)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($16) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = (($this) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(10);
   do {
    if ($23) {
     $24 = (($this) + 1|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = (($21) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(430,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = (($this) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = (($this) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = (($this) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($21) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = (($this) + 4|0);
    HEAP32[$50>>2] = $15;
    $51 = (($this) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $15 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0)|0);
 HEAP8[$__p$0>>0] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
 HEAP8[$22>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = (($this) + 1|0);
    $24 = $22;
   } else {
    $20 = (($this) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($15)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($15) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = (($this) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if (!($27)) {
  __ZdlPv($19);
 }
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if (!($25)) {
  __ZdlPv($19);
 }
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this,$__pos,$__s,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $13 = 10;$17 = $0;
 } else {
  $9 = HEAP32[$this>>2]|0;
  $10 = $9 & -2;
  $phitmp$i = (($10) + -1)|0;
  $11 = $9&255;
  $13 = $phitmp$i;$17 = $11;
 }
 $12 = (($13) - ($8))|0;
 $14 = ($12>>>0)<($__n>>>0);
 if ($14) {
  $38 = (($8) + ($__n))|0;
  $39 = (($38) - ($13))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$13,$39,$8,$__pos,0,$__n,$__s);
 } else {
  $15 = ($__n|0)==(0);
  if (!($15)) {
   $16 = $17 & 1;
   $18 = ($16<<24>>24)==(0);
   if ($18) {
    $21 = (($this) + 1|0);
    $24 = $21;
   } else {
    $19 = (($this) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $24 = $20;
   }
   $22 = (($8) - ($__pos))|0;
   $23 = ($8|0)==($__pos|0);
   $$pre = (($24) + ($__pos)|0);
   if ($23) {
    $$1 = $__s;
   } else {
    $25 = ($$pre>>>0)<=($__s>>>0);
    $26 = (($24) + ($8)|0);
    $27 = ($26>>>0)>($__s>>>0);
    $or$cond = $25 & $27;
    if ($or$cond) {
     $28 = (($__s) + ($__n)|0);
     $$0 = $28;
    } else {
     $$0 = $__s;
    }
    $$sum = (($__n) + ($__pos))|0;
    $29 = (($24) + ($$sum)|0);
    _memmove(($29|0),($$pre|0),($22|0))|0;
    $$1 = $$0;
   }
   _memmove(($$pre|0),($$1|0),($__n|0))|0;
   $30 = (($8) + ($__n))|0;
   $31 = HEAP8[$this>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $35 = $30 << 1;
    $36 = $35&255;
    HEAP8[$this>>0] = $36;
   } else {
    $34 = (($this) + 4|0);
    HEAP32[$34>>2] = $30;
   }
   $37 = (($24) + ($30)|0);
   HEAP8[$37>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc($this,$__pos,$__s) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKcj($this,$__pos,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 do {
  if ($6) {
   if ($10) {
    $24 = $9&255;
    $25 = $24 >>> 1;
    $27 = $25;
   } else {
    $22 = (($this) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $27 = $23;
   }
   $26 = (($__n) - ($7))|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  } else {
   if ($10) {
    $13 = (($this) + 4|0);
    $14 = $13;
   } else {
    $11 = (($this) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $14 = $12;
   }
   (_wmemmove($14,$__s,$__n)|0);
   $15 = (($14) + ($__n<<2)|0);
   HEAP32[$15>>2] = 0;
   $16 = HEAP8[$this>>0]|0;
   $17 = $16 & 1;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $20 = $__n << 1;
    $21 = $20&255;
    HEAP8[$this>>0] = $21;
    break;
   } else {
    $19 = (($this) + 4|0);
    HEAP32[$19>>2] = $__n;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 var $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 L14: do {
  if (!($20)) {
   $23 = ($21|0)==(1);
   do {
    if ($23) {
     $24 = (($this) + 4|0);
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($21>>>0)>($22>>>0);
     $28 = $21 << 2;
     $29 = (($28) + 4)|0;
     if ($27) {
      $30 = (__Znwj($29)|0);
      $$sink = $30;
     } else {
      __THREW__ = 0;
      $31 = (invoke_ii(430,($29|0))|0);
      $32 = __THREW__; __THREW__ = 0;
      $33 = $32&1;
      if ($33) {
       $34 = ___cxa_find_matching_catch(0|0)|0;
       $35 = tempRet0;
       (___cxa_begin_catch(($34|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $$sink = $31;
      }
     }
     $36 = $8 & 1;
     $37 = ($36<<24>>24)==(0);
     if ($37) {
      $40 = (($this) + 4|0);
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
      break;
     } else {
      $38 = (($this) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $41 = $8 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $45 = $8&255;
    $46 = $45 >>> 1;
    $48 = $46;
   } else {
    $43 = (($this) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $48 = $44;
   }
   $47 = (($48) + 1)|0;
   (_wmemcpy($__new_data$1,$__p$0,$47)|0);
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $49 = (($21) + 1)|0;
    $50 = $49 | 1;
    HEAP32[$this>>2] = $50;
    $51 = (($this) + 4|0);
    HEAP32[$51>>2] = $15;
    $52 = (($this) + 8|0);
    HEAP32[$52>>2] = $__new_data$1;
    break;
   } else {
    $53 = $15 << 1;
    $54 = $53&255;
    HEAP8[$this>>0] = $54;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
 }
 $__p$0 = (($$pn) + ($__sz$0<<2)|0);
 HEAP32[$__p$0>>2] = $__c;
 $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
 HEAP32[$22>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if (!($26)) {
  __ZdlPv($20);
 }
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 return;
}
function __ZNSt3__19to_stringEi($agg$result,$val) {
 $agg$result = $agg$result|0;
 $val = $val|0;
 var $$ = 0, $$lcssa = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available$0$i = 0, $available$0$ph$i = 0, $available$1$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($0|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($3|0);
  // unreachable;
 }
 $5 = HEAP8[$0>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $available$0$ph$i = $11;
 } else {
  $8 = (($0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $available$0$ph$i = $9;
 }
 $12 = (($0) + 1|0);
 $13 = (($0) + 8|0);
 $15 = $5;$available$0$i = $available$0$ph$i;
 while(1) {
  $14 = $15 & 1;
  $16 = ($14<<24>>24)==(0);
  $17 = HEAP32[$13>>2]|0;
  $$ = $16 ? $12 : $17;
  $18 = (($available$0$i) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $val;
  $19 = (_snprintf($$,$18,3944,$vararg_buffer)|0);
  $20 = ($19|0)>(-1);
  if ($20) {
   $21 = ($19>>>0)>($available$0$i>>>0);
   if ($21) {
    $available$1$i = $19;
   } else {
    $$lcssa = $19;
    label = 9;
    break;
   }
  } else {
   $24 = $available$0$i << 1;
   $25 = $24 | 1;
   $available$1$i = $25;
  }
  __THREW__ = 0;
  invoke_viii(553,($0|0),($available$1$i|0),0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 14;
   break;
  }
  $$pre$i = HEAP8[$0>>0]|0;
  $15 = $$pre$i;$available$0$i = $available$1$i;
 }
 do {
  if ((label|0) == 9) {
   __THREW__ = 0;
   invoke_viii(553,($0|0),($$lcssa|0),0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $30 = ___cxa_find_matching_catch()|0;
    $31 = tempRet0;
    $lpad$phi$index = $30;$lpad$phi$index2 = $31;
    break;
   } else {
    ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
    ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
    STACKTOP = sp;return;
   }
  }
  else if ((label|0) == 14) {
   $28 = ___cxa_find_matching_catch()|0;
   $29 = tempRet0;
   $lpad$phi$index = $28;$lpad$phi$index2 = $29;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $$state = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = $3&1;
 $$state = $4 | $state;
 $5 = (($this) + 16|0);
 HEAP32[$5>>2] = $$state;
 $6 = $3&1;
 $7 = $6 | $state;
 $8 = (($this) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $7 & $9;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $13 = $0;
 $14 = $13;
 HEAP32[$14>>2] = 1;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = (4296);
 __THREW__ = 0;
 invoke_viii(554,($12|0),(4352|0),($0|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if ($18) {
  $19 = ___cxa_find_matching_catch()|0;
  $20 = tempRet0;
  ___cxa_free_exception(($12|0));
  ___resumeException($19|0);
  // unreachable;
 } else {
  ___cxa_throw(($12|0),(4400|0),(119|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4336 + 8|0));
 __THREW__ = 0;
 invoke_vii(555,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($this) + 32|0);
  $4 = (($this) + 36|0);
  $i$01 = $1;
  while(1) {
   $5 = (($i$01) + -1)|0;
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$4>>2]|0;
   $10 = (($9) + ($5<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
   $12 = ($5|0)==(0);
   if ($12) {
    break;
   } else {
    $i$01 = $5;
   }
  }
 }
 return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3952 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3952 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3952 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((3952 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0;
 var $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 12|0);
  $2 = (($this) + 16|0);
  $$01 = $__s;$__i$02 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = (($3) + 1|0);
    HEAP32[$1>>2] = $6;
    $7 = HEAP8[$3>>0]|0;
    $storemerge = $7;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $__i$0$lcssa$ph = $__i$02;
     break;
    }
    $13 = $11&255;
    $storemerge = $13;
   }
   HEAP8[$$01>>0] = $storemerge;
   $14 = (($__i$02) + 1)|0;
   $15 = (($$01) + 1|0);
   $16 = ($14|0)<($__n|0);
   if ($16) {
    $$01 = $15;$__i$02 = $14;
   } else {
    $__i$0$lcssa$ph = $14;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = (($this) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $$0 = $9;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$0$lcssa$ph = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 24|0);
  $2 = (($this) + 28|0);
  $$02 = $__s;$__i$01 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = HEAP8[$$02>>0]|0;
    $7 = (($3) + 1|0);
    HEAP32[$1>>2] = $7;
    HEAP8[$3>>0] = $6;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 52|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP8[$$02>>0]|0;
    $12 = $11&255;
    $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     $__i$0$lcssa$ph = $__i$01;
     break;
    }
   }
   $15 = (($$02) + 1|0);
   $16 = (($__i$01) + 1)|0;
   $17 = ($16|0)<($__n|0);
   if ($17) {
    $$02 = $15;$__i$01 = $16;
   } else {
    $__i$0$lcssa$ph = $16;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4016 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4016 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4016 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((4016 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 12|0);
  $2 = (($this) + 16|0);
  $$01 = $__s;$__i$02 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = (($3) + 4|0);
    HEAP32[$1>>2] = $6;
    $7 = HEAP32[$3>>2]|0;
    $storemerge = $7;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 40|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $__i$0$lcssa$ph = $__i$02;
     break;
    } else {
     $storemerge = $11;
    }
   }
   HEAP32[$$01>>2] = $storemerge;
   $13 = (($__i$02) + 1)|0;
   $14 = (($$01) + 4|0);
   $15 = ($13|0)<($__n|0);
   if ($15) {
    $$01 = $14;$__i$02 = $13;
   } else {
    $__i$0$lcssa$ph = $13;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
 } else {
  $5 = (($this) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 4|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP32[$6>>2]|0;
  $$0 = $8;
 }
 return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$0$lcssa$ph = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if ($0) {
  $1 = (($this) + 24|0);
  $2 = (($this) + 28|0);
  $$02 = $__s;$__i$01 = 0;
  while(1) {
   $3 = HEAP32[$1>>2]|0;
   $4 = HEAP32[$2>>2]|0;
   $5 = ($3>>>0)<($4>>>0);
   if ($5) {
    $6 = HEAP32[$$02>>2]|0;
    $7 = (($3) + 4|0);
    HEAP32[$1>>2] = $7;
    HEAP32[$3>>2] = $6;
   } else {
    $8 = HEAP32[$this>>2]|0;
    $9 = (($8) + 52|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$$02>>2]|0;
    $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $__i$0$lcssa$ph = $__i$01;
     break;
    }
   }
   $14 = (($$02) + 4|0);
   $15 = (($__i$01) + 1)|0;
   $16 = ($15|0)<($__n|0);
   if ($16) {
    $$02 = $14;$__i$01 = $15;
   } else {
    $__i$0$lcssa$ph = $15;
    break;
   }
  }
  $__i$0$lcssa = $__i$0$lcssa$ph;
 } else {
  $__i$0$lcssa = 0;
 }
 return ($__i$0$lcssa|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(556,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = (($10) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = (($22) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(523,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = (($35) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(524,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(480);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 L1: do {
  if (!($5)) {
   __THREW__ = 0;
   invoke_vii(557,($__s|0),($this|0));
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     $31 = ___cxa_find_matching_catch(0|0)|0;
     $32 = tempRet0;
     $$0 = $31;
    } else {
     $8 = HEAP8[$__s>>0]|0;
     $9 = ($8<<24>>24)==(0);
     do {
      if (!($9)) {
       $10 = HEAP32[$this>>2]|0;
       $11 = (($10) + -12|0);
       $12 = HEAP32[$11>>2]|0;
       $$sum1 = (($12) + 24)|0;
       $13 = (($this) + ($$sum1)|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = HEAP32[$14>>2]|0;
       $16 = (($15) + 24|0);
       $17 = HEAP32[$16>>2]|0;
       __THREW__ = 0;
       $18 = (invoke_ii($17|0,($14|0))|0);
       $19 = __THREW__; __THREW__ = 0;
       $20 = $19&1;
       if (!($20)) {
        $21 = ($18|0)==(-1);
        if (!($21)) {
         break;
        }
        $22 = HEAP32[$this>>2]|0;
        $23 = (($22) + -12|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($this) + ($24)|0);
        $$sum2 = (($24) + 16)|0;
        $26 = (($this) + ($$sum2)|0);
        $27 = HEAP32[$26>>2]|0;
        $28 = $27 | 1;
        __THREW__ = 0;
        invoke_vii(523,($25|0),($28|0));
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if (!($30)) {
         break;
        }
       }
       $33 = ___cxa_find_matching_catch(0|0)|0;
       $34 = tempRet0;
       __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
       $$0 = $33;
       break L3;
      }
     } while(0);
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     break L1;
    }
   } while(0);
   (___cxa_begin_catch(($$0|0))|0);
   $35 = HEAP32[$this>>2]|0;
   $36 = (($35) + -12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($this) + ($37)|0);
   __THREW__ = 0;
   invoke_vi(524,($38|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if (!($40)) {
    ___cxa_end_catch();
    break;
   }
   $41 = ___cxa_find_matching_catch()|0;
   $42 = tempRet0;
   __THREW__ = 0;
   invoke_v(480);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    $45 = ___cxa_find_matching_catch(0|0)|0;
    $46 = tempRet0;
    ___clang_call_terminate($45);
    // unreachable;
   } else {
    ___resumeException($41|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = (($22) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(523,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(480);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(556,($__s|0),($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   $$0 = $33;$$pre$phi4Z2D = $this;$$pre$phiZ2D = $this;
   label = 12;
  } else {
   $2 = HEAP8[$__s>>0]|0;
   $3 = ($2<<24>>24)==(0);
   do {
    if (!($3)) {
     $4 = HEAP32[$this>>2]|0;
     $5 = (($4) + -12|0);
     $6 = HEAP32[$5>>2]|0;
     $$sum$i = (($6) + 24)|0;
     $7 = (($this) + ($$sum$i)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $25 = $4;
      label = 9;
     } else {
      $10 = (($8) + 24|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = (($8) + 28|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($11|0)==($13|0);
      if (!($14)) {
       $15 = (($11) + 1|0);
       HEAP32[$10>>2] = $15;
       HEAP8[$11>>0] = $__c;
       break;
      }
      $16 = HEAP32[$8>>2]|0;
      $17 = (($16) + 52|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $__c&255;
      __THREW__ = 0;
      $20 = (invoke_iii($18|0,($8|0),($19|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $23 = ($20|0)==(-1);
       if (!($23)) {
        break;
       }
       $$pre = HEAP32[$this>>2]|0;
       $25 = $$pre;
       label = 9;
      }
     }
     if ((label|0) == 9) {
      $24 = (($25) + -12|0);
      $26 = HEAP32[$24>>2]|0;
      $27 = (($this) + ($26)|0);
      $$sum = (($26) + 16)|0;
      $28 = (($this) + ($$sum)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $29 | 1;
      __THREW__ = 0;
      invoke_vii(523,($27|0),($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if (!($32)) {
       break;
      }
     }
     $35 = ___cxa_find_matching_catch(0|0)|0;
     $36 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $35;$$pre$phi4Z2D = $this;$$pre$phiZ2D = $this;
     label = 12;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   (___cxa_begin_catch(($$0|0))|0);
   $37 = HEAP32[$$pre$phiZ2D>>2]|0;
   $38 = (($37) + -12|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($$pre$phi4Z2D) + ($39)|0);
   __THREW__ = 0;
   invoke_vi(524,($40|0));
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    ___cxa_end_catch();
    break;
   }
   $43 = ___cxa_find_matching_catch()|0;
   $44 = tempRet0;
   __THREW__ = 0;
   invoke_v(480);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $47 = ___cxa_find_matching_catch(0|0)|0;
    $48 = tempRet0;
    ___clang_call_terminate($47);
    // unreachable;
   } else {
    ___resumeException($43|0);
    // unreachable;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$sum1 = (($3) + 72)|0;
  $7 = (($__os) + ($$sum1)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
  }
  HEAP8[$this>>0] = 1;
 }
 return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 do {
  if (!($7)) {
   $$sum1 = (($4) + 16)|0;
   $8 = (($1) + ($$sum1)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $$sum2 = (($4) + 4)|0;
    $11 = (($1) + ($$sum2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 8192;
    $14 = ($13|0)==(0);
    if (!($14)) {
     $15 = (__ZSt18uncaught_exceptionv()|0);
     if (!($15)) {
      $16 = HEAP32[$0>>2]|0;
      $17 = HEAP32[$16>>2]|0;
      $18 = (($17) + -12|0);
      $19 = HEAP32[$18>>2]|0;
      $$sum3 = (($19) + 24)|0;
      $20 = (($16) + ($$sum3)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = HEAP32[$21>>2]|0;
      $23 = (($22) + 24|0);
      $24 = HEAP32[$23>>2]|0;
      __THREW__ = 0;
      $25 = (invoke_ii($24|0,($21|0))|0);
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = ($25|0)==(-1);
       if (!($28)) {
        break;
       }
       $29 = HEAP32[$0>>2]|0;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + -12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($29) + ($32)|0);
       $$sum4 = (($32) + 16)|0;
       $34 = (($29) + ($$sum4)|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = $35 | 1;
       __THREW__ = 0;
       invoke_vii(523,($33|0),($36|0));
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if (!($38)) {
        break;
       }
      }
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      (___cxa_begin_catch(($39|0))|0);
      __THREW__ = 0;
      invoke_v(480);
      $41 = __THREW__; __THREW__ = 0;
      $42 = $41&1;
      if ($42) {
       $43 = ___cxa_find_matching_catch(0|0)|0;
       $44 = tempRet0;
       ___clang_call_terminate($43);
       // unreachable;
      }
     }
    }
   }
  }
 } while(0);
 return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (4240|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,4256,35);
 }
 return;
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4304>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((4304|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[4296>>2] = ((4992 + 8|0));
   (___cxa_atexit((123|0),(4296|0),(___dso_handle|0))|0);
   ___cxa_guard_release((4304|0));
  }
 }
 return (4296|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((4312 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$0$ph = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 8;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0$ph = 1;
     label = 9;
     break;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$lcssa = $6;
     label = 7;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    label = 8;
    break;
   }
   else if ((label|0) == 9) {
    $$0 = $$0$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP8[$__p$01>>0]|0;
   $3 = $2 << 24 >> 24;
   $4 = (($3) + ($1))|0;
   $5 = $4 & -268435456;
   $6 = $5 >>> 24;
   $7 = $6 | $5;
   $8 = $7 ^ $4;
   $9 = (($__p$01) + 1|0);
   $10 = ($9|0)==($__hi|0);
   if ($10) {
    $$lcssa = $8;
    break;
   } else {
    $__h$02 = $8;$__p$01 = $9;
   }
  }
  $__h$0$lcssa = $$lcssa;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$0$ph = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 8;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0$ph = -1;
     label = 9;
     break;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0$ph = 1;
     label = 9;
     break;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$lcssa = $6;
     label = 7;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
   if ((label|0) == 7) {
    $$02$lcssa = $$lcssa;
    label = 8;
    break;
   }
   else if ((label|0) == 9) {
    $$0 = $$0$ph;
    break;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
  while(1) {
   $1 = $__h$02 << 4;
   $2 = HEAP32[$__p$01>>2]|0;
   $3 = (($2) + ($1))|0;
   $4 = $3 & -268435456;
   $5 = $4 >>> 24;
   $6 = $5 | $4;
   $7 = $6 ^ $3;
   $8 = (($__p$01) + 4|0);
   $9 = ($8|0)==($__hi|0);
   if ($9) {
    $$lcssa = $7;
    break;
   } else {
    $__h$02 = $7;$__p$01 = $8;
   }
  }
  $__h$0$lcssa = $$lcssa;
 }
 return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   HEAP32[$__lv>>2] = -1;
   $10 = HEAP32[$this>>2]|0;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$__b>>2]|0;
   HEAP32[$1>>2] = $13;
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $14;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
   $15 = HEAP32[$0>>2]|0;
   HEAP32[$__b>>2] = $15;
   $16 = HEAP32[$__lv>>2]|0;
   if ((($16|0) == 1)) {
    HEAP8[$__v>>0] = 1;
   } else if ((($16|0) == 0)) {
    HEAP8[$__v>>0] = 0;
   } else {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   HEAP32[$agg$result>>2] = $15;
  } else {
   __ZNKSt3__18ios_base6getlocEv($3,$__iob);
   __THREW__ = 0;
   $17 = (invoke_iii(422,($3|0),(6720|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $$0 = $45;$$01 = $46;
    } else {
     $20 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     __ZNKSt3__18ios_base6getlocEv($4,$__iob);
     __THREW__ = 0;
     $21 = (invoke_iii(422,($4|0),(6864|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $48 = ___cxa_find_matching_catch()|0;
      $49 = tempRet0;
      $50 = HEAP32[$4>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
      $$0 = $48;$$01 = $49;
      break;
     }
     $24 = HEAP32[$4>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
     $25 = HEAP32[$21>>2]|0;
     $26 = (($25) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     invoke_vii($27|0,($__names|0),($21|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $$02 = $__names;
     } else {
      $30 = (($__names) + 12|0);
      $31 = HEAP32[$21>>2]|0;
      $32 = (($31) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      invoke_vii($33|0,($30|0),($21|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $$02 = $30;
      } else {
       $36 = HEAP32[$__e>>2]|0;
       HEAP32[$5>>2] = $36;
       $37 = (($__names) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
       $38 = (invoke_iiiiiiii(558,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $59 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
        $$0 = $57;$$01 = $58;
        break;
       } else {
        $41 = ($38|0)==($__names|0);
        $42 = $41&1;
        HEAP8[$__v>>0] = $42;
        $43 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $43;
        $44 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
        break L1;
       }
      }
     }
     $51 = ___cxa_find_matching_catch()|0;
     $52 = tempRet0;
     $53 = ($__names|0)==($$02|0);
     if ($53) {
      $$0 = $51;$$01 = $52;
     } else {
      $55 = $$02;
      while(1) {
       $54 = (($55) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
       $56 = ($54|0)==($__names|0);
       if ($56) {
        break;
       } else {
        $55 = $54;
       }
      }
      $$0 = $51;$$01 = $52;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(521,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $85;$$01 = $86;
  } else {
   __THREW__ = 0;
   $3 = (invoke_iii(422,($0|0),(6720|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + 32|0);
    $8 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($8|0,($3|0),(5232|0),(((5232 + 26|0))|0),($__atoms|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),10,0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     L6: do {
      if ($13) {
       label = 39;
      } else {
       $14 = HEAP8[$__buf>>0]|0;
       $15 = $14 & 1;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $19 = (($__buf) + 1|0);
        $$pre36 = (($__buf) + 8|0);
        $$pre$phi35Z2D = $19;$$pre$phi37Z2D = $$pre36;$20 = $19;
       } else {
        $17 = (($__buf) + 8|0);
        $18 = HEAP32[$17>>2]|0;
        $$pre34 = (($__buf) + 1|0);
        $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $17;$20 = $18;
       }
       HEAP32[$__a_end>>2] = $20;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $21 = (($__buf) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i8 = $$pre;$__a$0 = $20;
       L12: while(1) {
        $22 = ($$pre$i$i$i8|0)==(0|0);
        if ($22) {
         $36 = 0;
        } else {
         $23 = (($$pre$i$i$i8) + 12|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($$pre$i$i$i8) + 16|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($24|0)==($26|0);
         if ($27) {
          $28 = HEAP32[$$pre$i$i$i8>>2]|0;
          $29 = (($28) + 36|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           label = 38;
           break;
          }
          $34 = ($31|0)==(-1);
          if ($34) {
           HEAP32[$__b>>2] = 0;
           $36 = 0;
          } else {
           $36 = $$pre$i$i$i8;
          }
         } else {
          $36 = $$pre$i$i$i8;
         }
        }
        $35 = ($36|0)==(0|0);
        $37 = HEAP32[$__e>>2]|0;
        $38 = ($37|0)==(0|0);
        do {
         if ($38) {
          label = 20;
         } else {
          $39 = (($37) + 12|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = (($37) + 16|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($40|0)==($42|0);
          if (!($43)) {
           if ($35) {
            $168 = $37;
            break;
           } else {
            $$lcssa = $36;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
            break L12;
           }
          }
          $44 = HEAP32[$37>>2]|0;
          $45 = (($44) + 36|0);
          $46 = HEAP32[$45>>2]|0;
          __THREW__ = 0;
          $47 = (invoke_ii($46|0,($37|0))|0);
          $48 = __THREW__; __THREW__ = 0;
          $49 = $48&1;
          if ($49) {
           label = 38;
           break L12;
          }
          $50 = ($47|0)==(-1);
          if ($50) {
           HEAP32[$__e>>2] = 0;
           label = 20;
           break;
          } else {
           if ($35) {
            $168 = $37;
            break;
           } else {
            $$lcssa = $36;$$pre$i2$i$i = $37;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 20) {
         label = 0;
         if ($35) {
          $$lcssa = $36;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $51 = HEAP32[$__a_end>>2]|0;
        $52 = HEAP8[$__buf>>0]|0;
        $53 = $52 & 1;
        $54 = ($53<<24>>24)==(0);
        if ($54) {
         $56 = $52&255;
         $57 = $56 >>> 1;
         $59 = $57;
        } else {
         $55 = HEAP32[$21>>2]|0;
         $59 = $55;
        }
        $58 = (($__a$0) + ($59)|0);
        $60 = ($51|0)==($58|0);
        if ($60) {
         if ($54) {
          $62 = $52&255;
          $63 = $62 >>> 1;
          $64 = $52&255;
          $65 = $64 >>> 1;
          $67 = $65;$84 = $63;
         } else {
          $61 = HEAP32[$21>>2]|0;
          $67 = $61;$84 = $61;
         }
         $66 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(553,($__buf|0),($66|0),0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          label = 38;
          break;
         }
         $70 = HEAP8[$__buf>>0]|0;
         $71 = $70 & 1;
         $72 = ($71<<24>>24)==(0);
         if ($72) {
          $75 = 10;
         } else {
          $73 = HEAP32[$__buf>>2]|0;
          $74 = $73 & -2;
          $phitmp$i24 = (($74) + -1)|0;
          $75 = $phitmp$i24;
         }
         __THREW__ = 0;
         invoke_viii(553,($__buf|0),($75|0),0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          label = 38;
          break;
         }
         $78 = HEAP8[$__buf>>0]|0;
         $79 = $78 & 1;
         $80 = ($79<<24>>24)==(0);
         if ($80) {
          $83 = $$pre$phi35Z2D;
         } else {
          $81 = HEAP32[$$pre$phi37Z2D>>2]|0;
          $83 = $81;
         }
         $82 = (($83) + ($84)|0);
         HEAP32[$__a_end>>2] = $82;
         $__a$1 = $83;
        } else {
         $__a$1 = $__a$0;
        }
        $94 = (($36) + 12|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = (($36) + 16|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($95|0)==($97|0);
        if ($98) {
         $99 = HEAP32[$36>>2]|0;
         $100 = (($99) + 36|0);
         $101 = HEAP32[$100>>2]|0;
         __THREW__ = 0;
         $102 = (invoke_ii($101|0,($36|0))|0);
         $103 = __THREW__; __THREW__ = 0;
         $104 = $103&1;
         if ($104) {
          label = 38;
          break;
         } else {
          $$0$i$i = $102;
         }
        } else {
         $105 = HEAP8[$95>>0]|0;
         $106 = $105&255;
         $$0$i$i = $106;
        }
        $107 = $$0$i$i&255;
        $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $109 = ($108|0)==(0);
        if (!($109)) {
         $$lcssa = $36;$$pre$i2$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $110 = HEAP32[$94>>2]|0;
        $111 = HEAP32[$96>>2]|0;
        $112 = ($110|0)==($111|0);
        if ($112) {
         $113 = HEAP32[$36>>2]|0;
         $114 = (($113) + 40|0);
         $115 = HEAP32[$114>>2]|0;
         __THREW__ = 0;
         (invoke_ii($115|0,($36|0))|0);
         $116 = __THREW__; __THREW__ = 0;
         $117 = $116&1;
         if ($117) {
          label = 38;
          break;
         }
        } else {
         $118 = (($110) + 1|0);
         HEAP32[$94>>2] = $118;
        }
        $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
       }
       if ((label|0) == 38) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $lpad$phi$index = $90;$lpad$phi$index2 = $91;
        break;
       }
       $119 = HEAP32[$__a_end>>2]|0;
       $120 = $119;
       $121 = $__a$2;
       $122 = (($120) - ($121))|0;
       __THREW__ = 0;
       invoke_viii(553,($__buf|0),($122|0),0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 39;
       } else {
        $125 = HEAP8[$__buf>>0]|0;
        $126 = $125 & 1;
        $127 = ($126<<24>>24)==(0);
        if ($127) {
         $132 = $$pre$phi35Z2D;
        } else {
         $128 = HEAP32[$$pre$phi37Z2D>>2]|0;
         $132 = $128;
        }
        __THREW__ = 0;
        $129 = (invoke_i(559)|0);
        $130 = __THREW__; __THREW__ = 0;
        $131 = $130&1;
        if ($131) {
         label = 39;
        } else {
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $133 = (invoke_iiiii(560,($132|0),($129|0),(5272|0),($vararg_buffer|0))|0);
         $134 = __THREW__; __THREW__ = 0;
         $135 = $134&1;
         if ($135) {
          label = 39;
         } else {
          $136 = ($133|0)==(1);
          if (!($136)) {
           HEAP32[$__err>>2] = 4;
          }
          $137 = ($$lcssa|0)==(0|0);
          if ($137) {
           $151 = 0;
          } else {
           $138 = (($$lcssa) + 12|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = (($$lcssa) + 16|0);
           $141 = HEAP32[$140>>2]|0;
           $142 = ($139|0)==($141|0);
           if ($142) {
            $143 = HEAP32[$$lcssa>>2]|0;
            $144 = (($143) + 36|0);
            $145 = HEAP32[$144>>2]|0;
            __THREW__ = 0;
            $146 = (invoke_ii($145|0,($$lcssa|0))|0);
            $147 = __THREW__; __THREW__ = 0;
            $148 = $147&1;
            if ($148) {
             label = 39;
             break;
            }
            $149 = ($146|0)==(-1);
            if ($149) {
             HEAP32[$__b>>2] = 0;
             $151 = 0;
            } else {
             $151 = $$lcssa;
            }
           } else {
            $151 = $$lcssa;
           }
          }
          $150 = ($151|0)==(0|0);
          $152 = ($$pre$i2$i$i|0)==(0|0);
          do {
           if ($152) {
            label = 67;
           } else {
            $153 = (($$pre$i2$i$i) + 12|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = (($$pre$i2$i$i) + 16|0);
            $156 = HEAP32[$155>>2]|0;
            $157 = ($154|0)==($156|0);
            if (!($157)) {
             if ($150) {
              break;
             } else {
              label = 69;
              break;
             }
            }
            $158 = HEAP32[$$pre$i2$i$i>>2]|0;
            $159 = (($158) + 36|0);
            $160 = HEAP32[$159>>2]|0;
            __THREW__ = 0;
            $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
            $162 = __THREW__; __THREW__ = 0;
            $163 = $162&1;
            if ($163) {
             label = 39;
             break L6;
            }
            $164 = ($161|0)==(-1);
            if ($164) {
             HEAP32[$__e>>2] = 0;
             label = 67;
             break;
            } else {
             $165 = ($$pre$i2$i$i|0)==(0|0);
             $tmp$i$i = $150 ^ $165;
             if ($tmp$i$i) {
              break;
             } else {
              label = 69;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 67) {
           if ($150) {
            label = 69;
           }
          }
          if ((label|0) == 69) {
           $166 = HEAP32[$__err>>2]|0;
           $167 = $166 | 2;
           HEAP32[$__err>>2] = $167;
          }
          HEAP32[$agg$result>>2] = $151;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 39) {
      $92 = ___cxa_find_matching_catch()|0;
      $93 = tempRet0;
      $lpad$phi$index = $92;$lpad$phi$index2 = $93;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $89 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
   $$0 = $87;$$01 = $88;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $18 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $18 = $14;
   }
   $17 = ($18|0)!=(0);
   $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   $or$cond = $17 & $19;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 26|0);
   $$01$i = $__atoms;
   while(1) {
    $30 = HEAP8[$$01$i>>0]|0;
    $31 = ($30<<24>>24)==($__ct<<24>>24);
    $29 = (($$01$i) + 1|0);
    if ($31) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $28 = ($29|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$01$i = $29;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = ($34|0)>(23);
   if ($35) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $36 = ($34|0)<($__base|0);
     if (!($36)) {
      $$0 = -1;
      break;
     }
    } else if ((($__base|0) == 16)) {
     $37 = ($34|0)<(22);
     if (!($37)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $38 = $0;
      $39 = $__a;
      $40 = (($38) - ($39))|0;
      $41 = ($40|0)<(3);
      if (!($41)) {
       $$0 = -1;
       break;
      }
      $42 = (($0) + -1|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(48);
      if (!($44)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $45 = (5232 + ($34)|0);
      $46 = HEAP8[$45>>0]|0;
      $47 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $47;
      HEAP8[$0>>0] = $46;
      $$0 = 0;
      break;
     }
    }
    $48 = (5232 + ($34)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $50;
    HEAP8[$0>>0] = $49;
    $51 = HEAP32[$__dc>>2]|0;
    $52 = (($51) + 1)|0;
    HEAP32[$__dc>>2] = $52;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6616>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6616|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(561,2147483647,(6624|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((6616|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[6608>>2] = $4;
     ___cxa_guard_release((6616|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[6608>>2]|0;
 return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 64|0;
 $$byval_copy1 = sp + 60|0;
 $$byval_copy = sp + 56|0;
 $__lv = sp + 52|0;
 $0 = sp + 48|0;
 $1 = sp + 44|0;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $__names = sp + 8|0;
 $5 = sp;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 L1: do {
  if ($9) {
   HEAP32[$__lv>>2] = -1;
   $10 = HEAP32[$this>>2]|0;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$__b>>2]|0;
   HEAP32[$1>>2] = $13;
   $14 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $14;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
   $15 = HEAP32[$0>>2]|0;
   HEAP32[$__b>>2] = $15;
   $16 = HEAP32[$__lv>>2]|0;
   if ((($16|0) == 0)) {
    HEAP8[$__v>>0] = 0;
   } else if ((($16|0) == 1)) {
    HEAP8[$__v>>0] = 1;
   } else {
    HEAP8[$__v>>0] = 1;
    HEAP32[$__err>>2] = 4;
   }
   HEAP32[$agg$result>>2] = $15;
  } else {
   __ZNKSt3__18ios_base6getlocEv($3,$__iob);
   __THREW__ = 0;
   $17 = (invoke_iii(422,($3|0),(6712|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   do {
    if ($19) {
     $45 = ___cxa_find_matching_catch()|0;
     $46 = tempRet0;
     $47 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
     $$0 = $45;$$01 = $46;
    } else {
     $20 = HEAP32[$3>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
     __ZNKSt3__18ios_base6getlocEv($4,$__iob);
     __THREW__ = 0;
     $21 = (invoke_iii(422,($4|0),(6872|0))|0);
     $22 = __THREW__; __THREW__ = 0;
     $23 = $22&1;
     if ($23) {
      $48 = ___cxa_find_matching_catch()|0;
      $49 = tempRet0;
      $50 = HEAP32[$4>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
      $$0 = $48;$$01 = $49;
      break;
     }
     $24 = HEAP32[$4>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
     $25 = HEAP32[$21>>2]|0;
     $26 = (($25) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     __THREW__ = 0;
     invoke_vii($27|0,($__names|0),($21|0));
     $28 = __THREW__; __THREW__ = 0;
     $29 = $28&1;
     if ($29) {
      $$02 = $__names;
     } else {
      $30 = (($__names) + 12|0);
      $31 = HEAP32[$21>>2]|0;
      $32 = (($31) + 28|0);
      $33 = HEAP32[$32>>2]|0;
      __THREW__ = 0;
      invoke_vii($33|0,($30|0),($21|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       $$02 = $30;
      } else {
       $36 = HEAP32[$__e>>2]|0;
       HEAP32[$5>>2] = $36;
       $37 = (($__names) + 24|0);
       __THREW__ = 0;
       ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
       $38 = (invoke_iiiiiiii(562,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
       $39 = __THREW__; __THREW__ = 0;
       $40 = $39&1;
       if ($40) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $59 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
        $$0 = $57;$$01 = $58;
        break;
       } else {
        $41 = ($38|0)==($__names|0);
        $42 = $41&1;
        HEAP8[$__v>>0] = $42;
        $43 = HEAP32[$__b>>2]|0;
        HEAP32[$agg$result>>2] = $43;
        $44 = (($__names) + 12|0);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
        break L1;
       }
      }
     }
     $51 = ___cxa_find_matching_catch()|0;
     $52 = tempRet0;
     $53 = ($__names|0)==($$02|0);
     if ($53) {
      $$0 = $51;$$01 = $52;
     } else {
      $55 = $$02;
      while(1) {
       $54 = (($55) + -12|0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
       $56 = ($54|0)==($__names|0);
       if ($56) {
        break;
       } else {
        $55 = $54;
       }
      }
      $$0 = $51;$$01 = $52;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 196|0;
 $0 = sp + 192|0;
 $__buf = sp + 180|0;
 $__a_end = sp + 176|0;
 $__g = sp + 16|0;
 $__g_end = sp + 8|0;
 $__dc = sp + 4|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(521,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if ($2) {
   $85 = ___cxa_find_matching_catch()|0;
   $86 = tempRet0;
   $$0 = $85;$$01 = $86;
  } else {
   __THREW__ = 0;
   $3 = (invoke_iii(422,($0|0),(6712|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    $6 = HEAP32[$3>>2]|0;
    $7 = (($6) + 48|0);
    $8 = HEAP32[$7>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($8|0,($3|0),(5232|0),(((5232 + 26|0))|0),($__atoms|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if (!($10)) {
     $11 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
     ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),10,0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     L6: do {
      if ($13) {
       label = 40;
      } else {
       $14 = HEAP8[$__buf>>0]|0;
       $15 = $14 & 1;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $19 = (($__buf) + 1|0);
        $$pre39 = (($__buf) + 8|0);
        $$pre$phi38Z2D = $19;$$pre$phi40Z2D = $$pre39;$20 = $19;
       } else {
        $17 = (($__buf) + 8|0);
        $18 = HEAP32[$17>>2]|0;
        $$pre37 = (($__buf) + 1|0);
        $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $17;$20 = $18;
       }
       HEAP32[$__a_end>>2] = $20;
       HEAP32[$__g_end>>2] = $__g;
       HEAP32[$__dc>>2] = 0;
       $21 = (($__buf) + 4|0);
       $$pre = HEAP32[$__b>>2]|0;
       $$pre$i$i$i9 = $$pre;$__a$0 = $20;
       L12: while(1) {
        $22 = ($$pre$i$i$i9|0)==(0|0);
        if ($22) {
         $167 = 1;$95 = 0;
        } else {
         $23 = (($$pre$i$i$i9) + 12|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($$pre$i$i$i9) + 16|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($24|0)==($26|0);
         if ($27) {
          $28 = HEAP32[$$pre$i$i$i9>>2]|0;
          $29 = (($28) + 36|0);
          $30 = HEAP32[$29>>2]|0;
          __THREW__ = 0;
          $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
          $32 = __THREW__; __THREW__ = 0;
          $33 = $32&1;
          if ($33) {
           label = 39;
           break;
          } else {
           $$0$i$i$i$i7 = $31;
          }
         } else {
          $34 = HEAP32[$24>>2]|0;
          $$0$i$i$i$i7 = $34;
         }
         $35 = ($$0$i$i$i$i7|0)==(-1);
         if ($35) {
          HEAP32[$__b>>2] = 0;
          $167 = 1;$95 = 0;
         } else {
          $167 = 0;$95 = $$pre$i$i$i9;
         }
        }
        $36 = HEAP32[$__e>>2]|0;
        $37 = ($36|0)==(0|0);
        do {
         if ($37) {
          label = 21;
         } else {
          $38 = (($36) + 12|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($36) + 16|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = ($39|0)==($41|0);
          if ($42) {
           $43 = HEAP32[$36>>2]|0;
           $44 = (($43) + 36|0);
           $45 = HEAP32[$44>>2]|0;
           __THREW__ = 0;
           $46 = (invoke_ii($45|0,($36|0))|0);
           $47 = __THREW__; __THREW__ = 0;
           $48 = $47&1;
           if ($48) {
            label = 39;
            break L12;
           } else {
            $$0$i$i1$i$i13 = $46;
           }
          } else {
           $49 = HEAP32[$39>>2]|0;
           $$0$i$i1$i$i13 = $49;
          }
          $50 = ($$0$i$i1$i$i13|0)==(-1);
          if ($50) {
           HEAP32[$__e>>2] = 0;
           label = 21;
           break;
          } else {
           if ($167) {
            $168 = $36;
            break;
           } else {
            $$lcssa = $95;$$pre$i3$i$i = $36;$__a$2 = $__a$0;
            break L12;
           }
          }
         }
        } while(0);
        if ((label|0) == 21) {
         label = 0;
         if ($167) {
          $$lcssa = $95;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
          break;
         } else {
          $168 = 0;
         }
        }
        $51 = HEAP32[$__a_end>>2]|0;
        $52 = HEAP8[$__buf>>0]|0;
        $53 = $52 & 1;
        $54 = ($53<<24>>24)==(0);
        if ($54) {
         $56 = $52&255;
         $57 = $56 >>> 1;
         $59 = $57;
        } else {
         $55 = HEAP32[$21>>2]|0;
         $59 = $55;
        }
        $58 = (($__a$0) + ($59)|0);
        $60 = ($51|0)==($58|0);
        if ($60) {
         if ($54) {
          $62 = $52&255;
          $63 = $62 >>> 1;
          $64 = $52&255;
          $65 = $64 >>> 1;
          $67 = $65;$84 = $63;
         } else {
          $61 = HEAP32[$21>>2]|0;
          $67 = $61;$84 = $61;
         }
         $66 = $67 << 1;
         __THREW__ = 0;
         invoke_viii(553,($__buf|0),($66|0),0);
         $68 = __THREW__; __THREW__ = 0;
         $69 = $68&1;
         if ($69) {
          label = 39;
          break;
         }
         $70 = HEAP8[$__buf>>0]|0;
         $71 = $70 & 1;
         $72 = ($71<<24>>24)==(0);
         if ($72) {
          $75 = 10;
         } else {
          $73 = HEAP32[$__buf>>2]|0;
          $74 = $73 & -2;
          $phitmp$i28 = (($74) + -1)|0;
          $75 = $phitmp$i28;
         }
         __THREW__ = 0;
         invoke_viii(553,($__buf|0),($75|0),0);
         $76 = __THREW__; __THREW__ = 0;
         $77 = $76&1;
         if ($77) {
          label = 39;
          break;
         }
         $78 = HEAP8[$__buf>>0]|0;
         $79 = $78 & 1;
         $80 = ($79<<24>>24)==(0);
         if ($80) {
          $83 = $$pre$phi38Z2D;
         } else {
          $81 = HEAP32[$$pre$phi40Z2D>>2]|0;
          $83 = $81;
         }
         $82 = (($83) + ($84)|0);
         HEAP32[$__a_end>>2] = $82;
         $__a$1 = $83;
        } else {
         $__a$1 = $__a$0;
        }
        $94 = (($95) + 12|0);
        $96 = HEAP32[$94>>2]|0;
        $97 = (($95) + 16|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = ($96|0)==($98|0);
        if ($99) {
         $100 = HEAP32[$95>>2]|0;
         $101 = (($100) + 36|0);
         $102 = HEAP32[$101>>2]|0;
         __THREW__ = 0;
         $103 = (invoke_ii($102|0,($95|0))|0);
         $104 = __THREW__; __THREW__ = 0;
         $105 = $104&1;
         if ($105) {
          label = 39;
          break;
         } else {
          $$0$i$i = $103;
         }
        } else {
         $106 = HEAP32[$96>>2]|0;
         $$0$i$i = $106;
        }
        $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
        $108 = ($107|0)==(0);
        if (!($108)) {
         $$lcssa = $95;$$pre$i3$i$i = $168;$__a$2 = $__a$1;
         break;
        }
        $109 = HEAP32[$94>>2]|0;
        $110 = HEAP32[$97>>2]|0;
        $111 = ($109|0)==($110|0);
        if ($111) {
         $112 = HEAP32[$95>>2]|0;
         $113 = (($112) + 40|0);
         $114 = HEAP32[$113>>2]|0;
         __THREW__ = 0;
         (invoke_ii($114|0,($95|0))|0);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          label = 39;
          break;
         }
        } else {
         $117 = (($109) + 4|0);
         HEAP32[$94>>2] = $117;
        }
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       }
       if ((label|0) == 39) {
        $90 = ___cxa_find_matching_catch()|0;
        $91 = tempRet0;
        $lpad$phi$index = $90;$lpad$phi$index2 = $91;
        break;
       }
       $118 = HEAP32[$__a_end>>2]|0;
       $119 = $118;
       $120 = $__a$2;
       $121 = (($119) - ($120))|0;
       __THREW__ = 0;
       invoke_viii(553,($__buf|0),($121|0),0);
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        label = 40;
       } else {
        $124 = HEAP8[$__buf>>0]|0;
        $125 = $124 & 1;
        $126 = ($125<<24>>24)==(0);
        if ($126) {
         $131 = $$pre$phi38Z2D;
        } else {
         $127 = HEAP32[$$pre$phi40Z2D>>2]|0;
         $131 = $127;
        }
        __THREW__ = 0;
        $128 = (invoke_i(559)|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 40;
        } else {
         __THREW__ = 0;
         HEAP32[$vararg_buffer>>2] = $__v;
         $132 = (invoke_iiiii(560,($131|0),($128|0),(5272|0),($vararg_buffer|0))|0);
         $133 = __THREW__; __THREW__ = 0;
         $134 = $133&1;
         if ($134) {
          label = 40;
         } else {
          $135 = ($132|0)==(1);
          if (!($135)) {
           HEAP32[$__err>>2] = 4;
          }
          $136 = ($$lcssa|0)==(0|0);
          if ($136) {
           $166 = 0;$169 = 1;
          } else {
           $137 = (($$lcssa) + 12|0);
           $138 = HEAP32[$137>>2]|0;
           $139 = (($$lcssa) + 16|0);
           $140 = HEAP32[$139>>2]|0;
           $141 = ($138|0)==($140|0);
           if ($141) {
            $142 = HEAP32[$$lcssa>>2]|0;
            $143 = (($142) + 36|0);
            $144 = HEAP32[$143>>2]|0;
            __THREW__ = 0;
            $145 = (invoke_ii($144|0,($$lcssa|0))|0);
            $146 = __THREW__; __THREW__ = 0;
            $147 = $146&1;
            if ($147) {
             label = 40;
             break;
            } else {
             $$0$i$i$i$i = $145;
            }
           } else {
            $148 = HEAP32[$138>>2]|0;
            $$0$i$i$i$i = $148;
           }
           $149 = ($$0$i$i$i$i|0)==(-1);
           if ($149) {
            HEAP32[$__b>>2] = 0;
            $166 = 0;$169 = 1;
           } else {
            $166 = $$lcssa;$169 = 0;
           }
          }
          $150 = ($$pre$i3$i$i|0)==(0|0);
          do {
           if ($150) {
            label = 69;
           } else {
            $151 = (($$pre$i3$i$i) + 12|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = (($$pre$i3$i$i) + 16|0);
            $154 = HEAP32[$153>>2]|0;
            $155 = ($152|0)==($154|0);
            if ($155) {
             $156 = HEAP32[$$pre$i3$i$i>>2]|0;
             $157 = (($156) + 36|0);
             $158 = HEAP32[$157>>2]|0;
             __THREW__ = 0;
             $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
             $160 = __THREW__; __THREW__ = 0;
             $161 = $160&1;
             if ($161) {
              label = 40;
              break L6;
             } else {
              $$0$i$i1$i$i = $159;
             }
            } else {
             $162 = HEAP32[$152>>2]|0;
             $$0$i$i1$i$i = $162;
            }
            $163 = ($$0$i$i1$i$i|0)==(-1);
            if ($163) {
             HEAP32[$__e>>2] = 0;
             label = 69;
             break;
            } else {
             if ($169) {
              break;
             } else {
              label = 71;
              break;
             }
            }
           }
          } while(0);
          if ((label|0) == 69) {
           if ($169) {
            label = 71;
           }
          }
          if ((label|0) == 71) {
           $164 = HEAP32[$__err>>2]|0;
           $165 = $164 | 2;
           HEAP32[$__err>>2] = $165;
          }
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
       }
      }
     } while(0);
     if ((label|0) == 40) {
      $92 = ___cxa_find_matching_catch()|0;
      $93 = tempRet0;
      $lpad$phi$index = $92;$lpad$phi$index2 = $93;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
     break;
    }
   }
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $89 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
   $$0 = $87;$$01 = $88;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     label = 5;
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
  } else {
   label = 5;
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $10 = HEAP8[$__grouping>>0]|0;
   $11 = $10 & 1;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $15 = $10&255;
    $16 = $15 >>> 1;
    $18 = $16;
   } else {
    $13 = (($__grouping) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $18 = $14;
   }
   $17 = ($18|0)!=(0);
   $19 = ($__ct|0)==($__thousands_sep|0);
   $or$cond = $17 & $19;
   if ($or$cond) {
    $20 = HEAP32[$__g_end>>2]|0;
    $21 = $20;
    $22 = $__g;
    $23 = (($21) - ($22))|0;
    $24 = ($23|0)<(160);
    if (!($24)) {
     $$0 = 0;
     break;
    }
    $25 = HEAP32[$__dc>>2]|0;
    $26 = (($20) + 4|0);
    HEAP32[$__g_end>>2] = $26;
    HEAP32[$20>>2] = $25;
    HEAP32[$__dc>>2] = 0;
    $$0 = 0;
    break;
   }
   $27 = (($__atoms) + 104|0);
   $$01$i = $__atoms;
   while(1) {
    $30 = HEAP32[$$01$i>>2]|0;
    $31 = ($30|0)==($__ct|0);
    $29 = (($$01$i) + 4|0);
    if ($31) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $28 = ($29|0)==($27|0);
    if ($28) {
     $$0$lcssa$i = $27;
     break;
    } else {
     $$01$i = $29;
    }
   }
   $32 = $$0$lcssa$i;
   $33 = $__atoms;
   $34 = (($32) - ($33))|0;
   $35 = $34 >> 2;
   $36 = ($34|0)>(92);
   if ($36) {
    $$0 = -1;
   } else {
    if ((($__base|0) == 10) | (($__base|0) == 8)) {
     $37 = ($35|0)<($__base|0);
     if (!($37)) {
      $$0 = -1;
      break;
     }
    } else if ((($__base|0) == 16)) {
     $38 = ($34|0)<(88);
     if (!($38)) {
      if ($1) {
       $$0 = -1;
       break;
      }
      $39 = $0;
      $40 = $__a;
      $41 = (($39) - ($40))|0;
      $42 = ($41|0)<(3);
      if (!($42)) {
       $$0 = -1;
       break;
      }
      $43 = (($0) + -1|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = ($44<<24>>24)==(48);
      if (!($45)) {
       $$0 = -1;
       break;
      }
      HEAP32[$__dc>>2] = 0;
      $46 = (5232 + ($35)|0);
      $47 = HEAP8[$46>>0]|0;
      $48 = (($0) + 1|0);
      HEAP32[$__a_end>>2] = $48;
      HEAP8[$0>>0] = $47;
      $$0 = 0;
      break;
     }
    }
    $49 = (5232 + ($35)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = (($0) + 1|0);
    HEAP32[$__a_end>>2] = $51;
    HEAP8[$0>>0] = $50;
    $52 = HEAP32[$__dc>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$__dc>>2] = $53;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(422,($__loc|0),(6720|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(5232|0),(((5232 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(422,($__loc|0),(6864|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(422,($__loc|0),(6720|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(5232|0),(((5232 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(422,($__loc|0),(6864|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $13 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $13 = $9;
    }
    $12 = ($13|0)==(0);
    if ($12) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $30 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $30 = $26;
    }
    $29 = ($30|0)==(0);
    if (!($29)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 32|0);
   $$01$i = $__atoms;
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    $44 = ($43<<24>>24)==($__ct<<24>>24);
    $42 = (($$01$i) + 1|0);
    if ($44) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $41 = ($42|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$01$i = $42;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = ($47|0)>(31);
   if ($48) {
    $$0 = -1;
   } else {
    $49 = (5232 + ($47)|0);
    $50 = HEAP8[$49>>0]|0;
    if ((($47|0) == 23) | (($47|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
     $62 = HEAP32[$__a_end>>2]|0;
     $63 = (($62) + 1|0);
     HEAP32[$__a_end>>2] = $63;
     HEAP8[$62>>0] = $50;
     $$0 = 0;
     break;
    } else if ((($47|0) == 24) | (($47|0) == 25)) {
     $51 = HEAP32[$__a_end>>2]|0;
     $52 = ($51|0)==($__a|0);
     if (!($52)) {
      $53 = (($51) + -1|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54&255;
      $56 = $55 & 95;
      $57 = HEAP8[$__exp>>0]|0;
      $58 = $57&255;
      $59 = $58 & 127;
      $60 = ($56|0)==($59|0);
      if (!($60)) {
       $$0 = -1;
       break;
      }
     }
     $61 = (($51) + 1|0);
     HEAP32[$__a_end>>2] = $61;
     HEAP8[$51>>0] = $50;
     $$0 = 0;
     break;
    } else {
     $64 = $50&255;
     $65 = $64 & 95;
     $66 = HEAP8[$__exp>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = ($65|0)==($67|0);
     if ($68) {
      $69 = $65 | 128;
      $70 = $69&255;
      HEAP8[$__exp>>0] = $70;
      $71 = HEAP8[$__in_units>>0]|0;
      $72 = ($71<<24>>24)==(0);
      if (!($72)) {
       HEAP8[$__in_units>>0] = 0;
       $73 = HEAP8[$__grouping>>0]|0;
       $74 = $73 & 1;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $78 = $73&255;
        $79 = $78 >>> 1;
        $81 = $79;
       } else {
        $76 = (($__grouping) + 4|0);
        $77 = HEAP32[$76>>2]|0;
        $81 = $77;
       }
       $80 = ($81|0)==(0);
       if (!($80)) {
        $82 = HEAP32[$__g_end>>2]|0;
        $83 = $82;
        $84 = $__g;
        $85 = (($83) - ($84))|0;
        $86 = ($85|0)<(160);
        if ($86) {
         $87 = HEAP32[$__dc>>2]|0;
         $88 = (($82) + 4|0);
         HEAP32[$__g_end>>2] = $88;
         HEAP32[$82>>2] = $87;
        }
       }
      }
     }
     $89 = HEAP32[$__a_end>>2]|0;
     $90 = (($89) + 1|0);
     HEAP32[$__a_end>>2] = $90;
     HEAP8[$89>>0] = $50;
     $91 = ($47|0)>(21);
     if ($91) {
      $$0 = 0;
      break;
     }
     $92 = HEAP32[$__dc>>2]|0;
     $93 = (($92) + 1)|0;
     HEAP32[$__dc>>2] = $93;
     $$0 = 0;
     break;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(422,($__loc|0),(6712|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(5232|0),(((5232 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(422,($__loc|0),(6872|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(422,($__loc|0),(6712|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(5232|0),(((5232 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(422,($__loc|0),(6872|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 do {
  if ($0) {
   $1 = HEAP8[$__in_units>>0]|0;
   $2 = ($1<<24>>24)==(0);
   if ($2) {
    $$0 = -1;
   } else {
    HEAP8[$__in_units>>0] = 0;
    $3 = HEAP32[$__a_end>>2]|0;
    $4 = (($3) + 1|0);
    HEAP32[$__a_end>>2] = $4;
    HEAP8[$3>>0] = 46;
    $5 = HEAP8[$__grouping>>0]|0;
    $6 = $5 & 1;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $10 = $5&255;
     $11 = $10 >>> 1;
     $13 = $11;
    } else {
     $8 = (($__grouping) + 4|0);
     $9 = HEAP32[$8>>2]|0;
     $13 = $9;
    }
    $12 = ($13|0)==(0);
    if ($12) {
     $$0 = 0;
    } else {
     $14 = HEAP32[$__g_end>>2]|0;
     $15 = $14;
     $16 = $__g;
     $17 = (($15) - ($16))|0;
     $18 = ($17|0)<(160);
     if ($18) {
      $19 = HEAP32[$__dc>>2]|0;
      $20 = (($14) + 4|0);
      HEAP32[$__g_end>>2] = $20;
      HEAP32[$14>>2] = $19;
      $$0 = 0;
     } else {
      $$0 = 0;
     }
    }
   }
  } else {
   $21 = ($__ct|0)==($__thousands_sep|0);
   if ($21) {
    $22 = HEAP8[$__grouping>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $30 = $28;
    } else {
     $25 = (($__grouping) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $30 = $26;
    }
    $29 = ($30|0)==(0);
    if (!($29)) {
     $31 = HEAP8[$__in_units>>0]|0;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$0 = -1;
      break;
     }
     $33 = HEAP32[$__g_end>>2]|0;
     $34 = $33;
     $35 = $__g;
     $36 = (($34) - ($35))|0;
     $37 = ($36|0)<(160);
     if (!($37)) {
      $$0 = 0;
      break;
     }
     $38 = HEAP32[$__dc>>2]|0;
     $39 = (($33) + 4|0);
     HEAP32[$__g_end>>2] = $39;
     HEAP32[$33>>2] = $38;
     HEAP32[$__dc>>2] = 0;
     $$0 = 0;
     break;
    }
   }
   $40 = (($__atoms) + 128|0);
   $$01$i = $__atoms;
   while(1) {
    $43 = HEAP32[$$01$i>>2]|0;
    $44 = ($43|0)==($__ct|0);
    $42 = (($$01$i) + 4|0);
    if ($44) {
     $$0$lcssa$i = $$01$i;
     break;
    }
    $41 = ($42|0)==($40|0);
    if ($41) {
     $$0$lcssa$i = $40;
     break;
    } else {
     $$01$i = $42;
    }
   }
   $45 = $$0$lcssa$i;
   $46 = $__atoms;
   $47 = (($45) - ($46))|0;
   $48 = $47 >> 2;
   $49 = ($47|0)>(124);
   if ($49) {
    $$0 = -1;
   } else {
    $50 = (5232 + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    if ((($48|0) == 23) | (($48|0) == 22)) {
     HEAP8[$__exp>>0] = 80;
    } else if ((($48|0) == 24) | (($48|0) == 25)) {
     $52 = HEAP32[$__a_end>>2]|0;
     $53 = ($52|0)==($__a|0);
     if (!($53)) {
      $54 = (($52) + -1|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = $56 & 95;
      $58 = HEAP8[$__exp>>0]|0;
      $59 = $58&255;
      $60 = $59 & 127;
      $61 = ($57|0)==($60|0);
      if (!($61)) {
       $$0 = -1;
       break;
      }
     }
     $62 = (($52) + 1|0);
     HEAP32[$__a_end>>2] = $62;
     HEAP8[$52>>0] = $51;
     $$0 = 0;
     break;
    } else {
     $63 = $51&255;
     $64 = $63 & 95;
     $65 = HEAP8[$__exp>>0]|0;
     $66 = $65 << 24 >> 24;
     $67 = ($64|0)==($66|0);
     if ($67) {
      $68 = $64 | 128;
      $69 = $68&255;
      HEAP8[$__exp>>0] = $69;
      $70 = HEAP8[$__in_units>>0]|0;
      $71 = ($70<<24>>24)==(0);
      if (!($71)) {
       HEAP8[$__in_units>>0] = 0;
       $72 = HEAP8[$__grouping>>0]|0;
       $73 = $72 & 1;
       $74 = ($73<<24>>24)==(0);
       if ($74) {
        $77 = $72&255;
        $78 = $77 >>> 1;
        $80 = $78;
       } else {
        $75 = (($__grouping) + 4|0);
        $76 = HEAP32[$75>>2]|0;
        $80 = $76;
       }
       $79 = ($80|0)==(0);
       if (!($79)) {
        $81 = HEAP32[$__g_end>>2]|0;
        $82 = $81;
        $83 = $__g;
        $84 = (($82) - ($83))|0;
        $85 = ($84|0)<(160);
        if ($85) {
         $86 = HEAP32[$__dc>>2]|0;
         $87 = (($81) + 4|0);
         HEAP32[$__g_end>>2] = $87;
         HEAP32[$81>>2] = $86;
        }
       }
      }
     }
    }
    $88 = HEAP32[$__a_end>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$__a_end>>2] = $89;
    HEAP8[$88>>0] = $51;
    $90 = ($47|0)>(84);
    if ($90) {
     $$0 = 0;
    } else {
     $91 = HEAP32[$__dc>>2]|0;
     $92 = (($91) + 1)|0;
     HEAP32[$__dc>>2] = $92;
     $$0 = 0;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = (($6) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  } else {
   __ZNKSt3__18ios_base6getlocEv($1,$__iob);
   __THREW__ = 0;
   $11 = (invoke_iii(422,($1|0),(6864|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   do {
    if ($13) {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $59 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
     $$0 = $57;$$01 = $58;
    } else {
     $14 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
     $15 = HEAP32[$11>>2]|0;
     if ($__v) {
      $16 = (($15) + 24|0);
      $17 = HEAP32[$16>>2]|0;
      FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
     } else {
      $18 = (($15) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
     }
     $20 = HEAP8[$__nm>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__nm) + 1|0);
      $$pre5 = (($__nm) + 8|0);
      $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
     } else {
      $23 = (($__nm) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre3 = (($__nm) + 1|0);
      $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
     }
     $26 = (($__nm) + 4|0);
     $28 = $20;$38 = $$ph;
     L14: while(1) {
      $27 = $28 & 1;
      $29 = ($27<<24>>24)==(0);
      if ($29) {
       $32 = $28&255;
       $33 = $32 >>> 1;
       $35 = $$pre$phi4Z2D;$36 = $33;
      } else {
       $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
       $31 = HEAP32[$26>>2]|0;
       $35 = $30;$36 = $31;
      }
      $34 = (($35) + ($36)|0);
      $37 = ($38|0)==($34|0);
      if ($37) {
       label = 24;
       break;
      }
      $39 = HEAP8[$38>>0]|0;
      $40 = HEAP32[$__s>>2]|0;
      $41 = ($40|0)==(0|0);
      do {
       if (!($41)) {
        $42 = (($40) + 24|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = (($40) + 28|0);
        $45 = HEAP32[$44>>2]|0;
        $46 = ($43|0)==($45|0);
        if (!($46)) {
         $47 = (($43) + 1|0);
         HEAP32[$42>>2] = $47;
         HEAP8[$43>>0] = $39;
         break;
        }
        $48 = HEAP32[$40>>2]|0;
        $49 = (($48) + 52|0);
        $50 = HEAP32[$49>>2]|0;
        $51 = $39&255;
        __THREW__ = 0;
        $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if ($54) {
         label = 23;
         break L14;
        }
        $55 = ($52|0)==(-1);
        if ($55) {
         HEAP32[$__s>>2] = 0;
        }
       }
      } while(0);
      $56 = (($38) + 1|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $28 = $$pre;$38 = $56;
     }
     if ((label|0) == 23) {
      $60 = ___cxa_find_matching_catch()|0;
      $61 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      $$0 = $60;$$01 = $61;
      break;
     }
     else if ((label|0) == 24) {
      $62 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$result>>2] = $62;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      break L1;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5512+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5512+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5512+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5512+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5512+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5512+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5416,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(563,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
  $$1$lcssa = $$lcssa;
 }
 $13 = $__flags & 74;
 do {
  if ((($13|0) == 64)) {
   HEAP8[$$1$lcssa>>0] = 111;
  } else if ((($13|0) == 8)) {
   $14 = $__flags & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$$1$lcssa>>0] = 120;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 88;
    break;
   }
  } else {
   if ($__signd) {
    HEAP8[$$1$lcssa>>0] = 100;
    break;
   } else {
    HEAP8[$$1$lcssa>>0] = 117;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $132$phi = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $71$phi = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6720)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6864)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 L5: do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
    label = 41;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;$71 = $__ne;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($71) + -2|0);
      $72 = ($69>>>0)<($70>>>0);
      if ($72) {
       $71$phi = $68;$$012$i$i5 = $69;$68 = $70;$71 = $71$phi;
      } else {
       break;
      }
     }
    }
   }
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   __THREW__ = 0;
   $76 = (invoke_ii($75|0,($1|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    label = 8;
   } else {
    $79 = ($__nf$1>>>0)<($__ne>>>0);
    do {
     if ($79) {
      $80 = (($__grouping) + 1|0);
      $81 = (($__grouping) + 4|0);
      $82 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $83 = HEAP8[$__grouping>>0]|0;
       $84 = $83 & 1;
       $85 = ($84<<24>>24)==(0);
       $86 = HEAP32[$82>>2]|0;
       $$ = $85 ? $80 : $86;
       $87 = (($$) + ($__dg$010)|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $90 = HEAP32[$82>>2]|0;
        $$12 = $85 ? $80 : $90;
        $91 = (($$12) + ($__dg$010)|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92 << 24 >> 24;
        $94 = ($__dc$09|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$__oe>>2]|0;
         $96 = (($95) + 1|0);
         HEAP32[$__oe>>2] = $96;
         HEAP8[$95>>0] = $76;
         $97 = HEAP8[$__grouping>>0]|0;
         $98 = $97 & 1;
         $99 = ($98<<24>>24)==(0);
         if ($99) {
          $101 = $97&255;
          $102 = $101 >>> 1;
          $104 = $102;
         } else {
          $100 = HEAP32[$81>>2]|0;
          $104 = $100;
         }
         $103 = (($104) + -1)|0;
         $105 = ($__dg$010>>>0)<($103>>>0);
         $106 = $105&1;
         $$__dg$0 = (($106) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $107 = HEAP8[$__p$011>>0]|0;
       $108 = HEAP32[$0>>2]|0;
       $109 = (($108) + 28|0);
       $110 = HEAP32[$109>>2]|0;
       __THREW__ = 0;
       $111 = (invoke_iii($110|0,($0|0),($107|0))|0);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        label = 7;
        break;
       }
       $114 = HEAP32[$__oe>>2]|0;
       $115 = (($114) + 1|0);
       HEAP32[$__oe>>2] = $115;
       HEAP8[$114>>0] = $111;
       $116 = (($__dc$1) + 1)|0;
       $117 = (($__p$011) + 1|0);
       $118 = ($117>>>0)<($__ne>>>0);
       if ($118) {
        $__dc$09 = $116;$__dg$010 = $__dg$1;$__p$011 = $117;
       } else {
        label = 35;
        break;
       }
      }
      if ((label|0) == 7) {
       $23 = ___cxa_find_matching_catch()|0;
       $24 = tempRet0;
       $lpad$phi$index = $23;$lpad$phi$index2 = $24;
       break L5;
      }
      else if ((label|0) == 35) {
       break;
      }
     }
    } while(0);
    $119 = $__nf$1;
    $120 = $__nb;
    $121 = (($119) - ($120))|0;
    $122 = (($__ob) + ($121)|0);
    $123 = HEAP32[$__oe>>2]|0;
    $124 = ($122|0)==($123|0);
    if ($124) {
     label = 41;
    } else {
     $125 = (($123) + -1|0);
     $126 = ($125>>>0)>($122>>>0);
     if ($126) {
      $$012$i$i = $122;$129 = $125;$132 = $123;
      while(1) {
       $127 = HEAP8[$$012$i$i>>0]|0;
       $128 = HEAP8[$129>>0]|0;
       HEAP8[$$012$i$i>>0] = $128;
       HEAP8[$129>>0] = $127;
       $130 = (($$012$i$i) + 1|0);
       $131 = (($132) + -2|0);
       $133 = ($130>>>0)<($131>>>0);
       if ($133) {
        $132$phi = $129;$$012$i$i = $130;$129 = $131;$132 = $132$phi;
       } else {
        break;
       }
      }
      label = 41;
     } else {
      label = 41;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 41) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $135 = HEAP32[$__oe>>2]|0;
   $storemerge = $135;
  } else {
   $136 = $__np;
   $137 = $__nb;
   $138 = (($136) - ($137))|0;
   $139 = (($__ob) + ($138)|0);
   $storemerge = $139;
  }
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 78|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5424,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(563,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 60|0;
 $__nar = sp + 48|0;
 $__o = sp + 24|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5512+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5512+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5512+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5512+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5512+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5512+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5416,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(563,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 79|0;
 $__o = sp + 36|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5424,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(563,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 84|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 146|0;
 $__nb = sp + 80|0;
 $__o = sp + 88|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5432,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(559)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(564,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(559)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(564,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$65 = $35;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(565);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$65 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$65 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $39 = (($40) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
  $42 = ($40|0)==($__nar|0);
  if ($42) {
   $52 = $__nar;$63 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $43 = $__nc$2 << 1;
   $44 = (_malloc($43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    __THREW__ = 0;
    invoke_v(565);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $72 = 0;
     label = 19;
    } else {
     $$pre10 = HEAP32[$__nb>>2]|0;
     $52 = $$pre10;$63 = 0;$__ob$0 = 0;
     label = 20;
    }
   } else {
    $52 = $40;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(521,($0|0),($__iob|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $72 = $63;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(566,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $66 = ___cxa_find_matching_catch()|0;
      $67 = tempRet0;
      $68 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
      $$0 = $66;$$01 = $67;$70 = $63;
      break;
     }
     $55 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
     $56 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $56;
     $57 = HEAP32[$__op>>2]|0;
     $58 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(522,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $72 = $63;
      label = 19;
     } else {
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $61;
      HEAP32[$agg$result>>2] = $61;
      $62 = ($63|0)==(0|0);
      if (!($62)) {
       _free($63);
      }
      $64 = ($65|0)==(0|0);
      if (!($64)) {
       _free($65);
      }
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $$0 = $48;$$01 = $49;$70 = $72;
  }
  $69 = ($70|0)==(0|0);
  if (!($69)) {
   _free($70);
  }
  $71 = ($65|0)==(0|0);
  if ($71) {
   $$127 = $$01;$$18 = $$0;
  } else {
   _free($65);
   $$127 = $$01;$$18 = $$0;
  }
 }
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
  $$2$lcssa = $$lcssa;
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$51 = 0, $$__dg$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $103$phi = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $164$phi = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$027 = 0, $__dc$1 = 0, $__dg$028 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$226 = 0, $__nf$226$lcssa = 0;
 var $__nf$3 = 0, $__ns$036 = 0, $__ns$131 = 0, $__ns$2 = 0, $__ns$2$ph = 0, $__ns$2$ph53 = 0, $__p$029 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6720)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6864)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 8;
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 8;
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$036 = $42;
        while(1) {
         $55 = HEAP8[$__ns$036>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(559)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 7;
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(567,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 7;
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$036) + 1|0);
         if ($63) {
          $__ns$2$ph53 = $__ns$036;
          label = 28;
          break;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$036 = $54;
         } else {
          $__ns$2$ph53 = $54;
          label = 28;
          break;
         }
        }
        if ((label|0) == 7) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         $lpad$phi$index = $21;$lpad$phi$index5 = $22;
         break L4;
        }
        else if ((label|0) == 28) {
         $__nf$1 = $42;$__ns$2 = $__ns$2$ph53;
         break;
        }
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$131 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$131>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(559)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 6;
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(568,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        label = 6;
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$131) + 1|0);
       if ($74) {
        $__ns$2$ph = $__ns$131;
        label = 27;
        break;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$131 = $65;
       } else {
        $__ns$2$ph = $65;
        label = 27;
        break;
       }
      }
      if ((label|0) == 6) {
       $19 = ___cxa_find_matching_catch()|0;
       $20 = tempRet0;
       $lpad$phi$index = $19;$lpad$phi$index5 = $20;
       break L4;
      }
      else if ((label|0) == 27) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$2$ph;
       break;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;$103 = $__ns$2;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($103) + -2|0);
       $104 = ($101>>>0)<($102>>>0);
       if ($104) {
        $103$phi = $100;$$012$i$i = $101;$100 = $102;$103 = $103$phi;
       } else {
        break;
       }
      }
     }
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = (($105) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($1|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 8;
     break;
    }
    $111 = ($__nf$1>>>0)<($__ns$2>>>0);
    do {
     if ($111) {
      $112 = (($__grouping) + 1|0);
      $113 = (($__grouping) + 4|0);
      $114 = (($__grouping) + 8|0);
      $__dc$027 = 0;$__dg$028 = 0;$__p$029 = $__nf$1;
      while(1) {
       $115 = HEAP8[$__grouping>>0]|0;
       $116 = $115 & 1;
       $117 = ($116<<24>>24)==(0);
       $118 = HEAP32[$114>>2]|0;
       $$ = $117 ? $112 : $118;
       $119 = (($$) + ($__dg$028)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = ($120<<24>>24)>(0);
       if ($121) {
        $122 = HEAP32[$114>>2]|0;
        $$51 = $117 ? $112 : $122;
        $123 = (($$51) + ($__dg$028)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124 << 24 >> 24;
        $126 = ($__dc$027|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$__oe>>2]|0;
         $128 = (($127) + 1|0);
         HEAP32[$__oe>>2] = $128;
         HEAP8[$127>>0] = $108;
         $129 = HEAP8[$__grouping>>0]|0;
         $130 = $129 & 1;
         $131 = ($130<<24>>24)==(0);
         if ($131) {
          $133 = $129&255;
          $134 = $133 >>> 1;
          $136 = $134;
         } else {
          $132 = HEAP32[$113>>2]|0;
          $136 = $132;
         }
         $135 = (($136) + -1)|0;
         $137 = ($__dg$028>>>0)<($135>>>0);
         $138 = $137&1;
         $$__dg$0 = (($138) + ($__dg$028))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$027;$__dg$1 = $__dg$028;
        }
       } else {
        $__dc$1 = $__dc$027;$__dg$1 = $__dg$028;
       }
       $139 = HEAP8[$__p$029>>0]|0;
       $140 = HEAP32[$0>>2]|0;
       $141 = (($140) + 28|0);
       $142 = HEAP32[$141>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_iii($142|0,($0|0),($139|0))|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 5;
        break;
       }
       $146 = HEAP32[$__oe>>2]|0;
       $147 = (($146) + 1|0);
       HEAP32[$__oe>>2] = $147;
       HEAP8[$146>>0] = $143;
       $148 = (($__dc$1) + 1)|0;
       $149 = (($__p$029) + 1|0);
       $150 = ($149>>>0)<($__ns$2>>>0);
       if ($150) {
        $__dc$027 = $148;$__dg$028 = $__dg$1;$__p$029 = $149;
       } else {
        label = 51;
        break;
       }
      }
      if ((label|0) == 5) {
       $17 = ___cxa_find_matching_catch()|0;
       $18 = tempRet0;
       $lpad$phi$index = $17;$lpad$phi$index5 = $18;
       break L4;
      }
      else if ((label|0) == 51) {
       break;
      }
     }
    } while(0);
    $151 = $__nf$1;
    $152 = $__nb;
    $153 = (($151) - ($152))|0;
    $154 = (($__ob) + ($153)|0);
    $155 = HEAP32[$__oe>>2]|0;
    $156 = ($154|0)==($155|0);
    if (!($156)) {
     $157 = (($155) + -1|0);
     $158 = ($157>>>0)>($154>>>0);
     if ($158) {
      $$012$i$i7 = $154;$161 = $157;$164 = $155;
      while(1) {
       $159 = HEAP8[$$012$i$i7>>0]|0;
       $160 = HEAP8[$161>>0]|0;
       HEAP8[$$012$i$i7>>0] = $160;
       HEAP8[$161>>0] = $159;
       $162 = (($$012$i$i7) + 1|0);
       $163 = (($164) + -2|0);
       $165 = ($162>>>0)<($163>>>0);
       if ($165) {
        $164$phi = $161;$$012$i$i7 = $162;$161 = $163;$164 = $164$phi;
       } else {
        break;
       }
      }
     }
    }
   }
   $166 = ($__ns$2>>>0)<($__ne>>>0);
   do {
    if ($166) {
     $__nf$226 = $__ns$2;
     while(1) {
      $167 = HEAP8[$__nf$226>>0]|0;
      $168 = ($167<<24>>24)==(46);
      if ($168) {
       $__nf$226$lcssa = $__nf$226;
       label = 60;
       break;
      }
      $178 = HEAP32[$0>>2]|0;
      $179 = (($178) + 28|0);
      $180 = HEAP32[$179>>2]|0;
      __THREW__ = 0;
      $181 = (invoke_iii($180|0,($0|0),($167|0))|0);
      $182 = __THREW__; __THREW__ = 0;
      $183 = $182&1;
      if ($183) {
       label = 4;
       break;
      }
      $184 = HEAP32[$__oe>>2]|0;
      $185 = (($184) + 1|0);
      HEAP32[$__oe>>2] = $185;
      HEAP8[$184>>0] = $181;
      $186 = (($__nf$226) + 1|0);
      $187 = ($186>>>0)<($__ne>>>0);
      if ($187) {
       $__nf$226 = $186;
      } else {
       $$lcssa = $186;
       label = 64;
       break;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     else if ((label|0) == 60) {
      $169 = HEAP32[$1>>2]|0;
      $170 = (($169) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($1|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       label = 8;
       break L4;
      }
      $175 = HEAP32[$__oe>>2]|0;
      $176 = (($175) + 1|0);
      HEAP32[$__oe>>2] = $176;
      HEAP8[$175>>0] = $172;
      $177 = (($__nf$226$lcssa) + 1|0);
      $__nf$3 = $177;
      break;
     }
     else if ((label|0) == 64) {
      $__nf$3 = $$lcssa;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $188 = HEAP32[$__oe>>2]|0;
   $189 = HEAP32[$0>>2]|0;
   $190 = (($189) + 32|0);
   $191 = HEAP32[$190>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($191|0,($0|0),($__nf$3|0),($__ne|0),($188|0))|0);
   $192 = __THREW__; __THREW__ = 0;
   $193 = $192&1;
   if ($193) {
    label = 8;
   } else {
    $194 = $__nf$3;
    $195 = (($25) - ($194))|0;
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + ($195)|0);
    HEAP32[$__oe>>2] = $197;
    $198 = ($__np|0)==($__ne|0);
    if ($198) {
     $storemerge = $197;
    } else {
     $199 = $__np;
     $200 = $__nb;
     $201 = (($199) - ($200))|0;
     $202 = (($__ob) + ($201)|0);
     $storemerge = $202;
    }
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 142|0;
 $__nb = sp + 76|0;
 $__o = sp + 84|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5440,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(559)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(564,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(559)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(564,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(565);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  if ($40) {
   $50 = $__nar;$60 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $41 = $__nc$2 << 1;
   $42 = (_malloc($41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    __THREW__ = 0;
    invoke_v(565);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $66 = 0;
     label = 19;
    } else {
     $$pre10 = HEAP32[$__nb>>2]|0;
     $50 = $$pre10;$60 = 0;$__ob$0 = 0;
     label = 20;
    }
   } else {
    $50 = $38;$60 = $42;$__ob$0 = $42;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(521,($0|0),($__iob|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $66 = $60;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(566,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $62 = ___cxa_find_matching_catch()|0;
      $63 = tempRet0;
      $64 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
      $$0 = $62;$$01 = $63;$65 = $60;
      break;
     }
     $53 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(522,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $66 = $60;
      label = 19;
     } else {
      $59 = HEAP32[$1>>2]|0;
      HEAP32[$agg$result>>2] = $59;
      _free($60);
      _free($61);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;$65 = $66;
  }
  _free($65);
  _free($61);
  $$127 = $$01;$$18 = $$0;
 }
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 76|0;
 $__nar = sp + 56|0;
 $__o = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5520+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5520+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5520+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5520+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5520+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5520+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(422,($0|0),(6720|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
 } else {
  $18 = $__nar;
  $19 = $5;
  $20 = (($19) - ($18))|0;
  $21 = (($__o) + ($20)|0);
  $__op$0 = $21;
 }
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $6 = HEAP32[$this>>2]|0;
   $7 = (($6) + 24|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$__s>>2]|0;
   HEAP32[$0>>2] = $9;
   $10 = $__v&1;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  } else {
   __ZNKSt3__18ios_base6getlocEv($1,$__iob);
   __THREW__ = 0;
   $11 = (invoke_iii(422,($1|0),(6872|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   do {
    if ($13) {
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     $57 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
     $$0 = $55;$$01 = $56;
    } else {
     $14 = HEAP32[$1>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
     $15 = HEAP32[$11>>2]|0;
     if ($__v) {
      $16 = (($15) + 24|0);
      $17 = HEAP32[$16>>2]|0;
      FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
     } else {
      $18 = (($15) + 28|0);
      $19 = HEAP32[$18>>2]|0;
      FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
     }
     $20 = HEAP8[$__nm>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__nm) + 4|0);
      $$pre3 = (($__nm) + 8|0);
      $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
     } else {
      $23 = (($__nm) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $$pre2 = (($__nm) + 4|0);
      $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
     }
     $27 = $20;$37 = $$ph;
     while(1) {
      $26 = $27 & 1;
      $28 = ($26<<24>>24)==(0);
      if ($28) {
       $31 = $27&255;
       $32 = $31 >>> 1;
       $34 = $$pre$phiZ2D;$35 = $32;
      } else {
       $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
       $30 = HEAP32[$$pre$phiZ2D>>2]|0;
       $34 = $29;$35 = $30;
      }
      $33 = (($34) + ($35<<2)|0);
      $36 = ($37|0)==($33|0);
      if ($36) {
       label = 24;
       break;
      }
      $38 = HEAP32[$37>>2]|0;
      $39 = HEAP32[$__s>>2]|0;
      $40 = ($39|0)==(0|0);
      if (!($40)) {
       $41 = (($39) + 24|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = (($39) + 28|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = ($42|0)==($44|0);
       if ($45) {
        $46 = HEAP32[$39>>2]|0;
        $47 = (($46) + 52|0);
        $48 = HEAP32[$47>>2]|0;
        __THREW__ = 0;
        $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
        $50 = __THREW__; __THREW__ = 0;
        $51 = $50&1;
        if ($51) {
         label = 23;
         break;
        } else {
         $$0$i$i = $49;
        }
       } else {
        $52 = (($42) + 4|0);
        HEAP32[$41>>2] = $52;
        HEAP32[$42>>2] = $38;
        $$0$i$i = $38;
       }
       $53 = ($$0$i$i|0)==(-1);
       if ($53) {
        HEAP32[$__s>>2] = 0;
       }
      }
      $54 = (($37) + 4|0);
      $$pre = HEAP8[$__nm>>0]|0;
      $27 = $$pre;$37 = $54;
     }
     if ((label|0) == 23) {
      $58 = ___cxa_find_matching_catch()|0;
      $59 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      $$0 = $58;$$01 = $59;
      break;
     }
     else if ((label|0) == 24) {
      $60 = HEAP32[$__s>>2]|0;
      HEAP32[$agg$result>>2] = $60;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      break L1;
     }
    }
   } while(0);
   ___resumeException($$0|0);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5512+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5512+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5512+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5512+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5512+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5512+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5416,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(569,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$lcssa = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $132$phi = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $71$phi = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6712)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6872)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 L5: do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $139 = $22;
    label = 42;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;$71 = $__ne;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($71) + -2|0);
      $72 = ($69>>>0)<($70>>>0);
      if ($72) {
       $71$phi = $68;$$012$i$i5 = $69;$68 = $70;$71 = $71$phi;
      } else {
       break;
      }
     }
    }
   }
   $73 = HEAP32[$1>>2]|0;
   $74 = (($73) + 16|0);
   $75 = HEAP32[$74>>2]|0;
   __THREW__ = 0;
   $76 = (invoke_ii($75|0,($1|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    label = 8;
   } else {
    $79 = ($__nf$1>>>0)<($__ne>>>0);
    do {
     if ($79) {
      $80 = (($__grouping) + 1|0);
      $81 = (($__grouping) + 4|0);
      $82 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $83 = HEAP8[$__grouping>>0]|0;
       $84 = $83 & 1;
       $85 = ($84<<24>>24)==(0);
       $86 = HEAP32[$82>>2]|0;
       $$ = $85 ? $80 : $86;
       $87 = (($$) + ($__dg$09)|0);
       $88 = HEAP8[$87>>0]|0;
       $89 = ($88<<24>>24)==(0);
       if ($89) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $90 = HEAP32[$82>>2]|0;
        $$11 = $85 ? $80 : $90;
        $91 = (($$11) + ($__dg$09)|0);
        $92 = HEAP8[$91>>0]|0;
        $93 = $92 << 24 >> 24;
        $94 = ($__dc$08|0)==($93|0);
        if ($94) {
         $95 = HEAP32[$__oe>>2]|0;
         $96 = (($95) + 4|0);
         HEAP32[$__oe>>2] = $96;
         HEAP32[$95>>2] = $76;
         $97 = HEAP8[$__grouping>>0]|0;
         $98 = $97 & 1;
         $99 = ($98<<24>>24)==(0);
         if ($99) {
          $101 = $97&255;
          $102 = $101 >>> 1;
          $104 = $102;
         } else {
          $100 = HEAP32[$81>>2]|0;
          $104 = $100;
         }
         $103 = (($104) + -1)|0;
         $105 = ($__dg$09>>>0)<($103>>>0);
         $106 = $105&1;
         $$__dg$0 = (($106) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $107 = HEAP8[$__p$010>>0]|0;
       $108 = HEAP32[$0>>2]|0;
       $109 = (($108) + 44|0);
       $110 = HEAP32[$109>>2]|0;
       __THREW__ = 0;
       $111 = (invoke_iii($110|0,($0|0),($107|0))|0);
       $112 = __THREW__; __THREW__ = 0;
       $113 = $112&1;
       if ($113) {
        label = 7;
        break;
       }
       $114 = HEAP32[$__oe>>2]|0;
       $115 = (($114) + 4|0);
       HEAP32[$__oe>>2] = $115;
       HEAP32[$114>>2] = $111;
       $116 = (($__dc$1) + 1)|0;
       $117 = (($__p$010) + 1|0);
       $118 = ($117>>>0)<($__ne>>>0);
       if ($118) {
        $__dc$08 = $116;$__dg$09 = $__dg$1;$__p$010 = $117;
       } else {
        $$lcssa = $115;
        label = 36;
        break;
       }
      }
      if ((label|0) == 7) {
       $23 = ___cxa_find_matching_catch()|0;
       $24 = tempRet0;
       $lpad$phi$index = $23;$lpad$phi$index2 = $24;
       break L5;
      }
      else if ((label|0) == 36) {
       $124 = $$lcssa;
       break;
      }
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $124 = $$pre;
     }
    } while(0);
    $119 = $__nf$1;
    $120 = $__nb;
    $121 = (($119) - ($120))|0;
    $122 = (($__ob) + ($121<<2)|0);
    $123 = ($122|0)==($124|0);
    if ($123) {
     $139 = $124;
     label = 42;
    } else {
     $125 = (($124) + -4|0);
     $126 = ($125>>>0)>($122>>>0);
     if ($126) {
      $$012$i$i = $122;$129 = $125;$132 = $124;
      while(1) {
       $127 = HEAP32[$$012$i$i>>2]|0;
       $128 = HEAP32[$129>>2]|0;
       HEAP32[$$012$i$i>>2] = $128;
       HEAP32[$129>>2] = $127;
       $130 = (($$012$i$i) + 4|0);
       $131 = (($132) + -8|0);
       $133 = ($130>>>0)<($131>>>0);
       if ($133) {
        $132$phi = $129;$$012$i$i = $130;$129 = $131;$132 = $132$phi;
       } else {
        break;
       }
      }
      $139 = $124;
      label = 42;
     } else {
      $139 = $124;
      label = 42;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
 }
 else if ((label|0) == 42) {
  $134 = ($__np|0)==($__ne|0);
  if ($134) {
   $storemerge = $139;
  } else {
   $135 = $__np;
   $136 = $__nb;
   $137 = (($135) - ($136))|0;
   $138 = (($__ob) + ($137<<2)|0);
   $storemerge = $138;
  }
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 196|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 200|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5424,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(569,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 104|0;
 $vararg_buffer = sp;
 $__fmt = sp + 120|0;
 $__nar = sp + 108|0;
 $__o = sp + 20|0;
 $__op = sp + 16|0;
 $__oe = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5512+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5512+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5512+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5512+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5512+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5512+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,5416,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(569,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 204|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 208|0;
 $__o = sp + 32|0;
 $__op = sp + 28|0;
 $__oe = sp + 24|0;
 $2 = sp + 20|0;
 $3 = sp + 16|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,5424,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(569,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 312|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 308|0;
 $__o = sp + 80|0;
 $__op = sp + 76|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 64|0;
 $2 = sp + 60|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5432,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(559)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(564,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(559)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(564,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(565);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $39 = (($40) + ($__nc$2)|0);
  $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
  $42 = ($40|0)==($__nar|0);
  if ($42) {
   $52 = $__nar;$63 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $43 = $__nc$2 << 3;
   $44 = (_malloc($43)|0);
   $45 = ($44|0)==(0|0);
   if ($45) {
    __THREW__ = 0;
    invoke_v(565);
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     $70 = 0;
     label = 19;
    } else {
     $$pre8 = HEAP32[$__nb>>2]|0;
     $52 = $$pre8;$63 = $44;$__ob$0 = $44;
     label = 20;
    }
   } else {
    $52 = $40;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(521,($0|0),($__iob|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     $70 = $63;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(570,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $53 = __THREW__; __THREW__ = 0;
     $54 = $53&1;
     if ($54) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $67 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
      $$0 = $65;$$01 = $66;$69 = $63;
      break;
     }
     $55 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
     $56 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $56;
     $57 = HEAP32[$__op>>2]|0;
     $58 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(571,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
     $59 = __THREW__; __THREW__ = 0;
     $60 = $59&1;
     if ($60) {
      $70 = $63;
      label = 19;
     } else {
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $61;
      HEAP32[$agg$result>>2] = $61;
      $62 = ($63|0)==(0|0);
      if (!($62)) {
       _free($63);
      }
      _free($64);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $$0 = $48;$$01 = $49;$69 = $70;
  }
  $68 = ($69|0)==(0|0);
  if (!($68)) {
   _free($69);
  }
  _free($64);
  $$125 = $$01;$$16 = $$0;
 }
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$50 = 0, $$__dg$0 = 0, $$lcssa = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $103$phi = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $164$phi = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$026 = 0, $__dc$1 = 0, $__dg$027 = 0, $__dg$1 = 0, $__grouping = 0;
 var $__nf$0 = 0, $__nf$1 = 0, $__nf$225 = 0, $__nf$225$lcssa = 0, $__nf$3 = 0, $__ns$035 = 0, $__ns$130 = 0, $__ns$2 = 0, $__ns$2$ph = 0, $__ns$2$ph52 = 0, $__p$028 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6712)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6872)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 8;
  } else {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        label = 8;
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 8;
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$035 = $42;
        while(1) {
         $55 = HEAP8[$__ns$035>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(559)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          label = 7;
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(567,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          label = 7;
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$035) + 1|0);
         if ($63) {
          $__ns$2$ph52 = $__ns$035;
          label = 28;
          break;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$035 = $54;
         } else {
          $__ns$2$ph52 = $54;
          label = 28;
          break;
         }
        }
        if ((label|0) == 7) {
         $21 = ___cxa_find_matching_catch()|0;
         $22 = tempRet0;
         $lpad$phi$index = $21;$lpad$phi$index5 = $22;
         break L4;
        }
        else if ((label|0) == 28) {
         $__nf$1 = $42;$__ns$2 = $__ns$2$ph52;
         break;
        }
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$130 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$130>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(559)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 6;
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(568,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        label = 6;
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$130) + 1|0);
       if ($74) {
        $__ns$2$ph = $__ns$130;
        label = 27;
        break;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$130 = $65;
       } else {
        $__ns$2$ph = $65;
        label = 27;
        break;
       }
      }
      if ((label|0) == 6) {
       $19 = ___cxa_find_matching_catch()|0;
       $20 = tempRet0;
       $lpad$phi$index = $19;$lpad$phi$index5 = $20;
       break L4;
      }
      else if ((label|0) == 27) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$2$ph;
       break;
      }
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     label = 8;
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $203 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;$103 = $__ns$2;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($103) + -2|0);
       $104 = ($101>>>0)<($102>>>0);
       if ($104) {
        $103$phi = $100;$$012$i$i = $101;$100 = $102;$103 = $103$phi;
       } else {
        break;
       }
      }
     }
    }
    $105 = HEAP32[$1>>2]|0;
    $106 = (($105) + 16|0);
    $107 = HEAP32[$106>>2]|0;
    __THREW__ = 0;
    $108 = (invoke_ii($107|0,($1|0))|0);
    $109 = __THREW__; __THREW__ = 0;
    $110 = $109&1;
    if ($110) {
     label = 8;
     break;
    }
    $111 = ($__nf$1>>>0)<($__ns$2>>>0);
    do {
     if ($111) {
      $112 = (($__grouping) + 1|0);
      $113 = (($__grouping) + 4|0);
      $114 = (($__grouping) + 8|0);
      $__dc$026 = 0;$__dg$027 = 0;$__p$028 = $__nf$1;
      while(1) {
       $115 = HEAP8[$__grouping>>0]|0;
       $116 = $115 & 1;
       $117 = ($116<<24>>24)==(0);
       $118 = HEAP32[$114>>2]|0;
       $$ = $117 ? $112 : $118;
       $119 = (($$) + ($__dg$027)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = ($120<<24>>24)>(0);
       if ($121) {
        $122 = HEAP32[$114>>2]|0;
        $$50 = $117 ? $112 : $122;
        $123 = (($$50) + ($__dg$027)|0);
        $124 = HEAP8[$123>>0]|0;
        $125 = $124 << 24 >> 24;
        $126 = ($__dc$026|0)==($125|0);
        if ($126) {
         $127 = HEAP32[$__oe>>2]|0;
         $128 = (($127) + 4|0);
         HEAP32[$__oe>>2] = $128;
         HEAP32[$127>>2] = $108;
         $129 = HEAP8[$__grouping>>0]|0;
         $130 = $129 & 1;
         $131 = ($130<<24>>24)==(0);
         if ($131) {
          $133 = $129&255;
          $134 = $133 >>> 1;
          $136 = $134;
         } else {
          $132 = HEAP32[$113>>2]|0;
          $136 = $132;
         }
         $135 = (($136) + -1)|0;
         $137 = ($__dg$027>>>0)<($135>>>0);
         $138 = $137&1;
         $$__dg$0 = (($138) + ($__dg$027))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$026;$__dg$1 = $__dg$027;
        }
       } else {
        $__dc$1 = $__dc$026;$__dg$1 = $__dg$027;
       }
       $139 = HEAP8[$__p$028>>0]|0;
       $140 = HEAP32[$0>>2]|0;
       $141 = (($140) + 44|0);
       $142 = HEAP32[$141>>2]|0;
       __THREW__ = 0;
       $143 = (invoke_iii($142|0,($0|0),($139|0))|0);
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if ($145) {
        label = 5;
        break;
       }
       $146 = HEAP32[$__oe>>2]|0;
       $147 = (($146) + 4|0);
       HEAP32[$__oe>>2] = $147;
       HEAP32[$146>>2] = $143;
       $148 = (($__dc$1) + 1)|0;
       $149 = (($__p$028) + 1|0);
       $150 = ($149>>>0)<($__ns$2>>>0);
       if ($150) {
        $__dc$026 = $148;$__dg$027 = $__dg$1;$__p$028 = $149;
       } else {
        $$lcssa56 = $147;
        label = 52;
        break;
       }
      }
      if ((label|0) == 5) {
       $17 = ___cxa_find_matching_catch()|0;
       $18 = tempRet0;
       $lpad$phi$index = $17;$lpad$phi$index5 = $18;
       break L4;
      }
      else if ((label|0) == 52) {
       $156 = $$lcssa56;
       break;
      }
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $156 = $$pre;
     }
    } while(0);
    $151 = $__nf$1;
    $152 = $__nb;
    $153 = (($151) - ($152))|0;
    $154 = (($__ob) + ($153<<2)|0);
    $155 = ($154|0)==($156|0);
    if ($155) {
     $203 = $156;
    } else {
     $157 = (($156) + -4|0);
     $158 = ($157>>>0)>($154>>>0);
     if ($158) {
      $$012$i$i7 = $154;$161 = $157;$164 = $156;
      while(1) {
       $159 = HEAP32[$$012$i$i7>>2]|0;
       $160 = HEAP32[$161>>2]|0;
       HEAP32[$$012$i$i7>>2] = $160;
       HEAP32[$161>>2] = $159;
       $162 = (($$012$i$i7) + 4|0);
       $163 = (($164) + -8|0);
       $165 = ($162>>>0)<($163>>>0);
       if ($165) {
        $164$phi = $161;$$012$i$i7 = $162;$161 = $163;$164 = $164$phi;
       } else {
        break;
       }
      }
      $203 = $156;
     } else {
      $203 = $156;
     }
    }
   }
   $166 = ($__ns$2>>>0)<($__ne>>>0);
   do {
    if ($166) {
     $__nf$225 = $__ns$2;
     while(1) {
      $167 = HEAP8[$__nf$225>>0]|0;
      $168 = ($167<<24>>24)==(46);
      if ($168) {
       $__nf$225$lcssa = $__nf$225;
       label = 61;
       break;
      }
      $178 = HEAP32[$0>>2]|0;
      $179 = (($178) + 44|0);
      $180 = HEAP32[$179>>2]|0;
      __THREW__ = 0;
      $181 = (invoke_iii($180|0,($0|0),($167|0))|0);
      $182 = __THREW__; __THREW__ = 0;
      $183 = $182&1;
      if ($183) {
       label = 4;
       break;
      }
      $184 = HEAP32[$__oe>>2]|0;
      $185 = (($184) + 4|0);
      HEAP32[$__oe>>2] = $185;
      HEAP32[$184>>2] = $181;
      $186 = (($__nf$225) + 1|0);
      $187 = ($186>>>0)<($__ne>>>0);
      if ($187) {
       $__nf$225 = $186;
      } else {
       $$lcssa = $185;$$lcssa55 = $186;
       label = 65;
       break;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      break L4;
     }
     else if ((label|0) == 61) {
      $169 = HEAP32[$1>>2]|0;
      $170 = (($169) + 12|0);
      $171 = HEAP32[$170>>2]|0;
      __THREW__ = 0;
      $172 = (invoke_ii($171|0,($1|0))|0);
      $173 = __THREW__; __THREW__ = 0;
      $174 = $173&1;
      if ($174) {
       label = 8;
       break L4;
      }
      $175 = HEAP32[$__oe>>2]|0;
      $176 = (($175) + 4|0);
      HEAP32[$__oe>>2] = $176;
      HEAP32[$175>>2] = $172;
      $177 = (($__nf$225$lcssa) + 1|0);
      $191 = $176;$__nf$3 = $177;
      break;
     }
     else if ((label|0) == 65) {
      $191 = $$lcssa;$__nf$3 = $$lcssa55;
      break;
     }
    } else {
     $191 = $203;$__nf$3 = $__ns$2;
    }
   } while(0);
   $188 = HEAP32[$0>>2]|0;
   $189 = (($188) + 48|0);
   $190 = HEAP32[$189>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($190|0,($0|0),($__nf$3|0),($__ne|0),($191|0))|0);
   $192 = __THREW__; __THREW__ = 0;
   $193 = $192&1;
   if ($193) {
    label = 8;
   } else {
    $194 = $__nf$3;
    $195 = (($25) - ($194))|0;
    $196 = HEAP32[$__oe>>2]|0;
    $197 = (($196) + ($195<<2)|0);
    HEAP32[$__oe>>2] = $197;
    $198 = ($__np|0)==($__ne|0);
    if ($198) {
     $storemerge = $197;
    } else {
     $199 = $__np;
     $200 = $__nb;
     $201 = (($199) - ($200))|0;
     $202 = (($__ob) + ($201<<2)|0);
     $storemerge = $202;
    }
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $23 = ___cxa_find_matching_catch()|0;
  $24 = tempRet0;
  $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 308|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 32|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 312|0;
 $__nb = sp + 304|0;
 $__o = sp + 76|0;
 $__op = sp + 72|0;
 $__oe = sp + 68|0;
 $0 = sp + 64|0;
 $1 = sp + 60|0;
 $2 = sp + 56|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,5440,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(559)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(564,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(559)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(564,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
    __THREW__ = 0;
    invoke_v(565);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     label = 15;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
   label = 15;
  }
 } while(0);
 if ((label|0) == 15) {
  $37 = (($38) + ($__nc$2)|0);
  $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
  $40 = ($38|0)==($__nar|0);
  if ($40) {
   $50 = $__nar;$61 = 0;$__ob$0 = $__o;
   label = 20;
  } else {
   $41 = $__nc$2 << 3;
   $42 = (_malloc($41)|0);
   $43 = ($42|0)==(0|0);
   if ($43) {
    __THREW__ = 0;
    invoke_v(565);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $68 = 0;
     label = 19;
    } else {
     $$pre8 = HEAP32[$__nb>>2]|0;
     $50 = $$pre8;$61 = $42;$__ob$0 = $42;
     label = 20;
    }
   } else {
    $50 = $38;$61 = $42;$__ob$0 = $42;
    label = 20;
   }
  }
  do {
   if ((label|0) == 20) {
    __THREW__ = 0;
    invoke_vii(521,($0|0),($__iob|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     $68 = $61;
     label = 19;
    } else {
     __THREW__ = 0;
     invoke_viiiiiii(570,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $63 = ___cxa_find_matching_catch()|0;
      $64 = tempRet0;
      $65 = HEAP32[$0>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
      $$0 = $63;$$01 = $64;$67 = $61;
      break;
     }
     $53 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
     $54 = HEAP32[$__s>>2]|0;
     HEAP32[$2>>2] = $54;
     $55 = HEAP32[$__op>>2]|0;
     $56 = HEAP32[$__oe>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
     invoke_viiiiiii(571,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
     $57 = __THREW__; __THREW__ = 0;
     $58 = $57&1;
     if ($58) {
      $68 = $61;
      label = 19;
     } else {
      $59 = HEAP32[$1>>2]|0;
      HEAP32[$__s>>2] = $59;
      HEAP32[$agg$result>>2] = $59;
      $60 = ($61|0)==(0|0);
      if (!($60)) {
       _free($61);
      }
      _free($62);
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  if ((label|0) == 19) {
   $46 = ___cxa_find_matching_catch()|0;
   $47 = tempRet0;
   $$0 = $46;$$01 = $47;$67 = $68;
  }
  $66 = ($67|0)==(0|0);
  if (!($66)) {
   _free($67);
  }
  _free($62);
  $$125 = $$01;$$16 = $$0;
 }
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 184|0;
 $__nar = sp + 164|0;
 $__o = sp + 12|0;
 $0 = sp + 8|0;
 $1 = sp + 4|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[5520+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[5520+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[5520+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[5520+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[5520+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[5520+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(422,($0|0),(6712|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
 } else {
  $18 = $__nar;
  $19 = $5;
  $20 = (($19) - ($18))|0;
  $21 = (($__o) + ($20<<2)|0);
  $__op$0 = $21;
 }
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i45$lcssa = 0, $$pre$i$i$i45$lcssa54 = 0, $$pre$i$i$i45$lcssa55 = 0, $$pre$i$i$i45$lcssa56 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i2042 = 0, $$pre$i2$i$i2043 = 0, $$pre$pre$pre = 0;
 var $$pre$pre49 = 0, $$pre$pre49$lcssa = 0, $$pre$pre50 = 0, $$pre$pre50$lcssa = 0, $$pre$pre51 = 0, $$pre41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i23 = 0;
 var $isascii1$i4 = 0, $or$cond38 = 0, $sext = 0, $tmp$i$i22 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(422,($0|0),(6720|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $36 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($36)|0);
  ___resumeException($34|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 do {
  if ($8) {
   $$pre$pre$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i7 = $$pre$pre$pre;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph40 = $__fmtb;
   L7: while(1) {
    $$pre41 = HEAP32[$__b>>2]|0;
    $10 = ($$pre41|0)==(0|0);
    if ($10) {
     $$pre$i$i$i45 = 0;
    } else {
     $11 = (($$pre41) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($$pre41) + 16|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12|0)==($14|0);
     if ($15) {
      $16 = HEAP32[$$pre41>>2]|0;
      $17 = (($16) + 36|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (FUNCTION_TABLE_ii[$18 & 1023]($$pre41)|0);
      $20 = ($19|0)==(-1);
      if ($20) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i45 = 0;
      } else {
       $$pre$i$i$i45 = $$pre41;
      }
     } else {
      $$pre$i$i$i45 = $$pre41;
     }
    }
    $21 = ($$pre$i$i$i45|0)==(0|0);
    $22 = HEAP32[$__e>>2]|0;
    $23 = ($22|0)==(0|0);
    do {
     if ($23) {
      label = 14;
     } else {
      $24 = (($22) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($22) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = HEAP32[$22>>2]|0;
       $30 = (($29) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (FUNCTION_TABLE_ii[$31 & 1023]($22)|0);
       $33 = ($32|0)==(-1);
       if ($33) {
        HEAP32[$__e>>2] = 0;
        label = 14;
        break;
       }
      }
      if ($21) {
       $60 = $22;
      } else {
       $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
       label = 15;
       break L7;
      }
     }
    } while(0);
    if ((label|0) == 14) {
     label = 0;
     if ($21) {
      $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
      label = 15;
      break;
     } else {
      $60 = 0;
     }
    }
    $37 = HEAP8[$$0$ph40>>0]|0;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + 36|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($4,$37,0)|0);
    $42 = ($41<<24>>24)==(37);
    do {
     if ($42) {
      $43 = (($$0$ph40) + 1|0);
      $44 = ($43|0)==($__fmte|0);
      if ($44) {
       $$pre$i$i$i45$lcssa55 = $$pre$i$i$i45;
       label = 19;
       break L7;
      }
      $45 = HEAP8[$43>>0]|0;
      $46 = HEAP32[$4>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_iiii[$48 & 1023]($4,$45,0)|0);
      if ((($49<<24>>24) == 48) | (($49<<24>>24) == 69)) {
       $50 = (($$0$ph40) + 2|0);
       $51 = ($50|0)==($__fmte|0);
       if ($51) {
        $$pre$i$i$i45$lcssa56 = $$pre$i$i$i45;
        label = 22;
        break L7;
       }
       $52 = HEAP8[$50>>0]|0;
       $53 = HEAP32[$4>>2]|0;
       $54 = (($53) + 36|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($4,$52,0)|0);
       $63 = $43;$__cmd$0 = $56;$__opt$0 = $49;
      } else {
       $63 = $$0$ph40;$__cmd$0 = $49;$__opt$0 = 0;
      }
      $57 = HEAP32[$this>>2]|0;
      $58 = (($57) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      HEAP32[$2>>2] = $$pre$i$i$i45;
      HEAP32[$3>>2] = $60;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$59 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $61;
      $62 = (($63) + 2|0);
      $$0$ph$be = $62;$$pre$pre49 = $61;
     } else {
      $67 = HEAP8[$$0$ph40>>0]|0;
      $isascii1$i = ($67<<24>>24)>(-1);
      if ($isascii1$i) {
       $68 = $67 << 24 >> 24;
       $69 = HEAP32[$9>>2]|0;
       $70 = (($69) + ($68<<1)|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = $71 & 8192;
       $73 = ($72<<16>>16)==(0);
       if (!($73)) {
        $$0$pn = $$0$ph40;
        while(1) {
         $$2 = (($$0$pn) + 1|0);
         $74 = ($$2|0)==($__fmte|0);
         if ($74) {
          $$2$lcssa = $__fmte;
          break;
         }
         $75 = HEAP8[$$2>>0]|0;
         $isascii1$i4 = ($75<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $76 = $75 << 24 >> 24;
         $77 = (($69) + ($76<<1)|0);
         $78 = HEAP16[$77>>1]|0;
         $79 = $78 & 8192;
         $80 = ($79<<16>>16)==(0);
         if ($80) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn = $$2;
         }
        }
        $$pre$i$i$i16 = $$pre$i$i$i45;$$pre$i2$i$i20 = $60;$$pre$pre51 = $$pre$i$i$i45;$95 = $60;
        L39: while(1) {
         $81 = ($$pre$i$i$i16|0)==(0|0);
         if ($81) {
          $$pre$pre50 = $$pre$pre51;$93 = 0;
         } else {
          $82 = (($$pre$i$i$i16) + 12|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = (($$pre$i$i$i16) + 16|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = ($83|0)==($85|0);
          if ($86) {
           $87 = HEAP32[$$pre$i$i$i16>>2]|0;
           $88 = (($87) + 36|0);
           $89 = HEAP32[$88>>2]|0;
           $90 = (FUNCTION_TABLE_ii[$89 & 1023]($$pre$i$i$i16)|0);
           $91 = ($90|0)==(-1);
           if ($91) {
            HEAP32[$__b>>2] = 0;
            $$pre$pre50 = 0;$93 = 0;
           } else {
            $$pre$pre50 = $$pre$pre51;$93 = $$pre$i$i$i16;
           }
          } else {
           $$pre$pre50 = $$pre$pre51;$93 = $$pre$i$i$i16;
          }
         }
         $92 = ($93|0)==(0|0);
         $94 = ($95|0)==(0|0);
         do {
          if ($94) {
           $$pre$i2$i$i2043 = $$pre$i2$i$i20;
           label = 43;
          } else {
           $96 = (($95) + 12|0);
           $97 = HEAP32[$96>>2]|0;
           $98 = (($95) + 16|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = ($97|0)==($99|0);
           if (!($100)) {
            if ($92) {
             $$pre$i2$i$i2042 = $$pre$i2$i$i20;$189 = $95;
             break;
            } else {
             $$pre$pre50$lcssa = $$pre$pre50;
             break L39;
            }
           }
           $101 = HEAP32[$95>>2]|0;
           $102 = (($101) + 36|0);
           $103 = HEAP32[$102>>2]|0;
           $104 = (FUNCTION_TABLE_ii[$103 & 1023]($95)|0);
           $105 = ($104|0)==(-1);
           if ($105) {
            HEAP32[$__e>>2] = 0;
            $$pre$i2$i$i2043 = 0;
            label = 43;
            break;
           } else {
            $106 = ($$pre$i2$i$i20|0)==(0|0);
            $tmp$i$i22 = $92 ^ $106;
            if ($tmp$i$i22) {
             $$pre$i2$i$i2042 = $$pre$i2$i$i20;$189 = $$pre$i2$i$i20;
             break;
            } else {
             $$pre$pre50$lcssa = $$pre$pre50;
             break L39;
            }
           }
          }
         } while(0);
         if ((label|0) == 43) {
          label = 0;
          if ($92) {
           $$pre$pre50$lcssa = $$pre$pre50;
           break;
          } else {
           $$pre$i2$i$i2042 = $$pre$i2$i$i2043;$189 = 0;
          }
         }
         $107 = (($93) + 12|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = (($93) + 16|0);
         $110 = HEAP32[$109>>2]|0;
         $111 = ($108|0)==($110|0);
         if ($111) {
          $112 = HEAP32[$93>>2]|0;
          $113 = (($112) + 36|0);
          $114 = HEAP32[$113>>2]|0;
          $115 = (FUNCTION_TABLE_ii[$114 & 1023]($93)|0);
          $$0$i$i = $115;
         } else {
          $116 = HEAP8[$108>>0]|0;
          $117 = $116&255;
          $$0$i$i = $117;
         }
         $118 = $$0$i$i&255;
         $isascii1$i23 = ($118<<24>>24)>(-1);
         if (!($isascii1$i23)) {
          $$pre$pre50$lcssa = $$pre$pre50;
          break;
         }
         $sext = $$0$i$i << 24;
         $119 = $sext >> 24;
         $120 = HEAP32[$9>>2]|0;
         $121 = (($120) + ($119<<1)|0);
         $122 = HEAP16[$121>>1]|0;
         $123 = $122 & 8192;
         $124 = ($123<<16>>16)==(0);
         if ($124) {
          $$pre$pre50$lcssa = $$pre$pre50;
          break;
         }
         $125 = HEAP32[$107>>2]|0;
         $126 = HEAP32[$109>>2]|0;
         $127 = ($125|0)==($126|0);
         if ($127) {
          $128 = HEAP32[$93>>2]|0;
          $129 = (($128) + 40|0);
          $130 = HEAP32[$129>>2]|0;
          (FUNCTION_TABLE_ii[$130 & 1023]($93)|0);
         } else {
          $131 = (($125) + 1|0);
          HEAP32[$107>>2] = $131;
         }
         $$pre$i$i$i16 = $93;$$pre$i2$i$i20 = $$pre$i2$i$i2042;$$pre$pre51 = $$pre$pre50;$95 = $189;
        }
        $$0$ph$be = $$2$lcssa;$$pre$pre49 = $$pre$pre50$lcssa;
        break;
       }
      }
      $132 = (($$pre$i$i$i45) + 12|0);
      $133 = HEAP32[$132>>2]|0;
      $134 = (($$pre$i$i$i45) + 16|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($133|0)==($135|0);
      if ($136) {
       $137 = HEAP32[$$pre$i$i$i45>>2]|0;
       $138 = (($137) + 36|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = (FUNCTION_TABLE_ii[$139 & 1023]($$pre$i$i$i45)|0);
       $$0$i$i25 = $140;
      } else {
       $141 = HEAP8[$133>>0]|0;
       $142 = $141&255;
       $$0$i$i25 = $142;
      }
      $143 = $$0$i$i25&255;
      $144 = HEAP32[$4>>2]|0;
      $145 = (($144) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (FUNCTION_TABLE_iii[$146 & 1023]($4,$143)|0);
      $148 = HEAP8[$$0$ph40>>0]|0;
      $149 = HEAP32[$4>>2]|0;
      $150 = (($149) + 12|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = (FUNCTION_TABLE_iii[$151 & 1023]($4,$148)|0);
      $153 = ($147<<24>>24)==($152<<24>>24);
      if (!($153)) {
       $$pre$i$i$i45$lcssa54 = $$pre$i$i$i45;
       label = 62;
       break L7;
      }
      $154 = HEAP32[$132>>2]|0;
      $155 = HEAP32[$134>>2]|0;
      $156 = ($154|0)==($155|0);
      if ($156) {
       $157 = HEAP32[$$pre$i$i$i45>>2]|0;
       $158 = (($157) + 40|0);
       $159 = HEAP32[$158>>2]|0;
       (FUNCTION_TABLE_ii[$159 & 1023]($$pre$i$i$i45)|0);
      } else {
       $160 = (($154) + 1|0);
       HEAP32[$132>>2] = $160;
      }
      $161 = (($$0$ph40) + 1|0);
      $$0$ph$be = $161;$$pre$pre49 = $$pre$i$i$i45;
     }
    } while(0);
    $64 = ($$0$ph$be|0)!=($__fmte|0);
    $65 = HEAP32[$__err>>2]|0;
    $66 = ($65|0)==(0);
    $or$cond38 = $64 & $66;
    if ($or$cond38) {
     $$0$ph40 = $$0$ph$be;
    } else {
     $$pre$pre49$lcssa = $$pre$pre49;
     label = 63;
     break;
    }
   }
   if ((label|0) == 15) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa;
    break;
   }
   else if ((label|0) == 19) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa55;
    break;
   }
   else if ((label|0) == 22) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa56;
    break;
   }
   else if ((label|0) == 62) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i7 = $$pre$i$i$i45$lcssa54;
    break;
   }
   else if ((label|0) == 63) {
    $$pre$i$i$i7 = $$pre$pre49$lcssa;
    break;
   }
  }
 } while(0);
 $162 = ($$pre$i$i$i7|0)==(0|0);
 if ($162) {
  $174 = 0;
 } else {
  $163 = (($$pre$i$i$i7) + 12|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = (($$pre$i$i$i7) + 16|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = ($164|0)==($166|0);
  if ($167) {
   $168 = HEAP32[$$pre$i$i$i7>>2]|0;
   $169 = (($168) + 36|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (FUNCTION_TABLE_ii[$170 & 1023]($$pre$i$i$i7)|0);
   $172 = ($171|0)==(-1);
   if ($172) {
    HEAP32[$__b>>2] = 0;
    $174 = 0;
   } else {
    $174 = $$pre$i$i$i7;
   }
  } else {
   $174 = $$pre$i$i$i7;
  }
 }
 $173 = ($174|0)==(0|0);
 $175 = HEAP32[$__e>>2]|0;
 $176 = ($175|0)==(0|0);
 do {
  if ($176) {
   label = 73;
  } else {
   $177 = (($175) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($175) + 16|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($178|0)==($180|0);
   if ($181) {
    $182 = HEAP32[$175>>2]|0;
    $183 = (($182) + 36|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (FUNCTION_TABLE_ii[$184 & 1023]($175)|0);
    $186 = ($185|0)==(-1);
    if ($186) {
     HEAP32[$__e>>2] = 0;
     label = 73;
     break;
    }
   }
   if (!($173)) {
    label = 74;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  if ($173) {
   label = 74;
  }
 }
 if ((label|0) == 74) {
  $187 = HEAP32[$__err>>2]|0;
  $188 = $187 | 2;
  HEAP32[$__err>>2] = $188;
 }
 HEAP32[$agg$result>>2] = $174;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5624,((5624 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6720|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6720|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6720|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 276|0;
 $$byval_copy29 = sp + 272|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 264|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 256|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 248|0;
 $$byval_copy22 = sp + 244|0;
 $$byval_copy21 = sp + 240|0;
 $$byval_copy20 = sp + 236|0;
 $$byval_copy19 = sp + 232|0;
 $$byval_copy18 = sp + 228|0;
 $$byval_copy17 = sp + 224|0;
 $$byval_copy16 = sp + 220|0;
 $$byval_copy15 = sp + 216|0;
 $$byval_copy14 = sp + 212|0;
 $$byval_copy13 = sp + 208|0;
 $$byval_copy12 = sp + 204|0;
 $$byval_copy11 = sp + 200|0;
 $$byval_copy10 = sp + 196|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 188|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 180|0;
 $$byval_copy5 = sp + 176|0;
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 164|0;
 $$byval_copy1 = sp + 160|0;
 $$byval_copy = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(422,($1|0),(6720|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   label = 34;
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$40);
   label = 34;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   label = 34;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,5648,((5648 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   label = 34;
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,5664,((5664 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   label = 34;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   label = 34;
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,5672,((5672 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   label = 34;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   label = 34;
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,5632,((5632 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   label = 34;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   label = 34;
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   label = 34;
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   label = 34;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   label = 34;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   label = 34;
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 34;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   label = 34;
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   label = 34;
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 34;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   label = 34;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   label = 34;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,5640,((5640 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   label = 34;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   label = 34;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
   label = 34;
  }
  }
 } while(0);
 if ((label|0) == 34) {
  $143 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $143;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 33;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 33;
     break;
    }
   }
   if (!($68)) {
    label = 34;
   }
  }
 } while(0);
 if ((label|0) == 33) {
  if ($68) {
   label = 34;
  }
 }
 if ((label|0) == 34) {
  $81 = HEAP32[$__err>>2]|0;
  $82 = $81 | 2;
  HEAP32[$__err>>2] = $82;
 }
 return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $36 & $37;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $41 = HEAP32[$__ct>>2]|0;
   $42 = (($41) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
   $45 = ($44<<24>>24)==(37);
   if (!($45)) {
    $46 = HEAP32[$__err>>2]|0;
    $47 = $46 | 4;
    HEAP32[$__err>>2] = $47;
    break;
   }
   $48 = HEAP32[$__b>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($48) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)==($52|0);
   if ($53) {
    $54 = HEAP32[$48>>2]|0;
    $55 = (($54) + 40|0);
    $56 = HEAP32[$55>>2]|0;
    (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $59 = $$pre;
   } else {
    $57 = (($50) + 1|0);
    HEAP32[$49>>2] = $57;
    $59 = $48;
   }
   $58 = ($59|0)==(0|0);
   do {
    if ($58) {
     $71 = 0;
    } else {
     $60 = (($59) + 12|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 16|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($61|0)==($63|0);
     if ($64) {
      $65 = HEAP32[$59>>2]|0;
      $66 = (($65) + 36|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = (FUNCTION_TABLE_ii[$67 & 1023]($59)|0);
      $69 = ($68|0)==(-1);
      if ($69) {
       HEAP32[$__b>>2] = 0;
       $71 = 0;
       break;
      } else {
       $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
       $71 = $$pre$i$i$i2;
       break;
      }
     } else {
      $71 = $59;
     }
    }
   } while(0);
   $70 = ($71|0)==(0|0);
   $72 = ($$pre$i2$i$i611|0)==(0|0);
   do {
    if ($72) {
     label = 31;
    } else {
     $73 = (($$pre$i2$i$i611) + 12|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = (($$pre$i2$i$i611) + 16|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($74|0)==($76|0);
     if ($77) {
      $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
      $79 = (($78) + 36|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
      $82 = ($81|0)==(-1);
      if ($82) {
       HEAP32[$__e>>2] = 0;
       label = 31;
       break;
      }
     }
     if ($70) {
      break L16;
     }
    }
   } while(0);
   if ((label|0) == 31) {
    if (!($70)) {
     break;
    }
   }
   $83 = HEAP32[$__err>>2]|0;
   $84 = $83 | 2;
   HEAP32[$__err>>2] = $84;
  }
 } while(0);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph45 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i50 = 0, $$pre$i$i$i50$lcssa = 0, $$pre$i$i$i50$lcssa59 = 0, $$pre$i$i$i50$lcssa60 = 0;
 var $$pre$i$i$i50$lcssa61 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1247 = 0, $$pre$i3$i$i1248 = 0, $$pre$pre$pre = 0, $$pre$pre54 = 0, $$pre$pre54$lcssa = 0, $$pre$pre55 = 0, $$pre$pre55$lcssa = 0, $$pre$pre56 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $or$cond43 = 0;
 var $phitmp$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(422,($0|0),(6712|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  $36 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($36)|0);
  ___resumeException($34|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 do {
  if ($8) {
   $$pre$pre$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i21 = $$pre$pre$pre;
  } else {
   $$0$ph45 = $__fmtb;
   L6: while(1) {
    $$pre46 = HEAP32[$__b>>2]|0;
    $9 = ($$pre46|0)==(0|0);
    do {
     if ($9) {
      $$pre$i$i$i50 = 0;$182 = 1;
     } else {
      $10 = (($$pre46) + 12|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = (($$pre46) + 16|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($11|0)==($13|0);
      if ($14) {
       $15 = HEAP32[$$pre46>>2]|0;
       $16 = (($15) + 36|0);
       $17 = HEAP32[$16>>2]|0;
       $18 = (FUNCTION_TABLE_ii[$17 & 1023]($$pre46)|0);
       $$0$i$i$i$i = $18;
      } else {
       $19 = HEAP32[$11>>2]|0;
       $$0$i$i$i$i = $19;
      }
      $20 = ($$0$i$i$i$i|0)==(-1);
      if ($20) {
       HEAP32[$__b>>2] = 0;
       $$pre$i$i$i50 = 0;$182 = 1;
       break;
      } else {
       $phitmp$i$i$i = ($$pre46|0)==(0|0);
       $$pre$i$i$i50 = $$pre46;$182 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==(0|0);
    do {
     if ($22) {
      label = 18;
     } else {
      $23 = (($21) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($21) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if ($27) {
       $28 = HEAP32[$21>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (FUNCTION_TABLE_ii[$30 & 1023]($21)|0);
       $$0$i$i1$i$i = $31;
      } else {
       $32 = HEAP32[$24>>2]|0;
       $$0$i$i1$i$i = $32;
      }
      $33 = ($$0$i$i1$i$i|0)==(-1);
      if ($33) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($182) {
        $60 = $21;
        break;
       } else {
        $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
        label = 20;
        break L6;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($182) {
      $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
      label = 20;
      break;
     } else {
      $60 = 0;
     }
    }
    $37 = HEAP32[$$0$ph45>>2]|0;
    $38 = HEAP32[$4>>2]|0;
    $39 = (($38) + 52|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (FUNCTION_TABLE_iiii[$40 & 1023]($4,$37,0)|0);
    $42 = ($41<<24>>24)==(37);
    do {
     if ($42) {
      $43 = (($$0$ph45) + 4|0);
      $44 = ($43|0)==($__fmte|0);
      if ($44) {
       $$pre$i$i$i50$lcssa60 = $$pre$i$i$i50;
       label = 24;
       break L6;
      }
      $45 = HEAP32[$43>>2]|0;
      $46 = HEAP32[$4>>2]|0;
      $47 = (($46) + 52|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_iiii[$48 & 1023]($4,$45,0)|0);
      if ((($49<<24>>24) == 48) | (($49<<24>>24) == 69)) {
       $50 = (($$0$ph45) + 8|0);
       $51 = ($50|0)==($__fmte|0);
       if ($51) {
        $$pre$i$i$i50$lcssa61 = $$pre$i$i$i50;
        label = 27;
        break L6;
       }
       $52 = HEAP32[$50>>2]|0;
       $53 = HEAP32[$4>>2]|0;
       $54 = (($53) + 52|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = (FUNCTION_TABLE_iiii[$55 & 1023]($4,$52,0)|0);
       $63 = $43;$__cmd$0 = $56;$__opt$0 = $49;
      } else {
       $63 = $$0$ph45;$__cmd$0 = $49;$__opt$0 = 0;
      }
      $57 = HEAP32[$this>>2]|0;
      $58 = (($57) + 36|0);
      $59 = HEAP32[$58>>2]|0;
      HEAP32[$2>>2] = $$pre$i$i$i50;
      HEAP32[$3>>2] = $60;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$59 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $61 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $61;
      $62 = (($63) + 8|0);
      $$0$ph$be = $62;$$pre$pre54 = $61;
     } else {
      $67 = HEAP32[$$0$ph45>>2]|0;
      $68 = HEAP32[$4>>2]|0;
      $69 = (($68) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (FUNCTION_TABLE_iiii[$70 & 1023]($4,8192,$67)|0);
      if (!($71)) {
       $126 = (($$pre$i$i$i50) + 12|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = (($$pre$i$i$i50) + 16|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = ($127|0)==($129|0);
       if ($130) {
        $131 = HEAP32[$$pre$i$i$i50>>2]|0;
        $132 = (($131) + 36|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = (FUNCTION_TABLE_ii[$133 & 1023]($$pre$i$i$i50)|0);
        $$0$i$i16 = $134;
       } else {
        $135 = HEAP32[$127>>2]|0;
        $$0$i$i16 = $135;
       }
       $136 = HEAP32[$4>>2]|0;
       $137 = (($136) + 28|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_iii[$138 & 1023]($4,$$0$i$i16)|0);
       $140 = HEAP32[$$0$ph45>>2]|0;
       $141 = HEAP32[$4>>2]|0;
       $142 = (($141) + 28|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = (FUNCTION_TABLE_iii[$143 & 1023]($4,$140)|0);
       $145 = ($139|0)==($144|0);
       if (!($145)) {
        $$pre$i$i$i50$lcssa59 = $$pre$i$i$i50;
        label = 67;
        break L6;
       }
       $146 = HEAP32[$126>>2]|0;
       $147 = HEAP32[$128>>2]|0;
       $148 = ($146|0)==($147|0);
       if ($148) {
        $149 = HEAP32[$$pre$i$i$i50>>2]|0;
        $150 = (($149) + 40|0);
        $151 = HEAP32[$150>>2]|0;
        (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i$i$i50)|0);
       } else {
        $152 = (($146) + 4|0);
        HEAP32[$126>>2] = $152;
       }
       $153 = (($$0$ph45) + 4|0);
       $$0$ph$be = $153;$$pre$pre54 = $$pre$i$i$i50;
       break;
      }
      $$0$pn = $$0$ph45;
      while(1) {
       $$2 = (($$0$pn) + 4|0);
       $72 = ($$2|0)==($__fmte|0);
       if ($72) {
        $$2$lcssa = $__fmte;
        break;
       }
       $73 = HEAP32[$$2>>2]|0;
       $74 = HEAP32[$4>>2]|0;
       $75 = (($74) + 12|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = (FUNCTION_TABLE_iiii[$76 & 1023]($4,8192,$73)|0);
       if ($77) {
        $$0$pn = $$2;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i6 = $$pre$i$i$i50;$$pre$i3$i$i12 = $60;$$pre$pre56 = $$pre$i$i$i50;$91 = $60;
      L54: while(1) {
       $78 = ($$pre$i$i$i6|0)==(0|0);
       if ($78) {
        $$pre$pre55 = $$pre$pre56;$103 = 1;$105 = 0;
       } else {
        $79 = (($$pre$i$i$i6) + 12|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($$pre$i$i$i6) + 16|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($80|0)==($82|0);
        if ($83) {
         $84 = HEAP32[$$pre$i$i$i6>>2]|0;
         $85 = (($84) + 36|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = (FUNCTION_TABLE_ii[$86 & 1023]($$pre$i$i$i6)|0);
         $$0$i$i$i$i4 = $87;
        } else {
         $88 = HEAP32[$80>>2]|0;
         $$0$i$i$i$i4 = $88;
        }
        $89 = ($$0$i$i$i$i4|0)==(-1);
        if ($89) {
         HEAP32[$__b>>2] = 0;
         $$pre$pre55 = 0;$103 = 1;$105 = 0;
        } else {
         $$pre$pre55 = $$pre$pre56;$103 = 0;$105 = $$pre$i$i$i6;
        }
       }
       $90 = ($91|0)==(0|0);
       do {
        if ($90) {
         $$pre$i3$i$i1248 = $$pre$i3$i$i12;
         label = 49;
        } else {
         $92 = (($91) + 12|0);
         $93 = HEAP32[$92>>2]|0;
         $94 = (($91) + 16|0);
         $95 = HEAP32[$94>>2]|0;
         $96 = ($93|0)==($95|0);
         if ($96) {
          $97 = HEAP32[$91>>2]|0;
          $98 = (($97) + 36|0);
          $99 = HEAP32[$98>>2]|0;
          $100 = (FUNCTION_TABLE_ii[$99 & 1023]($91)|0);
          $$0$i$i1$i$i10 = $100;
         } else {
          $101 = HEAP32[$93>>2]|0;
          $$0$i$i1$i$i10 = $101;
         }
         $102 = ($$0$i$i1$i$i10|0)==(-1);
         if ($102) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i1248 = 0;
          label = 49;
          break;
         } else {
          $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
          $tmp$i$i15 = $103 ^ $phitmp$i4$i$i13;
          if ($tmp$i$i15) {
           $$pre$i3$i$i1247 = $$pre$i3$i$i12;$183 = $$pre$i3$i$i12;
           break;
          } else {
           $$pre$pre55$lcssa = $$pre$pre55;
           break L54;
          }
         }
        }
       } while(0);
       if ((label|0) == 49) {
        label = 0;
        if ($103) {
         $$pre$pre55$lcssa = $$pre$pre55;
         break;
        } else {
         $$pre$i3$i$i1247 = $$pre$i3$i$i1248;$183 = 0;
        }
       }
       $104 = (($105) + 12|0);
       $106 = HEAP32[$104>>2]|0;
       $107 = (($105) + 16|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ($106|0)==($108|0);
       if ($109) {
        $110 = HEAP32[$105>>2]|0;
        $111 = (($110) + 36|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = (FUNCTION_TABLE_ii[$112 & 1023]($105)|0);
        $$0$i$i = $113;
       } else {
        $114 = HEAP32[$106>>2]|0;
        $$0$i$i = $114;
       }
       $115 = HEAP32[$4>>2]|0;
       $116 = (($115) + 12|0);
       $117 = HEAP32[$116>>2]|0;
       $118 = (FUNCTION_TABLE_iiii[$117 & 1023]($4,8192,$$0$i$i)|0);
       if (!($118)) {
        $$pre$pre55$lcssa = $$pre$pre55;
        break;
       }
       $119 = HEAP32[$104>>2]|0;
       $120 = HEAP32[$107>>2]|0;
       $121 = ($119|0)==($120|0);
       if ($121) {
        $122 = HEAP32[$105>>2]|0;
        $123 = (($122) + 40|0);
        $124 = HEAP32[$123>>2]|0;
        (FUNCTION_TABLE_ii[$124 & 1023]($105)|0);
       } else {
        $125 = (($119) + 4|0);
        HEAP32[$104>>2] = $125;
       }
       $$pre$i$i$i6 = $105;$$pre$i3$i$i12 = $$pre$i3$i$i1247;$$pre$pre56 = $$pre$pre55;$91 = $183;
      }
      $$0$ph$be = $$2$lcssa;$$pre$pre54 = $$pre$pre55$lcssa;
     }
    } while(0);
    $64 = ($$0$ph$be|0)!=($__fmte|0);
    $65 = HEAP32[$__err>>2]|0;
    $66 = ($65|0)==(0);
    $or$cond43 = $64 & $66;
    if ($or$cond43) {
     $$0$ph45 = $$0$ph$be;
    } else {
     $$pre$pre54$lcssa = $$pre$pre54;
     label = 68;
     break;
    }
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa60;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa61;
    break;
   }
   else if ((label|0) == 67) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i21 = $$pre$i$i$i50$lcssa59;
    break;
   }
   else if ((label|0) == 68) {
    $$pre$i$i$i21 = $$pre$pre54$lcssa;
    break;
   }
  }
 } while(0);
 $154 = ($$pre$i$i$i21|0)==(0|0);
 if ($154) {
  $181 = 0;$184 = 1;
 } else {
  $155 = (($$pre$i$i$i21) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($$pre$i$i$i21) + 16|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($156|0)==($158|0);
  if ($159) {
   $160 = HEAP32[$$pre$i$i$i21>>2]|0;
   $161 = (($160) + 36|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = (FUNCTION_TABLE_ii[$162 & 1023]($$pre$i$i$i21)|0);
   $$0$i$i$i$i19 = $163;
  } else {
   $164 = HEAP32[$156>>2]|0;
   $$0$i$i$i$i19 = $164;
  }
  $165 = ($$0$i$i$i$i19|0)==(-1);
  if ($165) {
   HEAP32[$__b>>2] = 0;
   $181 = 0;$184 = 1;
  } else {
   $181 = $$pre$i$i$i21;$184 = 0;
  }
 }
 $166 = HEAP32[$__e>>2]|0;
 $167 = ($166|0)==(0|0);
 do {
  if ($167) {
   label = 81;
  } else {
   $168 = (($166) + 12|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = (($166) + 16|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = ($169|0)==($171|0);
   if ($172) {
    $173 = HEAP32[$166>>2]|0;
    $174 = (($173) + 36|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (FUNCTION_TABLE_ii[$175 & 1023]($166)|0);
    $$0$i$i1$i$i25 = $176;
   } else {
    $177 = HEAP32[$169>>2]|0;
    $$0$i$i1$i$i25 = $177;
   }
   $178 = ($$0$i$i1$i$i25|0)==(-1);
   if ($178) {
    HEAP32[$__e>>2] = 0;
    label = 81;
    break;
   } else {
    if ($184) {
     break;
    } else {
     label = 83;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 81) {
  if ($184) {
   label = 83;
  }
 }
 if ((label|0) == 83) {
  $179 = HEAP32[$__err>>2]|0;
  $180 = $179 | 2;
  HEAP32[$__err>>2] = $180;
 }
 HEAP32[$agg$result>>2] = $181;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,5776,((5776 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6712|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if ($11) {
  $12 = (($10|0) / 12)&-1;
  $13 = (($12|0) % 7)&-1;
  HEAP32[$__w>>2] = $13;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6712|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if ($12) {
  $13 = (($11|0) / 12)&-1;
  $14 = (($13|0) % 12)&-1;
  HEAP32[$__m>>2] = $14;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(422,($0|0),(6712|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ($2|0)<(69);
  if ($6) {
   $7 = (($2) + 2000)|0;
   $__t$0 = $7;
  } else {
   $$off = (($2) + -69)|0;
   $8 = ($$off>>>0)<(31);
   $9 = (($2) + 1900)|0;
   $$ = $8 ? $9 : $2;
   $__t$0 = $$;
  }
  $10 = (($__t$0) + -1900)|0;
  HEAP32[$__y>>2] = $10;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 276|0;
 $$byval_copy29 = sp + 272|0;
 $$byval_copy28 = sp + 268|0;
 $$byval_copy27 = sp + 264|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 256|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 248|0;
 $$byval_copy22 = sp + 244|0;
 $$byval_copy21 = sp + 240|0;
 $$byval_copy20 = sp + 236|0;
 $$byval_copy19 = sp + 232|0;
 $$byval_copy18 = sp + 228|0;
 $$byval_copy17 = sp + 224|0;
 $$byval_copy16 = sp + 220|0;
 $$byval_copy15 = sp + 216|0;
 $$byval_copy14 = sp + 212|0;
 $$byval_copy13 = sp + 208|0;
 $$byval_copy12 = sp + 204|0;
 $$byval_copy11 = sp + 200|0;
 $$byval_copy10 = sp + 196|0;
 $$byval_copy9 = sp + 192|0;
 $$byval_copy8 = sp + 188|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 180|0;
 $$byval_copy5 = sp + 176|0;
 $$byval_copy4 = sp + 172|0;
 $$byval_copy3 = sp + 168|0;
 $$byval_copy2 = sp + 164|0;
 $$byval_copy1 = sp + 160|0;
 $$byval_copy = sp + 156|0;
 $1 = sp + 152|0;
 $2 = sp + 148|0;
 $3 = sp + 144|0;
 $4 = sp + 140|0;
 $5 = sp + 136|0;
 $6 = sp + 132|0;
 $7 = sp + 128|0;
 $8 = sp + 124|0;
 $9 = sp + 120|0;
 $10 = sp + 116|0;
 $11 = sp + 112|0;
 $12 = sp + 108|0;
 $13 = sp + 104|0;
 $14 = sp + 100|0;
 $15 = sp + 96|0;
 $16 = sp + 92|0;
 $17 = sp + 88|0;
 $18 = sp + 84|0;
 $19 = sp + 80|0;
 $20 = sp + 76|0;
 $21 = sp + 72|0;
 $22 = sp + 68|0;
 $23 = sp + 64|0;
 $24 = sp + 60|0;
 $25 = sp + 56|0;
 $26 = sp + 52|0;
 $27 = sp + 48|0;
 $28 = sp + 44|0;
 $29 = sp + 40|0;
 $30 = sp + 36|0;
 $31 = sp + 32|0;
 $32 = sp + 28|0;
 $33 = sp + 24|0;
 $34 = sp + 20|0;
 $35 = sp + 16|0;
 $36 = sp + 12|0;
 $37 = sp + 8|0;
 $38 = sp + 4|0;
 $39 = sp;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(422,($1|0),(6712|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   label = 34;
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$40);
   label = 34;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   label = 34;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,5872,((5872 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   label = 34;
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,5920,((5920 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   label = 34;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   label = 34;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   label = 34;
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,5808,((5808 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   label = 34;
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   label = 34;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   label = 34;
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   label = 34;
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   label = 34;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   label = 34;
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   label = 34;
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,5944,((5944 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   label = 34;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   label = 34;
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   label = 34;
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   label = 34;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   label = 34;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   label = 34;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,5840,((5840 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   label = 34;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   label = 34;
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
   label = 34;
  }
  }
 } while(0);
 if ((label|0) == 34) {
  $143 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $143;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 38;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   } else {
    if ($80) {
     break;
    } else {
     label = 40;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if ($80) {
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $76 = HEAP32[$__err>>2]|0;
  $77 = $76 | 2;
  HEAP32[$__err>>2] = $77;
 }
 return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 do {
  if ($23) {
   $25 = HEAP32[$__err>>2]|0;
   $26 = $25 | 4;
   HEAP32[$__err>>2] = $26;
  } else {
   $27 = HEAP32[$__e>>2]|0;
   HEAP32[$0>>2] = $27;
   $28 = (($5) + 24|0);
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
   $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
   $30 = ($29|0)==($5|0);
   $31 = HEAP32[$__h>>2]|0;
   $32 = ($31|0)==(12);
   $or$cond = $30 & $32;
   if ($or$cond) {
    HEAP32[$__h>>2] = 0;
    break;
   }
   $33 = $29;
   $34 = $5;
   $35 = (($33) - ($34))|0;
   $36 = ($35|0)==(12);
   $37 = ($31|0)<(12);
   $or$cond3 = $36 & $37;
   if ($or$cond3) {
    $38 = (($31) + 12)|0;
    HEAP32[$__h>>2] = $38;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = (($2) + -1900)|0;
  HEAP32[$__y>>2] = $6;
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 52|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
   $43 = ($42<<24>>24)==(37);
   if (!($43)) {
    $44 = HEAP32[$__err>>2]|0;
    $45 = $44 | 4;
    HEAP32[$__err>>2] = $45;
    break;
   }
   $46 = HEAP32[$__b>>2]|0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (($46) + 16|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($48|0)==($50|0);
   if ($51) {
    $52 = HEAP32[$46>>2]|0;
    $53 = (($52) + 40|0);
    $54 = HEAP32[$53>>2]|0;
    (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
    $$pre = HEAP32[$__b>>2]|0;
    $57 = $$pre;
   } else {
    $55 = (($48) + 4|0);
    HEAP32[$47>>2] = $55;
    $57 = $46;
   }
   $56 = ($57|0)==(0|0);
   do {
    if ($56) {
     $84 = 1;
    } else {
     $58 = (($57) + 12|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = (($57) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($59|0)==($61|0);
     if ($62) {
      $63 = HEAP32[$57>>2]|0;
      $64 = (($63) + 36|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = (FUNCTION_TABLE_ii[$65 & 1023]($57)|0);
      $$0$i$i$i$i1 = $66;
     } else {
      $67 = HEAP32[$59>>2]|0;
      $$0$i$i$i$i1 = $67;
     }
     $68 = ($$0$i$i$i$i1|0)==(-1);
     if ($68) {
      HEAP32[$__b>>2] = 0;
      $84 = 1;
      break;
     } else {
      $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
      $84 = $phitmp$i$i$i4;
      break;
     }
    }
   } while(0);
   $69 = ($$pre$i3$i$i915|0)==(0|0);
   do {
    if ($69) {
     label = 38;
    } else {
     $70 = (($$pre$i3$i$i915) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (($$pre$i3$i$i915) + 16|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)==($73|0);
     if ($74) {
      $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
      $76 = (($75) + 36|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
      $$0$i$i1$i$i7 = $78;
     } else {
      $79 = HEAP32[$71>>2]|0;
      $$0$i$i1$i$i7 = $79;
     }
     $80 = ($$0$i$i1$i$i7|0)==(-1);
     if ($80) {
      HEAP32[$__e>>2] = 0;
      label = 38;
      break;
     } else {
      if ($84) {
       break L22;
      } else {
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 38) {
    if (!($84)) {
     break;
    }
   }
   $81 = HEAP32[$__err>>2]|0;
   $82 = $81 | 2;
   HEAP32[$__err>>2] = $82;
  }
 } while(0);
 return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(559)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = ($0|0)==($1|0);
   if (!($4)) {
    $5 = HEAP32[$this>>2]|0;
    __THREW__ = 0;
    invoke_vi(572,($5|0));
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if ($7) {
     break;
    }
   }
   return;
  }
 } while(0);
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
 } else {
  $$01$i$i = $__nar;$9 = $5;
  while(1) {
   $7 = HEAP8[$$01$i$i>>0]|0;
   $8 = ($9|0)==(0|0);
   do {
    if ($8) {
     $25 = 0;
    } else {
     $10 = (($9) + 24|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($9) + 28|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($11|0)==($13|0);
     if ($14) {
      $16 = HEAP32[$9>>2]|0;
      $17 = (($16) + 52|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $7&255;
      $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
      $21 = ($20|0)==(-1);
      $$$i = $21 ? 0 : $9;
      $25 = $$$i;
      break;
     } else {
      $15 = (($11) + 1|0);
      HEAP32[$10>>2] = $15;
      HEAP8[$11>>0] = $7;
      $25 = $9;
      break;
     }
    }
   } while(0);
   $22 = (($$01$i$i) + 1|0);
   $23 = ($22|0)==($4|0);
   if ($23) {
    $$lcssa = $25;
    break;
   } else {
    $$01$i$i = $22;$9 = $25;
   }
  }
  $24 = $$lcssa;
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $23 = $5;
 } else {
  $$01$i$i = $__nar;$9 = $5;
  while(1) {
   $7 = HEAP32[$$01$i$i>>2]|0;
   $8 = ($9|0)==(0|0);
   if ($8) {
    $24 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $15 = HEAP32[$9>>2]|0;
     $16 = (($15) + 52|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
     $$0$i$i$i$i = $18;
    } else {
     $19 = (($11) + 4|0);
     HEAP32[$10>>2] = $19;
     HEAP32[$11>>2] = $7;
     $$0$i$i$i$i = $7;
    }
    $20 = ($$0$i$i$i$i|0)==(-1);
    $$$i = $20 ? 0 : $9;
    $24 = $$$i;
   }
   $21 = (($$01$i$i) + 4|0);
   $22 = ($21|0)==($4|0);
   if ($22) {
    $$lcssa = $24;
    break;
   } else {
    $$01$i$i = $21;$9 = $24;
   }
  }
  $23 = $$lcssa;
 }
 HEAP32[$agg$result>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(573,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if (!($22)) {
   __THREW__ = 0;
   (invoke_ii(574,($11|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    $25 = ___cxa_find_matching_catch(0|0)|0;
    $26 = tempRet0;
    ___clang_call_terminate($25);
    // unreachable;
   }
  }
  ___resumeException($20|0);
  // unreachable;
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(574,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(7600);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 16|0;
 $__wn = sp + 12|0;
 $__loc = sp + 8|0;
 $__neg = sp + 138|0;
 $0 = sp + 4|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 575;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(521,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$114 = $32;$$1212 = $33;$105 = 575;$106 = $__wbuf;
  label = 46;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(422,($__loc|0),(6720|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if ($7) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(576,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 11;
    } else {
     if ($11) {
      $14 = HEAP32[$5>>2]|0;
      $15 = (($14) + 32|0);
      $16 = HEAP32[$15>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($16|0,($5|0),(6336|0),(((6336 + 10|0))|0),($__atoms|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       label = 11;
       break;
      }
      $19 = HEAP32[$__wn>>2]|0;
      $20 = HEAP32[$__wb>>2]|0;
      $21 = $19;
      $22 = $20;
      $23 = (($21) - ($22))|0;
      $24 = ($23|0)>(98);
      if ($24) {
       $25 = (($23) + 2)|0;
       $26 = (_malloc($25)|0);
       $27 = ($26|0)==(0|0);
       if ($27) {
        __THREW__ = 0;
        invoke_v(565);
        $28 = __THREW__; __THREW__ = 0;
        $29 = $28&1;
        if ($29) {
         $30 = ___cxa_find_matching_catch()|0;
         $31 = tempRet0;
         $$0 = $30;$$01 = $31;
         break;
        } else {
         $38 = 0;$__nc$0 = 0;
        }
       } else {
        $38 = $26;$__nc$0 = $26;
       }
      } else {
       $38 = 0;$__nc$0 = $__nbuf;
      }
      $39 = HEAP8[$__neg>>0]|0;
      $40 = ($39<<24>>24)==(0);
      if ($40) {
       $__nc$1 = $__nc$0;
      } else {
       $41 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $41;
      }
      $42 = ($20>>>0)<($19>>>0);
      if ($42) {
       $43 = (($__atoms) + 10|0);
       $44 = $__atoms;
       $__nc$27 = $__nc$1;$__w$08 = $20;
       while(1) {
        $45 = HEAP8[$__w$08>>0]|0;
        $$01$i = $__atoms;
        while(1) {
         $48 = HEAP8[$$01$i>>0]|0;
         $49 = ($48<<24>>24)==($45<<24>>24);
         $47 = (($$01$i) + 1|0);
         if ($49) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $46 = ($47|0)==($43|0);
         if ($46) {
          $$0$lcssa$i = $43;
          break;
         } else {
          $$01$i = $47;
         }
        }
        $50 = $$0$lcssa$i;
        $51 = (($50) - ($44))|0;
        $52 = (6336 + ($51)|0);
        $53 = HEAP8[$52>>0]|0;
        HEAP8[$__nc$27>>0] = $53;
        $54 = (($__w$08) + 1|0);
        $55 = (($__nc$27) + 1|0);
        $56 = HEAP32[$__wn>>2]|0;
        $57 = ($54>>>0)<($56>>>0);
        if ($57) {
         $__nc$27 = $55;$__w$08 = $54;
        } else {
         $$lcssa = $55;
         break;
        }
       }
       $__nc$2$lcssa = $$lcssa;
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $58 = (_sscanf($__nbuf,6352,$vararg_buffer)|0);
      $59 = ($58|0)==(1);
      if (!($59)) {
       __THREW__ = 0;
       invoke_vi(577,(6360|0));
       $60 = __THREW__; __THREW__ = 0;
       $61 = $60&1;
       if ($61) {
        $36 = ___cxa_find_matching_catch()|0;
        $37 = tempRet0;
        _free($38);
        $$0 = $36;$$01 = $37;
        break;
       }
      }
      _free($38);
     }
     $62 = HEAP32[$__b>>2]|0;
     $63 = ($62|0)==(0|0);
     do {
      if ($63) {
       $77 = 0;
      } else {
       $64 = (($62) + 12|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($62) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($65|0)==($67|0);
       if ($68) {
        $69 = HEAP32[$62>>2]|0;
        $70 = (($69) + 36|0);
        $71 = HEAP32[$70>>2]|0;
        __THREW__ = 0;
        $72 = (invoke_ii($71|0,($62|0))|0);
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         label = 11;
         break L4;
        }
        $75 = ($72|0)==(-1);
        if ($75) {
         HEAP32[$__b>>2] = 0;
         $77 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $77 = $$pre$i$i$i;
         break;
        }
       } else {
        $77 = $62;
       }
      }
     } while(0);
     $76 = ($77|0)==(0|0);
     $78 = HEAP32[$__e>>2]|0;
     $79 = ($78|0)==(0|0);
     do {
      if ($79) {
       label = 37;
      } else {
       $80 = (($78) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = (($78) + 16|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = ($81|0)==($83|0);
       if (!($84)) {
        if ($76) {
         break;
        } else {
         label = 39;
         break;
        }
       }
       $85 = HEAP32[$78>>2]|0;
       $86 = (($85) + 36|0);
       $87 = HEAP32[$86>>2]|0;
       __THREW__ = 0;
       $88 = (invoke_ii($87|0,($78|0))|0);
       $89 = __THREW__; __THREW__ = 0;
       $90 = $89&1;
       if ($90) {
        label = 11;
        break L4;
       }
       $91 = ($88|0)==(-1);
       if ($91) {
        HEAP32[$__e>>2] = 0;
        label = 37;
        break;
       } else {
        if ($76) {
         break;
        } else {
         label = 39;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 37) {
      if ($76) {
       label = 39;
      }
     }
     if ((label|0) == 39) {
      $92 = HEAP32[$__err>>2]|0;
      $93 = $92 | 2;
      HEAP32[$__err>>2] = $93;
     }
     $94 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $94;
     $95 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
     $96 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $97 = ($96|0)==(0|0);
     if (!($97)) {
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   $34 = ___cxa_find_matching_catch()|0;
   $35 = tempRet0;
   $$0 = $34;$$01 = $35;
  }
  $103 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $104 = ($$pre|0)==(0|0);
  if ($104) {
   $$115 = $$0;$$1213 = $$01;
  } else {
   $$pre17 = HEAP32[$1>>2]|0;
   $$114 = $$0;$$1212 = $$01;$105 = $$pre17;$106 = $$pre;
   label = 46;
  }
 }
 if ((label|0) == 46) {
  __THREW__ = 0;
  invoke_vi($105|0,($106|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if ($108) {
   $109 = ___cxa_find_matching_catch(0|0)|0;
   $110 = tempRet0;
   ___clang_call_terminate($109);
   // unreachable;
  } else {
   $$115 = $$114;$$1213 = $$1212;
  }
 }
 ___resumeException($$115|0);
 // unreachable;
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i105 = 0, $$0$i$i112 = 0, $$0$i$i121 = 0, $$0$i$i131 = 0, $$0$i$i148 = 0, $$0$i$i34 = 0, $$0$i$i37 = 0, $$0$i$i50 = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$0$i$i66 = 0, $$0$i$i85 = 0, $$0$i$i88 = 0, $$274 = 0, $$275 = 0, $$276 = 0, $$277 = 0;
 var $$278 = 0, $$lcssa = 0, $$lcssa279 = 0, $$lcssa281 = 0, $$mask = 0, $$mask257 = 0, $$mask258 = 0, $$mask259 = 0, $$mask260 = 0, $$ph = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i135 = 0, $$pre$i$i$i152 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i40 = 0, $$pre$i$i$i71 = 0, $$pre$i$i$i95 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i139 = 0;
 var $$pre$i2$i$i156 = 0, $$pre$i2$i$i28 = 0, $$pre$i2$i$i44 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i99 = 0, $$pre242 = 0, $$pre244 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre249 = 0, $$pre250 = 0, $$pre252 = 0, $$pre254 = 0, $$pre256 = 0, $$sum = 0, $$sum261 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0;
 var $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa280 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0233 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0;
 var $__trailing_sign$0235 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i129 = 0, $isascii1$i162 = 0, $isascii1$i53 = 0, $isascii1$i64 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $sext = 0, $sext200 = 0, $sext201 = 0, $sext202 = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i101 = 0, $tmp$i$i141 = 0, $tmp$i$i158 = 0, $tmp$i$i30 = 0, $tmp$i$i46 = 0, $tmp$i$i77 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 80|0;
 $__gn = sp + 72|0;
 $__ge = sp + 68|0;
 $__pat = sp + 496|0;
 $__dp = sp + 493|0;
 $__ts = sp + 492|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 575;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(578,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $68 = ___cxa_find_matching_catch()|0;
   $69 = tempRet0;
   $lpad$phi$index = $68;$lpad$phi$index7 = $69;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 4|0);
   $8 = (($__nsn) + 8|0);
   $9 = (($__psn) + 4|0);
   $10 = (($__psn) + 8|0);
   $11 = $__flags & 512;
   $12 = ($11|0)!=(0);
   $13 = (($__sym) + 1|0);
   $14 = (($__sym) + 8|0);
   $15 = (($__sym) + 4|0);
   $16 = (($__spaces) + 1|0);
   $17 = (($__spaces) + 8|0);
   $18 = (($__spaces) + 4|0);
   $19 = (($__pat) + 3|0);
   $20 = (($__grp) + 4|0);
   $893 = $__gbuf;$__p$0233 = 0;$__trailing_sign$0235 = 0;
   L3: while(1) {
    $21 = HEAP32[$__b>>2]|0;
    $22 = ($21|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($21) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($21) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if ($27) {
       $28 = HEAP32[$21>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($21|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 24;
        break L3;
       }
       $34 = ($31|0)==(-1);
       if ($34) {
        HEAP32[$__b>>2] = 0;
        $36 = 0;
        break;
       } else {
        $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
        $36 = $$pre$i$i$i24;
        break;
       }
      } else {
       $36 = $21;
      }
     }
    } while(0);
    $35 = ($36|0)==(0|0);
    $37 = HEAP32[$__e>>2]|0;
    $38 = ($37|0)==(0|0);
    do {
     if ($38) {
      label = 15;
     } else {
      $39 = (($37) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($37) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)==($42|0);
      if (!($43)) {
       if ($35) {
        break;
       } else {
        $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
        label = 298;
        break L3;
       }
      }
      $44 = HEAP32[$37>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_ii($46|0,($37|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 24;
       break L3;
      }
      $50 = ($47|0)==(-1);
      if ($50) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       $$pre$i2$i$i28 = HEAP32[$__e>>2]|0;
       $51 = ($$pre$i2$i$i28|0)==(0|0);
       $tmp$i$i30 = $35 ^ $51;
       if ($tmp$i$i30) {
        break;
       } else {
        $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
        label = 298;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($35) {
      $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
      label = 298;
      break;
     }
    }
    $52 = (($__pat) + ($__p$0233)|0);
    $53 = HEAP8[$52>>0]|0;
    $54 = $53 << 24 >> 24;
    L25: do {
     switch ($54|0) {
     case 4:  {
      $55 = HEAP8[$__ts>>0]|0;
      $610 = $893;$__ng$0 = 0;
      L27: while(1) {
       $538 = HEAP32[$__b>>2]|0;
       $539 = ($538|0)==(0|0);
       do {
        if ($539) {
         $553 = 0;
        } else {
         $540 = (($538) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($538) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if ($544) {
          $545 = HEAP32[$538>>2]|0;
          $546 = (($545) + 36|0);
          $547 = HEAP32[$546>>2]|0;
          __THREW__ = 0;
          $548 = (invoke_ii($547|0,($538|0))|0);
          $549 = __THREW__; __THREW__ = 0;
          $550 = $549&1;
          if ($550) {
           label = 23;
           break L3;
          }
          $551 = ($548|0)==(-1);
          if ($551) {
           HEAP32[$__b>>2] = 0;
           $553 = 0;
           break;
          } else {
           $$pre$i$i$i135 = HEAP32[$__b>>2]|0;
           $553 = $$pre$i$i$i135;
           break;
          }
         } else {
          $553 = $538;
         }
        }
       } while(0);
       $552 = ($553|0)==(0|0);
       $554 = HEAP32[$__e>>2]|0;
       $555 = ($554|0)==(0|0);
       do {
        if ($555) {
         label = 212;
        } else {
         $556 = (($554) + 12|0);
         $557 = HEAP32[$556>>2]|0;
         $558 = (($554) + 16|0);
         $559 = HEAP32[$558>>2]|0;
         $560 = ($557|0)==($559|0);
         if (!($560)) {
          if ($552) {
           break;
          } else {
           $$lcssa279 = $610;$__ng$0$lcssa280 = $__ng$0;
           break L27;
          }
         }
         $561 = HEAP32[$554>>2]|0;
         $562 = (($561) + 36|0);
         $563 = HEAP32[$562>>2]|0;
         __THREW__ = 0;
         $564 = (invoke_ii($563|0,($554|0))|0);
         $565 = __THREW__; __THREW__ = 0;
         $566 = $565&1;
         if ($566) {
          label = 23;
          break L3;
         }
         $567 = ($564|0)==(-1);
         if ($567) {
          HEAP32[$__e>>2] = 0;
          label = 212;
          break;
         } else {
          $$pre$i2$i$i139 = HEAP32[$__e>>2]|0;
          $568 = ($$pre$i2$i$i139|0)==(0|0);
          $tmp$i$i141 = $552 ^ $568;
          if ($tmp$i$i141) {
           break;
          } else {
           $$lcssa279 = $610;$__ng$0$lcssa280 = $__ng$0;
           break L27;
          }
         }
        }
       } while(0);
       if ((label|0) == 212) {
        label = 0;
        if ($552) {
         $$lcssa279 = $610;$__ng$0$lcssa280 = $__ng$0;
         break;
        }
       }
       $569 = HEAP32[$__b>>2]|0;
       $570 = (($569) + 12|0);
       $571 = HEAP32[$570>>2]|0;
       $572 = (($569) + 16|0);
       $573 = HEAP32[$572>>2]|0;
       $574 = ($571|0)==($573|0);
       if ($574) {
        $575 = HEAP32[$569>>2]|0;
        $576 = (($575) + 36|0);
        $577 = HEAP32[$576>>2]|0;
        __THREW__ = 0;
        $578 = (invoke_ii($577|0,($569|0))|0);
        $579 = __THREW__; __THREW__ = 0;
        $580 = $579&1;
        if ($580) {
         label = 23;
         break L3;
        } else {
         $$0$i$i131 = $578;
        }
       } else {
        $581 = HEAP8[$571>>0]|0;
        $582 = $581&255;
        $$0$i$i131 = $582;
       }
       $583 = $$0$i$i131&255;
       $isascii1$i129 = ($583<<24>>24)>(-1);
       if ($isascii1$i129) {
        $sext200 = $$0$i$i131 << 24;
        $584 = $sext200 >> 24;
        $585 = HEAP32[$6>>2]|0;
        $586 = (($585) + ($584<<1)|0);
        $587 = HEAP16[$586>>1]|0;
        $588 = $587 & 2048;
        $589 = ($588<<16>>16)==(0);
        if ($589) {
         label = 223;
        } else {
         $590 = HEAP32[$__wn>>2]|0;
         $591 = HEAP32[$0>>2]|0;
         $592 = ($590|0)==($591|0);
         if ($592) {
          __THREW__ = 0;
          invoke_viii(579,($__wb|0),($__wn|0),($0|0));
          $593 = __THREW__; __THREW__ = 0;
          $594 = $593&1;
          if ($594) {
           label = 23;
           break L3;
          }
          $$pre254 = HEAP32[$__wn>>2]|0;
          $596 = $$pre254;
         } else {
          $596 = $590;
         }
         $595 = (($596) + 1|0);
         HEAP32[$__wn>>2] = $595;
         HEAP8[$596>>0] = $583;
         $597 = (($__ng$0) + 1)|0;
         $898 = $610;$__ng$1 = $597;
        }
       } else {
        label = 223;
       }
       if ((label|0) == 223) {
        label = 0;
        $598 = HEAP8[$__grp>>0]|0;
        $599 = $598 & 1;
        $600 = ($599<<24>>24)==(0);
        if ($600) {
         $602 = $598&255;
         $603 = $602 >>> 1;
         $605 = $603;
        } else {
         $601 = HEAP32[$20>>2]|0;
         $605 = $601;
        }
        $604 = ($605|0)!=(0);
        $606 = ($__ng$0|0)!=(0);
        $or$cond7 = $604 & $606;
        $607 = ($583<<24>>24)==($55<<24>>24);
        $or$cond13 = $or$cond7 & $607;
        if (!($or$cond13)) {
         $$lcssa279 = $610;$__ng$0$lcssa280 = $__ng$0;
         break;
        }
        $608 = HEAP32[$__ge>>2]|0;
        $609 = ($610|0)==($608|0);
        if ($609) {
         __THREW__ = 0;
         invoke_viii(580,($__gb|0),($__gn|0),($__ge|0));
         $611 = __THREW__; __THREW__ = 0;
         $612 = $611&1;
         if ($612) {
          label = 23;
          break L3;
         }
         $$pre256 = HEAP32[$__gn>>2]|0;
         $614 = $$pre256;
        } else {
         $614 = $610;
        }
        $613 = (($614) + 4|0);
        HEAP32[$__gn>>2] = $613;
        HEAP32[$614>>2] = $__ng$0;
        $898 = $613;$__ng$1 = 0;
       }
       $615 = HEAP32[$__b>>2]|0;
       $616 = (($615) + 12|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = (($615) + 16|0);
       $619 = HEAP32[$618>>2]|0;
       $620 = ($617|0)==($619|0);
       if ($620) {
        $621 = HEAP32[$615>>2]|0;
        $622 = (($621) + 40|0);
        $623 = HEAP32[$622>>2]|0;
        __THREW__ = 0;
        (invoke_ii($623|0,($615|0))|0);
        $624 = __THREW__; __THREW__ = 0;
        $625 = $624&1;
        if ($625) {
         label = 23;
         break L3;
        }
       } else {
        $626 = (($617) + 1|0);
        HEAP32[$616>>2] = $626;
       }
       $610 = $898;$__ng$0 = $__ng$1;
      }
      $627 = HEAP32[$__gb>>2]|0;
      $628 = ($627|0)!=($$lcssa279|0);
      $629 = ($__ng$0$lcssa280|0)!=(0);
      $or$cond9 = $628 & $629;
      if ($or$cond9) {
       $630 = HEAP32[$__ge>>2]|0;
       $631 = ($$lcssa279|0)==($630|0);
       if ($631) {
        __THREW__ = 0;
        invoke_viii(580,($__gb|0),($__gn|0),($__ge|0));
        $632 = __THREW__; __THREW__ = 0;
        $633 = $632&1;
        if ($633) {
         label = 24;
         break L3;
        }
        $$pre252 = HEAP32[$__gn>>2]|0;
        $635 = $$pre252;
       } else {
        $635 = $$lcssa279;
       }
       $634 = (($635) + 4|0);
       HEAP32[$__gn>>2] = $634;
       HEAP32[$635>>2] = $__ng$0$lcssa280;
       $899 = $634;
      } else {
       $899 = $$lcssa279;
      }
      $636 = HEAP32[$__fd>>2]|0;
      $637 = ($636|0)>(0);
      if ($637) {
       $638 = HEAP32[$__b>>2]|0;
       $639 = ($638|0)==(0|0);
       do {
        if ($639) {
         $653 = 0;
        } else {
         $640 = (($638) + 12|0);
         $641 = HEAP32[$640>>2]|0;
         $642 = (($638) + 16|0);
         $643 = HEAP32[$642>>2]|0;
         $644 = ($641|0)==($643|0);
         if ($644) {
          $645 = HEAP32[$638>>2]|0;
          $646 = (($645) + 36|0);
          $647 = HEAP32[$646>>2]|0;
          __THREW__ = 0;
          $648 = (invoke_ii($647|0,($638|0))|0);
          $649 = __THREW__; __THREW__ = 0;
          $650 = $649&1;
          if ($650) {
           label = 24;
           break L3;
          }
          $651 = ($648|0)==(-1);
          if ($651) {
           HEAP32[$__b>>2] = 0;
           $653 = 0;
           break;
          } else {
           $$pre$i$i$i95 = HEAP32[$__b>>2]|0;
           $653 = $$pre$i$i$i95;
           break;
          }
         } else {
          $653 = $638;
         }
        }
       } while(0);
       $652 = ($653|0)==(0|0);
       $654 = HEAP32[$__e>>2]|0;
       $655 = ($654|0)==(0|0);
       do {
        if ($655) {
         label = 253;
        } else {
         $656 = (($654) + 12|0);
         $657 = HEAP32[$656>>2]|0;
         $658 = (($654) + 16|0);
         $659 = HEAP32[$658>>2]|0;
         $660 = ($657|0)==($659|0);
         if (!($660)) {
          if ($652) {
           break;
          } else {
           label = 259;
           break L3;
          }
         }
         $661 = HEAP32[$654>>2]|0;
         $662 = (($661) + 36|0);
         $663 = HEAP32[$662>>2]|0;
         __THREW__ = 0;
         $664 = (invoke_ii($663|0,($654|0))|0);
         $665 = __THREW__; __THREW__ = 0;
         $666 = $665&1;
         if ($666) {
          label = 24;
          break L3;
         }
         $667 = ($664|0)==(-1);
         if ($667) {
          HEAP32[$__e>>2] = 0;
          label = 253;
          break;
         } else {
          $$pre$i2$i$i99 = HEAP32[$__e>>2]|0;
          $668 = ($$pre$i2$i$i99|0)==(0|0);
          $tmp$i$i101 = $652 ^ $668;
          if ($tmp$i$i101) {
           break;
          } else {
           label = 259;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 253) {
        label = 0;
        if ($652) {
         label = 259;
         break L3;
        }
       }
       $669 = HEAP32[$__b>>2]|0;
       $670 = (($669) + 12|0);
       $671 = HEAP32[$670>>2]|0;
       $672 = (($669) + 16|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = ($671|0)==($673|0);
       if ($674) {
        $675 = HEAP32[$669>>2]|0;
        $676 = (($675) + 36|0);
        $677 = HEAP32[$676>>2]|0;
        __THREW__ = 0;
        $678 = (invoke_ii($677|0,($669|0))|0);
        $679 = __THREW__; __THREW__ = 0;
        $680 = $679&1;
        if ($680) {
         label = 24;
         break L3;
        } else {
         $$0$i$i88 = $678;
        }
       } else {
        $681 = HEAP8[$671>>0]|0;
        $682 = $681&255;
        $$0$i$i88 = $682;
       }
       $683 = $$0$i$i88&255;
       $684 = HEAP8[$__dp>>0]|0;
       $685 = ($683<<24>>24)==($684<<24>>24);
       if (!($685)) {
        label = 259;
        break L3;
       }
       $688 = HEAP32[$__b>>2]|0;
       $689 = (($688) + 12|0);
       $690 = HEAP32[$689>>2]|0;
       $691 = (($688) + 16|0);
       $692 = HEAP32[$691>>2]|0;
       $693 = ($690|0)==($692|0);
       if ($693) {
        $694 = HEAP32[$688>>2]|0;
        $695 = (($694) + 40|0);
        $696 = HEAP32[$695>>2]|0;
        __THREW__ = 0;
        (invoke_ii($696|0,($688|0))|0);
        $697 = __THREW__; __THREW__ = 0;
        $698 = $697&1;
        if ($698) {
         label = 24;
         break L3;
        }
       } else {
        $699 = (($690) + 1|0);
        HEAP32[$689>>2] = $699;
       }
       $777 = $636;
       while(1) {
        $700 = HEAP32[$__b>>2]|0;
        $701 = ($700|0)==(0|0);
        do {
         if ($701) {
          $715 = 0;
         } else {
          $702 = (($700) + 12|0);
          $703 = HEAP32[$702>>2]|0;
          $704 = (($700) + 16|0);
          $705 = HEAP32[$704>>2]|0;
          $706 = ($703|0)==($705|0);
          if ($706) {
           $707 = HEAP32[$700>>2]|0;
           $708 = (($707) + 36|0);
           $709 = HEAP32[$708>>2]|0;
           __THREW__ = 0;
           $710 = (invoke_ii($709|0,($700|0))|0);
           $711 = __THREW__; __THREW__ = 0;
           $712 = $711&1;
           if ($712) {
            label = 22;
            break L3;
           }
           $713 = ($710|0)==(-1);
           if ($713) {
            HEAP32[$__b>>2] = 0;
            $715 = 0;
            break;
           } else {
            $$pre$i$i$i71 = HEAP32[$__b>>2]|0;
            $715 = $$pre$i$i$i71;
            break;
           }
          } else {
           $715 = $700;
          }
         }
        } while(0);
        $714 = ($715|0)==(0|0);
        $716 = HEAP32[$__e>>2]|0;
        $717 = ($716|0)==(0|0);
        do {
         if ($717) {
          label = 276;
         } else {
          $718 = (($716) + 12|0);
          $719 = HEAP32[$718>>2]|0;
          $720 = (($716) + 16|0);
          $721 = HEAP32[$720>>2]|0;
          $722 = ($719|0)==($721|0);
          if (!($722)) {
           if ($714) {
            break;
           } else {
            label = 283;
            break L3;
           }
          }
          $723 = HEAP32[$716>>2]|0;
          $724 = (($723) + 36|0);
          $725 = HEAP32[$724>>2]|0;
          __THREW__ = 0;
          $726 = (invoke_ii($725|0,($716|0))|0);
          $727 = __THREW__; __THREW__ = 0;
          $728 = $727&1;
          if ($728) {
           label = 22;
           break L3;
          }
          $729 = ($726|0)==(-1);
          if ($729) {
           HEAP32[$__e>>2] = 0;
           label = 276;
           break;
          } else {
           $$pre$i2$i$i75 = HEAP32[$__e>>2]|0;
           $730 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $714 ^ $730;
           if ($tmp$i$i77) {
            break;
           } else {
            label = 283;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 276) {
         label = 0;
         if ($714) {
          label = 283;
          break L3;
         }
        }
        $731 = HEAP32[$__b>>2]|0;
        $732 = (($731) + 12|0);
        $733 = HEAP32[$732>>2]|0;
        $734 = (($731) + 16|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = ($733|0)==($735|0);
        if ($736) {
         $737 = HEAP32[$731>>2]|0;
         $738 = (($737) + 36|0);
         $739 = HEAP32[$738>>2]|0;
         __THREW__ = 0;
         $740 = (invoke_ii($739|0,($731|0))|0);
         $741 = __THREW__; __THREW__ = 0;
         $742 = $741&1;
         if ($742) {
          label = 22;
          break L3;
         } else {
          $$0$i$i66 = $740;
         }
        } else {
         $743 = HEAP8[$733>>0]|0;
         $744 = $743&255;
         $$0$i$i66 = $744;
        }
        $745 = $$0$i$i66&255;
        $isascii1$i64 = ($745<<24>>24)>(-1);
        if (!($isascii1$i64)) {
         label = 283;
         break L3;
        }
        $sext = $$0$i$i66 << 24;
        $746 = $sext >> 24;
        $747 = HEAP32[$6>>2]|0;
        $748 = (($747) + ($746<<1)|0);
        $749 = HEAP16[$748>>1]|0;
        $750 = $749 & 2048;
        $751 = ($750<<16>>16)==(0);
        if ($751) {
         label = 283;
         break L3;
        }
        $754 = HEAP32[$__wn>>2]|0;
        $755 = HEAP32[$0>>2]|0;
        $756 = ($754|0)==($755|0);
        if ($756) {
         __THREW__ = 0;
         invoke_viii(579,($__wb|0),($__wn|0),($0|0));
         $757 = __THREW__; __THREW__ = 0;
         $758 = $757&1;
         if ($758) {
          label = 22;
          break L3;
         }
        }
        $759 = HEAP32[$__b>>2]|0;
        $760 = (($759) + 12|0);
        $761 = HEAP32[$760>>2]|0;
        $762 = (($759) + 16|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = ($761|0)==($763|0);
        if ($764) {
         $765 = HEAP32[$759>>2]|0;
         $766 = (($765) + 36|0);
         $767 = HEAP32[$766>>2]|0;
         __THREW__ = 0;
         $768 = (invoke_ii($767|0,($759|0))|0);
         $769 = __THREW__; __THREW__ = 0;
         $770 = $769&1;
         if ($770) {
          label = 22;
          break L3;
         } else {
          $$0$i$i59 = $768;
         }
        } else {
         $771 = HEAP8[$761>>0]|0;
         $772 = $771&255;
         $$0$i$i59 = $772;
        }
        $773 = $$0$i$i59&255;
        $774 = HEAP32[$__wn>>2]|0;
        $775 = (($774) + 1|0);
        HEAP32[$__wn>>2] = $775;
        HEAP8[$774>>0] = $773;
        $776 = (($777) + -1)|0;
        HEAP32[$__fd>>2] = $776;
        $778 = HEAP32[$__b>>2]|0;
        $779 = (($778) + 12|0);
        $780 = HEAP32[$779>>2]|0;
        $781 = (($778) + 16|0);
        $782 = HEAP32[$781>>2]|0;
        $783 = ($780|0)==($782|0);
        if ($783) {
         $784 = HEAP32[$778>>2]|0;
         $785 = (($784) + 40|0);
         $786 = HEAP32[$785>>2]|0;
         __THREW__ = 0;
         (invoke_ii($786|0,($778|0))|0);
         $787 = __THREW__; __THREW__ = 0;
         $788 = $787&1;
         if ($788) {
          label = 22;
          break L3;
         }
        } else {
         $790 = (($780) + 1|0);
         HEAP32[$779>>2] = $790;
        }
        $789 = ($776|0)>(0);
        if ($789) {
         $777 = $776;
        } else {
         break;
        }
       }
      }
      $791 = HEAP32[$__wn>>2]|0;
      $792 = HEAP32[$__wb>>2]|0;
      $793 = ($791|0)==($792|0);
      if ($793) {
       label = 295;
       break L3;
      } else {
       $894 = $899;$__trailing_sign$1 = $__trailing_sign$0235;
      }
      break;
     }
     case 2:  {
      $391 = ($__trailing_sign$0235|0)!=(0|0);
      $392 = ($__p$0233>>>0)<(2);
      $or$cond = $391 | $392;
      if (!($or$cond)) {
       $393 = ($__p$0233|0)==(2);
       if ($393) {
        $394 = HEAP8[$19>>0]|0;
        $395 = ($394<<24>>24)!=(0);
        $396 = $395;
       } else {
        $396 = 0;
       }
       $brmerge = $12 | $396;
       if (!($brmerge)) {
        $894 = $893;$__trailing_sign$1 = 0;
        break L25;
       }
      }
      $397 = HEAP8[$__sym>>0]|0;
      $398 = $397 & 1;
      $399 = ($398<<24>>24)==(0);
      $400 = HEAP32[$14>>2]|0;
      $$ = $399 ? $13 : $400;
      $401 = ($__p$0233|0)==(0);
      L163: do {
       if ($401) {
        $$ph = $$;
       } else {
        $402 = (($__p$0233) + -1)|0;
        $403 = (($__pat) + ($402)|0);
        $404 = HEAP8[$403>>0]|0;
        $switch = ($404&255)<(2);
        if ($switch) {
         $405 = $397&255;
         $406 = $405 >>> 1;
         $407 = HEAP32[$6>>2]|0;
         $408 = HEAP32[$14>>2]|0;
         $409 = HEAP32[$15>>2]|0;
         $412 = $$;
         while(1) {
          $$274 = $399 ? $13 : $408;
          $$275 = $399 ? $406 : $409;
          $410 = (($$274) + ($$275)|0);
          $411 = ($412|0)==($410|0);
          if ($411) {
           $$lcssa = $412;
           break;
          }
          $413 = HEAP8[$412>>0]|0;
          $isascii1$i162 = ($413<<24>>24)>(-1);
          if (!($isascii1$i162)) {
           $$lcssa = $412;
           break;
          }
          $414 = $413 << 24 >> 24;
          $415 = (($407) + ($414<<1)|0);
          $416 = HEAP16[$415>>1]|0;
          $417 = $416 & 8192;
          $418 = ($417<<16>>16)==(0);
          $419 = (($412) + 1|0);
          if ($418) {
           $$lcssa = $412;
           break;
          } else {
           $412 = $419;
          }
         }
         $$276 = $399 ? $13 : $408;
         $420 = $$lcssa;
         $421 = $$276;
         $422 = (($420) - ($421))|0;
         $423 = HEAP8[$__spaces>>0]|0;
         $424 = $423 & 1;
         $425 = ($424<<24>>24)==(0);
         if ($425) {
          $427 = $423&255;
          $428 = $427 >>> 1;
          $430 = $428;
         } else {
          $426 = HEAP32[$18>>2]|0;
          $430 = $426;
         }
         $429 = ($422>>>0)>($430>>>0);
         do {
          if (!($429)) {
           if ($425) {
            $434 = $423&255;
            $435 = $434 >>> 1;
            $$sum261 = (($435) - ($422))|0;
            $436 = ((($__spaces) + ($$sum261)|0) + 1|0);
            $437 = $423&255;
            $438 = $437 >>> 1;
            $440 = $16;$441 = $438;$443 = $436;
           } else {
            $431 = HEAP32[$17>>2]|0;
            $432 = HEAP32[$18>>2]|0;
            $$sum = (($432) - ($422))|0;
            $433 = (($431) + ($$sum)|0);
            $440 = $431;$441 = $432;$443 = $433;
           }
           $439 = (($440) + ($441)|0);
           $$277 = $399 ? $13 : $408;
           $442 = ($443|0)==($439|0);
           if ($442) {
            $$ph = $$lcssa;
            break L163;
           }
           $445 = $443;$447 = $$277;
           while(1) {
            $444 = HEAP8[$445>>0]|0;
            $446 = HEAP8[$447>>0]|0;
            $448 = ($444<<24>>24)==($446<<24>>24);
            if (!($448)) {
             label = 164;
             break;
            }
            $449 = (($445) + 1|0);
            $450 = (($447) + 1|0);
            $451 = ($449|0)==($439|0);
            if ($451) {
             label = 166;
             break;
            } else {
             $445 = $449;$447 = $450;
            }
           }
           if ((label|0) == 164) {
            label = 0;
            break;
           }
           else if ((label|0) == 166) {
            label = 0;
            $$ph = $$lcssa;
            break L163;
           }
          }
         } while(0);
         $$278 = $399 ? $13 : $408;
         $$ph = $$278;
        } else {
         $$ph = $$;
        }
       }
      } while(0);
      $453 = $397;$463 = $$ph;
      L190: while(1) {
       $452 = $453 & 1;
       $454 = ($452<<24>>24)==(0);
       if ($454) {
        $457 = $453&255;
        $458 = $457 >>> 1;
        $460 = $13;$461 = $458;
       } else {
        $455 = HEAP32[$14>>2]|0;
        $456 = HEAP32[$15>>2]|0;
        $460 = $455;$461 = $456;
       }
       $459 = (($460) + ($461)|0);
       $462 = ($463|0)==($459|0);
       if ($462) {
        $$lcssa281 = $463;
        break;
       }
       $464 = HEAP32[$__b>>2]|0;
       $465 = ($464|0)==(0|0);
       do {
        if ($465) {
         $479 = 0;
        } else {
         $466 = (($464) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($464) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if ($470) {
          $471 = HEAP32[$464>>2]|0;
          $472 = (($471) + 36|0);
          $473 = HEAP32[$472>>2]|0;
          __THREW__ = 0;
          $474 = (invoke_ii($473|0,($464|0))|0);
          $475 = __THREW__; __THREW__ = 0;
          $476 = $475&1;
          if ($476) {
           label = 21;
           break L3;
          }
          $477 = ($474|0)==(-1);
          if ($477) {
           HEAP32[$__b>>2] = 0;
           $479 = 0;
           break;
          } else {
           $$pre$i$i$i152 = HEAP32[$__b>>2]|0;
           $479 = $$pre$i$i$i152;
           break;
          }
         } else {
          $479 = $464;
         }
        }
       } while(0);
       $478 = ($479|0)==(0|0);
       $480 = HEAP32[$__e>>2]|0;
       $481 = ($480|0)==(0|0);
       do {
        if ($481) {
         label = 184;
        } else {
         $482 = (($480) + 12|0);
         $483 = HEAP32[$482>>2]|0;
         $484 = (($480) + 16|0);
         $485 = HEAP32[$484>>2]|0;
         $486 = ($483|0)==($485|0);
         if (!($486)) {
          if ($478) {
           break;
          } else {
           $$lcssa281 = $463;
           break L190;
          }
         }
         $487 = HEAP32[$480>>2]|0;
         $488 = (($487) + 36|0);
         $489 = HEAP32[$488>>2]|0;
         __THREW__ = 0;
         $490 = (invoke_ii($489|0,($480|0))|0);
         $491 = __THREW__; __THREW__ = 0;
         $492 = $491&1;
         if ($492) {
          label = 21;
          break L3;
         }
         $493 = ($490|0)==(-1);
         if ($493) {
          HEAP32[$__e>>2] = 0;
          label = 184;
          break;
         } else {
          $$pre$i2$i$i156 = HEAP32[$__e>>2]|0;
          $494 = ($$pre$i2$i$i156|0)==(0|0);
          $tmp$i$i158 = $478 ^ $494;
          if ($tmp$i$i158) {
           break;
          } else {
           $$lcssa281 = $463;
           break L190;
          }
         }
        }
       } while(0);
       if ((label|0) == 184) {
        label = 0;
        if ($478) {
         $$lcssa281 = $463;
         break;
        }
       }
       $495 = HEAP32[$__b>>2]|0;
       $496 = (($495) + 12|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (($495) + 16|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = ($497|0)==($499|0);
       if ($500) {
        $501 = HEAP32[$495>>2]|0;
        $502 = (($501) + 36|0);
        $503 = HEAP32[$502>>2]|0;
        __THREW__ = 0;
        $504 = (invoke_ii($503|0,($495|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 21;
         break L3;
        } else {
         $$0$i$i148 = $504;
        }
       } else {
        $507 = HEAP8[$497>>0]|0;
        $508 = $507&255;
        $$0$i$i148 = $508;
       }
       $509 = $$0$i$i148&255;
       $510 = HEAP8[$463>>0]|0;
       $511 = ($509<<24>>24)==($510<<24>>24);
       if (!($511)) {
        $$lcssa281 = $463;
        break;
       }
       $512 = HEAP32[$__b>>2]|0;
       $513 = (($512) + 12|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($512) + 16|0);
       $516 = HEAP32[$515>>2]|0;
       $517 = ($514|0)==($516|0);
       if ($517) {
        $518 = HEAP32[$512>>2]|0;
        $519 = (($518) + 40|0);
        $520 = HEAP32[$519>>2]|0;
        __THREW__ = 0;
        (invoke_ii($520|0,($512|0))|0);
        $521 = __THREW__; __THREW__ = 0;
        $522 = $521&1;
        if ($522) {
         label = 21;
         break L3;
        }
       } else {
        $523 = (($514) + 1|0);
        HEAP32[$513>>2] = $523;
       }
       $524 = (($463) + 1|0);
       $$pre250 = HEAP8[$__sym>>0]|0;
       $453 = $$pre250;$463 = $524;
      }
      if ($12) {
       $525 = HEAP8[$__sym>>0]|0;
       $526 = $525 & 1;
       $527 = ($526<<24>>24)==(0);
       if ($527) {
        $530 = $525&255;
        $531 = $530 >>> 1;
        $533 = $13;$534 = $531;
       } else {
        $528 = HEAP32[$14>>2]|0;
        $529 = HEAP32[$15>>2]|0;
        $533 = $528;$534 = $529;
       }
       $532 = (($533) + ($534)|0);
       $535 = ($$lcssa281|0)==($532|0);
       if ($535) {
        $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
       } else {
        label = 199;
        break L3;
       }
      } else {
       $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
      }
      break;
     }
     case 3:  {
      $189 = HEAP16[$__psn>>1]|0;
      $190 = $189&255;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      $193 = ($189&65535) >>> 8;
      $194 = $193&255;
      if ($192) {
       $$mask260 = $189 & 254;
       $196 = $$mask260&65535;
       $197 = $196 >>> 1;
       $210 = $197;
      } else {
       $195 = HEAP32[$9>>2]|0;
       $210 = $195;
      }
      $198 = HEAP16[$__nsn>>1]|0;
      $199 = $198&255;
      $200 = $199 & 1;
      $201 = ($200<<24>>24)==(0);
      $202 = ($198&65535) >>> 8;
      $203 = $202&255;
      if ($201) {
       $$mask259 = $198 & 254;
       $205 = $$mask259&65535;
       $206 = $205 >>> 1;
       $208 = $206;
      } else {
       $204 = HEAP32[$7>>2]|0;
       $208 = $204;
      }
      $207 = (0 - ($208))|0;
      $209 = ($210|0)==($207|0);
      if ($209) {
       $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
      } else {
       if ($192) {
        $$mask258 = $189 & 254;
        $212 = $$mask258&65535;
        $213 = $212 >>> 1;
        $215 = $213;
       } else {
        $211 = HEAP32[$9>>2]|0;
        $215 = $211;
       }
       $214 = ($215|0)==(0);
       if (!($214)) {
        if ($201) {
         $$mask257 = $198 & 254;
         $217 = $$mask257&65535;
         $218 = $217 >>> 1;
         $220 = $218;
        } else {
         $216 = HEAP32[$7>>2]|0;
         $220 = $216;
        }
        $219 = ($220|0)==(0);
        if (!($219)) {
         $308 = HEAP32[$__b>>2]|0;
         $309 = (($308) + 12|0);
         $310 = HEAP32[$309>>2]|0;
         $311 = (($308) + 16|0);
         $312 = HEAP32[$311>>2]|0;
         $313 = ($310|0)==($312|0);
         if ($313) {
          $314 = HEAP32[$308>>2]|0;
          $315 = (($314) + 36|0);
          $316 = HEAP32[$315>>2]|0;
          __THREW__ = 0;
          $317 = (invoke_ii($316|0,($308|0))|0);
          $318 = __THREW__; __THREW__ = 0;
          $319 = $318&1;
          if ($319) {
           label = 24;
           break L3;
          }
          $$pre247 = HEAP16[$__psn>>1]|0;
          $320 = $$pre247&255;
          $321 = ($$pre247&65535) >>> 8;
          $322 = $321&255;
          $$0$i$i112 = $317;$327 = $320;$897 = $322;
         } else {
          $323 = HEAP8[$310>>0]|0;
          $324 = $323&255;
          $$0$i$i112 = $324;$327 = $190;$897 = $194;
         }
         $325 = $$0$i$i112&255;
         $326 = $327 & 1;
         $328 = ($326<<24>>24)==(0);
         if ($328) {
          $331 = $897;
         } else {
          $329 = HEAP32[$10>>2]|0;
          $$pre248 = HEAP8[$329>>0]|0;
          $331 = $$pre248;
         }
         $330 = ($325<<24>>24)==($331<<24>>24);
         $332 = HEAP32[$__b>>2]|0;
         $333 = (($332) + 12|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = (($332) + 16|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = ($334|0)==($336|0);
         if ($330) {
          if ($337) {
           $338 = HEAP32[$332>>2]|0;
           $339 = (($338) + 40|0);
           $340 = HEAP32[$339>>2]|0;
           __THREW__ = 0;
           (invoke_ii($340|0,($332|0))|0);
           $341 = __THREW__; __THREW__ = 0;
           $342 = $341&1;
           if ($342) {
            label = 24;
            break L3;
           }
          } else {
           $343 = (($334) + 1|0);
           HEAP32[$333>>2] = $343;
          }
          $344 = HEAP8[$__psn>>0]|0;
          $345 = $344 & 1;
          $346 = ($345<<24>>24)==(0);
          if ($346) {
           $348 = $344&255;
           $349 = $348 >>> 1;
           $351 = $349;
          } else {
           $347 = HEAP32[$9>>2]|0;
           $351 = $347;
          }
          $350 = ($351>>>0)>(1);
          $__psn$__trailing_sign$010 = $350 ? $__psn : $__trailing_sign$0235;
          $894 = $893;$__trailing_sign$1 = $__psn$__trailing_sign$010;
          break L25;
         }
         if ($337) {
          $352 = HEAP32[$332>>2]|0;
          $353 = (($352) + 36|0);
          $354 = HEAP32[$353>>2]|0;
          __THREW__ = 0;
          $355 = (invoke_ii($354|0,($332|0))|0);
          $356 = __THREW__; __THREW__ = 0;
          $357 = $356&1;
          if ($357) {
           label = 24;
           break L3;
          } else {
           $$0$i$i121 = $355;
          }
         } else {
          $358 = HEAP8[$334>>0]|0;
          $359 = $358&255;
          $$0$i$i121 = $359;
         }
         $360 = $$0$i$i121&255;
         $361 = HEAP16[$__nsn>>1]|0;
         $362 = $361 & 1;
         $363 = ($362<<16>>16)==(0);
         if ($363) {
          $365 = ($361&65535) >>> 8;
          $366 = $365&255;
          $368 = $366;
         } else {
          $364 = HEAP32[$8>>2]|0;
          $$pre249 = HEAP8[$364>>0]|0;
          $368 = $$pre249;
         }
         $367 = ($360<<24>>24)==($368<<24>>24);
         if (!($367)) {
          label = 142;
          break L3;
         }
         $369 = HEAP32[$__b>>2]|0;
         $370 = (($369) + 12|0);
         $371 = HEAP32[$370>>2]|0;
         $372 = (($369) + 16|0);
         $373 = HEAP32[$372>>2]|0;
         $374 = ($371|0)==($373|0);
         if ($374) {
          $375 = HEAP32[$369>>2]|0;
          $376 = (($375) + 40|0);
          $377 = HEAP32[$376>>2]|0;
          __THREW__ = 0;
          (invoke_ii($377|0,($369|0))|0);
          $378 = __THREW__; __THREW__ = 0;
          $379 = $378&1;
          if ($379) {
           label = 24;
           break L3;
          }
         } else {
          $380 = (($371) + 1|0);
          HEAP32[$370>>2] = $380;
         }
         HEAP8[$__neg>>0] = 1;
         $381 = HEAP8[$__nsn>>0]|0;
         $382 = $381 & 1;
         $383 = ($382<<24>>24)==(0);
         if ($383) {
          $385 = $381&255;
          $386 = $385 >>> 1;
          $388 = $386;
         } else {
          $384 = HEAP32[$7>>2]|0;
          $388 = $384;
         }
         $387 = ($388>>>0)>(1);
         $__nsn$__trailing_sign$011 = $387 ? $__nsn : $__trailing_sign$0235;
         $894 = $893;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
         break L25;
        }
       }
       if ($192) {
        $$mask = $189 & 254;
        $222 = $$mask&65535;
        $223 = $222 >>> 1;
        $225 = $223;
       } else {
        $221 = HEAP32[$9>>2]|0;
        $225 = $221;
       }
       $224 = ($225|0)==(0);
       $226 = HEAP32[$__b>>2]|0;
       $227 = (($226) + 12|0);
       $228 = HEAP32[$227>>2]|0;
       $229 = (($226) + 16|0);
       $230 = HEAP32[$229>>2]|0;
       $231 = ($228|0)==($230|0);
       if ($224) {
        if ($231) {
         $270 = HEAP32[$226>>2]|0;
         $271 = (($270) + 36|0);
         $272 = HEAP32[$271>>2]|0;
         __THREW__ = 0;
         $273 = (invoke_ii($272|0,($226|0))|0);
         $274 = __THREW__; __THREW__ = 0;
         $275 = $274&1;
         if ($275) {
          label = 24;
          break L3;
         }
         $$pre = HEAP16[$__nsn>>1]|0;
         $276 = $$pre&255;
         $277 = ($$pre&65535) >>> 8;
         $278 = $277&255;
         $$0$i$i105 = $273;$283 = $276;$896 = $278;
        } else {
         $279 = HEAP8[$228>>0]|0;
         $280 = $279&255;
         $$0$i$i105 = $280;$283 = $199;$896 = $203;
        }
        $281 = $$0$i$i105&255;
        $282 = $283 & 1;
        $284 = ($282<<24>>24)==(0);
        if ($284) {
         $287 = $896;
        } else {
         $285 = HEAP32[$8>>2]|0;
         $$pre242 = HEAP8[$285>>0]|0;
         $287 = $$pre242;
        }
        $286 = ($281<<24>>24)==($287<<24>>24);
        if (!($286)) {
         $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
         break L25;
        }
        $288 = HEAP32[$__b>>2]|0;
        $289 = (($288) + 12|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = (($288) + 16|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = ($290|0)==($292|0);
        if ($293) {
         $294 = HEAP32[$288>>2]|0;
         $295 = (($294) + 40|0);
         $296 = HEAP32[$295>>2]|0;
         __THREW__ = 0;
         (invoke_ii($296|0,($288|0))|0);
         $297 = __THREW__; __THREW__ = 0;
         $298 = $297&1;
         if ($298) {
          label = 24;
          break L3;
         }
        } else {
         $299 = (($290) + 1|0);
         HEAP32[$289>>2] = $299;
        }
        HEAP8[$__neg>>0] = 1;
        $300 = HEAP8[$__nsn>>0]|0;
        $301 = $300 & 1;
        $302 = ($301<<24>>24)==(0);
        if ($302) {
         $304 = $300&255;
         $305 = $304 >>> 1;
         $307 = $305;
        } else {
         $303 = HEAP32[$7>>2]|0;
         $307 = $303;
        }
        $306 = ($307>>>0)>(1);
        $__nsn$__trailing_sign$0 = $306 ? $__nsn : $__trailing_sign$0235;
        $894 = $893;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L25;
       }
       if ($231) {
        $232 = HEAP32[$226>>2]|0;
        $233 = (($232) + 36|0);
        $234 = HEAP32[$233>>2]|0;
        __THREW__ = 0;
        $235 = (invoke_ii($234|0,($226|0))|0);
        $236 = __THREW__; __THREW__ = 0;
        $237 = $236&1;
        if ($237) {
         label = 24;
         break L3;
        }
        $$pre244 = HEAP16[$__psn>>1]|0;
        $238 = $$pre244&255;
        $239 = ($$pre244&65535) >>> 8;
        $240 = $239&255;
        $$0$i$i85 = $235;$245 = $238;$895 = $240;
       } else {
        $241 = HEAP8[$228>>0]|0;
        $242 = $241&255;
        $$0$i$i85 = $242;$245 = $190;$895 = $194;
       }
       $243 = $$0$i$i85&255;
       $244 = $245 & 1;
       $246 = ($244<<24>>24)==(0);
       if ($246) {
        $249 = $895;
       } else {
        $247 = HEAP32[$10>>2]|0;
        $$pre245 = HEAP8[$247>>0]|0;
        $249 = $$pre245;
       }
       $248 = ($243<<24>>24)==($249<<24>>24);
       if (!($248)) {
        HEAP8[$__neg>>0] = 1;
        $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
        break L25;
       }
       $250 = HEAP32[$__b>>2]|0;
       $251 = (($250) + 12|0);
       $252 = HEAP32[$251>>2]|0;
       $253 = (($250) + 16|0);
       $254 = HEAP32[$253>>2]|0;
       $255 = ($252|0)==($254|0);
       if ($255) {
        $256 = HEAP32[$250>>2]|0;
        $257 = (($256) + 40|0);
        $258 = HEAP32[$257>>2]|0;
        __THREW__ = 0;
        (invoke_ii($258|0,($250|0))|0);
        $259 = __THREW__; __THREW__ = 0;
        $260 = $259&1;
        if ($260) {
         label = 24;
         break L3;
        }
       } else {
        $261 = (($252) + 1|0);
        HEAP32[$251>>2] = $261;
       }
       $262 = HEAP8[$__psn>>0]|0;
       $263 = $262 & 1;
       $264 = ($263<<24>>24)==(0);
       if ($264) {
        $266 = $262&255;
        $267 = $266 >>> 1;
        $269 = $267;
       } else {
        $265 = HEAP32[$9>>2]|0;
        $269 = $265;
       }
       $268 = ($269>>>0)>(1);
       $__psn$__trailing_sign$0 = $268 ? $__psn : $__trailing_sign$0235;
       $894 = $893;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 1:  {
      $cond = ($__p$0233|0)==(3);
      if ($cond) {
       $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
       label = 298;
       break L3;
      }
      $77 = HEAP32[$__b>>2]|0;
      $78 = (($77) + 12|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 16|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($79|0)==($81|0);
      if ($82) {
       $83 = HEAP32[$77>>2]|0;
       $84 = (($83) + 36|0);
       $85 = HEAP32[$84>>2]|0;
       __THREW__ = 0;
       $86 = (invoke_ii($85|0,($77|0))|0);
       $87 = __THREW__; __THREW__ = 0;
       $88 = $87&1;
       if ($88) {
        label = 24;
        break L3;
       } else {
        $$0$i$i34 = $86;
       }
      } else {
       $89 = HEAP8[$79>>0]|0;
       $90 = $89&255;
       $$0$i$i34 = $90;
      }
      $91 = $$0$i$i34&255;
      $isascii1$i = ($91<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L3;
      }
      $sext202 = $$0$i$i34 << 24;
      $92 = $sext202 >> 24;
      $93 = HEAP32[$6>>2]|0;
      $94 = (($93) + ($92<<1)|0);
      $95 = HEAP16[$94>>1]|0;
      $96 = $95 & 8192;
      $97 = ($96<<16>>16)==(0);
      if ($97) {
       label = 40;
       break L3;
      }
      $98 = HEAP32[$__b>>2]|0;
      $99 = (($98) + 12|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($98) + 16|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = ($100|0)==($102|0);
      if ($103) {
       $104 = HEAP32[$98>>2]|0;
       $105 = (($104) + 40|0);
       $106 = HEAP32[$105>>2]|0;
       __THREW__ = 0;
       $107 = (invoke_ii($106|0,($98|0))|0);
       $108 = __THREW__; __THREW__ = 0;
       $109 = $108&1;
       if ($109) {
        label = 24;
        break L3;
       } else {
        $$0$i$i37 = $107;
       }
      } else {
       $110 = (($100) + 1|0);
       HEAP32[$99>>2] = $110;
       $111 = HEAP8[$100>>0]|0;
       $112 = $111&255;
       $$0$i$i37 = $112;
      }
      $113 = $$0$i$i37&255;
      __THREW__ = 0;
      invoke_vii(541,($__spaces|0),($113|0));
      $114 = __THREW__; __THREW__ = 0;
      $115 = $114&1;
      if ($115) {
       label = 24;
       break L3;
      } else {
       label = 41;
      }
      break;
     }
     default: {
      $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
     }
     }
    } while(0);
    if ((label|0) == 41) {
     label = 0;
     $118 = ($__p$0233|0)==(3);
     if ($118) {
      $881 = $893;$__trailing_sign$0$lcssa = $__trailing_sign$0235;
      label = 298;
      break;
     }
     L348: while(1) {
      $119 = HEAP32[$__b>>2]|0;
      $120 = ($119|0)==(0|0);
      do {
       if ($120) {
        $134 = 0;
       } else {
        $121 = (($119) + 12|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (($119) + 16|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = ($122|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$119>>2]|0;
         $127 = (($126) + 36|0);
         $128 = HEAP32[$127>>2]|0;
         __THREW__ = 0;
         $129 = (invoke_ii($128|0,($119|0))|0);
         $130 = __THREW__; __THREW__ = 0;
         $131 = $130&1;
         if ($131) {
          label = 20;
          break L3;
         }
         $132 = ($129|0)==(-1);
         if ($132) {
          HEAP32[$__b>>2] = 0;
          $134 = 0;
          break;
         } else {
          $$pre$i$i$i40 = HEAP32[$__b>>2]|0;
          $134 = $$pre$i$i$i40;
          break;
         }
        } else {
         $134 = $119;
        }
       }
      } while(0);
      $133 = ($134|0)==(0|0);
      $135 = HEAP32[$__e>>2]|0;
      $136 = ($135|0)==(0|0);
      do {
       if ($136) {
        label = 55;
       } else {
        $137 = (($135) + 12|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($135) + 16|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = ($138|0)==($140|0);
        if (!($141)) {
         if ($133) {
          break;
         } else {
          break L348;
         }
        }
        $142 = HEAP32[$135>>2]|0;
        $143 = (($142) + 36|0);
        $144 = HEAP32[$143>>2]|0;
        __THREW__ = 0;
        $145 = (invoke_ii($144|0,($135|0))|0);
        $146 = __THREW__; __THREW__ = 0;
        $147 = $146&1;
        if ($147) {
         label = 20;
         break L3;
        }
        $148 = ($145|0)==(-1);
        if ($148) {
         HEAP32[$__e>>2] = 0;
         label = 55;
         break;
        } else {
         $$pre$i2$i$i44 = HEAP32[$__e>>2]|0;
         $149 = ($$pre$i2$i$i44|0)==(0|0);
         $tmp$i$i46 = $133 ^ $149;
         if ($tmp$i$i46) {
          break;
         } else {
          break L348;
         }
        }
       }
      } while(0);
      if ((label|0) == 55) {
       label = 0;
       if ($133) {
        break;
       }
      }
      $150 = HEAP32[$__b>>2]|0;
      $151 = (($150) + 12|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 16|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($152|0)==($154|0);
      if ($155) {
       $156 = HEAP32[$150>>2]|0;
       $157 = (($156) + 36|0);
       $158 = HEAP32[$157>>2]|0;
       __THREW__ = 0;
       $159 = (invoke_ii($158|0,($150|0))|0);
       $160 = __THREW__; __THREW__ = 0;
       $161 = $160&1;
       if ($161) {
        label = 20;
        break L3;
       } else {
        $$0$i$i50 = $159;
       }
      } else {
       $162 = HEAP8[$152>>0]|0;
       $163 = $162&255;
       $$0$i$i50 = $163;
      }
      $164 = $$0$i$i50&255;
      $isascii1$i53 = ($164<<24>>24)>(-1);
      if (!($isascii1$i53)) {
       break;
      }
      $sext201 = $$0$i$i50 << 24;
      $165 = $sext201 >> 24;
      $166 = HEAP32[$6>>2]|0;
      $167 = (($166) + ($165<<1)|0);
      $168 = HEAP16[$167>>1]|0;
      $169 = $168 & 8192;
      $170 = ($169<<16>>16)==(0);
      if ($170) {
       break;
      }
      $171 = HEAP32[$__b>>2]|0;
      $172 = (($171) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = (($171) + 16|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($173|0)==($175|0);
      if ($176) {
       $177 = HEAP32[$171>>2]|0;
       $178 = (($177) + 40|0);
       $179 = HEAP32[$178>>2]|0;
       __THREW__ = 0;
       $180 = (invoke_ii($179|0,($171|0))|0);
       $181 = __THREW__; __THREW__ = 0;
       $182 = $181&1;
       if ($182) {
        label = 20;
        break L3;
       } else {
        $$0$i$i56 = $180;
       }
      } else {
       $183 = (($173) + 1|0);
       HEAP32[$172>>2] = $183;
       $184 = HEAP8[$173>>0]|0;
       $185 = $184&255;
       $$0$i$i56 = $185;
      }
      $186 = $$0$i$i56&255;
      __THREW__ = 0;
      invoke_vii(541,($__spaces|0),($186|0));
      $187 = __THREW__; __THREW__ = 0;
      $188 = $187&1;
      if ($188) {
       label = 20;
       break L3;
      }
     }
     $894 = $893;$__trailing_sign$1 = $__trailing_sign$0235;
    }
    $796 = (($__p$0233) + 1)|0;
    $797 = ($796>>>0)<(4);
    if ($797) {
     $893 = $894;$__p$0233 = $796;$__trailing_sign$0235 = $__trailing_sign$1;
    } else {
     $881 = $894;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 298;
     break;
    }
   }
   L382:    switch (label|0) {
    case 20: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index7 = $59;
     break L1;
     break;
    }
    case 21: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index7 = $61;
     break L1;
     break;
    }
    case 22: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index7 = $63;
     break L1;
     break;
    }
    case 23: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index7 = $65;
     break L1;
     break;
    }
    case 24: {
     $66 = ___cxa_find_matching_catch()|0;
     $67 = tempRet0;
     $lpad$phi$index = $66;$lpad$phi$index7 = $67;
     break L1;
     break;
    }
    case 40: {
     $116 = HEAP32[$__err>>2]|0;
     $117 = $116 | 4;
     HEAP32[$__err>>2] = $117;
     $$0 = 0;
     break;
    }
    case 142: {
     $389 = HEAP32[$__err>>2]|0;
     $390 = $389 | 4;
     HEAP32[$__err>>2] = $390;
     $$0 = 0;
     break;
    }
    case 199: {
     $536 = HEAP32[$__err>>2]|0;
     $537 = $536 | 4;
     HEAP32[$__err>>2] = $537;
     $$0 = 0;
     break;
    }
    case 259: {
     $686 = HEAP32[$__err>>2]|0;
     $687 = $686 | 4;
     HEAP32[$__err>>2] = $687;
     $$0 = 0;
     break;
    }
    case 283: {
     $752 = HEAP32[$__err>>2]|0;
     $753 = $752 | 4;
     HEAP32[$__err>>2] = $753;
     $$0 = 0;
     break;
    }
    case 295: {
     $794 = HEAP32[$__err>>2]|0;
     $795 = $794 | 4;
     HEAP32[$__err>>2] = $795;
     $$0 = 0;
     break;
    }
    case 298: {
     $798 = ($__trailing_sign$0$lcssa|0)==(0|0);
     do {
      if (!($798)) {
       $799 = (($__trailing_sign$0$lcssa) + 1|0);
       $800 = (($__trailing_sign$0$lcssa) + 8|0);
       $801 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L396: while(1) {
        $802 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $803 = $802 & 1;
        $804 = ($803<<24>>24)==(0);
        if ($804) {
         $806 = $802&255;
         $807 = $806 >>> 1;
         $809 = $807;
        } else {
         $805 = HEAP32[$801>>2]|0;
         $809 = $805;
        }
        $808 = ($__i$0>>>0)<($809>>>0);
        if (!($808)) {
         label = 329;
         break;
        }
        $810 = HEAP32[$__b>>2]|0;
        $811 = ($810|0)==(0|0);
        do {
         if ($811) {
          $825 = 0;
         } else {
          $812 = (($810) + 12|0);
          $813 = HEAP32[$812>>2]|0;
          $814 = (($810) + 16|0);
          $815 = HEAP32[$814>>2]|0;
          $816 = ($813|0)==($815|0);
          if ($816) {
           $817 = HEAP32[$810>>2]|0;
           $818 = (($817) + 36|0);
           $819 = HEAP32[$818>>2]|0;
           __THREW__ = 0;
           $820 = (invoke_ii($819|0,($810|0))|0);
           $821 = __THREW__; __THREW__ = 0;
           $822 = $821&1;
           if ($822) {
            label = 19;
            break L396;
           }
           $823 = ($820|0)==(-1);
           if ($823) {
            HEAP32[$__b>>2] = 0;
            $825 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $825 = $$pre$i$i$i;
            break;
           }
          } else {
           $825 = $810;
          }
         }
        } while(0);
        $824 = ($825|0)==(0|0);
        $826 = HEAP32[$__e>>2]|0;
        $827 = ($826|0)==(0|0);
        do {
         if ($827) {
          label = 316;
         } else {
          $828 = (($826) + 12|0);
          $829 = HEAP32[$828>>2]|0;
          $830 = (($826) + 16|0);
          $831 = HEAP32[$830>>2]|0;
          $832 = ($829|0)==($831|0);
          if (!($832)) {
           if ($824) {
            break;
           } else {
            label = 324;
            break L396;
           }
          }
          $833 = HEAP32[$826>>2]|0;
          $834 = (($833) + 36|0);
          $835 = HEAP32[$834>>2]|0;
          __THREW__ = 0;
          $836 = (invoke_ii($835|0,($826|0))|0);
          $837 = __THREW__; __THREW__ = 0;
          $838 = $837&1;
          if ($838) {
           label = 19;
           break L396;
          }
          $839 = ($836|0)==(-1);
          if ($839) {
           HEAP32[$__e>>2] = 0;
           label = 316;
           break;
          } else {
           $$pre$i2$i$i = HEAP32[$__e>>2]|0;
           $840 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $824 ^ $840;
           if ($tmp$i$i) {
            break;
           } else {
            label = 324;
            break L396;
           }
          }
         }
        } while(0);
        if ((label|0) == 316) {
         label = 0;
         if ($824) {
          label = 324;
          break;
         }
        }
        $841 = HEAP32[$__b>>2]|0;
        $842 = (($841) + 12|0);
        $843 = HEAP32[$842>>2]|0;
        $844 = (($841) + 16|0);
        $845 = HEAP32[$844>>2]|0;
        $846 = ($843|0)==($845|0);
        if ($846) {
         $847 = HEAP32[$841>>2]|0;
         $848 = (($847) + 36|0);
         $849 = HEAP32[$848>>2]|0;
         __THREW__ = 0;
         $850 = (invoke_ii($849|0,($841|0))|0);
         $851 = __THREW__; __THREW__ = 0;
         $852 = $851&1;
         if ($852) {
          label = 19;
          break;
         } else {
          $$0$i$i = $850;
         }
        } else {
         $853 = HEAP8[$843>>0]|0;
         $854 = $853&255;
         $$0$i$i = $854;
        }
        $855 = $$0$i$i&255;
        $856 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $857 = $856 & 1;
        $858 = ($857<<24>>24)==(0);
        if ($858) {
         $861 = $799;
        } else {
         $859 = HEAP32[$800>>2]|0;
         $861 = $859;
        }
        $860 = (($861) + ($__i$0)|0);
        $862 = HEAP8[$860>>0]|0;
        $863 = ($855<<24>>24)==($862<<24>>24);
        if (!($863)) {
         label = 324;
         break;
        }
        $866 = (($__i$0) + 1)|0;
        $867 = HEAP32[$__b>>2]|0;
        $868 = (($867) + 12|0);
        $869 = HEAP32[$868>>2]|0;
        $870 = (($867) + 16|0);
        $871 = HEAP32[$870>>2]|0;
        $872 = ($869|0)==($871|0);
        if ($872) {
         $873 = HEAP32[$867>>2]|0;
         $874 = (($873) + 40|0);
         $875 = HEAP32[$874>>2]|0;
         __THREW__ = 0;
         (invoke_ii($875|0,($867|0))|0);
         $876 = __THREW__; __THREW__ = 0;
         $877 = $876&1;
         if ($877) {
          label = 19;
          break;
         }
        } else {
         $878 = (($869) + 1|0);
         HEAP32[$868>>2] = $878;
        }
        $__i$0 = $866;
       }
       if ((label|0) == 19) {
        $56 = ___cxa_find_matching_catch()|0;
        $57 = tempRet0;
        $lpad$phi$index = $56;$lpad$phi$index7 = $57;
        break L1;
       }
       else if ((label|0) == 324) {
        $864 = HEAP32[$__err>>2]|0;
        $865 = $864 | 4;
        HEAP32[$__err>>2] = $865;
        $$0 = 0;
        break L382;
       }
       else if ((label|0) == 329) {
        break;
       }
      }
     } while(0);
     $879 = HEAP32[$__gb>>2]|0;
     $880 = ($879|0)==($881|0);
     if ($880) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$879,$881,$__et);
      $882 = HEAP32[$__et>>2]|0;
      $883 = ($882|0)==(0);
      if ($883) {
       $$0 = 1;
      } else {
       $884 = HEAP32[$__err>>2]|0;
       $885 = $884 | 4;
       HEAP32[$__err>>2] = $885;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $886 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $887 = ($886|0)==(0|0);
   if (!($887)) {
    $888 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi($888|0,($886|0));
    $889 = __THREW__; __THREW__ = 0;
    $890 = $889&1;
    if ($890) {
     $891 = ___cxa_find_matching_catch(0|0)|0;
     $892 = tempRet0;
     ___clang_call_terminate($891);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $70 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $71 = ($70|0)==(0|0);
 if (!($71)) {
  $72 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($72|0,($70|0));
  $73 = __THREW__; __THREW__ = 0;
  $74 = $73&1;
  if ($74) {
   $75 = ___cxa_find_matching_catch(0|0)|0;
   $76 = tempRet0;
   ___clang_call_terminate($75);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(423,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(15440|0),(381|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0113 = 0, $$0114 = 0, $$015 = 0, $$016 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$0$lcssa$ph = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $__wbuf = sp + 32|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 28|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 575;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(521,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0113 = $32;$$015 = $31;$95 = $__wbuf;
  label = 39;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(422,($__loc|0),(6720|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(576,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(541,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      if ($42) {
       $__w$05 = $39;
       while(1) {
        $45 = HEAP8[$__w$05>>0]|0;
        $46 = ($45<<24>>24)==($36<<24>>24);
        $44 = (($__w$05) + 1|0);
        if (!($46)) {
         $__w$0$lcssa$ph = $__w$05;
         break;
        }
        $43 = ($44>>>0)<($41>>>0);
        if ($43) {
         $__w$05 = $44;
        } else {
         $__w$0$lcssa$ph = $44;
         break;
        }
       }
       $__w$0$lcssa = $__w$0$lcssa$ph;
      } else {
       $__w$0$lcssa = $39;
      }
      __THREW__ = 0;
      (invoke_iiii(581,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $64 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $64 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $64 = $$pre$i$i$i;
         break;
        }
       } else {
        $64 = $49;
       }
      }
     } while(0);
     $63 = ($64|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 31;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($63) {
         break;
        } else {
         label = 33;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 31;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $63 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 33;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 31) {
      if ($63) {
       label = 33;
      }
     }
     if ((label|0) == 33) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if (!($84)) {
      $85 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($85|0,($83|0));
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0114 = $91;$$016 = $90;
  } else {
   $$0113 = $91;$$015 = $90;$95 = $$pre;
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $94 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($94|0,($95|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(0|0)|0;
   $99 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  } else {
   $$0114 = $$0113;$$016 = $$015;
  }
 }
 ___resumeException($$016|0);
 // unreachable;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6160)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    $24 = (($__nsn) + 1|0);
    HEAP8[$24>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = (($__nsn) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP8[$22>>0] = 0;
    $23 = (($__nsn) + 4|0);
    HEAP32[$23>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__nsn|0),0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(0|0)|0;
    $28 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
   $29 = HEAP32[$10>>2]|0;
   $30 = (($29) + 28|0);
   $31 = HEAP32[$30>>2]|0;
   FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
   $32 = HEAP8[$__psn>>0]|0;
   $33 = $32 & 1;
   $34 = ($33<<24>>24)==(0);
   if ($34) {
    $38 = (($__psn) + 1|0);
    HEAP8[$38>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $35 = (($__psn) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    HEAP8[$36>>0] = 0;
    $37 = (($__psn) + 4|0);
    HEAP32[$37>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__psn|0),0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $41 = ___cxa_find_matching_catch(0|0)|0;
    $42 = tempRet0;
    ___clang_call_terminate($41);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
   $43 = HEAP32[$10>>2]|0;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
   HEAP8[$__dp>>0] = $46;
   $47 = HEAP32[$10>>2]|0;
   $48 = (($47) + 16|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
   HEAP8[$__ts>>0] = $50;
   $51 = HEAP32[$10>>2]|0;
   $52 = (($51) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
   $54 = HEAP8[$__grp>>0]|0;
   $55 = $54 & 1;
   $56 = ($55<<24>>24)==(0);
   if ($56) {
    $60 = (($__grp) + 1|0);
    HEAP8[$60>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $57 = (($__grp) + 8|0);
    $58 = HEAP32[$57>>2]|0;
    HEAP8[$58>>0] = 0;
    $59 = (($__grp) + 4|0);
    HEAP32[$59>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $61 = __THREW__; __THREW__ = 0;
   $62 = $61&1;
   if ($62) {
    $63 = ___cxa_find_matching_catch(0|0)|0;
    $64 = tempRet0;
    ___clang_call_terminate($63);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   $65 = HEAP32[$10>>2]|0;
   $66 = (($65) + 24|0);
   $67 = HEAP32[$66>>2]|0;
   FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
   $68 = HEAP8[$__sym>>0]|0;
   $69 = $68 & 1;
   $70 = ($69<<24>>24)==(0);
   if ($70) {
    $74 = (($__sym) + 1|0);
    HEAP8[$74>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $71 = (($__sym) + 8|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP8[$72>>0] = 0;
    $73 = (($__sym) + 4|0);
    HEAP32[$73>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__sym|0),0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    $77 = ___cxa_find_matching_catch(0|0)|0;
    $78 = tempRet0;
    ___clang_call_terminate($77);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
    $79 = HEAP32[$10>>2]|0;
    $80 = (($79) + 36|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
    $storemerge = $82;
    break;
   }
  } else {
   $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6096)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 44|0);
   $86 = HEAP32[$85>>2]|0;
   FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
   $87 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
   $88 = HEAP32[$83>>2]|0;
   $89 = (($88) + 32|0);
   $90 = HEAP32[$89>>2]|0;
   FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
   $91 = HEAP8[$__nsn>>0]|0;
   $92 = $91 & 1;
   $93 = ($92<<24>>24)==(0);
   if ($93) {
    $97 = (($__nsn) + 1|0);
    HEAP8[$97>>0] = 0;
    HEAP8[$__nsn>>0] = 0;
   } else {
    $94 = (($__nsn) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    HEAP8[$95>>0] = 0;
    $96 = (($__nsn) + 4|0);
    HEAP32[$96>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__nsn|0),0);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if ($99) {
    $100 = ___cxa_find_matching_catch(0|0)|0;
    $101 = tempRet0;
    ___clang_call_terminate($100);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
   $102 = HEAP32[$83>>2]|0;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
   $105 = HEAP8[$__psn>>0]|0;
   $106 = $105 & 1;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $111 = (($__psn) + 1|0);
    HEAP8[$111>>0] = 0;
    HEAP8[$__psn>>0] = 0;
   } else {
    $108 = (($__psn) + 8|0);
    $109 = HEAP32[$108>>2]|0;
    HEAP8[$109>>0] = 0;
    $110 = (($__psn) + 4|0);
    HEAP32[$110>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__psn|0),0);
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $114 = ___cxa_find_matching_catch(0|0)|0;
    $115 = tempRet0;
    ___clang_call_terminate($114);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
   $116 = HEAP32[$83>>2]|0;
   $117 = (($116) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
   HEAP8[$__dp>>0] = $119;
   $120 = HEAP32[$83>>2]|0;
   $121 = (($120) + 16|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
   HEAP8[$__ts>>0] = $123;
   $124 = HEAP32[$83>>2]|0;
   $125 = (($124) + 20|0);
   $126 = HEAP32[$125>>2]|0;
   FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
   $127 = HEAP8[$__grp>>0]|0;
   $128 = $127 & 1;
   $129 = ($128<<24>>24)==(0);
   if ($129) {
    $133 = (($__grp) + 1|0);
    HEAP8[$133>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $130 = (($__grp) + 8|0);
    $131 = HEAP32[$130>>2]|0;
    HEAP8[$131>>0] = 0;
    $132 = (($__grp) + 4|0);
    HEAP32[$132>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    $136 = ___cxa_find_matching_catch(0|0)|0;
    $137 = tempRet0;
    ___clang_call_terminate($136);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
   $138 = HEAP32[$83>>2]|0;
   $139 = (($138) + 24|0);
   $140 = HEAP32[$139>>2]|0;
   FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
   $141 = HEAP8[$__sym>>0]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    $147 = (($__sym) + 1|0);
    HEAP8[$147>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $144 = (($__sym) + 8|0);
    $145 = HEAP32[$144>>2]|0;
    HEAP8[$145>>0] = 0;
    $146 = (($__sym) + 4|0);
    HEAP32[$146>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__sym|0),0);
   $148 = __THREW__; __THREW__ = 0;
   $149 = $148&1;
   if ($149) {
    $150 = ___cxa_find_matching_catch(0|0)|0;
    $151 = tempRet0;
    ___clang_call_terminate($150);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
    $152 = HEAP32[$83>>2]|0;
    $153 = (($152) + 36|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
    $storemerge = $155;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $17$phi = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond2$lcssa17 = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 L5: do {
  if (!($7)) {
   $9 = ($__g|0)==($__g_end|0);
   if ($9) {
    $20 = $0;
   } else {
    $10 = (($__g_end) + -4|0);
    $11 = ($10>>>0)>($__g>>>0);
    if ($11) {
     $$012$i$i = $__g;$14 = $10;$17 = $__g_end;
     while(1) {
      $12 = HEAP32[$$012$i$i>>2]|0;
      $13 = HEAP32[$14>>2]|0;
      HEAP32[$$012$i$i>>2] = $13;
      HEAP32[$14>>2] = $12;
      $15 = (($$012$i$i) + 4|0);
      $16 = (($17) + -8|0);
      $18 = ($15>>>0)<($16>>>0);
      if ($18) {
       $17$phi = $14;$$012$i$i = $15;$14 = $16;$17 = $17$phi;
      } else {
       break;
      }
     }
     $$pre = HEAP8[$__grouping>>0]|0;
     $20 = $$pre;
    } else {
     $20 = $0;
    }
   }
   $19 = $20 & 1;
   $21 = ($19<<24>>24)==(0);
   if ($21) {
    $26 = (($__grouping) + 1|0);
    $27 = $20&255;
    $28 = $27 >>> 1;
    $32 = $26;$35 = $28;
   } else {
    $22 = (($__grouping) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($__grouping) + 4|0);
    $25 = HEAP32[$24>>2]|0;
    $32 = $23;$35 = $25;
   }
   $29 = (($__g_end) + -4|0);
   $30 = ($29>>>0)>($__g>>>0);
   $31 = HEAP8[$32>>0]|0;
   $$not9 = ($31<<24>>24)<(1);
   $33 = ($31<<24>>24)==(127);
   $or$cond210 = $$not9 | $33;
   do {
    if ($30) {
     $34 = (($32) + ($35)|0);
     $36 = $34;
     $38 = $31;$__ig$011 = $32;$__r$012 = $__g;$or$cond213 = $or$cond210;
     while(1) {
      if (!($or$cond213)) {
       $37 = $38 << 24 >> 24;
       $39 = HEAP32[$__r$012>>2]|0;
       $40 = ($37|0)==($39|0);
       if (!($40)) {
        label = 17;
        break;
       }
      }
      $41 = $__ig$011;
      $42 = (($36) - ($41))|0;
      $43 = ($42|0)>(1);
      $44 = (($__ig$011) + 1|0);
      $$__ig$0 = $43 ? $44 : $__ig$011;
      $45 = (($__r$012) + 4|0);
      $46 = ($45>>>0)<($29>>>0);
      $47 = HEAP8[$$__ig$0>>0]|0;
      $$not = ($47<<24>>24)<(1);
      $48 = ($47<<24>>24)==(127);
      $or$cond2 = $$not | $48;
      if ($46) {
       $38 = $47;$__ig$011 = $$__ig$0;$__r$012 = $45;$or$cond213 = $or$cond2;
      } else {
       $$lcssa = $47;$or$cond2$lcssa17 = $or$cond2;
       label = 19;
       break;
      }
     }
     if ((label|0) == 17) {
      HEAP32[$__err>>2] = 4;
      break L5;
     }
     else if ((label|0) == 19) {
      $$lcssa6 = $$lcssa;$or$cond2$lcssa = $or$cond2$lcssa17;
      break;
     }
    } else {
     $$lcssa6 = $31;$or$cond2$lcssa = $or$cond210;
    }
   } while(0);
   if (!($or$cond2$lcssa)) {
    $49 = $$lcssa6 << 24 >> 24;
    $50 = HEAP32[$29>>2]|0;
    $51 = (($50) + -1)|0;
    $52 = ($51>>>0)<($49>>>0);
    if (!($52)) {
     HEAP32[$__err>>2] = 4;
    }
   }
  }
 } while(0);
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0;
 var $__wn = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 72|0;
 $__wb = sp + 64|0;
 $__wn = sp + 56|0;
 $__loc = sp + 52|0;
 $__neg = sp + 576|0;
 $0 = sp + 48|0;
 $__atoms = sp + 8|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 575;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(521,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $33 = ___cxa_find_matching_catch()|0;
  $34 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$112 = $33;$$1210 = $34;$107 = 575;$108 = $__wbuf;
  label = 47;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(422,($__loc|0),(6712|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if ($7) {
    label = 11;
   } else {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(582,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     label = 11;
    } else {
     if ($11) {
      $14 = HEAP32[$5>>2]|0;
      $15 = (($14) + 48|0);
      $16 = HEAP32[$15>>2]|0;
      __THREW__ = 0;
      (invoke_iiiii($16|0,($5|0),(6416|0),(((6416 + 10|0))|0),($__atoms|0))|0);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       label = 11;
       break;
      }
      $19 = HEAP32[$__wn>>2]|0;
      $20 = HEAP32[$__wb>>2]|0;
      $21 = $19;
      $22 = $20;
      $23 = (($21) - ($22))|0;
      $24 = ($23|0)>(392);
      if ($24) {
       $25 = $23 >> 2;
       $26 = (($25) + 2)|0;
       $27 = (_malloc($26)|0);
       $28 = ($27|0)==(0|0);
       if ($28) {
        __THREW__ = 0;
        invoke_v(565);
        $29 = __THREW__; __THREW__ = 0;
        $30 = $29&1;
        if ($30) {
         $31 = ___cxa_find_matching_catch()|0;
         $32 = tempRet0;
         $$0 = $31;$$01 = $32;
         break;
        } else {
         $39 = 0;$__nc$0 = 0;
        }
       } else {
        $39 = $27;$__nc$0 = $27;
       }
      } else {
       $39 = 0;$__nc$0 = $__nbuf;
      }
      $40 = HEAP8[$__neg>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $__nc$1 = $__nc$0;
      } else {
       $42 = (($__nc$0) + 1|0);
       HEAP8[$__nc$0>>0] = 45;
       $__nc$1 = $42;
      }
      $43 = ($20>>>0)<($19>>>0);
      if ($43) {
       $44 = (($__atoms) + 40|0);
       $45 = $__atoms;
       $__nc$26 = $__nc$1;$__w$07 = $20;
       while(1) {
        $46 = HEAP32[$__w$07>>2]|0;
        $$01$i = $__atoms;
        while(1) {
         $49 = HEAP32[$$01$i>>2]|0;
         $50 = ($49|0)==($46|0);
         $48 = (($$01$i) + 4|0);
         if ($50) {
          $$0$lcssa$i = $$01$i;
          break;
         }
         $47 = ($48|0)==($44|0);
         if ($47) {
          $$0$lcssa$i = $44;
          break;
         } else {
          $$01$i = $48;
         }
        }
        $51 = $$0$lcssa$i;
        $52 = (($51) - ($45))|0;
        $53 = $52 >> 2;
        $54 = (6416 + ($53)|0);
        $55 = HEAP8[$54>>0]|0;
        HEAP8[$__nc$26>>0] = $55;
        $56 = (($__w$07) + 4|0);
        $57 = (($__nc$26) + 1|0);
        $58 = HEAP32[$__wn>>2]|0;
        $59 = ($56>>>0)<($58>>>0);
        if ($59) {
         $__nc$26 = $57;$__w$07 = $56;
        } else {
         $$lcssa = $57;
         break;
        }
       }
       $__nc$2$lcssa = $$lcssa;
      } else {
       $__nc$2$lcssa = $__nc$1;
      }
      HEAP8[$__nc$2$lcssa>>0] = 0;
      HEAP32[$vararg_buffer>>2] = $__v;
      $60 = (_sscanf($__nbuf,6352,$vararg_buffer)|0);
      $61 = ($60|0)==(1);
      if (!($61)) {
       __THREW__ = 0;
       invoke_vi(577,(6360|0));
       $62 = __THREW__; __THREW__ = 0;
       $63 = $62&1;
       if ($63) {
        $37 = ___cxa_find_matching_catch()|0;
        $38 = tempRet0;
        _free($39);
        $$0 = $37;$$01 = $38;
        break;
       }
      }
      _free($39);
     }
     $64 = HEAP32[$__b>>2]|0;
     $65 = ($64|0)==(0|0);
     do {
      if ($65) {
       $113 = 1;
      } else {
       $66 = (($64) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($64) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if ($70) {
        $71 = HEAP32[$64>>2]|0;
        $72 = (($71) + 36|0);
        $73 = HEAP32[$72>>2]|0;
        __THREW__ = 0;
        $74 = (invoke_ii($73|0,($64|0))|0);
        $75 = __THREW__; __THREW__ = 0;
        $76 = $75&1;
        if ($76) {
         label = 11;
         break L3;
        } else {
         $$0$i$i$i$i = $74;
        }
       } else {
        $77 = HEAP32[$67>>2]|0;
        $$0$i$i$i$i = $77;
       }
       $78 = ($$0$i$i$i$i|0)==(-1);
       if ($78) {
        HEAP32[$__b>>2] = 0;
        $113 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $113 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $79 = HEAP32[$__e>>2]|0;
     $80 = ($79|0)==(0|0);
     do {
      if ($80) {
       label = 38;
      } else {
       $81 = (($79) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($79) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = (($86) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        __THREW__ = 0;
        $89 = (invoke_ii($88|0,($79|0))|0);
        $90 = __THREW__; __THREW__ = 0;
        $91 = $90&1;
        if ($91) {
         label = 11;
         break L3;
        } else {
         $$0$i$i1$i$i = $89;
        }
       } else {
        $92 = HEAP32[$82>>2]|0;
        $$0$i$i1$i$i = $92;
       }
       $93 = ($$0$i$i1$i$i|0)==(-1);
       if ($93) {
        HEAP32[$__e>>2] = 0;
        label = 38;
        break;
       } else {
        if ($113) {
         break;
        } else {
         label = 40;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 38) {
      if ($113) {
       label = 40;
      }
     }
     if ((label|0) == 40) {
      $94 = HEAP32[$__err>>2]|0;
      $95 = $94 | 2;
      HEAP32[$__err>>2] = $95;
     }
     $96 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $96;
     $97 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
     $98 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $99 = ($98|0)==(0|0);
     if (!($99)) {
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  if ((label|0) == 11) {
   $35 = ___cxa_find_matching_catch()|0;
   $36 = tempRet0;
   $$0 = $35;$$01 = $36;
  }
  $105 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $106 = ($$pre|0)==(0|0);
  if ($106) {
   $$113 = $$0;$$1211 = $$01;
  } else {
   $$pre15 = HEAP32[$1>>2]|0;
   $$112 = $$0;$$1210 = $$01;$107 = $$pre15;$108 = $$pre;
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi($107|0,($108|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if ($110) {
   $111 = ___cxa_find_matching_catch(0|0)|0;
   $112 = tempRet0;
   ___clang_call_terminate($111);
   // unreachable;
  } else {
   $$113 = $$112;$$1211 = $$1210;
  }
 }
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i118 = 0, $$0$i$i$i$i150 = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i$i23 = 0, $$0$i$i$i$i44 = 0, $$0$i$i$i$i84 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i124 = 0, $$0$i$i1$i$i156 = 0, $$0$i$i1$i$i181 = 0, $$0$i$i1$i$i29 = 0, $$0$i$i1$i$i50 = 0, $$0$i$i1$i$i90 = 0, $$0$i$i102 = 0, $$0$i$i111 = 0, $$0$i$i114 = 0;
 var $$0$i$i136 = 0, $$0$i$i147 = 0, $$0$i$i171 = 0, $$0$i$i38 = 0, $$0$i$i42 = 0, $$0$i$i59 = 0, $$0$i$i65 = 0, $$0$i$i70 = 0, $$0$i$i78 = 0, $$0$i$i81 = 0, $$278 = 0, $$279 = 0, $$280 = 0, $$281 = 0, $$282 = 0, $$283 = 0, $$284 = 0, $$lcssa = 0, $$lcssa286 = 0, $$lcssa290 = 0;
 var $$lcssa292 = 0, $$lcssa293 = 0, $$ph = 0, $$ph285 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i120 = 0, $$pre$i$i$i152 = 0, $$pre$i$i$i177 = 0, $$pre$i$i$i25 = 0, $$pre$i$i$i46 = 0, $$pre$i$i$i86 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i126 = 0, $$pre$i3$i$i158 = 0, $$pre$i3$i$i183 = 0, $$pre$i3$i$i31 = 0, $$pre$i3$i$i52 = 0, $$pre$i3$i$i92 = 0, $$pre261 = 0;
 var $$pre262 = 0, $$pre263 = 0, $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre268 = 0, $$pre270 = 0, $$sum = 0, $$sum271 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0;
 var $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa287 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$011 = 0, $__p$0251 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$010 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0253 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0;
 var $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond13 = 0, $or$cond7 = 0, $or$cond9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i121 = 0, $phitmp$i$i$i153 = 0, $phitmp$i$i$i178 = 0, $phitmp$i$i$i26 = 0, $phitmp$i$i$i47 = 0, $phitmp$i$i$i87 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i127 = 0, $phitmp$i4$i$i159 = 0, $phitmp$i4$i$i184 = 0, $phitmp$i4$i$i32 = 0, $phitmp$i4$i$i53 = 0, $phitmp$i4$i$i93 = 0;
 var $switch = 0, $tmp$i$i = 0, $tmp$i$i129 = 0, $tmp$i$i161 = 0, $tmp$i$i186 = 0, $tmp$i$i34 = 0, $tmp$i$i55 = 0, $tmp$i$i95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 496|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 88|0;
 $__gn = sp + 80|0;
 $__ge = sp + 76|0;
 $__pat = sp + 500|0;
 $__dp = sp + 72|0;
 $__ts = sp + 68|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__psn = sp + 32|0;
 $__nsn = sp + 20|0;
 $__spaces = sp + 8|0;
 $__fd = sp + 4|0;
 $__et = sp;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 575;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(583,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $67 = ___cxa_find_matching_catch()|0;
   $68 = tempRet0;
   $lpad$phi$index = $67;$lpad$phi$index8 = $68;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $859 = $__gbuf;$__p$0251 = 0;$__trailing_sign$0253 = 0;
   L4: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $48 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i23 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i23 = $31;
      }
      $32 = ($$0$i$i$i$i23|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $48 = 1;
       break;
      } else {
       $$pre$i$i$i25 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i26 = ($$pre$i$i$i25|0)==(0|0);
       $48 = $phitmp$i$i$i26;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i29 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i29 = $46;
      }
      $47 = ($$0$i$i1$i$i29|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       $$pre$i3$i$i31 = HEAP32[$__e>>2]|0;
       $phitmp$i4$i$i32 = ($$pre$i3$i$i31|0)==(0|0);
       $tmp$i$i34 = $48 ^ $phitmp$i4$i$i32;
       if ($tmp$i$i34) {
        break;
       } else {
        $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
        label = 302;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($48) {
      $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
      label = 302;
      break;
     }
    }
    $49 = (($__pat) + ($__p$0251)|0);
    $50 = HEAP8[$49>>0]|0;
    $51 = $50 << 24 >> 24;
    L28: do {
     switch ($51|0) {
     case 1:  {
      $cond = ($__p$0251|0)==(3);
      if ($cond) {
       $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
       label = 302;
       break L4;
      }
      $76 = HEAP32[$__b>>2]|0;
      $77 = (($76) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($76) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if ($81) {
       $82 = HEAP32[$76>>2]|0;
       $83 = (($82) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       __THREW__ = 0;
       $85 = (invoke_ii($84|0,($76|0))|0);
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if ($87) {
        label = 26;
        break L4;
       } else {
        $$0$i$i38 = $85;
       }
      } else {
       $88 = HEAP32[$78>>2]|0;
       $$0$i$i38 = $88;
      }
      $89 = HEAP32[$__ct>>2]|0;
      $90 = (($89) + 12|0);
      $91 = HEAP32[$90>>2]|0;
      __THREW__ = 0;
      $92 = (invoke_iiii($91|0,($__ct|0),8192,($$0$i$i38|0))|0);
      $93 = __THREW__; __THREW__ = 0;
      $94 = $93&1;
      if ($94) {
       label = 26;
       break L4;
      }
      if (!($92)) {
       label = 42;
       break L4;
      }
      $95 = HEAP32[$__b>>2]|0;
      $96 = (($95) + 12|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = (($95) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($97|0)==($99|0);
      if ($100) {
       $101 = HEAP32[$95>>2]|0;
       $102 = (($101) + 40|0);
       $103 = HEAP32[$102>>2]|0;
       __THREW__ = 0;
       $104 = (invoke_ii($103|0,($95|0))|0);
       $105 = __THREW__; __THREW__ = 0;
       $106 = $105&1;
       if ($106) {
        label = 26;
        break L4;
       } else {
        $$0$i$i42 = $104;
       }
      } else {
       $107 = (($97) + 4|0);
       HEAP32[$96>>2] = $107;
       $108 = HEAP32[$97>>2]|0;
       $$0$i$i42 = $108;
      }
      __THREW__ = 0;
      invoke_vii(584,($__spaces|0),($$0$i$i42|0));
      $109 = __THREW__; __THREW__ = 0;
      $110 = $109&1;
      if ($110) {
       label = 26;
       break L4;
      } else {
       label = 43;
      }
      break;
     }
     case 4:  {
      $52 = HEAP32[$__ts>>2]|0;
      $585 = $859;$__ng$0 = 0;
      L42: while(1) {
       $515 = HEAP32[$__b>>2]|0;
       $516 = ($515|0)==(0|0);
       do {
        if ($516) {
         $545 = 1;
        } else {
         $517 = (($515) + 12|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = (($515) + 16|0);
         $520 = HEAP32[$519>>2]|0;
         $521 = ($518|0)==($520|0);
         if ($521) {
          $522 = HEAP32[$515>>2]|0;
          $523 = (($522) + 36|0);
          $524 = HEAP32[$523>>2]|0;
          __THREW__ = 0;
          $525 = (invoke_ii($524|0,($515|0))|0);
          $526 = __THREW__; __THREW__ = 0;
          $527 = $526&1;
          if ($527) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i150 = $525;
          }
         } else {
          $528 = HEAP32[$518>>2]|0;
          $$0$i$i$i$i150 = $528;
         }
         $529 = ($$0$i$i$i$i150|0)==(-1);
         if ($529) {
          HEAP32[$__b>>2] = 0;
          $545 = 1;
          break;
         } else {
          $$pre$i$i$i152 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i153 = ($$pre$i$i$i152|0)==(0|0);
          $545 = $phitmp$i$i$i153;
          break;
         }
        }
       } while(0);
       $530 = HEAP32[$__e>>2]|0;
       $531 = ($530|0)==(0|0);
       do {
        if ($531) {
         label = 214;
        } else {
         $532 = (($530) + 12|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = (($530) + 16|0);
         $535 = HEAP32[$534>>2]|0;
         $536 = ($533|0)==($535|0);
         if ($536) {
          $537 = HEAP32[$530>>2]|0;
          $538 = (($537) + 36|0);
          $539 = HEAP32[$538>>2]|0;
          __THREW__ = 0;
          $540 = (invoke_ii($539|0,($530|0))|0);
          $541 = __THREW__; __THREW__ = 0;
          $542 = $541&1;
          if ($542) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i156 = $540;
          }
         } else {
          $543 = HEAP32[$533>>2]|0;
          $$0$i$i1$i$i156 = $543;
         }
         $544 = ($$0$i$i1$i$i156|0)==(-1);
         if ($544) {
          HEAP32[$__e>>2] = 0;
          label = 214;
          break;
         } else {
          $$pre$i3$i$i158 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i159 = ($$pre$i3$i$i158|0)==(0|0);
          $tmp$i$i161 = $545 ^ $phitmp$i4$i$i159;
          if ($tmp$i$i161) {
           break;
          } else {
           $$lcssa286 = $585;$__ng$0$lcssa287 = $__ng$0;
           break L42;
          }
         }
        }
       } while(0);
       if ((label|0) == 214) {
        label = 0;
        if ($545) {
         $$lcssa286 = $585;$__ng$0$lcssa287 = $__ng$0;
         break;
        }
       }
       $546 = HEAP32[$__b>>2]|0;
       $547 = (($546) + 12|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = (($546) + 16|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = ($548|0)==($550|0);
       if ($551) {
        $552 = HEAP32[$546>>2]|0;
        $553 = (($552) + 36|0);
        $554 = HEAP32[$553>>2]|0;
        __THREW__ = 0;
        $555 = (invoke_ii($554|0,($546|0))|0);
        $556 = __THREW__; __THREW__ = 0;
        $557 = $556&1;
        if ($557) {
         label = 25;
         break L4;
        } else {
         $$0$i$i147 = $555;
        }
       } else {
        $558 = HEAP32[$548>>2]|0;
        $$0$i$i147 = $558;
       }
       $559 = HEAP32[$__ct>>2]|0;
       $560 = (($559) + 12|0);
       $561 = HEAP32[$560>>2]|0;
       __THREW__ = 0;
       $562 = (invoke_iiii($561|0,($__ct|0),2048,($$0$i$i147|0))|0);
       $563 = __THREW__; __THREW__ = 0;
       $564 = $563&1;
       if ($564) {
        label = 25;
        break L4;
       }
       if ($562) {
        $565 = HEAP32[$__wn>>2]|0;
        $566 = HEAP32[$0>>2]|0;
        $567 = ($565|0)==($566|0);
        if ($567) {
         __THREW__ = 0;
         invoke_viii(585,($__wb|0),($__wn|0),($0|0));
         $568 = __THREW__; __THREW__ = 0;
         $569 = $568&1;
         if ($569) {
          label = 25;
          break L4;
         }
         $$pre268 = HEAP32[$__wn>>2]|0;
         $571 = $$pre268;
        } else {
         $571 = $565;
        }
        $570 = (($571) + 4|0);
        HEAP32[$__wn>>2] = $570;
        HEAP32[$571>>2] = $$0$i$i147;
        $572 = (($__ng$0) + 1)|0;
        $861 = $585;$__ng$1 = $572;
       } else {
        $573 = HEAP8[$__grp>>0]|0;
        $574 = $573 & 1;
        $575 = ($574<<24>>24)==(0);
        if ($575) {
         $577 = $573&255;
         $578 = $577 >>> 1;
         $580 = $578;
        } else {
         $576 = HEAP32[$17>>2]|0;
         $580 = $576;
        }
        $579 = ($580|0)!=(0);
        $581 = ($__ng$0|0)!=(0);
        $or$cond7 = $579 & $581;
        $582 = ($$0$i$i147|0)==($52|0);
        $or$cond13 = $or$cond7 & $582;
        if (!($or$cond13)) {
         $$lcssa286 = $585;$__ng$0$lcssa287 = $__ng$0;
         break;
        }
        $583 = HEAP32[$__ge>>2]|0;
        $584 = ($585|0)==($583|0);
        if ($584) {
         __THREW__ = 0;
         invoke_viii(580,($__gb|0),($__gn|0),($__ge|0));
         $586 = __THREW__; __THREW__ = 0;
         $587 = $586&1;
         if ($587) {
          label = 25;
          break L4;
         }
         $$pre270 = HEAP32[$__gn>>2]|0;
         $589 = $$pre270;
        } else {
         $589 = $585;
        }
        $588 = (($589) + 4|0);
        HEAP32[$__gn>>2] = $588;
        HEAP32[$589>>2] = $__ng$0;
        $861 = $588;$__ng$1 = 0;
       }
       $590 = HEAP32[$__b>>2]|0;
       $591 = (($590) + 12|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = (($590) + 16|0);
       $594 = HEAP32[$593>>2]|0;
       $595 = ($592|0)==($594|0);
       if ($595) {
        $596 = HEAP32[$590>>2]|0;
        $597 = (($596) + 40|0);
        $598 = HEAP32[$597>>2]|0;
        __THREW__ = 0;
        (invoke_ii($598|0,($590|0))|0);
        $599 = __THREW__; __THREW__ = 0;
        $600 = $599&1;
        if ($600) {
         label = 25;
         break L4;
        }
       } else {
        $601 = (($592) + 4|0);
        HEAP32[$591>>2] = $601;
       }
       $585 = $861;$__ng$0 = $__ng$1;
      }
      $602 = HEAP32[$__gb>>2]|0;
      $603 = ($602|0)!=($$lcssa286|0);
      $604 = ($__ng$0$lcssa287|0)!=(0);
      $or$cond9 = $603 & $604;
      if ($or$cond9) {
       $605 = HEAP32[$__ge>>2]|0;
       $606 = ($$lcssa286|0)==($605|0);
       if ($606) {
        __THREW__ = 0;
        invoke_viii(580,($__gb|0),($__gn|0),($__ge|0));
        $607 = __THREW__; __THREW__ = 0;
        $608 = $607&1;
        if ($608) {
         label = 26;
         break L4;
        }
        $$pre266 = HEAP32[$__gn>>2]|0;
        $610 = $$pre266;
       } else {
        $610 = $$lcssa286;
       }
       $609 = (($610) + 4|0);
       HEAP32[$__gn>>2] = $609;
       HEAP32[$610>>2] = $__ng$0$lcssa287;
       $862 = $609;
      } else {
       $862 = $$lcssa286;
      }
      $611 = HEAP32[$__fd>>2]|0;
      $612 = ($611|0)>(0);
      if ($612) {
       $613 = HEAP32[$__b>>2]|0;
       $614 = ($613|0)==(0|0);
       do {
        if ($614) {
         $643 = 1;
        } else {
         $615 = (($613) + 12|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = (($613) + 16|0);
         $618 = HEAP32[$617>>2]|0;
         $619 = ($616|0)==($618|0);
         if ($619) {
          $620 = HEAP32[$613>>2]|0;
          $621 = (($620) + 36|0);
          $622 = HEAP32[$621>>2]|0;
          __THREW__ = 0;
          $623 = (invoke_ii($622|0,($613|0))|0);
          $624 = __THREW__; __THREW__ = 0;
          $625 = $624&1;
          if ($625) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i118 = $623;
          }
         } else {
          $626 = HEAP32[$616>>2]|0;
          $$0$i$i$i$i118 = $626;
         }
         $627 = ($$0$i$i$i$i118|0)==(-1);
         if ($627) {
          HEAP32[$__b>>2] = 0;
          $643 = 1;
          break;
         } else {
          $$pre$i$i$i120 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i121 = ($$pre$i$i$i120|0)==(0|0);
          $643 = $phitmp$i$i$i121;
          break;
         }
        }
       } while(0);
       $628 = HEAP32[$__e>>2]|0;
       $629 = ($628|0)==(0|0);
       do {
        if ($629) {
         label = 256;
        } else {
         $630 = (($628) + 12|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (($628) + 16|0);
         $633 = HEAP32[$632>>2]|0;
         $634 = ($631|0)==($633|0);
         if ($634) {
          $635 = HEAP32[$628>>2]|0;
          $636 = (($635) + 36|0);
          $637 = HEAP32[$636>>2]|0;
          __THREW__ = 0;
          $638 = (invoke_ii($637|0,($628|0))|0);
          $639 = __THREW__; __THREW__ = 0;
          $640 = $639&1;
          if ($640) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i124 = $638;
          }
         } else {
          $641 = HEAP32[$631>>2]|0;
          $$0$i$i1$i$i124 = $641;
         }
         $642 = ($$0$i$i1$i$i124|0)==(-1);
         if ($642) {
          HEAP32[$__e>>2] = 0;
          label = 256;
          break;
         } else {
          $$pre$i3$i$i126 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i127 = ($$pre$i3$i$i126|0)==(0|0);
          $tmp$i$i129 = $643 ^ $phitmp$i4$i$i127;
          if ($tmp$i$i129) {
           break;
          } else {
           label = 262;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 256) {
        label = 0;
        if ($643) {
         label = 262;
         break L4;
        }
       }
       $644 = HEAP32[$__b>>2]|0;
       $645 = (($644) + 12|0);
       $646 = HEAP32[$645>>2]|0;
       $647 = (($644) + 16|0);
       $648 = HEAP32[$647>>2]|0;
       $649 = ($646|0)==($648|0);
       if ($649) {
        $650 = HEAP32[$644>>2]|0;
        $651 = (($650) + 36|0);
        $652 = HEAP32[$651>>2]|0;
        __THREW__ = 0;
        $653 = (invoke_ii($652|0,($644|0))|0);
        $654 = __THREW__; __THREW__ = 0;
        $655 = $654&1;
        if ($655) {
         label = 26;
         break L4;
        } else {
         $$0$i$i111 = $653;
        }
       } else {
        $656 = HEAP32[$646>>2]|0;
        $$0$i$i111 = $656;
       }
       $657 = HEAP32[$__dp>>2]|0;
       $658 = ($$0$i$i111|0)==($657|0);
       if (!($658)) {
        label = 262;
        break L4;
       }
       $661 = HEAP32[$__b>>2]|0;
       $662 = (($661) + 12|0);
       $663 = HEAP32[$662>>2]|0;
       $664 = (($661) + 16|0);
       $665 = HEAP32[$664>>2]|0;
       $666 = ($663|0)==($665|0);
       if ($666) {
        $667 = HEAP32[$661>>2]|0;
        $668 = (($667) + 40|0);
        $669 = HEAP32[$668>>2]|0;
        __THREW__ = 0;
        (invoke_ii($669|0,($661|0))|0);
        $670 = __THREW__; __THREW__ = 0;
        $671 = $670&1;
        if ($671) {
         label = 26;
         break L4;
        }
       } else {
        $672 = (($663) + 4|0);
        HEAP32[$662>>2] = $672;
       }
       $746 = $611;
       while(1) {
        $673 = HEAP32[$__b>>2]|0;
        $674 = ($673|0)==(0|0);
        do {
         if ($674) {
          $703 = 1;
         } else {
          $675 = (($673) + 12|0);
          $676 = HEAP32[$675>>2]|0;
          $677 = (($673) + 16|0);
          $678 = HEAP32[$677>>2]|0;
          $679 = ($676|0)==($678|0);
          if ($679) {
           $680 = HEAP32[$673>>2]|0;
           $681 = (($680) + 36|0);
           $682 = HEAP32[$681>>2]|0;
           __THREW__ = 0;
           $683 = (invoke_ii($682|0,($673|0))|0);
           $684 = __THREW__; __THREW__ = 0;
           $685 = $684&1;
           if ($685) {
            label = 24;
            break L4;
           } else {
            $$0$i$i$i$i84 = $683;
           }
          } else {
           $686 = HEAP32[$676>>2]|0;
           $$0$i$i$i$i84 = $686;
          }
          $687 = ($$0$i$i$i$i84|0)==(-1);
          if ($687) {
           HEAP32[$__b>>2] = 0;
           $703 = 1;
           break;
          } else {
           $$pre$i$i$i86 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i87 = ($$pre$i$i$i86|0)==(0|0);
           $703 = $phitmp$i$i$i87;
           break;
          }
         }
        } while(0);
        $688 = HEAP32[$__e>>2]|0;
        $689 = ($688|0)==(0|0);
        do {
         if ($689) {
          label = 280;
         } else {
          $690 = (($688) + 12|0);
          $691 = HEAP32[$690>>2]|0;
          $692 = (($688) + 16|0);
          $693 = HEAP32[$692>>2]|0;
          $694 = ($691|0)==($693|0);
          if ($694) {
           $695 = HEAP32[$688>>2]|0;
           $696 = (($695) + 36|0);
           $697 = HEAP32[$696>>2]|0;
           __THREW__ = 0;
           $698 = (invoke_ii($697|0,($688|0))|0);
           $699 = __THREW__; __THREW__ = 0;
           $700 = $699&1;
           if ($700) {
            label = 24;
            break L4;
           } else {
            $$0$i$i1$i$i90 = $698;
           }
          } else {
           $701 = HEAP32[$691>>2]|0;
           $$0$i$i1$i$i90 = $701;
          }
          $702 = ($$0$i$i1$i$i90|0)==(-1);
          if ($702) {
           HEAP32[$__e>>2] = 0;
           label = 280;
           break;
          } else {
           $$pre$i3$i$i92 = HEAP32[$__e>>2]|0;
           $phitmp$i4$i$i93 = ($$pre$i3$i$i92|0)==(0|0);
           $tmp$i$i95 = $703 ^ $phitmp$i4$i$i93;
           if ($tmp$i$i95) {
            break;
           } else {
            label = 287;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 280) {
         label = 0;
         if ($703) {
          label = 287;
          break L4;
         }
        }
        $704 = HEAP32[$__b>>2]|0;
        $705 = (($704) + 12|0);
        $706 = HEAP32[$705>>2]|0;
        $707 = (($704) + 16|0);
        $708 = HEAP32[$707>>2]|0;
        $709 = ($706|0)==($708|0);
        if ($709) {
         $710 = HEAP32[$704>>2]|0;
         $711 = (($710) + 36|0);
         $712 = HEAP32[$711>>2]|0;
         __THREW__ = 0;
         $713 = (invoke_ii($712|0,($704|0))|0);
         $714 = __THREW__; __THREW__ = 0;
         $715 = $714&1;
         if ($715) {
          label = 24;
          break L4;
         } else {
          $$0$i$i78 = $713;
         }
        } else {
         $716 = HEAP32[$706>>2]|0;
         $$0$i$i78 = $716;
        }
        $717 = HEAP32[$__ct>>2]|0;
        $718 = (($717) + 12|0);
        $719 = HEAP32[$718>>2]|0;
        __THREW__ = 0;
        $720 = (invoke_iiii($719|0,($__ct|0),2048,($$0$i$i78|0))|0);
        $721 = __THREW__; __THREW__ = 0;
        $722 = $721&1;
        if ($722) {
         label = 24;
         break L4;
        }
        if (!($720)) {
         label = 287;
         break L4;
        }
        $725 = HEAP32[$__wn>>2]|0;
        $726 = HEAP32[$0>>2]|0;
        $727 = ($725|0)==($726|0);
        if ($727) {
         __THREW__ = 0;
         invoke_viii(585,($__wb|0),($__wn|0),($0|0));
         $728 = __THREW__; __THREW__ = 0;
         $729 = $728&1;
         if ($729) {
          label = 24;
          break L4;
         }
        }
        $730 = HEAP32[$__b>>2]|0;
        $731 = (($730) + 12|0);
        $732 = HEAP32[$731>>2]|0;
        $733 = (($730) + 16|0);
        $734 = HEAP32[$733>>2]|0;
        $735 = ($732|0)==($734|0);
        if ($735) {
         $736 = HEAP32[$730>>2]|0;
         $737 = (($736) + 36|0);
         $738 = HEAP32[$737>>2]|0;
         __THREW__ = 0;
         $739 = (invoke_ii($738|0,($730|0))|0);
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 24;
          break L4;
         } else {
          $$0$i$i70 = $739;
         }
        } else {
         $742 = HEAP32[$732>>2]|0;
         $$0$i$i70 = $742;
        }
        $743 = HEAP32[$__wn>>2]|0;
        $744 = (($743) + 4|0);
        HEAP32[$__wn>>2] = $744;
        HEAP32[$743>>2] = $$0$i$i70;
        $745 = (($746) + -1)|0;
        HEAP32[$__fd>>2] = $745;
        $747 = HEAP32[$__b>>2]|0;
        $748 = (($747) + 12|0);
        $749 = HEAP32[$748>>2]|0;
        $750 = (($747) + 16|0);
        $751 = HEAP32[$750>>2]|0;
        $752 = ($749|0)==($751|0);
        if ($752) {
         $753 = HEAP32[$747>>2]|0;
         $754 = (($753) + 40|0);
         $755 = HEAP32[$754>>2]|0;
         __THREW__ = 0;
         (invoke_ii($755|0,($747|0))|0);
         $756 = __THREW__; __THREW__ = 0;
         $757 = $756&1;
         if ($757) {
          label = 24;
          break L4;
         }
        } else {
         $759 = (($749) + 4|0);
         HEAP32[$748>>2] = $759;
        }
        $758 = ($745|0)>(0);
        if ($758) {
         $746 = $745;
        } else {
         break;
        }
       }
      }
      $760 = HEAP32[$__wn>>2]|0;
      $761 = HEAP32[$__wb>>2]|0;
      $762 = ($760|0)==($761|0);
      if ($762) {
       label = 299;
       break L4;
      } else {
       $860 = $862;$__trailing_sign$1 = $__trailing_sign$0253;
      }
      break;
     }
     case 2:  {
      $357 = ($__trailing_sign$0253|0)!=(0|0);
      $358 = ($__p$0251>>>0)<(2);
      $or$cond = $357 | $358;
      if (!($or$cond)) {
       $359 = ($__p$0251|0)==(2);
       if ($359) {
        $360 = HEAP8[$16>>0]|0;
        $361 = ($360<<24>>24)!=(0);
        $362 = $361;
       } else {
        $362 = 0;
       }
       $brmerge = $11 | $362;
       if (!($brmerge)) {
        $860 = $859;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $363 = HEAP8[$__sym>>0]|0;
      $364 = $363 & 1;
      $365 = ($364<<24>>24)==(0);
      $366 = HEAP32[$13>>2]|0;
      $$281 = $365 ? $12 : $366;
      $367 = ($__p$0251|0)==(0);
      L183: do {
       if ($367) {
        $$ph = $363;$$ph285 = $$281;
       } else {
        $368 = (($__p$0251) + -1)|0;
        $369 = (($__pat) + ($368)|0);
        $370 = HEAP8[$369>>0]|0;
        $switch = ($370&255)<(2);
        if ($switch) {
         $372 = $363;$382 = $$281;
         while(1) {
          $371 = $372 & 1;
          $373 = ($371<<24>>24)==(0);
          if ($373) {
           $376 = $372&255;
           $377 = $376 >>> 1;
           $379 = $12;$380 = $377;
          } else {
           $374 = HEAP32[$13>>2]|0;
           $375 = HEAP32[$12>>2]|0;
           $379 = $374;$380 = $375;
          }
          $378 = (($379) + ($380<<2)|0);
          $381 = ($382|0)==($378|0);
          if ($381) {
           $$lcssa = $372;$$lcssa290 = $382;
           label = 152;
           break;
          }
          $383 = HEAP32[$382>>2]|0;
          $384 = HEAP32[$__ct>>2]|0;
          $385 = (($384) + 12|0);
          $386 = HEAP32[$385>>2]|0;
          __THREW__ = 0;
          $387 = (invoke_iiii($386|0,($__ct|0),8192,($383|0))|0);
          $388 = __THREW__; __THREW__ = 0;
          $389 = $388&1;
          if ($389) {
           label = 23;
           break L4;
          }
          if (!($387)) {
           $$lcssa292 = $382;
           label = 150;
           break;
          }
          $390 = (($382) + 4|0);
          $$pre264 = HEAP8[$__sym>>0]|0;
          $372 = $$pre264;$382 = $390;
         }
         if ((label|0) == 150) {
          label = 0;
          $$pre265 = HEAP8[$__sym>>0]|0;
          $392 = $$pre265;$396 = $$lcssa292;
         }
         else if ((label|0) == 152) {
          label = 0;
          $392 = $$lcssa;$396 = $$lcssa290;
         }
         $391 = $392 & 1;
         $393 = ($391<<24>>24)==(0);
         $394 = HEAP32[$13>>2]|0;
         $$282 = $393 ? $12 : $394;
         $395 = $396;
         $397 = $$282;
         $398 = (($395) - ($397))|0;
         $399 = $398 >> 2;
         $400 = HEAP8[$__spaces>>0]|0;
         $401 = $400 & 1;
         $402 = ($401<<24>>24)==(0);
         if ($402) {
          $404 = $400&255;
          $405 = $404 >>> 1;
          $407 = $405;
         } else {
          $403 = HEAP32[$14>>2]|0;
          $407 = $403;
         }
         $406 = ($399>>>0)>($407>>>0);
         do {
          if (!($406)) {
           if ($402) {
            $411 = $400&255;
            $412 = $411 >>> 1;
            $$sum271 = (($412) - ($399))|0;
            $413 = (($14) + ($$sum271<<2)|0);
            $414 = $400&255;
            $415 = $414 >>> 1;
            $417 = $14;$418 = $415;$421 = $413;
           } else {
            $408 = HEAP32[$15>>2]|0;
            $409 = HEAP32[$14>>2]|0;
            $$sum = (($409) - ($399))|0;
            $410 = (($408) + ($$sum<<2)|0);
            $417 = $408;$418 = $409;$421 = $410;
           }
           $416 = (($417) + ($418<<2)|0);
           $419 = HEAP32[$13>>2]|0;
           $$283 = $393 ? $12 : $419;
           $420 = ($421|0)==($416|0);
           if ($420) {
            $$ph = $392;$$ph285 = $396;
            break L183;
           }
           $423 = $421;$425 = $$283;
           while(1) {
            $422 = HEAP32[$423>>2]|0;
            $424 = HEAP32[$425>>2]|0;
            $426 = ($422|0)==($424|0);
            if (!($426)) {
             label = 164;
             break;
            }
            $427 = (($423) + 4|0);
            $428 = (($425) + 4|0);
            $429 = ($427|0)==($416|0);
            if ($429) {
             label = 166;
             break;
            } else {
             $423 = $427;$425 = $428;
            }
           }
           if ((label|0) == 164) {
            label = 0;
            break;
           }
           else if ((label|0) == 166) {
            label = 0;
            $$ph = $392;$$ph285 = $396;
            break L183;
           }
          }
         } while(0);
         $430 = HEAP32[$13>>2]|0;
         $$284 = $393 ? $12 : $430;
         $$ph = $392;$$ph285 = $$284;
        } else {
         $$ph = $363;$$ph285 = $$281;
        }
       }
      } while(0);
      $432 = $$ph;$442 = $$ph285;
      L218: while(1) {
       $431 = $432 & 1;
       $433 = ($431<<24>>24)==(0);
       if ($433) {
        $436 = $432&255;
        $437 = $436 >>> 1;
        $439 = $12;$440 = $437;
       } else {
        $434 = HEAP32[$13>>2]|0;
        $435 = HEAP32[$12>>2]|0;
        $439 = $434;$440 = $435;
       }
       $438 = (($439) + ($440<<2)|0);
       $441 = ($442|0)==($438|0);
       if ($441) {
        $$lcssa293 = $442;
        break;
       }
       $443 = HEAP32[$__b>>2]|0;
       $444 = ($443|0)==(0|0);
       do {
        if ($444) {
         $473 = 1;
        } else {
         $445 = (($443) + 12|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = (($443) + 16|0);
         $448 = HEAP32[$447>>2]|0;
         $449 = ($446|0)==($448|0);
         if ($449) {
          $450 = HEAP32[$443>>2]|0;
          $451 = (($450) + 36|0);
          $452 = HEAP32[$451>>2]|0;
          __THREW__ = 0;
          $453 = (invoke_ii($452|0,($443|0))|0);
          $454 = __THREW__; __THREW__ = 0;
          $455 = $454&1;
          if ($455) {
           label = 22;
           break L4;
          } else {
           $$0$i$i$i$i175 = $453;
          }
         } else {
          $456 = HEAP32[$446>>2]|0;
          $$0$i$i$i$i175 = $456;
         }
         $457 = ($$0$i$i$i$i175|0)==(-1);
         if ($457) {
          HEAP32[$__b>>2] = 0;
          $473 = 1;
          break;
         } else {
          $$pre$i$i$i177 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i178 = ($$pre$i$i$i177|0)==(0|0);
          $473 = $phitmp$i$i$i178;
          break;
         }
        }
       } while(0);
       $458 = HEAP32[$__e>>2]|0;
       $459 = ($458|0)==(0|0);
       do {
        if ($459) {
         label = 185;
        } else {
         $460 = (($458) + 12|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = (($458) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         $464 = ($461|0)==($463|0);
         if ($464) {
          $465 = HEAP32[$458>>2]|0;
          $466 = (($465) + 36|0);
          $467 = HEAP32[$466>>2]|0;
          __THREW__ = 0;
          $468 = (invoke_ii($467|0,($458|0))|0);
          $469 = __THREW__; __THREW__ = 0;
          $470 = $469&1;
          if ($470) {
           label = 22;
           break L4;
          } else {
           $$0$i$i1$i$i181 = $468;
          }
         } else {
          $471 = HEAP32[$461>>2]|0;
          $$0$i$i1$i$i181 = $471;
         }
         $472 = ($$0$i$i1$i$i181|0)==(-1);
         if ($472) {
          HEAP32[$__e>>2] = 0;
          label = 185;
          break;
         } else {
          $$pre$i3$i$i183 = HEAP32[$__e>>2]|0;
          $phitmp$i4$i$i184 = ($$pre$i3$i$i183|0)==(0|0);
          $tmp$i$i186 = $473 ^ $phitmp$i4$i$i184;
          if ($tmp$i$i186) {
           break;
          } else {
           $$lcssa293 = $442;
           break L218;
          }
         }
        }
       } while(0);
       if ((label|0) == 185) {
        label = 0;
        if ($473) {
         $$lcssa293 = $442;
         break;
        }
       }
       $474 = HEAP32[$__b>>2]|0;
       $475 = (($474) + 12|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = (($474) + 16|0);
       $478 = HEAP32[$477>>2]|0;
       $479 = ($476|0)==($478|0);
       if ($479) {
        $480 = HEAP32[$474>>2]|0;
        $481 = (($480) + 36|0);
        $482 = HEAP32[$481>>2]|0;
        __THREW__ = 0;
        $483 = (invoke_ii($482|0,($474|0))|0);
        $484 = __THREW__; __THREW__ = 0;
        $485 = $484&1;
        if ($485) {
         label = 22;
         break L4;
        } else {
         $$0$i$i171 = $483;
        }
       } else {
        $486 = HEAP32[$476>>2]|0;
        $$0$i$i171 = $486;
       }
       $487 = HEAP32[$442>>2]|0;
       $488 = ($$0$i$i171|0)==($487|0);
       if (!($488)) {
        $$lcssa293 = $442;
        break;
       }
       $489 = HEAP32[$__b>>2]|0;
       $490 = (($489) + 12|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = (($489) + 16|0);
       $493 = HEAP32[$492>>2]|0;
       $494 = ($491|0)==($493|0);
       if ($494) {
        $495 = HEAP32[$489>>2]|0;
        $496 = (($495) + 40|0);
        $497 = HEAP32[$496>>2]|0;
        __THREW__ = 0;
        (invoke_ii($497|0,($489|0))|0);
        $498 = __THREW__; __THREW__ = 0;
        $499 = $498&1;
        if ($499) {
         label = 22;
         break L4;
        }
       } else {
        $500 = (($491) + 4|0);
        HEAP32[$490>>2] = $500;
       }
       $501 = (($442) + 4|0);
       $$pre263 = HEAP8[$__sym>>0]|0;
       $432 = $$pre263;$442 = $501;
      }
      if ($11) {
       $502 = HEAP8[$__sym>>0]|0;
       $503 = $502 & 1;
       $504 = ($503<<24>>24)==(0);
       if ($504) {
        $507 = $502&255;
        $508 = $507 >>> 1;
        $510 = $12;$511 = $508;
       } else {
        $505 = HEAP32[$13>>2]|0;
        $506 = HEAP32[$12>>2]|0;
        $510 = $505;$511 = $506;
       }
       $509 = (($510) + ($511<<2)|0);
       $512 = ($$lcssa293|0)==($509|0);
       if ($512) {
        $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
       } else {
        label = 200;
        break L4;
       }
      } else {
       $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
      }
      break;
     }
     case 0:  {
      label = 43;
      break;
     }
     case 3:  {
      $180 = HEAP8[$__psn>>0]|0;
      $181 = $180 & 1;
      $182 = ($181<<24>>24)==(0);
      if ($182) {
       $184 = $180&255;
       $185 = $184 >>> 1;
       $195 = $185;
      } else {
       $183 = HEAP32[$8>>2]|0;
       $195 = $183;
      }
      $186 = HEAP8[$__nsn>>0]|0;
      $187 = $186 & 1;
      $188 = ($187<<24>>24)==(0);
      if ($188) {
       $190 = $186&255;
       $191 = $190 >>> 1;
       $193 = $191;
      } else {
       $189 = HEAP32[$6>>2]|0;
       $193 = $189;
      }
      $192 = (0 - ($193))|0;
      $194 = ($195|0)==($192|0);
      if ($194) {
       $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
      } else {
       if ($182) {
        $197 = $180&255;
        $198 = $197 >>> 1;
        $200 = $198;
       } else {
        $196 = HEAP32[$8>>2]|0;
        $200 = $196;
       }
       $199 = ($200|0)==(0);
       if (!($199)) {
        if ($188) {
         $202 = $186&255;
         $203 = $202 >>> 1;
         $205 = $203;
        } else {
         $201 = HEAP32[$6>>2]|0;
         $205 = $201;
        }
        $204 = ($205|0)==(0);
        if (!($204)) {
         $283 = HEAP32[$__b>>2]|0;
         $284 = (($283) + 12|0);
         $285 = HEAP32[$284>>2]|0;
         $286 = (($283) + 16|0);
         $287 = HEAP32[$286>>2]|0;
         $288 = ($285|0)==($287|0);
         if ($288) {
          $289 = HEAP32[$283>>2]|0;
          $290 = (($289) + 36|0);
          $291 = HEAP32[$290>>2]|0;
          __THREW__ = 0;
          $292 = (invoke_ii($291|0,($283|0))|0);
          $293 = __THREW__; __THREW__ = 0;
          $294 = $293&1;
          if ($294) {
           label = 26;
           break L4;
          }
          $$pre262 = HEAP8[$__psn>>0]|0;
          $$0$i$i114 = $292;$297 = $$pre262;
         } else {
          $295 = HEAP32[$285>>2]|0;
          $$0$i$i114 = $295;$297 = $180;
         }
         $296 = $297 & 1;
         $298 = ($296<<24>>24)==(0);
         $299 = HEAP32[$9>>2]|0;
         $$279 = $298 ? $8 : $299;
         $300 = HEAP32[$$279>>2]|0;
         $301 = ($$0$i$i114|0)==($300|0);
         $302 = HEAP32[$__b>>2]|0;
         $303 = (($302) + 12|0);
         $304 = HEAP32[$303>>2]|0;
         $305 = (($302) + 16|0);
         $306 = HEAP32[$305>>2]|0;
         $307 = ($304|0)==($306|0);
         if ($301) {
          if ($307) {
           $308 = HEAP32[$302>>2]|0;
           $309 = (($308) + 40|0);
           $310 = HEAP32[$309>>2]|0;
           __THREW__ = 0;
           (invoke_ii($310|0,($302|0))|0);
           $311 = __THREW__; __THREW__ = 0;
           $312 = $311&1;
           if ($312) {
            label = 26;
            break L4;
           }
          } else {
           $313 = (($304) + 4|0);
           HEAP32[$303>>2] = $313;
          }
          $314 = HEAP8[$__psn>>0]|0;
          $315 = $314 & 1;
          $316 = ($315<<24>>24)==(0);
          if ($316) {
           $318 = $314&255;
           $319 = $318 >>> 1;
           $321 = $319;
          } else {
           $317 = HEAP32[$8>>2]|0;
           $321 = $317;
          }
          $320 = ($321>>>0)>(1);
          $__psn$__trailing_sign$010 = $320 ? $__psn : $__trailing_sign$0253;
          $860 = $859;$__trailing_sign$1 = $__psn$__trailing_sign$010;
          break L28;
         }
         if ($307) {
          $322 = HEAP32[$302>>2]|0;
          $323 = (($322) + 36|0);
          $324 = HEAP32[$323>>2]|0;
          __THREW__ = 0;
          $325 = (invoke_ii($324|0,($302|0))|0);
          $326 = __THREW__; __THREW__ = 0;
          $327 = $326&1;
          if ($327) {
           label = 26;
           break L4;
          } else {
           $$0$i$i136 = $325;
          }
         } else {
          $328 = HEAP32[$304>>2]|0;
          $$0$i$i136 = $328;
         }
         $329 = HEAP8[$__nsn>>0]|0;
         $330 = $329 & 1;
         $331 = ($330<<24>>24)==(0);
         $332 = HEAP32[$7>>2]|0;
         $$280 = $331 ? $6 : $332;
         $333 = HEAP32[$$280>>2]|0;
         $334 = ($$0$i$i136|0)==($333|0);
         if (!($334)) {
          label = 136;
          break L4;
         }
         $335 = HEAP32[$__b>>2]|0;
         $336 = (($335) + 12|0);
         $337 = HEAP32[$336>>2]|0;
         $338 = (($335) + 16|0);
         $339 = HEAP32[$338>>2]|0;
         $340 = ($337|0)==($339|0);
         if ($340) {
          $341 = HEAP32[$335>>2]|0;
          $342 = (($341) + 40|0);
          $343 = HEAP32[$342>>2]|0;
          __THREW__ = 0;
          (invoke_ii($343|0,($335|0))|0);
          $344 = __THREW__; __THREW__ = 0;
          $345 = $344&1;
          if ($345) {
           label = 26;
           break L4;
          }
         } else {
          $346 = (($337) + 4|0);
          HEAP32[$336>>2] = $346;
         }
         HEAP8[$__neg>>0] = 1;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         if ($349) {
          $351 = $347&255;
          $352 = $351 >>> 1;
          $354 = $352;
         } else {
          $350 = HEAP32[$6>>2]|0;
          $354 = $350;
         }
         $353 = ($354>>>0)>(1);
         $__nsn$__trailing_sign$011 = $353 ? $__nsn : $__trailing_sign$0253;
         $860 = $859;$__trailing_sign$1 = $__nsn$__trailing_sign$011;
         break L28;
        }
       }
       if ($182) {
        $207 = $180&255;
        $208 = $207 >>> 1;
        $210 = $208;
       } else {
        $206 = HEAP32[$8>>2]|0;
        $210 = $206;
       }
       $209 = ($210|0)==(0);
       $211 = HEAP32[$__b>>2]|0;
       $212 = (($211) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = (($211) + 16|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ($213|0)==($215|0);
       if ($209) {
        if ($216) {
         $250 = HEAP32[$211>>2]|0;
         $251 = (($250) + 36|0);
         $252 = HEAP32[$251>>2]|0;
         __THREW__ = 0;
         $253 = (invoke_ii($252|0,($211|0))|0);
         $254 = __THREW__; __THREW__ = 0;
         $255 = $254&1;
         if ($255) {
          label = 26;
          break L4;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i102 = $253;$258 = $$pre;
        } else {
         $256 = HEAP32[$213>>2]|0;
         $$0$i$i102 = $256;$258 = $186;
        }
        $257 = $258 & 1;
        $259 = ($257<<24>>24)==(0);
        $260 = HEAP32[$7>>2]|0;
        $$278 = $259 ? $6 : $260;
        $261 = HEAP32[$$278>>2]|0;
        $262 = ($$0$i$i102|0)==($261|0);
        if (!($262)) {
         $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
         break L28;
        }
        $263 = HEAP32[$__b>>2]|0;
        $264 = (($263) + 12|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = (($263) + 16|0);
        $267 = HEAP32[$266>>2]|0;
        $268 = ($265|0)==($267|0);
        if ($268) {
         $269 = HEAP32[$263>>2]|0;
         $270 = (($269) + 40|0);
         $271 = HEAP32[$270>>2]|0;
         __THREW__ = 0;
         (invoke_ii($271|0,($263|0))|0);
         $272 = __THREW__; __THREW__ = 0;
         $273 = $272&1;
         if ($273) {
          label = 26;
          break L4;
         }
        } else {
         $274 = (($265) + 4|0);
         HEAP32[$264>>2] = $274;
        }
        HEAP8[$__neg>>0] = 1;
        $275 = HEAP8[$__nsn>>0]|0;
        $276 = $275 & 1;
        $277 = ($276<<24>>24)==(0);
        if ($277) {
         $279 = $275&255;
         $280 = $279 >>> 1;
         $282 = $280;
        } else {
         $278 = HEAP32[$6>>2]|0;
         $282 = $278;
        }
        $281 = ($282>>>0)>(1);
        $__nsn$__trailing_sign$0 = $281 ? $__nsn : $__trailing_sign$0253;
        $860 = $859;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       if ($216) {
        $217 = HEAP32[$211>>2]|0;
        $218 = (($217) + 36|0);
        $219 = HEAP32[$218>>2]|0;
        __THREW__ = 0;
        $220 = (invoke_ii($219|0,($211|0))|0);
        $221 = __THREW__; __THREW__ = 0;
        $222 = $221&1;
        if ($222) {
         label = 26;
         break L4;
        }
        $$pre261 = HEAP8[$__psn>>0]|0;
        $$0$i$i81 = $220;$225 = $$pre261;
       } else {
        $223 = HEAP32[$213>>2]|0;
        $$0$i$i81 = $223;$225 = $180;
       }
       $224 = $225 & 1;
       $226 = ($224<<24>>24)==(0);
       $227 = HEAP32[$9>>2]|0;
       $$ = $226 ? $8 : $227;
       $228 = HEAP32[$$>>2]|0;
       $229 = ($$0$i$i81|0)==($228|0);
       if (!($229)) {
        HEAP8[$__neg>>0] = 1;
        $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
        break L28;
       }
       $230 = HEAP32[$__b>>2]|0;
       $231 = (($230) + 12|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = (($230) + 16|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = ($232|0)==($234|0);
       if ($235) {
        $236 = HEAP32[$230>>2]|0;
        $237 = (($236) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        __THREW__ = 0;
        (invoke_ii($238|0,($230|0))|0);
        $239 = __THREW__; __THREW__ = 0;
        $240 = $239&1;
        if ($240) {
         label = 26;
         break L4;
        }
       } else {
        $241 = (($232) + 4|0);
        HEAP32[$231>>2] = $241;
       }
       $242 = HEAP8[$__psn>>0]|0;
       $243 = $242 & 1;
       $244 = ($243<<24>>24)==(0);
       if ($244) {
        $246 = $242&255;
        $247 = $246 >>> 1;
        $249 = $247;
       } else {
        $245 = HEAP32[$8>>2]|0;
        $249 = $245;
       }
       $248 = ($249>>>0)>(1);
       $__psn$__trailing_sign$0 = $248 ? $__psn : $__trailing_sign$0253;
       $860 = $859;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     default: {
      $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
     }
     }
    } while(0);
    if ((label|0) == 43) {
     label = 0;
     $113 = ($__p$0251|0)==(3);
     if ($113) {
      $847 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$0253;
      label = 302;
      break;
     }
     L353: while(1) {
      $114 = HEAP32[$__b>>2]|0;
      $115 = ($114|0)==(0|0);
      do {
       if ($115) {
        $144 = 1;
       } else {
        $116 = (($114) + 12|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = (($114) + 16|0);
        $119 = HEAP32[$118>>2]|0;
        $120 = ($117|0)==($119|0);
        if ($120) {
         $121 = HEAP32[$114>>2]|0;
         $122 = (($121) + 36|0);
         $123 = HEAP32[$122>>2]|0;
         __THREW__ = 0;
         $124 = (invoke_ii($123|0,($114|0))|0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          label = 21;
          break L4;
         } else {
          $$0$i$i$i$i44 = $124;
         }
        } else {
         $127 = HEAP32[$117>>2]|0;
         $$0$i$i$i$i44 = $127;
        }
        $128 = ($$0$i$i$i$i44|0)==(-1);
        if ($128) {
         HEAP32[$__b>>2] = 0;
         $144 = 1;
         break;
        } else {
         $$pre$i$i$i46 = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i47 = ($$pre$i$i$i46|0)==(0|0);
         $144 = $phitmp$i$i$i47;
         break;
        }
       }
      } while(0);
      $129 = HEAP32[$__e>>2]|0;
      $130 = ($129|0)==(0|0);
      do {
       if ($130) {
        label = 58;
       } else {
        $131 = (($129) + 12|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = (($129) + 16|0);
        $134 = HEAP32[$133>>2]|0;
        $135 = ($132|0)==($134|0);
        if ($135) {
         $136 = HEAP32[$129>>2]|0;
         $137 = (($136) + 36|0);
         $138 = HEAP32[$137>>2]|0;
         __THREW__ = 0;
         $139 = (invoke_ii($138|0,($129|0))|0);
         $140 = __THREW__; __THREW__ = 0;
         $141 = $140&1;
         if ($141) {
          label = 21;
          break L4;
         } else {
          $$0$i$i1$i$i50 = $139;
         }
        } else {
         $142 = HEAP32[$132>>2]|0;
         $$0$i$i1$i$i50 = $142;
        }
        $143 = ($$0$i$i1$i$i50|0)==(-1);
        if ($143) {
         HEAP32[$__e>>2] = 0;
         label = 58;
         break;
        } else {
         $$pre$i3$i$i52 = HEAP32[$__e>>2]|0;
         $phitmp$i4$i$i53 = ($$pre$i3$i$i52|0)==(0|0);
         $tmp$i$i55 = $144 ^ $phitmp$i4$i$i53;
         if ($tmp$i$i55) {
          break;
         } else {
          break L353;
         }
        }
       }
      } while(0);
      if ((label|0) == 58) {
       label = 0;
       if ($144) {
        break;
       }
      }
      $145 = HEAP32[$__b>>2]|0;
      $146 = (($145) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($145) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if ($150) {
       $151 = HEAP32[$145>>2]|0;
       $152 = (($151) + 36|0);
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_ii($153|0,($145|0))|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if ($156) {
        label = 21;
        break L4;
       } else {
        $$0$i$i59 = $154;
       }
      } else {
       $157 = HEAP32[$147>>2]|0;
       $$0$i$i59 = $157;
      }
      $158 = HEAP32[$__ct>>2]|0;
      $159 = (($158) + 12|0);
      $160 = HEAP32[$159>>2]|0;
      __THREW__ = 0;
      $161 = (invoke_iiii($160|0,($__ct|0),8192,($$0$i$i59|0))|0);
      $162 = __THREW__; __THREW__ = 0;
      $163 = $162&1;
      if ($163) {
       label = 21;
       break L4;
      }
      if (!($161)) {
       break;
      }
      $164 = HEAP32[$__b>>2]|0;
      $165 = (($164) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = (($164) + 16|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($166|0)==($168|0);
      if ($169) {
       $170 = HEAP32[$164>>2]|0;
       $171 = (($170) + 40|0);
       $172 = HEAP32[$171>>2]|0;
       __THREW__ = 0;
       $173 = (invoke_ii($172|0,($164|0))|0);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        label = 21;
        break L4;
       } else {
        $$0$i$i65 = $173;
       }
      } else {
       $176 = (($166) + 4|0);
       HEAP32[$165>>2] = $176;
       $177 = HEAP32[$166>>2]|0;
       $$0$i$i65 = $177;
      }
      __THREW__ = 0;
      invoke_vii(584,($__spaces|0),($$0$i$i65|0));
      $178 = __THREW__; __THREW__ = 0;
      $179 = $178&1;
      if ($179) {
       label = 21;
       break L4;
      }
     }
     $860 = $859;$__trailing_sign$1 = $__trailing_sign$0253;
    }
    $765 = (($__p$0251) + 1)|0;
    $766 = ($765>>>0)<(4);
    if ($766) {
     $859 = $860;$__p$0251 = $765;$__trailing_sign$0253 = $__trailing_sign$1;
    } else {
     $847 = $860;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 302;
     break;
    }
   }
   L389:    switch (label|0) {
    case 21: {
     $55 = ___cxa_find_matching_catch()|0;
     $56 = tempRet0;
     $lpad$phi$index = $55;$lpad$phi$index8 = $56;
     break L1;
     break;
    }
    case 22: {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $lpad$phi$index = $57;$lpad$phi$index8 = $58;
     break L1;
     break;
    }
    case 23: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index8 = $60;
     break L1;
     break;
    }
    case 24: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index8 = $62;
     break L1;
     break;
    }
    case 25: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index8 = $64;
     break L1;
     break;
    }
    case 26: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index8 = $66;
     break L1;
     break;
    }
    case 42: {
     $111 = HEAP32[$__err>>2]|0;
     $112 = $111 | 4;
     HEAP32[$__err>>2] = $112;
     $$0 = 0;
     break;
    }
    case 136: {
     $355 = HEAP32[$__err>>2]|0;
     $356 = $355 | 4;
     HEAP32[$__err>>2] = $356;
     $$0 = 0;
     break;
    }
    case 200: {
     $513 = HEAP32[$__err>>2]|0;
     $514 = $513 | 4;
     HEAP32[$__err>>2] = $514;
     $$0 = 0;
     break;
    }
    case 262: {
     $659 = HEAP32[$__err>>2]|0;
     $660 = $659 | 4;
     HEAP32[$__err>>2] = $660;
     $$0 = 0;
     break;
    }
    case 287: {
     $723 = HEAP32[$__err>>2]|0;
     $724 = $723 | 4;
     HEAP32[$__err>>2] = $724;
     $$0 = 0;
     break;
    }
    case 299: {
     $763 = HEAP32[$__err>>2]|0;
     $764 = $763 | 4;
     HEAP32[$__err>>2] = $764;
     $$0 = 0;
     break;
    }
    case 302: {
     $767 = ($__trailing_sign$0$lcssa|0)==(0|0);
     do {
      if (!($767)) {
       $768 = (($__trailing_sign$0$lcssa) + 4|0);
       $769 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L404: while(1) {
        $770 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $771 = $770 & 1;
        $772 = ($771<<24>>24)==(0);
        if ($772) {
         $774 = $770&255;
         $775 = $774 >>> 1;
         $777 = $775;
        } else {
         $773 = HEAP32[$768>>2]|0;
         $777 = $773;
        }
        $776 = ($__i$0>>>0)<($777>>>0);
        if (!($776)) {
         label = 334;
         break;
        }
        $778 = HEAP32[$__b>>2]|0;
        $779 = ($778|0)==(0|0);
        do {
         if ($779) {
          $808 = 1;
         } else {
          $780 = (($778) + 12|0);
          $781 = HEAP32[$780>>2]|0;
          $782 = (($778) + 16|0);
          $783 = HEAP32[$782>>2]|0;
          $784 = ($781|0)==($783|0);
          if ($784) {
           $785 = HEAP32[$778>>2]|0;
           $786 = (($785) + 36|0);
           $787 = HEAP32[$786>>2]|0;
           __THREW__ = 0;
           $788 = (invoke_ii($787|0,($778|0))|0);
           $789 = __THREW__; __THREW__ = 0;
           $790 = $789&1;
           if ($790) {
            label = 20;
            break L404;
           } else {
            $$0$i$i$i$i = $788;
           }
          } else {
           $791 = HEAP32[$781>>2]|0;
           $$0$i$i$i$i = $791;
          }
          $792 = ($$0$i$i$i$i|0)==(-1);
          if ($792) {
           HEAP32[$__b>>2] = 0;
           $808 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $808 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $793 = HEAP32[$__e>>2]|0;
        $794 = ($793|0)==(0|0);
        do {
         if ($794) {
          label = 321;
         } else {
          $795 = (($793) + 12|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = (($793) + 16|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($796|0)==($798|0);
          if ($799) {
           $800 = HEAP32[$793>>2]|0;
           $801 = (($800) + 36|0);
           $802 = HEAP32[$801>>2]|0;
           __THREW__ = 0;
           $803 = (invoke_ii($802|0,($793|0))|0);
           $804 = __THREW__; __THREW__ = 0;
           $805 = $804&1;
           if ($805) {
            label = 20;
            break L404;
           } else {
            $$0$i$i1$i$i = $803;
           }
          } else {
           $806 = HEAP32[$796>>2]|0;
           $$0$i$i1$i$i = $806;
          }
          $807 = ($$0$i$i1$i$i|0)==(-1);
          if ($807) {
           HEAP32[$__e>>2] = 0;
           label = 321;
           break;
          } else {
           $$pre$i3$i$i = HEAP32[$__e>>2]|0;
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $808 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            break;
           } else {
            label = 329;
            break L404;
           }
          }
         }
        } while(0);
        if ((label|0) == 321) {
         label = 0;
         if ($808) {
          label = 329;
          break;
         }
        }
        $809 = HEAP32[$__b>>2]|0;
        $810 = (($809) + 12|0);
        $811 = HEAP32[$810>>2]|0;
        $812 = (($809) + 16|0);
        $813 = HEAP32[$812>>2]|0;
        $814 = ($811|0)==($813|0);
        if ($814) {
         $815 = HEAP32[$809>>2]|0;
         $816 = (($815) + 36|0);
         $817 = HEAP32[$816>>2]|0;
         __THREW__ = 0;
         $818 = (invoke_ii($817|0,($809|0))|0);
         $819 = __THREW__; __THREW__ = 0;
         $820 = $819&1;
         if ($820) {
          label = 20;
          break;
         } else {
          $$0$i$i = $818;
         }
        } else {
         $821 = HEAP32[$811>>2]|0;
         $$0$i$i = $821;
        }
        $822 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $823 = $822 & 1;
        $824 = ($823<<24>>24)==(0);
        if ($824) {
         $827 = $768;
        } else {
         $825 = HEAP32[$769>>2]|0;
         $827 = $825;
        }
        $826 = (($827) + ($__i$0<<2)|0);
        $828 = HEAP32[$826>>2]|0;
        $829 = ($$0$i$i|0)==($828|0);
        if (!($829)) {
         label = 329;
         break;
        }
        $832 = (($__i$0) + 1)|0;
        $833 = HEAP32[$__b>>2]|0;
        $834 = (($833) + 12|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = (($833) + 16|0);
        $837 = HEAP32[$836>>2]|0;
        $838 = ($835|0)==($837|0);
        if ($838) {
         $839 = HEAP32[$833>>2]|0;
         $840 = (($839) + 40|0);
         $841 = HEAP32[$840>>2]|0;
         __THREW__ = 0;
         (invoke_ii($841|0,($833|0))|0);
         $842 = __THREW__; __THREW__ = 0;
         $843 = $842&1;
         if ($843) {
          label = 20;
          break;
         }
        } else {
         $844 = (($835) + 4|0);
         HEAP32[$834>>2] = $844;
        }
        $__i$0 = $832;
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch()|0;
        $54 = tempRet0;
        $lpad$phi$index = $53;$lpad$phi$index8 = $54;
        break L1;
       }
       else if ((label|0) == 329) {
        $830 = HEAP32[$__err>>2]|0;
        $831 = $830 | 4;
        HEAP32[$__err>>2] = $831;
        $$0 = 0;
        break L389;
       }
       else if ((label|0) == 334) {
        break;
       }
      }
     } while(0);
     $845 = HEAP32[$__gb>>2]|0;
     $846 = ($845|0)==($847|0);
     if ($846) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$845,$847,$__et);
      $848 = HEAP32[$__et>>2]|0;
      $849 = ($848|0)==(0);
      if ($849) {
       $$0 = 1;
      } else {
       $850 = HEAP32[$__err>>2]|0;
       $851 = $850 | 4;
       HEAP32[$__err>>2] = $851;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $852 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $853 = ($852|0)==(0|0);
   if (!($853)) {
    $854 = HEAP32[$1>>2]|0;
    __THREW__ = 0;
    invoke_vi($854|0,($852|0));
    $855 = __THREW__; __THREW__ = 0;
    $856 = $855&1;
    if ($856) {
     $857 = ___cxa_find_matching_catch(0|0)|0;
     $858 = tempRet0;
     ___clang_call_terminate($857);
     // unreachable;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $69 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $70 = ($69|0)==(0|0);
 if (!($70)) {
  $71 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($71|0,($69|0));
  $72 = __THREW__; __THREW__ = 0;
  $73 = $72&1;
  if ($73) {
   $74 = ___cxa_find_matching_catch(0|0)|0;
   $75 = tempRet0;
   ___clang_call_terminate($74);
   // unreachable;
  }
 }
 ___resumeException($lpad$phi$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$0$lcssa$ph = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 424|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 16|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 428|0;
 $0 = sp;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 575;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(521,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $30 = ___cxa_find_matching_catch()|0;
  $31 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $31;$$014 = $30;$93 = $__wbuf;
  label = 40;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(422,($__loc|0),(6712|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(582,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
      }
      $19 = (($__v) + 4|0);
      HEAP32[$19>>2] = 0;
      $20 = HEAP8[$__neg>>0]|0;
      $21 = ($20<<24>>24)==(0);
      if (!($21)) {
       $22 = HEAP32[$5>>2]|0;
       $23 = (($22) + 44|0);
       $24 = HEAP32[$23>>2]|0;
       __THREW__ = 0;
       $25 = (invoke_iii($24|0,($5|0),45)|0);
       $26 = __THREW__; __THREW__ = 0;
       $27 = $26&1;
       if ($27) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(584,($__v|0),($25|0));
       $28 = __THREW__; __THREW__ = 0;
       $29 = $28&1;
       if ($29) {
        break;
       }
      }
      $32 = HEAP32[$5>>2]|0;
      $33 = (($32) + 44|0);
      $34 = HEAP32[$33>>2]|0;
      __THREW__ = 0;
      $35 = (invoke_iii($34|0,($5|0),48)|0);
      $36 = __THREW__; __THREW__ = 0;
      $37 = $36&1;
      if ($37) {
       break;
      }
      $38 = HEAP32[$__wb>>2]|0;
      $39 = HEAP32[$__wn>>2]|0;
      $40 = (($39) + -4|0);
      $41 = ($38>>>0)<($40>>>0);
      if ($41) {
       $__w$05 = $38;
       while(1) {
        $44 = HEAP32[$__w$05>>2]|0;
        $45 = ($44|0)==($35|0);
        $43 = (($__w$05) + 4|0);
        if (!($45)) {
         $__w$0$lcssa$ph = $__w$05;
         break;
        }
        $42 = ($43>>>0)<($40>>>0);
        if ($42) {
         $__w$05 = $43;
        } else {
         $__w$0$lcssa$ph = $43;
         break;
        }
       }
       $__w$0$lcssa = $__w$0$lcssa$ph;
      } else {
       $__w$0$lcssa = $38;
      }
      __THREW__ = 0;
      (invoke_iiii(586,($__v|0),($__w$0$lcssa|0),($39|0))|0);
      $46 = __THREW__; __THREW__ = 0;
      $47 = $46&1;
      if ($47) {
       break;
      }
     }
     $48 = HEAP32[$__b>>2]|0;
     $49 = ($48|0)==(0|0);
     do {
      if ($49) {
       $98 = 1;
      } else {
       $50 = (($48) + 12|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (($48) + 16|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($51|0)==($53|0);
       if ($54) {
        $55 = HEAP32[$48>>2]|0;
        $56 = (($55) + 36|0);
        $57 = HEAP32[$56>>2]|0;
        __THREW__ = 0;
        $58 = (invoke_ii($57|0,($48|0))|0);
        $59 = __THREW__; __THREW__ = 0;
        $60 = $59&1;
        if ($60) {
         break L3;
        } else {
         $$0$i$i$i$i = $58;
        }
       } else {
        $61 = HEAP32[$51>>2]|0;
        $$0$i$i$i$i = $61;
       }
       $62 = ($$0$i$i$i$i|0)==(-1);
       if ($62) {
        HEAP32[$__b>>2] = 0;
        $98 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $98 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $63 = ($8|0)==(0|0);
     do {
      if ($63) {
       label = 32;
      } else {
       $64 = (($8) + 12|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($8) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($65|0)==($67|0);
       if ($68) {
        $69 = HEAP32[$8>>2]|0;
        $70 = (($69) + 36|0);
        $71 = HEAP32[$70>>2]|0;
        __THREW__ = 0;
        $72 = (invoke_ii($71|0,($8|0))|0);
        $73 = __THREW__; __THREW__ = 0;
        $74 = $73&1;
        if ($74) {
         break L3;
        } else {
         $$0$i$i1$i$i = $72;
        }
       } else {
        $75 = HEAP32[$65>>2]|0;
        $$0$i$i1$i$i = $75;
       }
       $76 = ($$0$i$i1$i$i|0)==(-1);
       if ($76) {
        HEAP32[$__e>>2] = 0;
        label = 32;
        break;
       } else {
        if ($98) {
         break;
        } else {
         label = 34;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 32) {
      if ($98) {
       label = 34;
      }
     }
     if ((label|0) == 34) {
      $77 = HEAP32[$__err>>2]|0;
      $78 = $77 | 2;
      HEAP32[$__err>>2] = $78;
     }
     $79 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $79;
     $80 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
     $81 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $82 = ($81|0)==(0|0);
     if (!($82)) {
      $83 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($83|0,($81|0));
      $84 = __THREW__; __THREW__ = 0;
      $85 = $84&1;
      if ($85) {
       $86 = ___cxa_find_matching_catch(0|0)|0;
       $87 = tempRet0;
       ___clang_call_terminate($86);
       // unreachable;
      }
     }
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $88 = ___cxa_find_matching_catch()|0;
  $89 = tempRet0;
  $90 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($90)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $91 = ($$pre|0)==(0|0);
  if ($91) {
   $$0113 = $89;$$015 = $88;
  } else {
   $$0112 = $89;$$014 = $88;$93 = $$pre;
   label = 40;
  }
 }
 if ((label|0) == 40) {
  $92 = HEAP32[$1>>2]|0;
  __THREW__ = 0;
  invoke_vi($92|0,($93|0));
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if ($95) {
   $96 = ___cxa_find_matching_catch(0|0)|0;
   $97 = tempRet0;
   ___clang_call_terminate($96);
   // unreachable;
  } else {
   $$0113 = $$0112;$$015 = $$014;
  }
 }
 ___resumeException($$015|0);
 // unreachable;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 100|0;
 $1 = sp + 88|0;
 $2 = sp + 76|0;
 $3 = sp + 64|0;
 $4 = sp + 52|0;
 $5 = sp + 48|0;
 $6 = sp + 36|0;
 $7 = sp + 24|0;
 $8 = sp + 12|0;
 $9 = sp;
 do {
  if ($__intl) {
   $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6288)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
   $14 = HEAP32[$0>>2]|0;
   HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
   $15 = HEAP32[$10>>2]|0;
   $16 = (($15) + 32|0);
   $17 = HEAP32[$16>>2]|0;
   FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
   $18 = HEAP8[$__nsn>>0]|0;
   $19 = $18 & 1;
   $20 = ($19<<24>>24)==(0);
   if ($20) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $21 = (($__nsn) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    HEAP32[$22>>2] = 0;
   }
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__nsn|0),0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    $26 = ___cxa_find_matching_catch(0|0)|0;
    $27 = tempRet0;
    ___clang_call_terminate($26);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
   ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
   $28 = HEAP32[$10>>2]|0;
   $29 = (($28) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   FUNCTION_TABLE_vii[$30 & 1023]($2,$10);
   $31 = HEAP8[$__psn>>0]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $34 = (($__psn) + 8|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$35>>2] = 0;
   }
   $36 = (($__psn) + 4|0);
   HEAP32[$36>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__psn|0),0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(0|0)|0;
    $40 = tempRet0;
    ___clang_call_terminate($39);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
   ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
   $41 = HEAP32[$10>>2]|0;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 1023]($10)|0);
   HEAP32[$__dp>>2] = $44;
   $45 = HEAP32[$10>>2]|0;
   $46 = (($45) + 16|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_ii[$47 & 1023]($10)|0);
   HEAP32[$__ts>>2] = $48;
   $49 = HEAP32[$10>>2]|0;
   $50 = (($49) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   FUNCTION_TABLE_vii[$51 & 1023]($3,$10);
   $52 = HEAP8[$__grp>>0]|0;
   $53 = $52 & 1;
   $54 = ($53<<24>>24)==(0);
   if ($54) {
    $58 = (($__grp) + 1|0);
    HEAP8[$58>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $55 = (($__grp) + 8|0);
    $56 = HEAP32[$55>>2]|0;
    HEAP8[$56>>0] = 0;
    $57 = (($__grp) + 4|0);
    HEAP32[$57>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    $61 = ___cxa_find_matching_catch(0|0)|0;
    $62 = tempRet0;
    ___clang_call_terminate($61);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
   ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
   $63 = HEAP32[$10>>2]|0;
   $64 = (($63) + 24|0);
   $65 = HEAP32[$64>>2]|0;
   FUNCTION_TABLE_vii[$65 & 1023]($4,$10);
   $66 = HEAP8[$__sym>>0]|0;
   $67 = $66 & 1;
   $68 = ($67<<24>>24)==(0);
   if ($68) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $69 = (($__sym) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$70>>2] = 0;
   }
   $71 = (($__sym) + 4|0);
   HEAP32[$71>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__sym|0),0);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch(0|0)|0;
    $75 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
    ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
    $76 = HEAP32[$10>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($10)|0);
    $storemerge = $79;
    break;
   }
  } else {
   $80 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6224)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + 44|0);
   $83 = HEAP32[$82>>2]|0;
   FUNCTION_TABLE_vii[$83 & 1023]($5,$80);
   $84 = HEAP32[$5>>2]|0;
   HEAP8[$__pat>>0]=$84&255;HEAP8[$__pat+1>>0]=($84>>8)&255;HEAP8[$__pat+2>>0]=($84>>16)&255;HEAP8[$__pat+3>>0]=$84>>24;
   $85 = HEAP32[$80>>2]|0;
   $86 = (($85) + 32|0);
   $87 = HEAP32[$86>>2]|0;
   FUNCTION_TABLE_vii[$87 & 1023]($6,$80);
   $88 = HEAP8[$__nsn>>0]|0;
   $89 = $88 & 1;
   $90 = ($89<<24>>24)==(0);
   if ($90) {
    HEAP8[$__nsn>>0] = 0;
   } else {
    $91 = (($__nsn) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    HEAP32[$92>>2] = 0;
   }
   $93 = (($__nsn) + 4|0);
   HEAP32[$93>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__nsn|0),0);
   $94 = __THREW__; __THREW__ = 0;
   $95 = $94&1;
   if ($95) {
    $96 = ___cxa_find_matching_catch(0|0)|0;
    $97 = tempRet0;
    ___clang_call_terminate($96);
    // unreachable;
   }
   ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
   ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
   $98 = HEAP32[$80>>2]|0;
   $99 = (($98) + 28|0);
   $100 = HEAP32[$99>>2]|0;
   FUNCTION_TABLE_vii[$100 & 1023]($7,$80);
   $101 = HEAP8[$__psn>>0]|0;
   $102 = $101 & 1;
   $103 = ($102<<24>>24)==(0);
   if ($103) {
    HEAP8[$__psn>>0] = 0;
   } else {
    $104 = (($__psn) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    HEAP32[$105>>2] = 0;
   }
   $106 = (($__psn) + 4|0);
   HEAP32[$106>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__psn|0),0);
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $109 = ___cxa_find_matching_catch(0|0)|0;
    $110 = tempRet0;
    ___clang_call_terminate($109);
    // unreachable;
   }
   ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
   ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
   $111 = HEAP32[$80>>2]|0;
   $112 = (($111) + 12|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (FUNCTION_TABLE_ii[$113 & 1023]($80)|0);
   HEAP32[$__dp>>2] = $114;
   $115 = HEAP32[$80>>2]|0;
   $116 = (($115) + 16|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = (FUNCTION_TABLE_ii[$117 & 1023]($80)|0);
   HEAP32[$__ts>>2] = $118;
   $119 = HEAP32[$80>>2]|0;
   $120 = (($119) + 20|0);
   $121 = HEAP32[$120>>2]|0;
   FUNCTION_TABLE_vii[$121 & 1023]($8,$80);
   $122 = HEAP8[$__grp>>0]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $128 = (($__grp) + 1|0);
    HEAP8[$128>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $125 = (($__grp) + 8|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP8[$126>>0] = 0;
    $127 = (($__grp) + 4|0);
    HEAP32[$127>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $129 = __THREW__; __THREW__ = 0;
   $130 = $129&1;
   if ($130) {
    $131 = ___cxa_find_matching_catch(0|0)|0;
    $132 = tempRet0;
    ___clang_call_terminate($131);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
   ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
   $133 = HEAP32[$80>>2]|0;
   $134 = (($133) + 24|0);
   $135 = HEAP32[$134>>2]|0;
   FUNCTION_TABLE_vii[$135 & 1023]($9,$80);
   $136 = HEAP8[$__sym>>0]|0;
   $137 = $136 & 1;
   $138 = ($137<<24>>24)==(0);
   if ($138) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $139 = (($__sym) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    HEAP32[$140>>2] = 0;
   }
   $141 = (($__sym) + 4|0);
   HEAP32[$141>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__sym|0),0);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    $144 = ___cxa_find_matching_catch(0|0)|0;
    $145 = tempRet0;
    ___clang_call_terminate($144);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
    ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
    $146 = HEAP32[$80>>2]|0;
    $147 = (($146) + 36|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = (FUNCTION_TABLE_ii[$148 & 1023]($80)|0);
    $storemerge = $149;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 76|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 288|0;
 $__bb = sp + 72|0;
 $__digits = sp + 188|0;
 $__loc = sp + 68|0;
 $__pat = sp + 184|0;
 $__dp = sp + 181|0;
 $__ts = sp + 180|0;
 $__grp = sp + 56|0;
 $__sym = sp + 44|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 80|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,6472,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(559)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(564,($__bb|0),($3|0),(6472|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(565);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(565);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
       label = 7;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(521,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
   label = 7;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(422,($__loc|0),(6720|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(588,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(565);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(589,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(522,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 }
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6160)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = (($13) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $26 = (($__sn) + 1|0);
      HEAP8[$26>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = (($__sn) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP8[$24>>0] = 0;
      $25 = (($__sn) + 4|0);
      HEAP32[$25>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(450,($__sn|0),0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $29 = ___cxa_find_matching_catch(0|0)|0;
      $30 = tempRet0;
      ___clang_call_terminate($29);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
      break;
     }
    } else {
     $31 = (($13) + 40|0);
     $32 = HEAP32[$31>>2]|0;
     FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
     $33 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
     $34 = HEAP32[$12>>2]|0;
     $35 = (($34) + 28|0);
     $36 = HEAP32[$35>>2]|0;
     FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
     $37 = HEAP8[$__sn>>0]|0;
     $38 = $37 & 1;
     $39 = ($38<<24>>24)==(0);
     if ($39) {
      $43 = (($__sn) + 1|0);
      HEAP8[$43>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $40 = (($__sn) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP8[$41>>0] = 0;
      $42 = (($__sn) + 4|0);
      HEAP32[$42>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(450,($__sn|0),0);
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $46 = ___cxa_find_matching_catch(0|0)|0;
      $47 = tempRet0;
      ___clang_call_terminate($46);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
      break;
     }
    }
   } while(0);
   $48 = HEAP32[$12>>2]|0;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
   HEAP8[$__dp>>0] = $51;
   $52 = HEAP32[$12>>2]|0;
   $53 = (($52) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
   HEAP8[$__ts>>0] = $55;
   $56 = HEAP32[$12>>2]|0;
   $57 = (($56) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
   $59 = HEAP8[$__grp>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $65 = (($__grp) + 1|0);
    HEAP8[$65>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $62 = (($__grp) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    HEAP8[$63>>0] = 0;
    $64 = (($__grp) + 4|0);
    HEAP32[$64>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $68 = ___cxa_find_matching_catch(0|0)|0;
    $69 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   $70 = HEAP32[$12>>2]|0;
   $71 = (($70) + 24|0);
   $72 = HEAP32[$71>>2]|0;
   FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
   $73 = HEAP8[$__sym>>0]|0;
   $74 = $73 & 1;
   $75 = ($74<<24>>24)==(0);
   if ($75) {
    $79 = (($__sym) + 1|0);
    HEAP8[$79>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $76 = (($__sym) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    HEAP8[$77>>0] = 0;
    $78 = (($__sym) + 4|0);
    HEAP32[$78>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__sym|0),0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    $82 = ___cxa_find_matching_catch(0|0)|0;
    $83 = tempRet0;
    ___clang_call_terminate($82);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
    $84 = HEAP32[$12>>2]|0;
    $85 = (($84) + 36|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
    $storemerge = $87;
    break;
   }
  } else {
   $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6096)|0);
   $89 = HEAP32[$88>>2]|0;
   do {
    if ($__neg) {
     $90 = (($89) + 44|0);
     $91 = HEAP32[$90>>2]|0;
     FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
     $92 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
     $93 = HEAP32[$88>>2]|0;
     $94 = (($93) + 32|0);
     $95 = HEAP32[$94>>2]|0;
     FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
     $96 = HEAP8[$__sn>>0]|0;
     $97 = $96 & 1;
     $98 = ($97<<24>>24)==(0);
     if ($98) {
      $102 = (($__sn) + 1|0);
      HEAP8[$102>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $99 = (($__sn) + 8|0);
      $100 = HEAP32[$99>>2]|0;
      HEAP8[$100>>0] = 0;
      $101 = (($__sn) + 4|0);
      HEAP32[$101>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(450,($__sn|0),0);
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      $105 = ___cxa_find_matching_catch(0|0)|0;
      $106 = tempRet0;
      ___clang_call_terminate($105);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
      break;
     }
    } else {
     $107 = (($89) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
     $109 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
     $110 = HEAP32[$88>>2]|0;
     $111 = (($110) + 28|0);
     $112 = HEAP32[$111>>2]|0;
     FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
     $113 = HEAP8[$__sn>>0]|0;
     $114 = $113 & 1;
     $115 = ($114<<24>>24)==(0);
     if ($115) {
      $119 = (($__sn) + 1|0);
      HEAP8[$119>>0] = 0;
      HEAP8[$__sn>>0] = 0;
     } else {
      $116 = (($__sn) + 8|0);
      $117 = HEAP32[$116>>2]|0;
      HEAP8[$117>>0] = 0;
      $118 = (($__sn) + 4|0);
      HEAP32[$118>>2] = 0;
     }
     __THREW__ = 0;
     invoke_vii(450,($__sn|0),0);
     $120 = __THREW__; __THREW__ = 0;
     $121 = $120&1;
     if ($121) {
      $122 = ___cxa_find_matching_catch(0|0)|0;
      $123 = tempRet0;
      ___clang_call_terminate($122);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
      break;
     }
    }
   } while(0);
   $124 = HEAP32[$88>>2]|0;
   $125 = (($124) + 12|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
   HEAP8[$__dp>>0] = $127;
   $128 = HEAP32[$88>>2]|0;
   $129 = (($128) + 16|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
   HEAP8[$__ts>>0] = $131;
   $132 = HEAP32[$88>>2]|0;
   $133 = (($132) + 20|0);
   $134 = HEAP32[$133>>2]|0;
   FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
   $135 = HEAP8[$__grp>>0]|0;
   $136 = $135 & 1;
   $137 = ($136<<24>>24)==(0);
   if ($137) {
    $141 = (($__grp) + 1|0);
    HEAP8[$141>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $138 = (($__grp) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    HEAP8[$139>>0] = 0;
    $140 = (($__grp) + 4|0);
    HEAP32[$140>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    $144 = ___cxa_find_matching_catch(0|0)|0;
    $145 = tempRet0;
    ___clang_call_terminate($144);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
   $146 = HEAP32[$88>>2]|0;
   $147 = (($146) + 24|0);
   $148 = HEAP32[$147>>2]|0;
   FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
   $149 = HEAP8[$__sym>>0]|0;
   $150 = $149 & 1;
   $151 = ($150<<24>>24)==(0);
   if ($151) {
    $155 = (($__sym) + 1|0);
    HEAP8[$155>>0] = 0;
    HEAP8[$__sym>>0] = 0;
   } else {
    $152 = (($__sym) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    HEAP8[$153>>0] = 0;
    $154 = (($__sym) + 4|0);
    HEAP32[$154>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__sym|0),0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $158 = ___cxa_find_matching_catch(0|0)|0;
    $159 = tempRet0;
    ___clang_call_terminate($158);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
    $160 = HEAP32[$88>>2]|0;
    $161 = (($160) + 36|0);
    $162 = HEAP32[$161>>2]|0;
    $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
    $storemerge = $163;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i16 = 0, $$01$i$i = 0, $$01$i$i14 = 0, $$012$i$i = 0, $$056 = 0, $$2 = 0, $$80 = 0, $$81 = 0, $$82 = 0, $$lcssa = 0, $$lcssa34 = 0, $$lcssa83 = 0, $$lcssa84 = 0, $$lcssa85 = 0, $$pn = 0, $$pre = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $148$phi = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $171$phi = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa$ph = 0, $__d$0$lcssa66 = 0;
 var $__d$036 = 0, $__d$1$lcssa78 = 0, $__d$1$lcssa79 = 0, $__d$141 = 0, $__d$2 = 0, $__d$350 = 0, $__f$0$lcssa76 = 0, $__f$0$lcssa77 = 0, $__f$042 = 0, $__f$147 = 0, $__gl$053 = 0, $__gl$053$ph = 0, $__gl$1 = 0, $__ig$052 = 0, $__ig$1 = 0, $__ng$051 = 0, $__ng$1 = 0, $__p$055 = 0, $exitcond = 0, $isascii1$i = 0;
 var $or$cond = 0, $or$cond3 = 0, $scevgep69 = 0, $scevgep6970 = 0, $scevgep71 = 0, $umax = 0, $umax68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$056 = $__db;$__p$055 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$055)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$056;
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$056;
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$056;
   } else {
    $33 = HEAP32[$1>>2]|0;
    $$ = $27 ? $0 : $33;
    $34 = HEAP8[$$>>0]|0;
    $35 = HEAP32[$__me>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__me>>2] = $36;
    HEAP8[$35>>0] = $34;
    $$2 = $$056;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$056) + 1|0);
   $$$0 = $__neg ? $60 : $$056;
   $61 = ($$$0>>>0)<($__de>>>0);
   if ($61) {
    $62 = HEAP32[$12>>2]|0;
    $__d$036 = $$$0;
    while(1) {
     $65 = HEAP8[$__d$036>>0]|0;
     $isascii1$i = ($65<<24>>24)>(-1);
     if (!($isascii1$i)) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $66 = $65 << 24 >> 24;
     $67 = (($62) + ($66<<1)|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 & 2048;
     $70 = ($69<<16>>16)==(0);
     $64 = (($__d$036) + 1|0);
     if ($70) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $63 = ($64>>>0)<($__de>>>0);
     if ($63) {
      $__d$036 = $64;
     } else {
      $__d$0$lcssa$ph = $64;
      break;
     }
    }
    $__d$0$lcssa = $__d$0$lcssa$ph;
   } else {
    $__d$0$lcssa = $$$0;
   }
   $__d$0$lcssa66 = $__d$0$lcssa;
   if ($8) {
    $71 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($71) {
     $72 = $$$0;
     $73 = (($72) - ($__d$0$lcssa66))|0;
     $74 = ($73>>>0)<($13>>>0);
     $umax = $74 ? $13 : $73;
     $umax68 = $umax;
     $scevgep69 = (($umax68) + ($__fd)|0);
     $scevgep6970 = $scevgep69;
     $78 = $59;$__d$141 = $__d$0$lcssa;$__f$042 = $__fd;
     while(1) {
      $75 = (($__d$141) + -1|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($78) + 1|0);
      HEAP32[$__me>>2] = $77;
      HEAP8[$78>>0] = $76;
      $79 = (($__f$042) + -1)|0;
      $80 = ($75>>>0)>($$$0>>>0);
      $81 = ($79|0)>(0);
      $or$cond = $80 & $81;
      if (!($or$cond)) {
       $$lcssa83 = $81;
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $78 = $$pre;$__d$141 = $75;$__f$042 = $79;
     }
     $scevgep71 = (($__d$0$lcssa) + ($umax)|0);
     if ($$lcssa83) {
      $__d$1$lcssa79 = $scevgep71;$__f$0$lcssa77 = $scevgep6970;
      label = 34;
     } else {
      $89 = 0;$__d$1$lcssa78 = $scevgep71;$__f$0$lcssa76 = $scevgep6970;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 34;
    }
    if ((label|0) == 34) {
     label = 0;
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (FUNCTION_TABLE_iii[$84 & 1023]($__ct,48)|0);
     $89 = $85;$__d$1$lcssa78 = $__d$1$lcssa79;$__f$0$lcssa76 = $__f$0$lcssa77;
    }
    $86 = ($__f$0$lcssa76|0)>(0);
    $87 = HEAP32[$__me>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__me>>2] = $88;
    if ($86) {
     $90 = $87;$__f$147 = $__f$0$lcssa76;
     while(1) {
      HEAP8[$90>>0] = $89;
      $91 = (($__f$147) + -1)|0;
      $92 = ($91|0)>(0);
      $93 = HEAP32[$__me>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$__me>>2] = $94;
      if ($92) {
       $90 = $93;$__f$147 = $91;
      } else {
       $$lcssa84 = $93;
       break;
      }
     }
     $$lcssa34 = $$lcssa84;
    } else {
     $$lcssa34 = $87;
    }
    HEAP8[$$lcssa34>>0] = $__dp;
    $__d$2 = $__d$1$lcssa78;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $95 = ($__d$2|0)==($$$0|0);
   if ($95) {
    $96 = HEAP32[$__ct>>2]|0;
    $97 = (($96) + 28|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (FUNCTION_TABLE_iii[$98 & 1023]($__ct,48)|0);
    $100 = HEAP32[$__me>>2]|0;
    $101 = (($100) + 1|0);
    HEAP32[$__me>>2] = $101;
    HEAP8[$100>>0] = $99;
   } else {
    $102 = HEAP8[$__grp>>0]|0;
    $103 = $102 & 1;
    $104 = ($103<<24>>24)==(0);
    if ($104) {
     $106 = $102&255;
     $107 = $106 >>> 1;
     $109 = $107;
    } else {
     $105 = HEAP32[$11>>2]|0;
     $109 = $105;
    }
    $108 = ($109|0)==(0);
    if ($108) {
     $__gl$053$ph = -1;
    } else {
     $110 = HEAP32[$10>>2]|0;
     $$80 = $104 ? $9 : $110;
     $111 = HEAP8[$$80>>0]|0;
     $112 = $111 << 24 >> 24;
     $__gl$053$ph = $112;
    }
    $__d$350 = $__d$2;$__gl$053 = $__gl$053$ph;$__ig$052 = 0;$__ng$051 = 0;
    while(1) {
     $113 = ($__ng$051|0)==($__gl$053|0);
     if ($113) {
      $114 = HEAP32[$__me>>2]|0;
      $115 = (($114) + 1|0);
      HEAP32[$__me>>2] = $115;
      HEAP8[$114>>0] = $__ts;
      $116 = (($__ig$052) + 1)|0;
      $117 = HEAP8[$__grp>>0]|0;
      $118 = $117 & 1;
      $119 = ($118<<24>>24)==(0);
      if ($119) {
       $121 = $117&255;
       $122 = $121 >>> 1;
       $124 = $122;
      } else {
       $120 = HEAP32[$11>>2]|0;
       $124 = $120;
      }
      $123 = ($116>>>0)<($124>>>0);
      if ($123) {
       $125 = HEAP32[$10>>2]|0;
       $$81 = $119 ? $9 : $125;
       $126 = (($$81) + ($116)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = ($127<<24>>24)==(127);
       if ($128) {
        $__gl$1 = -1;$__ig$1 = $116;$__ng$1 = 0;
       } else {
        $129 = HEAP32[$10>>2]|0;
        $$82 = $119 ? $9 : $129;
        $130 = (($$82) + ($116)|0);
        $131 = HEAP8[$130>>0]|0;
        $132 = $131 << 24 >> 24;
        $__gl$1 = $132;$__ig$1 = $116;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$053;$__ig$1 = $116;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$053;$__ig$1 = $__ig$052;$__ng$1 = $__ng$051;
     }
     $133 = (($__d$350) + -1|0);
     $134 = HEAP8[$133>>0]|0;
     $135 = HEAP32[$__me>>2]|0;
     $136 = (($135) + 1|0);
     HEAP32[$__me>>2] = $136;
     HEAP8[$135>>0] = $134;
     $137 = (($__ng$1) + 1)|0;
     $138 = ($133|0)==($$$0|0);
     if ($138) {
      break;
     } else {
      $__d$350 = $133;$__gl$053 = $__gl$1;$__ig$052 = $__ig$1;$__ng$051 = $137;
     }
    }
   }
   $139 = HEAP32[$__me>>2]|0;
   $140 = ($59|0)==($139|0);
   if ($140) {
    $$2 = $$$0;
   } else {
    $141 = (($139) + -1|0);
    $142 = ($141>>>0)>($59>>>0);
    if ($142) {
     $$012$i$i = $59;$145 = $141;$148 = $139;
     while(1) {
      $143 = HEAP8[$$012$i$i>>0]|0;
      $144 = HEAP8[$145>>0]|0;
      HEAP8[$$012$i$i>>0] = $144;
      HEAP8[$145>>0] = $143;
      $146 = (($$012$i$i) + 1|0);
      $147 = (($148) + -2|0);
      $149 = ($146>>>0)<($147>>>0);
      if ($149) {
       $148$phi = $145;$$012$i$i = $146;$145 = $147;$148 = $148$phi;
      } else {
       break;
      }
     }
     $$2 = $$$0;
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 2:  {
   $37 = HEAP8[$__sym>>0]|0;
   $38 = $37 & 1;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $41 = $37&255;
    $42 = $41 >>> 1;
    $44 = $42;
   } else {
    $40 = HEAP32[$7>>2]|0;
    $44 = $40;
   }
   $43 = ($44|0)==(0);
   $or$cond3 = $43 | $4;
   if ($or$cond3) {
    $$2 = $$056;
   } else {
    if ($39) {
     $47 = $37&255;
     $48 = $47 >>> 1;
     $50 = $5;$51 = $48;
    } else {
     $45 = HEAP32[$6>>2]|0;
     $46 = HEAP32[$7>>2]|0;
     $50 = $45;$51 = $46;
    }
    $49 = (($50) + ($51)|0);
    $52 = HEAP32[$__me>>2]|0;
    $53 = ($50|0)==($49|0);
    if ($53) {
     $$0$lcssa$i$i16 = $52;
    } else {
     $$01$i$i14 = $52;$55 = $50;
     while(1) {
      $54 = HEAP8[$55>>0]|0;
      HEAP8[$$01$i$i14>>0] = $54;
      $56 = (($55) + 1|0);
      $57 = (($$01$i$i14) + 1|0);
      $58 = ($56|0)==($49|0);
      if ($58) {
       $$lcssa85 = $57;
       break;
      } else {
       $$01$i$i14 = $57;$55 = $56;
      }
     }
     $$0$lcssa$i$i16 = $$lcssa85;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i16;
    $$2 = $$056;
   }
   break;
  }
  default: {
   $$2 = $$056;
  }
  }
  $150 = (($__p$055) + 1)|0;
  $exitcond = ($150|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$056 = $$2;$__p$055 = $150;
  }
 }
 $151 = HEAP8[$__sn>>0]|0;
 $152 = $151 & 1;
 $153 = ($152<<24>>24)==(0);
 if ($153) {
  $155 = $151&255;
  $156 = $155 >>> 1;
  $158 = $156;
 } else {
  $154 = HEAP32[$2>>2]|0;
  $158 = $154;
 }
 $157 = ($158>>>0)>(1);
 if ($157) {
  if ($153) {
   $161 = $151&255;
   $162 = $161 >>> 1;
   $$pn = $0;$165 = $162;
  } else {
   $159 = HEAP32[$1>>2]|0;
   $160 = HEAP32[$2>>2]|0;
   $$pn = $159;$165 = $160;
  }
  $163 = (($$pn) + 1|0);
  $164 = (($$pn) + ($165)|0);
  $166 = HEAP32[$__me>>2]|0;
  $167 = ($163|0)==($164|0);
  if ($167) {
   $$0$lcssa$i$i = $166;
  } else {
   $$01$i$i = $166;$169 = $163;$171 = $$pn;
   while(1) {
    $168 = HEAP8[$169>>0]|0;
    HEAP8[$$01$i$i>>0] = $168;
    $170 = (($171) + 2|0);
    $172 = (($$01$i$i) + 1|0);
    $173 = ($170|0)==($164|0);
    if ($173) {
     $$lcssa = $172;
     break;
    } else {
     $171$phi = $169;$$01$i$i = $172;$169 = $170;$171 = $171$phi;
    }
   }
   $$0$lcssa$i$i = $$lcssa;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if ((($174|0) == 32)) {
  $175 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $175;
 } else if (!((($174|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 56|0;
 $__loc = sp + 52|0;
 $__pat = sp + 164|0;
 $__dp = sp + 161|0;
 $__ts = sp + 160|0;
 $__grp = sp + 40|0;
 $__sym = sp + 28|0;
 $__sn = sp + 16|0;
 $__fd = sp + 12|0;
 $__mbuf = sp + 60|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(422,($__loc|0),(6720|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 38;
  } else {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 38;
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(588,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(565);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(589,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(522,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
  }
 } while(0);
 if ((label|0) == 38) {
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $$1 = $90;$$12 = $91;
 }
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 892|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 900|0;
 $__bb = sp + 888|0;
 $__digits = sp + 488|0;
 $__loc = sp + 480|0;
 $__pat = sp + 896|0;
 $__dp = sp + 476|0;
 $__ts = sp + 472|0;
 $__grp = sp + 460|0;
 $__sym = sp + 448|0;
 $__sn = sp + 436|0;
 $__fd = sp + 432|0;
 $__mbuf = sp + 32|0;
 $__mi = sp + 24|0;
 $__me = sp + 20|0;
 $0 = sp + 16|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,6472,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(559)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(564,($__bb|0),($3|0),(6472|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(565);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(565);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $112 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $112 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $112 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(521,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $112;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(422,($__loc|0),(6712|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(590,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(565);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $96 = 0;$__mb$0 = 0;
         }
        } else {
         $96 = $83;$__mb$0 = $83;
        }
       } else {
        $96 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(591,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(571,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($96|0)==(0|0);
         if (!($109)) {
          _free($96);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $111 = ($112|0)==(0|0);
         if (!($111)) {
          _free($112);
         }
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $95 = ($96|0)==(0|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($96);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$116 = $112;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$116 = $119;$117 = $118;
 }
 $115 = ($116|0)==(0|0);
 if (!($115)) {
  _free($116);
 }
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 108|0;
 $1 = sp + 96|0;
 $2 = sp + 92|0;
 $3 = sp + 80|0;
 $4 = sp + 68|0;
 $5 = sp + 56|0;
 $6 = sp + 52|0;
 $7 = sp + 40|0;
 $8 = sp + 36|0;
 $9 = sp + 24|0;
 $10 = sp + 12|0;
 $11 = sp;
 do {
  if ($__intl) {
   $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6288)|0);
   $13 = HEAP32[$12>>2]|0;
   do {
    if ($__neg) {
     $14 = (($13) + 44|0);
     $15 = HEAP32[$14>>2]|0;
     FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
     $16 = HEAP32[$0>>2]|0;
     HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 32|0);
     $19 = HEAP32[$18>>2]|0;
     FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
     $20 = HEAP8[$__sn>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $23 = (($__sn) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      HEAP32[$24>>2] = 0;
     }
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
     __THREW__ = 0;
     invoke_vii(587,($__sn|0),0);
     $26 = __THREW__; __THREW__ = 0;
     $27 = $26&1;
     if ($27) {
      $28 = ___cxa_find_matching_catch(0|0)|0;
      $29 = tempRet0;
      ___clang_call_terminate($28);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
      ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
      break;
     }
    } else {
     $30 = (($13) + 40|0);
     $31 = HEAP32[$30>>2]|0;
     FUNCTION_TABLE_vii[$31 & 1023]($2,$12);
     $32 = HEAP32[$2>>2]|0;
     HEAP8[$__pat>>0]=$32&255;HEAP8[$__pat+1>>0]=($32>>8)&255;HEAP8[$__pat+2>>0]=($32>>16)&255;HEAP8[$__pat+3>>0]=$32>>24;
     $33 = HEAP32[$12>>2]|0;
     $34 = (($33) + 28|0);
     $35 = HEAP32[$34>>2]|0;
     FUNCTION_TABLE_vii[$35 & 1023]($3,$12);
     $36 = HEAP8[$__sn>>0]|0;
     $37 = $36 & 1;
     $38 = ($37<<24>>24)==(0);
     if ($38) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $39 = (($__sn) + 8|0);
      $40 = HEAP32[$39>>2]|0;
      HEAP32[$40>>2] = 0;
     }
     $41 = (($__sn) + 4|0);
     HEAP32[$41>>2] = 0;
     __THREW__ = 0;
     invoke_vii(587,($__sn|0),0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     if ($43) {
      $44 = ___cxa_find_matching_catch(0|0)|0;
      $45 = tempRet0;
      ___clang_call_terminate($44);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
      ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
      break;
     }
    }
   } while(0);
   $46 = HEAP32[$12>>2]|0;
   $47 = (($46) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = (FUNCTION_TABLE_ii[$48 & 1023]($12)|0);
   HEAP32[$__dp>>2] = $49;
   $50 = HEAP32[$12>>2]|0;
   $51 = (($50) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_ii[$52 & 1023]($12)|0);
   HEAP32[$__ts>>2] = $53;
   $54 = HEAP32[$12>>2]|0;
   $55 = (($54) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vii[$56 & 1023]($4,$12);
   $57 = HEAP8[$__grp>>0]|0;
   $58 = $57 & 1;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    $63 = (($__grp) + 1|0);
    HEAP8[$63>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $60 = (($__grp) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    HEAP8[$61>>0] = 0;
    $62 = (($__grp) + 4|0);
    HEAP32[$62>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $64 = __THREW__; __THREW__ = 0;
   $65 = $64&1;
   if ($65) {
    $66 = ___cxa_find_matching_catch(0|0)|0;
    $67 = tempRet0;
    ___clang_call_terminate($66);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
   ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
   $68 = HEAP32[$12>>2]|0;
   $69 = (($68) + 24|0);
   $70 = HEAP32[$69>>2]|0;
   FUNCTION_TABLE_vii[$70 & 1023]($5,$12);
   $71 = HEAP8[$__sym>>0]|0;
   $72 = $71 & 1;
   $73 = ($72<<24>>24)==(0);
   if ($73) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $74 = (($__sym) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    HEAP32[$75>>2] = 0;
   }
   $76 = (($__sym) + 4|0);
   HEAP32[$76>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__sym|0),0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    $79 = ___cxa_find_matching_catch(0|0)|0;
    $80 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
    ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
    $81 = HEAP32[$12>>2]|0;
    $82 = (($81) + 36|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = (FUNCTION_TABLE_ii[$83 & 1023]($12)|0);
    $storemerge = $84;
    break;
   }
  } else {
   $85 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6224)|0);
   $86 = HEAP32[$85>>2]|0;
   do {
    if ($__neg) {
     $87 = (($86) + 44|0);
     $88 = HEAP32[$87>>2]|0;
     FUNCTION_TABLE_vii[$88 & 1023]($6,$85);
     $89 = HEAP32[$6>>2]|0;
     HEAP8[$__pat>>0]=$89&255;HEAP8[$__pat+1>>0]=($89>>8)&255;HEAP8[$__pat+2>>0]=($89>>16)&255;HEAP8[$__pat+3>>0]=$89>>24;
     $90 = HEAP32[$85>>2]|0;
     $91 = (($90) + 32|0);
     $92 = HEAP32[$91>>2]|0;
     FUNCTION_TABLE_vii[$92 & 1023]($7,$85);
     $93 = HEAP8[$__sn>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $96 = (($__sn) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      HEAP32[$97>>2] = 0;
     }
     $98 = (($__sn) + 4|0);
     HEAP32[$98>>2] = 0;
     __THREW__ = 0;
     invoke_vii(587,($__sn|0),0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      $101 = ___cxa_find_matching_catch(0|0)|0;
      $102 = tempRet0;
      ___clang_call_terminate($101);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
      ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
      break;
     }
    } else {
     $103 = (($86) + 40|0);
     $104 = HEAP32[$103>>2]|0;
     FUNCTION_TABLE_vii[$104 & 1023]($8,$85);
     $105 = HEAP32[$8>>2]|0;
     HEAP8[$__pat>>0]=$105&255;HEAP8[$__pat+1>>0]=($105>>8)&255;HEAP8[$__pat+2>>0]=($105>>16)&255;HEAP8[$__pat+3>>0]=$105>>24;
     $106 = HEAP32[$85>>2]|0;
     $107 = (($106) + 28|0);
     $108 = HEAP32[$107>>2]|0;
     FUNCTION_TABLE_vii[$108 & 1023]($9,$85);
     $109 = HEAP8[$__sn>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      HEAP8[$__sn>>0] = 0;
     } else {
      $112 = (($__sn) + 8|0);
      $113 = HEAP32[$112>>2]|0;
      HEAP32[$113>>2] = 0;
     }
     $114 = (($__sn) + 4|0);
     HEAP32[$114>>2] = 0;
     __THREW__ = 0;
     invoke_vii(587,($__sn|0),0);
     $115 = __THREW__; __THREW__ = 0;
     $116 = $115&1;
     if ($116) {
      $117 = ___cxa_find_matching_catch(0|0)|0;
      $118 = tempRet0;
      ___clang_call_terminate($117);
      // unreachable;
     } else {
      ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
      ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
      break;
     }
    }
   } while(0);
   $119 = HEAP32[$85>>2]|0;
   $120 = (($119) + 12|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (FUNCTION_TABLE_ii[$121 & 1023]($85)|0);
   HEAP32[$__dp>>2] = $122;
   $123 = HEAP32[$85>>2]|0;
   $124 = (($123) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (FUNCTION_TABLE_ii[$125 & 1023]($85)|0);
   HEAP32[$__ts>>2] = $126;
   $127 = HEAP32[$85>>2]|0;
   $128 = (($127) + 20|0);
   $129 = HEAP32[$128>>2]|0;
   FUNCTION_TABLE_vii[$129 & 1023]($10,$85);
   $130 = HEAP8[$__grp>>0]|0;
   $131 = $130 & 1;
   $132 = ($131<<24>>24)==(0);
   if ($132) {
    $136 = (($__grp) + 1|0);
    HEAP8[$136>>0] = 0;
    HEAP8[$__grp>>0] = 0;
   } else {
    $133 = (($__grp) + 8|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP8[$134>>0] = 0;
    $135 = (($__grp) + 4|0);
    HEAP32[$135>>2] = 0;
   }
   __THREW__ = 0;
   invoke_vii(450,($__grp|0),0);
   $137 = __THREW__; __THREW__ = 0;
   $138 = $137&1;
   if ($138) {
    $139 = ___cxa_find_matching_catch(0|0)|0;
    $140 = tempRet0;
    ___clang_call_terminate($139);
    // unreachable;
   }
   ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
   ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
   $141 = HEAP32[$85>>2]|0;
   $142 = (($141) + 24|0);
   $143 = HEAP32[$142>>2]|0;
   FUNCTION_TABLE_vii[$143 & 1023]($11,$85);
   $144 = HEAP8[$__sym>>0]|0;
   $145 = $144 & 1;
   $146 = ($145<<24>>24)==(0);
   if ($146) {
    HEAP8[$__sym>>0] = 0;
   } else {
    $147 = (($__sym) + 8|0);
    $148 = HEAP32[$147>>2]|0;
    HEAP32[$148>>2] = 0;
   }
   $149 = (($__sym) + 4|0);
   HEAP32[$149>>2] = 0;
   __THREW__ = 0;
   invoke_vii(587,($__sym|0),0);
   $150 = __THREW__; __THREW__ = 0;
   $151 = $150&1;
   if ($151) {
    $152 = ___cxa_find_matching_catch(0|0)|0;
    $153 = tempRet0;
    ___clang_call_terminate($152);
    // unreachable;
   } else {
    ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
    ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
    $154 = HEAP32[$85>>2]|0;
    $155 = (($154) + 36|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = (FUNCTION_TABLE_ii[$156 & 1023]($85)|0);
    $storemerge = $157;
    break;
   }
  }
 } while(0);
 HEAP32[$__fd>>2] = $storemerge;
 STACKTOP = sp;return;
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$ = 0, $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i18 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$81 = 0, $$82 = 0, $$83 = 0, $$lcssa = 0, $$lcssa35 = 0, $$lcssa85 = 0, $$lcssa86 = 0, $$lcssa87 = 0, $$lcssa88 = 0, $$lcssa89 = 0, $$pn = 0;
 var $$promoted4$i$i = 0, $$promoted4$i$i12 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $143$phi = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $169$phi = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa$ph = 0, $__d$036 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$140 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$041 = 0, $__f$147 = 0, $__gl$057 = 0, $__gl$057$ph = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0;
 var $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $or$cond84 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i13 = 0, $scevgep6$i$i = 0, $scevgep6$i$i16 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 2:  {
   $33 = HEAP8[$__sym>>0]|0;
   $34 = $33 & 1;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $37 = $33&255;
    $38 = $37 >>> 1;
    $40 = $38;
   } else {
    $36 = HEAP32[$4>>2]|0;
    $40 = $36;
   }
   $39 = ($40|0)==(0);
   $or$cond3 = $39 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($35) {
     $43 = $33&255;
     $44 = $43 >>> 1;
     $46 = $4;$47 = $44;
    } else {
     $41 = HEAP32[$5>>2]|0;
     $42 = HEAP32[$4>>2]|0;
     $46 = $41;$47 = $42;
    }
    $45 = (($46) + ($47<<2)|0);
    $48 = HEAP32[$__me>>2]|0;
    $49 = ($46|0)==($45|0);
    if ($49) {
     $$0$lcssa$i$i18 = $48;
    } else {
     $$promoted4$i$i12 = $46;
     $$sum33 = (($47) + -1)|0;
     $scevgep$i$i13 = (($46) + ($$sum33<<2)|0);
     $50 = $scevgep$i$i13;
     $51 = (($50) - ($$promoted4$i$i12))|0;
     $52 = $51 >>> 2;
     $$01$i$i15 = $48;$54 = $46;
     while(1) {
      $53 = HEAP32[$54>>2]|0;
      HEAP32[$$01$i$i15>>2] = $53;
      $55 = (($54) + 4|0);
      $56 = (($$01$i$i15) + 4|0);
      $57 = ($55|0)==($45|0);
      if ($57) {
       break;
      } else {
       $$01$i$i15 = $56;$54 = $55;
      }
     }
     $58 = (($52) + 1)|0;
     $scevgep6$i$i16 = (($48) + ($58<<2)|0);
     $$0$lcssa$i$i18 = $scevgep6$i$i16;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i18;
    $$2 = $$060;
   }
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$060;
   } else {
    $29 = HEAP32[$1>>2]|0;
    $$ = $23 ? $0 : $29;
    $30 = HEAP32[$$>>2]|0;
    $31 = HEAP32[$__me>>2]|0;
    $32 = (($31) + 4|0);
    HEAP32[$__me>>2] = $32;
    HEAP32[$31>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 4:  {
   $59 = HEAP32[$__me>>2]|0;
   $60 = (($$060) + 4|0);
   $$$0 = $__neg ? $60 : $$060;
   $61 = ($$$0>>>0)<($__de>>>0);
   if ($61) {
    $__d$036 = $$$0;
    while(1) {
     $64 = HEAP32[$__d$036>>2]|0;
     $65 = HEAP32[$__ct>>2]|0;
     $66 = (($65) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (FUNCTION_TABLE_iiii[$67 & 1023]($__ct,2048,$64)|0);
     $63 = (($__d$036) + 4|0);
     if (!($68)) {
      $__d$0$lcssa$ph = $__d$036;
      break;
     }
     $62 = ($63>>>0)<($__de>>>0);
     if ($62) {
      $__d$036 = $63;
     } else {
      $__d$0$lcssa$ph = $63;
      break;
     }
    }
    $__d$0$lcssa = $__d$0$lcssa$ph;
   } else {
    $__d$0$lcssa = $$$0;
   }
   if ($6) {
    $69 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($69) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $73 = $__me$promoted;$__d$140 = $__d$0$lcssa;$__f$041 = $__fd;
     while(1) {
      $70 = (($__d$140) + -4|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = (($73) + 4|0);
      HEAP32[$73>>2] = $71;
      $74 = (($__f$041) + -1)|0;
      $75 = ($70>>>0)>($$$0>>>0);
      $76 = ($74|0)>(0);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $73 = $72;$__d$140 = $70;$__f$041 = $74;
      } else {
       $$lcssa = $70;$$lcssa85 = $72;$$lcssa86 = $74;$$lcssa87 = $76;
       break;
      }
     }
     HEAP32[$__me>>2] = $$lcssa85;
     if ($$lcssa87) {
      $__d$1$lcssa79 = $$lcssa;$__f$0$lcssa77 = $$lcssa86;
      label = 33;
     } else {
      $77 = HEAP32[$__me>>2]|0;
      $78 = (($77) + 4|0);
      HEAP32[$__me>>2] = $78;
      $$lcssa35 = $77;$__d$1$lcssa7880 = $$lcssa;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $79 = HEAP32[$__ct>>2]|0;
     $80 = (($79) + 44|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (FUNCTION_TABLE_iii[$81 & 1023]($__ct,48)|0);
     $83 = ($__f$0$lcssa77|0)>(0);
     $84 = HEAP32[$__me>>2]|0;
     $85 = (($84) + 4|0);
     HEAP32[$__me>>2] = $85;
     if ($83) {
      $175 = $85;$86 = $84;$__f$147 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$86>>2] = $82;
       $87 = (($__f$147) + -1)|0;
       $88 = ($87|0)>(0);
       $89 = (($86) + 8|0);
       if ($88) {
        $86$phi = $175;$175 = $89;$__f$147 = $87;$86 = $86$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($84) + ($$sum75<<2)|0);
      $scevgep71 = (($84) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa35 = $scevgep71;$__d$1$lcssa7880 = $__d$1$lcssa79;
     } else {
      $$lcssa35 = $84;$__d$1$lcssa7880 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa35>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7880;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $90 = ($__d$2|0)==($$$0|0);
   if ($90) {
    $91 = HEAP32[$__ct>>2]|0;
    $92 = (($91) + 44|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (FUNCTION_TABLE_iii[$93 & 1023]($__ct,48)|0);
    $95 = HEAP32[$__me>>2]|0;
    $96 = (($95) + 4|0);
    HEAP32[$__me>>2] = $96;
    HEAP32[$95>>2] = $94;
    $135 = $96;$137 = $95;
   } else {
    $97 = HEAP8[$__grp>>0]|0;
    $98 = $97 & 1;
    $99 = ($98<<24>>24)==(0);
    if ($99) {
     $101 = $97&255;
     $102 = $101 >>> 1;
     $104 = $102;
    } else {
     $100 = HEAP32[$9>>2]|0;
     $104 = $100;
    }
    $103 = ($104|0)==(0);
    if ($103) {
     $__gl$057$ph = -1;
    } else {
     $105 = HEAP32[$8>>2]|0;
     $$81 = $99 ? $7 : $105;
     $106 = HEAP8[$$81>>0]|0;
     $107 = $106 << 24 >> 24;
     $__gl$057$ph = $107;
    }
    $__d$354 = $__d$2;$__gl$057 = $__gl$057$ph;$__ig$056 = 0;$__ng$055 = 0;
    while(1) {
     $108 = ($__ng$055|0)==($__gl$057|0);
     $109 = HEAP32[$__me>>2]|0;
     if ($108) {
      $110 = (($109) + 4|0);
      HEAP32[$__me>>2] = $110;
      HEAP32[$109>>2] = $__ts;
      $111 = (($__ig$056) + 1)|0;
      $112 = HEAP8[$__grp>>0]|0;
      $113 = $112 & 1;
      $114 = ($113<<24>>24)==(0);
      if ($114) {
       $116 = $112&255;
       $117 = $116 >>> 1;
       $119 = $117;
      } else {
       $115 = HEAP32[$9>>2]|0;
       $119 = $115;
      }
      $118 = ($111>>>0)<($119>>>0);
      if ($118) {
       $120 = HEAP32[$8>>2]|0;
       $$82 = $114 ? $7 : $120;
       $121 = (($$82) + ($111)|0);
       $122 = HEAP8[$121>>0]|0;
       $123 = ($122<<24>>24)==(127);
       if ($123) {
        $131 = $110;$__gl$1 = -1;$__ig$1 = $111;$__ng$1 = 0;
       } else {
        $124 = HEAP32[$8>>2]|0;
        $$83 = $114 ? $7 : $124;
        $125 = (($$83) + ($111)|0);
        $126 = HEAP8[$125>>0]|0;
        $127 = $126 << 24 >> 24;
        $131 = $110;$__gl$1 = $127;$__ig$1 = $111;$__ng$1 = 0;
       }
      } else {
       $131 = $110;$__gl$1 = $__gl$057;$__ig$1 = $111;$__ng$1 = 0;
      }
     } else {
      $131 = $109;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $128 = (($__d$354) + -4|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($131) + 4|0);
     HEAP32[$__me>>2] = $130;
     HEAP32[$131>>2] = $129;
     $132 = (($__ng$1) + 1)|0;
     $133 = ($128|0)==($$$0|0);
     if ($133) {
      $$lcssa88 = $131;$$lcssa89 = $130;
      break;
     } else {
      $__d$354 = $128;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $132;
     }
    }
    $135 = $$lcssa89;$137 = $$lcssa88;
   }
   $134 = ($59|0)!=($135|0);
   $136 = ($137>>>0)>($59>>>0);
   $or$cond84 = $134 & $136;
   if ($or$cond84) {
    $$012$i$i = $59;$140 = $137;$143 = $135;
    while(1) {
     $138 = HEAP32[$$012$i$i>>2]|0;
     $139 = HEAP32[$140>>2]|0;
     HEAP32[$$012$i$i>>2] = $139;
     HEAP32[$140>>2] = $138;
     $141 = (($$012$i$i) + 4|0);
     $142 = (($143) + -8|0);
     $144 = ($141>>>0)<($142>>>0);
     if ($144) {
      $143$phi = $140;$$012$i$i = $141;$140 = $142;$143 = $143$phi;
     } else {
      break;
     }
    }
    $$2 = $$$0;
   } else {
    $$2 = $$$0;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $145 = (($__p$059) + 1)|0;
  $exitcond = ($145|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $145;
  }
 }
 $146 = HEAP8[$__sn>>0]|0;
 $147 = $146 & 1;
 $148 = ($147<<24>>24)==(0);
 if ($148) {
  $150 = $146&255;
  $151 = $150 >>> 1;
  $153 = $151;
 } else {
  $149 = HEAP32[$0>>2]|0;
  $153 = $149;
 }
 $152 = ($153>>>0)>(1);
 if ($152) {
  if ($148) {
   $156 = $146&255;
   $157 = $156 >>> 1;
   $$pn = $0;$160 = $157;
  } else {
   $154 = HEAP32[$1>>2]|0;
   $155 = HEAP32[$0>>2]|0;
   $$pn = $154;$160 = $155;
  }
  $158 = (($$pn) + 4|0);
  $159 = (($$pn) + ($160<<2)|0);
  $161 = HEAP32[$__me>>2]|0;
  $162 = ($158|0)==($159|0);
  if ($162) {
   $$0$lcssa$i$i = $161;
  } else {
   $$promoted4$i$i = $158;
   $$sum = (($160) + -1)|0;
   $scevgep$i$i = (($$pn) + ($$sum<<2)|0);
   $163 = $scevgep$i$i;
   $164 = (($163) - ($$promoted4$i$i))|0;
   $165 = $164 >>> 2;
   $$01$i$i = $161;$167 = $158;$169 = $$pn;
   while(1) {
    $166 = HEAP32[$167>>2]|0;
    HEAP32[$$01$i$i>>2] = $166;
    $168 = (($169) + 8|0);
    $170 = (($$01$i$i) + 4|0);
    $171 = ($168|0)==($159|0);
    if ($171) {
     break;
    } else {
     $169$phi = $167;$$01$i$i = $170;$167 = $168;$169 = $169$phi;
    }
   }
   $172 = (($165) + 1)|0;
   $scevgep6$i$i = (($161) + ($172<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $173 = $__flags & 176;
 if ((($173|0) == 32)) {
  $174 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $174;
 } else if (!((($173|0) == 16))) {
  HEAP32[$__mi>>2] = $__mb;
 }
 return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 468|0;
 $__loc = sp + 464|0;
 $__pat = sp + 472|0;
 $__dp = sp + 460|0;
 $__ts = sp + 456|0;
 $__grp = sp + 444|0;
 $__sym = sp + 432|0;
 $__sn = sp + 420|0;
 $__fd = sp + 416|0;
 $__mbuf = sp + 16|0;
 $__mi = sp + 8|0;
 $__me = sp + 4|0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(422,($__loc|0),(6712|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if ($3) {
   label = 38;
  } else {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     label = 38;
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(590,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(565);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$98 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$98 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$98 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(591,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(571,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($98|0)==(0|0);
       if (!($123)) {
        _free($98);
       }
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $97 = ($98|0)==(0|0);
     if ($97) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($98);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
  }
 } while(0);
 if ((label|0) == 38) {
  $91 = ___cxa_find_matching_catch()|0;
  $92 = tempRet0;
  $$1 = $91;$$12 = $92;
 }
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i5 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i6 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i5 = $15;
   while(1) {
    $20 = HEAP8[$$01$i5>>0]|0;
    __THREW__ = 0;
    invoke_vii(541,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 13;
     break;
    }
    $23 = (($$01$i5) + 1|0);
    $exitcond$i6 = ($23|0)==($11|0);
    if ($exitcond$i6) {
     break;
    } else {
     $$01$i5 = $23;
    }
   }
   if ((label|0) == 13) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    label = 15;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 11;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 12;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 12;
 }
 L17: do {
  if ((label|0) == 12) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(592,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    label = 15;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   do {
    if ($42) {
     $$01$i = $33;
     while(1) {
      $43 = HEAP8[$$01$i>>0]|0;
      __THREW__ = 0;
      invoke_vii(541,($agg$result|0),($43|0));
      $44 = __THREW__; __THREW__ = 0;
      $45 = $44&1;
      if ($45) {
       label = 20;
       break;
      }
      $46 = (($$01$i) + 1|0);
      $exitcond$i = ($46|0)==($41|0);
      if ($exitcond$i) {
       label = 21;
       break;
      } else {
       $$01$i = $46;
      }
     }
     if ((label|0) == 20) {
      $47 = ___cxa_find_matching_catch()|0;
      $48 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
      $$01 = $47;$$02 = $48;
      break L17;
     }
     else if ((label|0) == 21) {
      break;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 15) {
  $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i13 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre43 = 0, $$pre8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i11 = 0, $__buf$i = 0, $__buf$i10 = 0, $__mb$i = 0, $__mb$i9 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i18 = 0, $__wn$i = 0;
 var $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi37$index = 0, $lpad$phi37$index3 = 0, $or$cond3$i = 0, $or$cond3$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i9 = sp + 184|0;
 $__buf$i10 = sp + 192|0;
 $__bn$i11 = sp + 180|0;
 $__wn$i = sp + 176|0;
 $__mb$i = sp + 168|0;
 $__buf$i = sp + 40|0;
 $__bn$i = sp + 32|0;
 $__nn$i = sp + 28|0;
 $__ndflt = sp + 16|0;
 $0 = sp + 8|0;
 $1 = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((8368 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$18 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$18 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = ($18>>>0)<($14>>>0);
 L5: do {
  if ($17) {
   $19 = (($__buf$i10) + 32|0);
   $$05$i13 = $18;$21 = ((8368 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i13;
    $20 = (($21) + 12|0);
    $22 = HEAP32[$20>>2]|0;
    __THREW__ = 0;
    $23 = (invoke_iiiiiiiii($22|0,($0|0),($__mb$i9|0),($$05$i13|0),($14|0),($__wn$i|0),($__buf$i10|0),($19|0),($__bn$i11|0))|0);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if ($25) {
     label = 24;
     break;
    }
    $26 = ($23|0)==(2);
    $27 = HEAP32[$__wn$i>>2]|0;
    $28 = ($27|0)==($$05$i13|0);
    $or$cond3$i14 = $26 | $28;
    if ($or$cond3$i14) {
     label = 10;
     break;
    }
    $29 = HEAP32[$__bn$i11>>2]|0;
    $30 = ($__buf$i10>>>0)<($29>>>0);
    if ($30) {
     $__p$04$i18 = $__buf$i10;
     while(1) {
      $33 = HEAP8[$__p$04$i18>>0]|0;
      __THREW__ = 0;
      invoke_vii(541,($__ndflt|0),($33|0));
      $34 = __THREW__; __THREW__ = 0;
      $35 = $34&1;
      if ($35) {
       label = 23;
       break L7;
      }
      $36 = (($__p$04$i18) + 1|0);
      $37 = HEAP32[$__bn$i11>>2]|0;
      $38 = ($36>>>0)<($37>>>0);
      if ($38) {
       $__p$04$i18 = $36;
      } else {
       break;
      }
     }
     $$pre8$i = HEAP32[$__wn$i>>2]|0;
     $40 = $$pre8$i;
    } else {
     $40 = $27;
    }
    $39 = ($40>>>0)<($14>>>0);
    if (!($39)) {
     label = 17;
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i13 = $40;$21 = $$pre;
   }
   do {
    if ((label|0) == 10) {
     __THREW__ = 0;
     invoke_vi(577,(7600|0));
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $61 = ___cxa_find_matching_catch()|0;
      $62 = tempRet0;
      $lpad$phi37$index = $61;$lpad$phi37$index3 = $62;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 17) {
     label = 18;
     break L5;
    }
    else if ((label|0) == 23) {
     $57 = ___cxa_find_matching_catch()|0;
     $58 = tempRet0;
     $lpad$phi37$index = $57;$lpad$phi37$index3 = $58;
    }
    else if ((label|0) == 24) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi37$index = $59;$lpad$phi37$index3 = $60;
    }
   } while(0);
   $$1 = $lpad$phi37$index;$$13 = $lpad$phi37$index3;
  } else {
   label = 18;
  }
 } while(0);
 L28: do {
  if ((label|0) == 18) {
   $41 = ($__c|0)==(-1);
   $42 = $__c << 1;
   $43 = $42;
   $44 = $41 ? (-1) : $43;
   $45 = HEAP8[$__ndflt>>0]|0;
   $46 = $45 & 1;
   $47 = ($46<<24>>24)==(0);
   if ($47) {
    $50 = (($__ndflt) + 1|0);
    $51 = $50;
   } else {
    $48 = (($__ndflt) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $51 = $49;
   }
   __THREW__ = 0;
   $52 = (invoke_iiiii(592,($44|0),($__set|0),($__msgid|0),($51|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    $55 = ___cxa_find_matching_catch()|0;
    $56 = tempRet0;
    $$1 = $55;$$13 = $56;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $63 = (($1) + 4|0);
   HEAP32[$63>>2] = 0;
   HEAP32[$1>>2] = ((8472 + 8|0));
   $64 = (_strlen(($52|0))|0);
   $65 = (($52) + ($64)|0);
   $66 = ($64|0)>(0);
   L37: do {
    if ($66) {
     $67 = $65;
     $68 = (($__buf$i) + 128|0);
     $$05$i = $52;$70 = ((8472 + 8|0));
     L39: while(1) {
      HEAP32[$__nn$i>>2] = $$05$i;
      $69 = (($70) + 16|0);
      $71 = HEAP32[$69>>2]|0;
      $72 = $$05$i;
      $73 = (($67) - ($72))|0;
      $74 = ($73|0)>(32);
      $75 = (($$05$i) + 32|0);
      $76 = $74 ? $75 : $65;
      __THREW__ = 0;
      $77 = (invoke_iiiiiiiii($71|0,($1|0),($__mb$i|0),($$05$i|0),($76|0),($__nn$i|0),($__buf$i|0),($68|0),($__bn$i|0))|0);
      $78 = __THREW__; __THREW__ = 0;
      $79 = $78&1;
      if ($79) {
       label = 43;
       break;
      }
      $80 = ($77|0)==(2);
      $81 = HEAP32[$__nn$i>>2]|0;
      $82 = ($81|0)==($$05$i|0);
      $or$cond3$i = $80 | $82;
      if ($or$cond3$i) {
       label = 33;
       break;
      }
      $83 = HEAP32[$__bn$i>>2]|0;
      $84 = ($__buf$i>>>0)<($83>>>0);
      if ($84) {
       $__p$04$i = $__buf$i;
       while(1) {
        $87 = HEAP32[$__p$04$i>>2]|0;
        __THREW__ = 0;
        invoke_vii(584,($agg$result|0),($87|0));
        $88 = __THREW__; __THREW__ = 0;
        $89 = $88&1;
        if ($89) {
         label = 42;
         break L39;
        }
        $90 = (($__p$04$i) + 4|0);
        $91 = HEAP32[$__bn$i>>2]|0;
        $92 = ($90>>>0)<($91>>>0);
        if ($92) {
         $__p$04$i = $90;
        } else {
         break;
        }
       }
       $$pre$i = HEAP32[$__nn$i>>2]|0;
       $94 = $$pre$i;
      } else {
       $94 = $81;
      }
      $93 = ($94>>>0)<($65>>>0);
      if (!($93)) {
       label = 40;
       break;
      }
      $$pre43 = HEAP32[$1>>2]|0;
      $$05$i = $94;$70 = $$pre43;
     }
     do {
      if ((label|0) == 33) {
       __THREW__ = 0;
       invoke_vi(577,(7600|0));
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        $99 = ___cxa_find_matching_catch()|0;
        $100 = tempRet0;
        $lpad$phi$index = $99;$lpad$phi$index10 = $100;
        break;
       } else {
        // unreachable;
       }
      }
      else if ((label|0) == 40) {
       break L37;
      }
      else if ((label|0) == 42) {
       $95 = ___cxa_find_matching_catch()|0;
       $96 = tempRet0;
       $lpad$phi$index = $95;$lpad$phi$index10 = $96;
      }
      else if ((label|0) == 43) {
       $97 = ___cxa_find_matching_catch()|0;
       $98 = tempRet0;
       $lpad$phi$index = $97;$lpad$phi$index10 = $98;
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
     $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
     break L28;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(424,($0|0),(6600|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15288 + 8|0));
  ___cxa_throw(($0|0),(15336|0),(378|0));
  // unreachable;
 }
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(424,($0|0),(6600|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((15352 + 8|0));
  ___cxa_throw(($0|0),(15400|0),(378|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6632 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(593,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$1 = $86;$$12 = $85;
 } else {
  $5 = (($this) + 144|0);
  __THREW__ = 0;
  invoke_viii(411,($5|0),(6624|0),1);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $87 = ___cxa_find_matching_catch()|0;
   $88 = tempRet0;
   $$0 = $88;$$01 = $87;
  } else {
   $8 = HEAP32[$2>>2]|0;
   $9 = (($this) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==($8|0);
   if (!($11)) {
    $__new_last2$i$i$i = $8;
    $scevgep$i$i$i = (($10) + -4|0);
    $12 = $scevgep$i$i$i;
    $13 = (($12) - ($__new_last2$i$i$i))|0;
    $14 = $13 >>> 2;
    $15 = $14 ^ -1;
    $scevgep4$i$i$i = (($10) + ($15<<2)|0);
    HEAP32[$9>>2] = $scevgep4$i$i$i;
   }
   HEAP32[((11528 + 4|0))>>2] = 0;
   HEAP32[11528>>2] = ((5080 + 8|0));
   __THREW__ = 0;
   invoke_vii(594,($this|0),(11528|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   do {
    if ($17) {
     label = 41;
    } else {
     HEAP32[((11520 + 4|0))>>2] = 0;
     HEAP32[11520>>2] = ((5120 + 8|0));
     __THREW__ = 0;
     invoke_vii(595,($this|0),(11520|0));
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if ($19) {
      label = 41;
     } else {
      HEAP32[((11504 + 4|0))>>2] = 0;
      HEAP32[11504>>2] = ((6728 + 8|0));
      HEAP32[((11504 + 8|0))>>2] = 0;
      HEAP8[((11504 + 12|0))>>0] = 0;
      $20 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
      HEAP32[((11504 + 8|0))>>2] = $20;
      __THREW__ = 0;
      invoke_vii(596,($this|0),(11504|0));
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if ($22) {
       label = 41;
      } else {
       HEAP32[((11496 + 4|0))>>2] = 0;
       HEAP32[11496>>2] = ((7688 + 8|0));
       __THREW__ = 0;
       invoke_vii(597,($this|0),(11496|0));
       $23 = __THREW__; __THREW__ = 0;
       $24 = $23&1;
       if ($24) {
        label = 41;
       } else {
        HEAP32[((11488 + 4|0))>>2] = 0;
        HEAP32[11488>>2] = ((7904 + 8|0));
        __THREW__ = 0;
        invoke_vii(598,($this|0),(11488|0));
        $25 = __THREW__; __THREW__ = 0;
        $26 = $25&1;
        if ($26) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(599,(11472|0),1);
         $27 = __THREW__; __THREW__ = 0;
         $28 = $27&1;
         if ($28) {
          label = 41;
         } else {
          __THREW__ = 0;
          invoke_vii(600,($this|0),(11472|0));
          $29 = __THREW__; __THREW__ = 0;
          $30 = $29&1;
          if ($30) {
           label = 41;
          } else {
           HEAP32[((11464 + 4|0))>>2] = 0;
           HEAP32[11464>>2] = ((8128 + 8|0));
           __THREW__ = 0;
           invoke_vii(601,($this|0),(11464|0));
           $31 = __THREW__; __THREW__ = 0;
           $32 = $31&1;
           if ($32) {
            label = 41;
           } else {
            HEAP32[((11456 + 4|0))>>2] = 0;
            HEAP32[11456>>2] = ((8248 + 8|0));
            __THREW__ = 0;
            invoke_vii(602,($this|0),(11456|0));
            $33 = __THREW__; __THREW__ = 0;
            $34 = $33&1;
            if ($34) {
             label = 41;
            } else {
             HEAP32[((11432 + 4|0))>>2] = 0;
             HEAP32[11432>>2] = ((6880 + 8|0));
             HEAP8[((11432 + 8|0))>>0] = 46;
             HEAP8[((11432 + 9|0))>>0] = 44;
             ;HEAP32[((11432 + 12|0))+0>>2]=0|0;HEAP32[((11432 + 12|0))+4>>2]=0|0;HEAP32[((11432 + 12|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(603,($this|0),(11432|0));
             $35 = __THREW__; __THREW__ = 0;
             $36 = $35&1;
             if ($36) {
              label = 41;
             } else {
              HEAP32[((11400 + 4|0))>>2] = 0;
              HEAP32[11400>>2] = ((6920 + 8|0));
              HEAP32[((11400 + 8|0))>>2] = 46;
              HEAP32[((11400 + 12|0))>>2] = 44;
              ;HEAP32[((11400 + 16|0))+0>>2]=0|0;HEAP32[((11400 + 16|0))+4>>2]=0|0;HEAP32[((11400 + 16|0))+8>>2]=0|0;
              __THREW__ = 0;
              invoke_vii(604,($this|0),(11400|0));
              $37 = __THREW__; __THREW__ = 0;
              $38 = $37&1;
              if ($38) {
               label = 41;
              } else {
               HEAP32[((11392 + 4|0))>>2] = 0;
               HEAP32[11392>>2] = ((5160 + 8|0));
               __THREW__ = 0;
               invoke_vii(605,($this|0),(11392|0));
               $39 = __THREW__; __THREW__ = 0;
               $40 = $39&1;
               if ($40) {
                label = 41;
               } else {
                HEAP32[((11384 + 4|0))>>2] = 0;
                HEAP32[11384>>2] = ((5280 + 8|0));
                __THREW__ = 0;
                invoke_vii(606,($this|0),(11384|0));
                $41 = __THREW__; __THREW__ = 0;
                $42 = $41&1;
                if ($42) {
                 label = 41;
                } else {
                 HEAP32[((11376 + 4|0))>>2] = 0;
                 HEAP32[11376>>2] = ((5352 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(607,($this|0),(11376|0));
                 $43 = __THREW__; __THREW__ = 0;
                 $44 = $43&1;
                 if ($44) {
                  label = 41;
                 } else {
                  HEAP32[((11368 + 4|0))>>2] = 0;
                  HEAP32[11368>>2] = ((5448 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(608,($this|0),(11368|0));
                  $45 = __THREW__; __THREW__ = 0;
                  $46 = $45&1;
                  if ($46) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11360 + 4|0))>>2] = 0;
                  HEAP32[11360>>2] = ((6040 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(609,($this|0),(11360|0));
                  $47 = __THREW__; __THREW__ = 0;
                  $48 = $47&1;
                  if ($48) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11352 + 4|0))>>2] = 0;
                  HEAP32[11352>>2] = ((6104 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(610,($this|0),(11352|0));
                  $49 = __THREW__; __THREW__ = 0;
                  $50 = $49&1;
                  if ($50) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11344 + 4|0))>>2] = 0;
                  HEAP32[11344>>2] = ((6168 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(611,($this|0),(11344|0));
                  $51 = __THREW__; __THREW__ = 0;
                  $52 = $51&1;
                  if ($52) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11336 + 4|0))>>2] = 0;
                  HEAP32[11336>>2] = ((6232 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(612,($this|0),(11336|0));
                  $53 = __THREW__; __THREW__ = 0;
                  $54 = $53&1;
                  if ($54) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11328 + 4|0))>>2] = 0;
                  HEAP32[11328>>2] = ((6296 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(613,($this|0),(11328|0));
                  $55 = __THREW__; __THREW__ = 0;
                  $56 = $55&1;
                  if ($56) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11320 + 4|0))>>2] = 0;
                  HEAP32[11320>>2] = ((6376 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(614,($this|0),(11320|0));
                  $57 = __THREW__; __THREW__ = 0;
                  $58 = $57&1;
                  if ($58) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11312 + 4|0))>>2] = 0;
                  HEAP32[11312>>2] = ((6432 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(615,($this|0),(11312|0));
                  $59 = __THREW__; __THREW__ = 0;
                  $60 = $59&1;
                  if ($60) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11304 + 4|0))>>2] = 0;
                  HEAP32[11304>>2] = ((6480 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(616,($this|0),(11304|0));
                  $61 = __THREW__; __THREW__ = 0;
                  $62 = $61&1;
                  if ($62) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11288 + 4|0))>>2] = 0;
                  HEAP32[11288>>2] = ((5528 + 8|0));
                  HEAP32[((11288 + 8|0))>>2] = ((5528 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(617,($this|0),(11288|0));
                  $63 = __THREW__; __THREW__ = 0;
                  $64 = $63&1;
                  if ($64) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11272 + 4|0))>>2] = 0;
                  HEAP32[11272>>2] = ((5680 + 8|0));
                  HEAP32[((11272 + 8|0))>>2] = ((5680 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(618,($this|0),(11272|0));
                  $65 = __THREW__; __THREW__ = 0;
                  $66 = $65&1;
                  if ($66) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11256 + 4|0))>>2] = 0;
                  HEAP32[11256>>2] = ((7624 + 8|0));
                  __THREW__ = 0;
                  $67 = (invoke_i(559)|0);
                  $68 = __THREW__; __THREW__ = 0;
                  $69 = $68&1;
                  if ($69) {
                   $70 = ___cxa_find_matching_catch()|0;
                   $71 = tempRet0;
                   $eh$lpad$body$index3Z2D = $71;$eh$lpad$body$indexZ2D = $70;
                   break;
                  }
                  HEAP32[((11256 + 8|0))>>2] = $67;
                  HEAP32[11256>>2] = ((5976 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(619,($this|0),(11256|0));
                  $72 = __THREW__; __THREW__ = 0;
                  $73 = $72&1;
                  if ($73) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11240 + 4|0))>>2] = 0;
                  HEAP32[11240>>2] = ((7624 + 8|0));
                  __THREW__ = 0;
                  $74 = (invoke_i(559)|0);
                  $75 = __THREW__; __THREW__ = 0;
                  $76 = $75&1;
                  if ($76) {
                   $77 = ___cxa_find_matching_catch()|0;
                   $78 = tempRet0;
                   $eh$lpad$body$index3Z2D = $78;$eh$lpad$body$indexZ2D = $77;
                   break;
                  }
                  HEAP32[((11240 + 8|0))>>2] = $74;
                  HEAP32[11240>>2] = ((6008 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(620,($this|0),(11240|0));
                  $79 = __THREW__; __THREW__ = 0;
                  $80 = $79&1;
                  if ($80) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11232 + 4|0))>>2] = 0;
                  HEAP32[11232>>2] = ((6520 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(621,($this|0),(11232|0));
                  $81 = __THREW__; __THREW__ = 0;
                  $82 = $81&1;
                  if ($82) {
                   label = 41;
                   break;
                  }
                  HEAP32[((11224 + 4|0))>>2] = 0;
                  HEAP32[11224>>2] = ((6560 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(622,($this|0),(11224|0));
                  $83 = __THREW__; __THREW__ = 0;
                  $84 = $83&1;
                  if ($84) {
                   label = 41;
                   break;
                  }
                  return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 41) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $eh$lpad$body$index3Z2D = $90;$eh$lpad$body$indexZ2D = $89;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
   $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
  }
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
  $$1 = $$0;$$12 = $$01;
 }
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6672>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6672|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(623)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((6672|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[6664>>2] = 6656;
     ___cxa_guard_release((6672|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[6664>>2]|0;
 return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(624,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if (!($14)) {
    (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   }
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
 } else {
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  $$pre2 = HEAP32[$0>>2]|0;
  $20 = $$pre2;
 }
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6632 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $18;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $11 = $$pre;$13 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $11;$6 = $13;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(15600|0),(386|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(11064,1);
 HEAP32[6656>>2] = 11064;
 return (6656|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[6680>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return (6680|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[6696>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((6696|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(625)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((6696|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[6688>>2] = 6680;
     ___cxa_guard_release((6696|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[6688>>2]|0;
 return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(626)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (627);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,628);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if (!($0)) {
  $1 = HEAP32[$this>>2]|0;
  $2 = (($1) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  FUNCTION_TABLE_vi[$3 & 1023]($this);
 }
 return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[6704>>2]|0;HEAP32[6704>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
  $1 = (($0) + ($c<<1)|0);
  $2 = HEAP16[$1>>1]|0;
  $3 = $2 & $m;
  $4 = ($3<<16>>16)!=(0);
  $5 = $4;
 } else {
  $5 = 0;
 }
 return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(629)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $low5 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low5))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$012 = $low;$$03 = $vec;
  while(1) {
   $5 = HEAP32[$$012>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $7 = (($6) + ($5<<1)|0);
    $8 = HEAP16[$7>>1]|0;
    $9 = $8;
   } else {
    $9 = 0;
   }
   HEAP16[$$03>>1] = $9;
   $10 = (($$012) + 4|0);
   $11 = (($$03) + 2|0);
   $12 = ($10|0)==($high|0);
   if ($12) {
    break;
   } else {
    $$012 = $10;$$03 = $11;
   }
  }
  $scevgep7 = (($low) + ($4<<2)|0);
  $$01$lcssa = $scevgep7;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$01 = $low;
  while(1) {
   $1 = HEAP32[$$01>>2]|0;
   $isascii = ($1>>>0)<(128);
   if ($isascii) {
    $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $3 = (($2) + ($1<<1)|0);
    $4 = HEAP16[$3>>1]|0;
    $5 = $4 & $m;
    $6 = ($5<<16>>16)==(0);
    if (!($6)) {
     $$0$lcssa$ph = $$01;
     break;
    }
   }
   $7 = (($$01) + 4|0);
   $8 = ($7|0)==($high|0);
   if ($8) {
    $$0$lcssa$ph = $high;
    break;
   } else {
    $$01 = $7;
   }
  }
  $$0$lcssa = $$0$lcssa$ph;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$01 = $low;
  while(1) {
   $3 = HEAP32[$$01>>2]|0;
   $isascii = ($3>>>0)<(128);
   if (!($isascii)) {
    $$0$lcssa$ph = $$01;
    break;
   }
   $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $5 = (($4) + ($3<<1)|0);
   $6 = HEAP16[$5>>1]|0;
   $7 = $6 & $m;
   $8 = ($7<<16>>16)==(0);
   $2 = (($$01) + 4|0);
   if ($8) {
    $$0$lcssa$ph = $$01;
    break;
   }
   $1 = ($2|0)==($high|0);
   if ($1) {
    $$0$lcssa$ph = $high;
    break;
   } else {
    $$01 = $2;
   }
  }
  $$0$lcssa = $$0$lcssa$ph;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(630)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $low3 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low3))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$01 = $low;
  while(1) {
   $5 = HEAP32[$$01>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8;
   } else {
    $9 = $5;
   }
   HEAP32[$$01>>2] = $9;
   $10 = (($$01) + 4|0);
   $11 = ($10|0)==($high|0);
   if ($11) {
    break;
   } else {
    $$01 = $10;
   }
  }
  $scevgep5 = (($low) + ($4<<2)|0);
  $$0$lcssa = $scevgep5;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if ($isascii) {
  $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $1 = (($0) + ($c<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2;
 } else {
  $3 = $c;
 }
 return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(631)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $low3 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low3))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$01 = $low;
  while(1) {
   $5 = HEAP32[$$01>>2]|0;
   $isascii = ($5>>>0)<(128);
   if ($isascii) {
    $6 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = $8;
   } else {
    $9 = $5;
   }
   HEAP32[$$01>>2] = $9;
   $10 = (($$01) + 4|0);
   $11 = ($10|0)==($high|0);
   if ($11) {
    break;
   } else {
    $$01 = $10;
   }
  }
  $scevgep5 = (($low) + ($4<<2)|0);
  $$0$lcssa = $scevgep5;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   $2 = $1 << 24 >> 24;
   HEAP32[$$03>>2] = $2;
   $3 = (($$012) + 1|0);
   $4 = (($$03) + 4|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    break;
   } else {
    $$012 = $3;$$03 = $4;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $low5 = $low;
  $scevgep = (($high) + -4|0);
  $1 = $scevgep;
  $2 = (($1) - ($low5))|0;
  $3 = $2 >>> 2;
  $4 = (($3) + 1)|0;
  $$012 = $low;$$03 = $dest;
  while(1) {
   $5 = HEAP32[$$012>>2]|0;
   $isascii = ($5>>>0)<(128);
   $6 = $5&255;
   $$dfault = $isascii ? $6 : $dfault;
   HEAP8[$$03>>0] = $$dfault;
   $7 = (($$012) + 4|0);
   $8 = (($$03) + 1|0);
   $9 = ($7|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$012 = $7;$$03 = $8;
   }
  }
  $scevgep7 = (($low) + ($4<<2)|0);
  $$01$lcssa = $scevgep7;
 }
 return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6728 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c&255;
  $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = (($$02) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
  $$0$lcssa = $high;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if ($isascii1) {
  $0 = $c << 24 >> 24;
  $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
  $2 = (($1) + ($0<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3&255;
  $5 = $4;
 } else {
  $5 = $c;
 }
 return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
 } else {
  $$02 = $low;
  while(1) {
   $1 = HEAP8[$$02>>0]|0;
   $isascii1 = ($1<<24>>24)>(-1);
   if ($isascii1) {
    $2 = $1 << 24 >> 24;
    $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
    $4 = (($3) + ($2<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5&255;
    $7 = $6;
   } else {
    $7 = $1;
   }
   HEAP8[$$02>>0] = $7;
   $8 = (($$02) + 1|0);
   $9 = ($8|0)==($high|0);
   if ($9) {
    break;
   } else {
    $$02 = $8;
   }
  }
  $$0$lcssa = $high;
 }
 return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$013 = $low;$$04 = $dest;
  while(1) {
   $1 = HEAP8[$$013>>0]|0;
   $isascii2 = ($1<<24>>24)>(-1);
   $$dfault = $isascii2 ? $1 : $dfault;
   HEAP8[$$04>>0] = $$dfault;
   $2 = (($$013) + 1|0);
   $3 = (($$04) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    break;
   } else {
    $$013 = $2;$$04 = $3;
   }
  }
  $$01$lcssa = $high;
 }
 return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((6800 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(559)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0$ph = 0, $$0150 = 0, $$0150$lcssa108 = 0, $$0249 = 0, $$0249$lcssa115 = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$136 = 0, $$lcssa = 0, $$lcssa121 = 0, $$lcssa129 = 0, $$lcssa131 = 0, $$pre = 0, $$pre100 = 0, $$pre101 = 0, $$pre103 = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $108$phi = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$055 = 0, $fend$151 = 0, $fend$2$lcssa = 0, $fend$2$lcssa$ph = 0, $fend$242 = 0, $fend$3 = 0;
 var $n$038 = 0, $not$ = 0, $or$cond = 0, $or$cond48 = 0, $p$039 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $113 = $frm;
   label = 58;
  } else {
   $fend$055 = $frm;
   while(1) {
    $3 = HEAP32[$fend$055>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$055) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$055;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$055 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond48 = $0 | $5;
   if ($or$cond48) {
    $113 = $frm;
    label = 58;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0150 = $frm;$$0249 = $to;$fend$151 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$151;
     $19 = $$0150;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0249;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(632,($$0249|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$lcssa121 = $25;
      label = 12;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(574,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 11;
       break;
      }
     }
     if ((($26|0) == 0)) {
      $$0$ph = 1;
      label = 59;
      break;
     } else if ((($26|0) == -1)) {
      $$0150$lcssa108 = $$0150;$$0249$lcssa115 = $$0249;
      label = 17;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 56;
      break;
     }
     $71 = ($fend$151|0)==($frm_end|0);
     if ($71) {
      $$pre100 = HEAP32[$frm_nxt>>2]|0;
      $110 = $$pre100;$112 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(633,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       $$lcssa129 = $73;
       label = 38;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(574,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 37;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0$ph = 2;
       label = 59;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0$ph = 1;
       label = 59;
       break;
      }
      $94 = ($74|0)==(0);
      if (!($94)) {
       $97 = $90;$n$038 = $74;$p$039 = $tmp;
       while(1) {
        $95 = HEAP8[$p$039>>0]|0;
        $96 = (($97) + 1|0);
        HEAP32[$to_nxt>>2] = $96;
        HEAP8[$97>>0] = $95;
        $98 = (($n$038) + -1)|0;
        $99 = ($98|0)==(0);
        if ($99) {
         break;
        }
        $100 = (($p$039) + 1|0);
        $$pre103 = HEAP32[$to_nxt>>2]|0;
        $97 = $$pre103;$n$038 = $98;$p$039 = $100;
       }
      }
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      if ($103) {
       $fend$2$lcssa = $frm_end;
      } else {
       $108 = $101;$fend$242 = $102;
       while(1) {
        $106 = HEAP32[$fend$242>>2]|0;
        $107 = ($106|0)==(0);
        $105 = (($108) + 8|0);
        if ($107) {
         $fend$2$lcssa$ph = $fend$242;
         break;
        }
        $104 = ($105|0)==($frm_end|0);
        if ($104) {
         $fend$2$lcssa$ph = $frm_end;
         break;
        } else {
         $108$phi = $fend$242;$fend$242 = $105;$108 = $108$phi;
        }
       }
       $fend$2$lcssa = $fend$2$lcssa$ph;
      }
      $$pre101 = HEAP32[$to_nxt>>2]|0;
      $110 = $102;$112 = $$pre101;$fend$3 = $fend$2$lcssa;
     }
     $109 = ($110|0)==($frm_end|0);
     $111 = ($112|0)==($to_end|0);
     $or$cond = $109 | $111;
     if ($or$cond) {
      $$lcssa131 = $110;
      label = 57;
      break;
     } else {
      $$0150 = $110;$$0249 = $112;$fend$151 = $fend$3;
     }
    }
    if ((label|0) == 11) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($$lcssa121|0)==(0|0);
     if (!($36)) {
      __THREW__ = 0;
      (invoke_ii(574,($$lcssa121|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       $39 = ___cxa_find_matching_catch(0|0)|0;
       $40 = tempRet0;
       ___clang_call_terminate($39);
       // unreachable;
      }
     }
     ___resumeException($34|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     HEAP32[$to_nxt>>2] = $$0249$lcssa115;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0150$lcssa108|0)==($41|0);
     do {
      if ($42) {
       $$1$lcssa = $$0150$lcssa108;
      } else {
       $$136 = $$0150$lcssa108;$46 = $$0249$lcssa115;
       while(1) {
        $43 = HEAP32[$$136>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(633,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $$lcssa = $45;
         label = 23;
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(574,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 22;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa$ph = $$136;
         label = 29;
         break;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$136) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa$ph = $65;
         label = 29;
         break;
        } else {
         $$136 = $65;$46 = $64;
        }
       }
       if ((label|0) == 22) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 23) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($$lcssa|0)==(0|0);
        if (!($57)) {
         __THREW__ = 0;
         (invoke_ii(574,($$lcssa|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          $60 = ___cxa_find_matching_catch(0|0)|0;
          $61 = tempRet0;
          ___clang_call_terminate($60);
          // unreachable;
         }
        }
        ___resumeException($55|0);
        // unreachable;
       }
       else if ((label|0) == 29) {
        $$1$lcssa = $$1$lcssa$ph;
        break;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     break;
    }
    else if ((label|0) == 37) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($$lcssa129|0)==(0|0);
     if (!($84)) {
      __THREW__ = 0;
      (invoke_ii(574,($$lcssa129|0))|0);
      $85 = __THREW__; __THREW__ = 0;
      $86 = $85&1;
      if ($86) {
       $87 = ___cxa_find_matching_catch(0|0)|0;
       $88 = tempRet0;
       ___clang_call_terminate($87);
       // unreachable;
      }
     }
     ___resumeException($82|0);
     // unreachable;
    }
    else if ((label|0) == 56) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $113 = $$pre;
     label = 58;
     break;
    }
    else if ((label|0) == 57) {
     $113 = $$lcssa131;
     label = 58;
     break;
    }
    else if ((label|0) == 59) {
     $$0 = $$0$ph;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $not$ = ($113|0)!=($frm_end|0);
  $114 = $not$&1;
  $$0 = $114;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0157 = 0, $$0157$lcssa128 = 0, $$0256 = 0, $$0256$lcssa135 = 0, $$1$lcssa = 0, $$148 = 0, $$148$lcssa120 = 0, $$148$lcssa121 = 0, $$2 = 0, $$2$lcssa = 0, $$lcssa = 0, $$lcssa143 = 0, $$lcssa149 = 0, $$lcssa157 = 0, $$lcssa159 = 0, $$pre = 0, $$pre116 = 0, $$pre117 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $100$phi = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$062 = 0, $fend$158 = 0, $fend$2$lcssa = 0, $fend$2$lcssa$ph = 0, $fend$249 = 0, $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond55 = 0, $save_state = 0, $storemerge47 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $105 = $frm;
   label = 55;
  } else {
   $fend$062 = $frm;
   while(1) {
    $3 = HEAP8[$fend$062>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$062) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$062;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$062 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond55 = $0 | $5;
   if ($or$cond55) {
    $105 = $frm;
    label = 55;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0157 = $frm;$$0256 = $to;$fend$158 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$158;
     $19 = $$0157;
     $20 = (($18) - ($19))|0;
     $21 = $$0256;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(634,($$0256|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      $$lcssa149 = $25;
      label = 12;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(574,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 11;
       break;
      }
     }
     if ((($26|0) == -1)) {
      $$0157$lcssa128 = $$0157;$$0256$lcssa135 = $$0256;$$lcssa143 = $18;
      label = 17;
      break;
     } else if ((($26|0) == 0)) {
      label = 56;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 53;
      break;
     }
     $72 = ($fend$158|0)==($frm_end|0);
     $$pre116 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $102 = $$pre116;$104 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(635,($70|0),($$pre116|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       $$lcssa157 = $74;
       label = 41;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(574,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 40;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       label = 56;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      if ($95) {
       $fend$2$lcssa = $frm_end;
      } else {
       $100 = $93;$fend$249 = $94;
       while(1) {
        $98 = HEAP8[$fend$249>>0]|0;
        $99 = ($98<<24>>24)==(0);
        $97 = (($100) + 2|0);
        if ($99) {
         $fend$2$lcssa$ph = $fend$249;
         break;
        }
        $96 = ($97|0)==($frm_end|0);
        if ($96) {
         $fend$2$lcssa$ph = $frm_end;
         break;
        } else {
         $100$phi = $fend$249;$fend$249 = $97;$100 = $100$phi;
        }
       }
       $fend$2$lcssa = $fend$2$lcssa$ph;
      }
      $$pre117 = HEAP32[$to_nxt>>2]|0;
      $102 = $94;$104 = $$pre117;$fend$3 = $fend$2$lcssa;
     }
     $101 = ($102|0)==($frm_end|0);
     $103 = ($104|0)==($to_end|0);
     $or$cond = $101 | $103;
     if ($or$cond) {
      $$lcssa159 = $102;
      label = 54;
      break;
     } else {
      $$0157 = $102;$$0256 = $104;$fend$158 = $fend$3;
     }
    }
    if ((label|0) == 11) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 12) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($$lcssa149|0)==(0|0);
     if (!($36)) {
      __THREW__ = 0;
      (invoke_ii(574,($$lcssa149|0))|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       $39 = ___cxa_find_matching_catch(0|0)|0;
       $40 = tempRet0;
       ___clang_call_terminate($39);
       // unreachable;
      }
     }
     ___resumeException($34|0);
     // unreachable;
    }
    else if ((label|0) == 17) {
     HEAP32[$to_nxt>>2] = $$0256$lcssa135;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0157$lcssa128|0)==($41|0);
     do {
      if ($42) {
       $$1$lcssa = $$0157$lcssa128;
      } else {
       $$148 = $$0157$lcssa128;$storemerge47 = $$0256$lcssa135;
       while(1) {
        $43 = $$148;
        $44 = (($$lcssa143) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(635,($storemerge47|0),($$148|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         $$lcssa = $46;
         label = 23;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(574,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 22;
          break;
         }
        }
        if ((($47|0) == -1)) {
         $$148$lcssa120 = $$148;
         label = 29;
         break;
        } else if ((($47|0) == -2)) {
         $$148$lcssa121 = $$148;
         label = 30;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$148) + 1|0);
         $$2 = $62;
        } else {
         $63 = (($$148) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$2$lcssa = $$2;
         label = 33;
         break;
        } else {
         $$148 = $$2;$storemerge47 = $65;
        }
       }
       if ((label|0) == 22) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 23) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($$lcssa|0)==(0|0);
        if (!($57)) {
         __THREW__ = 0;
         (invoke_ii(574,($$lcssa|0))|0);
         $58 = __THREW__; __THREW__ = 0;
         $59 = $58&1;
         if ($59) {
          $60 = ___cxa_find_matching_catch(0|0)|0;
          $61 = tempRet0;
          ___clang_call_terminate($60);
          // unreachable;
         }
        }
        ___resumeException($55|0);
        // unreachable;
       }
       else if ((label|0) == 29) {
        HEAP32[$frm_nxt>>2] = $$148$lcssa120;
        $$0 = 2;
        break L1;
       }
       else if ((label|0) == 30) {
        HEAP32[$frm_nxt>>2] = $$148$lcssa121;
        $$0 = 1;
        break L1;
       }
       else if ((label|0) == 33) {
        $$1$lcssa = $$2$lcssa;
        break;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     break;
    }
    else if ((label|0) == 40) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 41) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($$lcssa157|0)==(0|0);
     if (!($85)) {
      __THREW__ = 0;
      (invoke_ii(574,($$lcssa157|0))|0);
      $86 = __THREW__; __THREW__ = 0;
      $87 = $86&1;
      if ($87) {
       $88 = ___cxa_find_matching_catch(0|0)|0;
       $89 = tempRet0;
       ___clang_call_terminate($88);
       // unreachable;
      }
     }
     ___resumeException($83|0);
     // unreachable;
    }
    else if ((label|0) == 53) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $105 = $$pre;
     label = 55;
     break;
    }
    else if ((label|0) == 54) {
     $105 = $$lcssa159;
     label = 55;
     break;
    }
    else if ((label|0) == 56) {
     $$0 = 2;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 55) {
  $not$ = ($105|0)!=($frm_end|0);
  $106 = $not$&1;
  $$0 = $106;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(633,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if (!($13)) {
   __THREW__ = 0;
   (invoke_ii(574,($2|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if ($15) {
    $16 = ___cxa_find_matching_catch(0|0)|0;
    $17 = tempRet0;
    ___clang_call_terminate($16);
    // unreachable;
   }
  }
  ___resumeException($11|0);
  // unreachable;
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(574,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
 } else {
  $18 = (($3) + -1)|0;
  $19 = HEAP32[$to_nxt>>2]|0;
  $20 = $to_end;
  $21 = $19;
  $22 = (($20) - ($21))|0;
  $23 = ($18>>>0)>($22>>>0);
  if ($23) {
   $$0 = 1;
  } else {
   $24 = ($18|0)==(0);
   if ($24) {
    $$0 = 0;
   } else {
    $27 = $19;$n$02 = $18;$p$03 = $tmp;
    while(1) {
     $25 = HEAP8[$p$03>>0]|0;
     $26 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $26;
     HEAP8[$27>>0] = $25;
     $28 = (($n$02) + -1)|0;
     $29 = ($28|0)==(0);
     if ($29) {
      break;
     }
     $30 = (($p$03) + 1|0);
     $$pre = HEAP32[$to_nxt>>2]|0;
     $27 = $$pre;$n$02 = $28;$p$03 = $30;
    }
    $$0 = 0;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(574,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   label = 16;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iiii(636,(0|0),(0|0),4)|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   if ($7) {
    $13 = ___cxa_find_matching_catch(0|0)|0;
    $14 = tempRet0;
    $15 = ($2|0)==(0|0);
    if ($15) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    __THREW__ = 0;
    (invoke_ii(574,($2|0))|0);
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     $eh$lpad$body$indexZ2D = $13;
     break;
    }
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   }
   $8 = ($2|0)==(0|0);
   if (!($8)) {
    __THREW__ = 0;
    (invoke_ii(574,($2|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $11 = ___cxa_find_matching_catch(0|0)|0;
     $12 = tempRet0;
     ___clang_call_terminate($11);
     // unreachable;
    }
   }
   $20 = ($5|0)==(0);
   if ($20) {
    $21 = HEAP32[$0>>2]|0;
    $22 = ($21|0)==(0|0);
    if ($22) {
     $$0 = 1;
    } else {
     __THREW__ = 0;
     $23 = (invoke_ii(574,($21|0))|0);
     $24 = __THREW__; __THREW__ = 0;
     $25 = $24&1;
     if ($25) {
      label = 16;
      break;
     }
     $26 = ($23|0)==(0|0);
     if ($26) {
      $$0 = 0;
     } else {
      __THREW__ = 0;
      (invoke_ii(574,($23|0))|0);
      $27 = __THREW__; __THREW__ = 0;
      $28 = $27&1;
      if ($28) {
       $29 = ___cxa_find_matching_catch(0|0)|0;
       $30 = tempRet0;
       ___clang_call_terminate($29);
       // unreachable;
      } else {
       $$0 = 0;
      }
     }
    }
   } else {
    $$0 = -1;
   }
   return ($$0|0);
  }
 } while(0);
 if ((label|0) == 16) {
  $31 = ___cxa_find_matching_catch(0|0)|0;
  $32 = tempRet0;
  $eh$lpad$body$indexZ2D = $31;
 }
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$lcssa = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$0$lcssa$ph = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 do {
  if ($or$cond5) {
   $nbytes$0$lcssa = 0;
  } else {
   $2 = $frm_end;
   $3 = (($this) + 8|0);
   $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
   while(1) {
    $4 = $$016;
    $5 = (($2) - ($4))|0;
    $6 = HEAP32[$3>>2]|0;
    $7 = (_uselocale(($6|0))|0);
    __THREW__ = 0;
    $8 = (invoke_iiii(637,($$016|0),($5|0),($st|0))|0);
    $9 = __THREW__; __THREW__ = 0;
    $10 = $9&1;
    if ($10) {
     $$lcssa = $7;
     label = 7;
     break;
    }
    $11 = ($7|0)==(0|0);
    if (!($11)) {
     __THREW__ = 0;
     (invoke_ii(574,($7|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 6;
      break;
     }
    }
    if ((($8|0) == -2) | (($8|0) == -1)) {
     $nbytes$0$lcssa$ph = $nbytes$07;
     label = 15;
     break;
    } else if ((($8|0) == 0)) {
     $23 = (($$016) + 1|0);
     $$1 = $23;$$pn = 1;
    } else {
     $24 = (($$016) + ($8)|0);
     $$1 = $24;$$pn = $8;
    }
    $nbytes$1 = (($$pn) + ($nbytes$07))|0;
    $25 = (($nwchar_t$08) + 1)|0;
    $26 = ($25>>>0)>=($mx>>>0);
    $27 = ($$1|0)==($frm_end|0);
    $or$cond = $26 | $27;
    if ($or$cond) {
     $nbytes$0$lcssa$ph = $nbytes$1;
     label = 15;
     break;
    } else {
     $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
    }
   }
   if ((label|0) == 6) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
   else if ((label|0) == 7) {
    $16 = ___cxa_find_matching_catch()|0;
    $17 = tempRet0;
    $18 = ($$lcssa|0)==(0|0);
    if (!($18)) {
     __THREW__ = 0;
     (invoke_ii(574,($$lcssa|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if ($20) {
      $21 = ___cxa_find_matching_catch(0|0)|0;
      $22 = tempRet0;
      ___clang_call_terminate($21);
      // unreachable;
     }
    }
    ___resumeException($16|0);
    // unreachable;
   }
   else if ((label|0) == 15) {
    $nbytes$0$lcssa = $nbytes$0$lcssa$ph;
    break;
   }
  }
 } while(0);
 return ($nbytes$0$lcssa|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
 } else {
  __THREW__ = 0;
  $3 = (invoke_ii(574,($1|0))|0);
  $4 = __THREW__; __THREW__ = 0;
  $5 = $4&1;
  if ($5) {
   $12 = ___cxa_find_matching_catch(0|0)|0;
   $13 = tempRet0;
   ___clang_call_terminate($12);
   // unreachable;
  }
  $6 = ($3|0)==(0|0);
  if ($6) {
   $11 = 4;
  } else {
   __THREW__ = 0;
   (invoke_ii(574,($3|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch(0|0)|0;
    $10 = tempRet0;
    ___clang_call_terminate($9);
    // unreachable;
   } else {
    $11 = 4;
   }
  }
 }
 return ($11|0);
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6880 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6920 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,6960,4);
 return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(6968)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,6968,$0);
 return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,6992,5);
 return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(7000)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,7000,$0);
 return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 64)) {
  $$0 = 8;
 } else if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else {
  $$0 = 10;
 }
 return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7032>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7032|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[14232>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((14232|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((14064|0),0,168)|0;
      (___cxa_atexit((638|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((14232|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(639,(14064|0),(14240|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(639,(((14064 + 12|0))|0),(14248|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(639,(((14064 + 24|0))|0),(14256|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(639,(((14064 + 36|0))|0),(14264|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(639,(((14064 + 48|0))|0),(14280|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(639,(((14064 + 60|0))|0),(14296|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(639,(((14064 + 72|0))|0),(14304|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(639,(((14064 + 84|0))|0),(14320|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(639,(((14064 + 96|0))|0),(14328|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(639,(((14064 + 108|0))|0),(14336|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(639,(((14064 + 120|0))|0),(14344|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(639,(((14064 + 132|0))|0),(14352|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(639,(((14064 + 144|0))|0),(14360|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(639,(((14064 + 156|0))|0),(14368|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  HEAP32[7024>>2] = 14064;
                  ___cxa_guard_release((7032|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    ___cxa_guard_abort((7032|0));
    ___resumeException($37|0);
    // unreachable;
   }
  }
 } while(0);
 $36 = HEAP32[7024>>2]|0;
 return ($36|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7048>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7048|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[13696>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((13696|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((13528|0),0,168)|0;
      (___cxa_atexit((640|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((13696|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(641,(13528|0),(13704|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(641,(((13528 + 12|0))|0),(13736|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      __THREW__ = 0;
      (invoke_iii(641,(((13528 + 24|0))|0),(13768|0))|0);
      $12 = __THREW__; __THREW__ = 0;
      $13 = $12&1;
      if (!($13)) {
       __THREW__ = 0;
       (invoke_iii(641,(((13528 + 36|0))|0),(13800|0))|0);
       $14 = __THREW__; __THREW__ = 0;
       $15 = $14&1;
       if (!($15)) {
        __THREW__ = 0;
        (invoke_iii(641,(((13528 + 48|0))|0),(13840|0))|0);
        $16 = __THREW__; __THREW__ = 0;
        $17 = $16&1;
        if (!($17)) {
         __THREW__ = 0;
         (invoke_iii(641,(((13528 + 60|0))|0),(13880|0))|0);
         $18 = __THREW__; __THREW__ = 0;
         $19 = $18&1;
         if (!($19)) {
          __THREW__ = 0;
          (invoke_iii(641,(((13528 + 72|0))|0),(13912|0))|0);
          $20 = __THREW__; __THREW__ = 0;
          $21 = $20&1;
          if (!($21)) {
           __THREW__ = 0;
           (invoke_iii(641,(((13528 + 84|0))|0),(13952|0))|0);
           $22 = __THREW__; __THREW__ = 0;
           $23 = $22&1;
           if (!($23)) {
            __THREW__ = 0;
            (invoke_iii(641,(((13528 + 96|0))|0),(13968|0))|0);
            $24 = __THREW__; __THREW__ = 0;
            $25 = $24&1;
            if (!($25)) {
             __THREW__ = 0;
             (invoke_iii(641,(((13528 + 108|0))|0),(13984|0))|0);
             $26 = __THREW__; __THREW__ = 0;
             $27 = $26&1;
             if (!($27)) {
              __THREW__ = 0;
              (invoke_iii(641,(((13528 + 120|0))|0),(14000|0))|0);
              $28 = __THREW__; __THREW__ = 0;
              $29 = $28&1;
              if (!($29)) {
               __THREW__ = 0;
               (invoke_iii(641,(((13528 + 132|0))|0),(14016|0))|0);
               $30 = __THREW__; __THREW__ = 0;
               $31 = $30&1;
               if (!($31)) {
                __THREW__ = 0;
                (invoke_iii(641,(((13528 + 144|0))|0),(14032|0))|0);
                $32 = __THREW__; __THREW__ = 0;
                $33 = $32&1;
                if (!($33)) {
                 __THREW__ = 0;
                 (invoke_iii(641,(((13528 + 156|0))|0),(14048|0))|0);
                 $34 = __THREW__; __THREW__ = 0;
                 $35 = $34&1;
                 if (!($35)) {
                  HEAP32[7040>>2] = 13528;
                  ___cxa_guard_release((7048|0));
                  break;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    $37 = ___cxa_find_matching_catch()|0;
    $38 = tempRet0;
    ___cxa_guard_abort((7048|0));
    ___resumeException($37|0);
    // unreachable;
   }
  }
 } while(0);
 $36 = HEAP32[7040>>2]|0;
 return ($36|0);
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7064>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7064|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[13304>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((13304|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((13016|0),0,288)|0;
      (___cxa_atexit((642|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((13304|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(639,(13016|0),(13312|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    do {
     if (!($9)) {
      __THREW__ = 0;
      (invoke_iii(639,(((13016 + 12|0))|0),(13320|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_iii(639,(((13016 + 24|0))|0),(13336|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        __THREW__ = 0;
        (invoke_iii(639,(((13016 + 36|0))|0),(13344|0))|0);
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if (!($15)) {
         __THREW__ = 0;
         (invoke_iii(639,(((13016 + 48|0))|0),(13352|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if (!($17)) {
          __THREW__ = 0;
          (invoke_iii(639,(((13016 + 60|0))|0),(13360|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if (!($19)) {
           __THREW__ = 0;
           (invoke_iii(639,(((13016 + 72|0))|0),(13368|0))|0);
           $20 = __THREW__; __THREW__ = 0;
           $21 = $20&1;
           if (!($21)) {
            __THREW__ = 0;
            (invoke_iii(639,(((13016 + 84|0))|0),(13376|0))|0);
            $22 = __THREW__; __THREW__ = 0;
            $23 = $22&1;
            if (!($23)) {
             __THREW__ = 0;
             (invoke_iii(639,(((13016 + 96|0))|0),(13384|0))|0);
             $24 = __THREW__; __THREW__ = 0;
             $25 = $24&1;
             if (!($25)) {
              __THREW__ = 0;
              (invoke_iii(639,(((13016 + 108|0))|0),(13400|0))|0);
              $26 = __THREW__; __THREW__ = 0;
              $27 = $26&1;
              if (!($27)) {
               __THREW__ = 0;
               (invoke_iii(639,(((13016 + 120|0))|0),(13408|0))|0);
               $28 = __THREW__; __THREW__ = 0;
               $29 = $28&1;
               if (!($29)) {
                __THREW__ = 0;
                (invoke_iii(639,(((13016 + 132|0))|0),(13424|0))|0);
                $30 = __THREW__; __THREW__ = 0;
                $31 = $30&1;
                if (!($31)) {
                 __THREW__ = 0;
                 (invoke_iii(639,(((13016 + 144|0))|0),(13440|0))|0);
                 $32 = __THREW__; __THREW__ = 0;
                 $33 = $32&1;
                 if (!($33)) {
                  __THREW__ = 0;
                  (invoke_iii(639,(((13016 + 156|0))|0),(13448|0))|0);
                  $34 = __THREW__; __THREW__ = 0;
                  $35 = $34&1;
                  if (!($35)) {
                   __THREW__ = 0;
                   (invoke_iii(639,(((13016 + 168|0))|0),(13456|0))|0);
                   $36 = __THREW__; __THREW__ = 0;
                   $37 = $36&1;
                   if (!($37)) {
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 180|0))|0),(13464|0))|0);
                    $38 = __THREW__; __THREW__ = 0;
                    $39 = $38&1;
                    if ($39) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 192|0))|0),(13352|0))|0);
                    $40 = __THREW__; __THREW__ = 0;
                    $41 = $40&1;
                    if ($41) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 204|0))|0),(13472|0))|0);
                    $42 = __THREW__; __THREW__ = 0;
                    $43 = $42&1;
                    if ($43) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 216|0))|0),(13480|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 228|0))|0),(13488|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 240|0))|0),(13496|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 252|0))|0),(13504|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 264|0))|0),(13512|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(639,(((13016 + 276|0))|0),(13520|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    HEAP32[7056>>2] = 13016;
                    ___cxa_guard_release((7064|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    ___cxa_guard_abort((7064|0));
    ___resumeException($57|0);
    // unreachable;
   }
  }
 } while(0);
 $56 = HEAP32[7056>>2]|0;
 return ($56|0);
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7080>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7080|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[12464>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((12464|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((12176|0),0,288)|0;
      (___cxa_atexit((643|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((12464|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(641,(12176|0),(12472|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    do {
     if (!($9)) {
      __THREW__ = 0;
      (invoke_iii(641,(((12176 + 12|0))|0),(12504|0))|0);
      $10 = __THREW__; __THREW__ = 0;
      $11 = $10&1;
      if (!($11)) {
       __THREW__ = 0;
       (invoke_iii(641,(((12176 + 24|0))|0),(12544|0))|0);
       $12 = __THREW__; __THREW__ = 0;
       $13 = $12&1;
       if (!($13)) {
        __THREW__ = 0;
        (invoke_iii(641,(((12176 + 36|0))|0),(12568|0))|0);
        $14 = __THREW__; __THREW__ = 0;
        $15 = $14&1;
        if (!($15)) {
         __THREW__ = 0;
         (invoke_iii(641,(((12176 + 48|0))|0),(12592|0))|0);
         $16 = __THREW__; __THREW__ = 0;
         $17 = $16&1;
         if (!($17)) {
          __THREW__ = 0;
          (invoke_iii(641,(((12176 + 60|0))|0),(12608|0))|0);
          $18 = __THREW__; __THREW__ = 0;
          $19 = $18&1;
          if (!($19)) {
           __THREW__ = 0;
           (invoke_iii(641,(((12176 + 72|0))|0),(12632|0))|0);
           $20 = __THREW__; __THREW__ = 0;
           $21 = $20&1;
           if (!($21)) {
            __THREW__ = 0;
            (invoke_iii(641,(((12176 + 84|0))|0),(12656|0))|0);
            $22 = __THREW__; __THREW__ = 0;
            $23 = $22&1;
            if (!($23)) {
             __THREW__ = 0;
             (invoke_iii(641,(((12176 + 96|0))|0),(12688|0))|0);
             $24 = __THREW__; __THREW__ = 0;
             $25 = $24&1;
             if (!($25)) {
              __THREW__ = 0;
              (invoke_iii(641,(((12176 + 108|0))|0),(12728|0))|0);
              $26 = __THREW__; __THREW__ = 0;
              $27 = $26&1;
              if (!($27)) {
               __THREW__ = 0;
               (invoke_iii(641,(((12176 + 120|0))|0),(12760|0))|0);
               $28 = __THREW__; __THREW__ = 0;
               $29 = $28&1;
               if (!($29)) {
                __THREW__ = 0;
                (invoke_iii(641,(((12176 + 132|0))|0),(12800|0))|0);
                $30 = __THREW__; __THREW__ = 0;
                $31 = $30&1;
                if (!($31)) {
                 __THREW__ = 0;
                 (invoke_iii(641,(((12176 + 144|0))|0),(12840|0))|0);
                 $32 = __THREW__; __THREW__ = 0;
                 $33 = $32&1;
                 if (!($33)) {
                  __THREW__ = 0;
                  (invoke_iii(641,(((12176 + 156|0))|0),(12856|0))|0);
                  $34 = __THREW__; __THREW__ = 0;
                  $35 = $34&1;
                  if (!($35)) {
                   __THREW__ = 0;
                   (invoke_iii(641,(((12176 + 168|0))|0),(12872|0))|0);
                   $36 = __THREW__; __THREW__ = 0;
                   $37 = $36&1;
                   if (!($37)) {
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 180|0))|0),(12888|0))|0);
                    $38 = __THREW__; __THREW__ = 0;
                    $39 = $38&1;
                    if ($39) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 192|0))|0),(12592|0))|0);
                    $40 = __THREW__; __THREW__ = 0;
                    $41 = $40&1;
                    if ($41) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 204|0))|0),(12904|0))|0);
                    $42 = __THREW__; __THREW__ = 0;
                    $43 = $42&1;
                    if ($43) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 216|0))|0),(12920|0))|0);
                    $44 = __THREW__; __THREW__ = 0;
                    $45 = $44&1;
                    if ($45) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 228|0))|0),(12936|0))|0);
                    $46 = __THREW__; __THREW__ = 0;
                    $47 = $46&1;
                    if ($47) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 240|0))|0),(12952|0))|0);
                    $48 = __THREW__; __THREW__ = 0;
                    $49 = $48&1;
                    if ($49) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 252|0))|0),(12968|0))|0);
                    $50 = __THREW__; __THREW__ = 0;
                    $51 = $50&1;
                    if ($51) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 264|0))|0),(12984|0))|0);
                    $52 = __THREW__; __THREW__ = 0;
                    $53 = $52&1;
                    if ($53) {
                     break;
                    }
                    __THREW__ = 0;
                    (invoke_iii(641,(((12176 + 276|0))|0),(13000|0))|0);
                    $54 = __THREW__; __THREW__ = 0;
                    $55 = $54&1;
                    if ($55) {
                     break;
                    }
                    HEAP32[7072>>2] = 12176;
                    ___cxa_guard_release((7080|0));
                    break L1;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    } while(0);
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    ___cxa_guard_abort((7080|0));
    ___resumeException($57|0);
    // unreachable;
   }
  }
 } while(0);
 $56 = HEAP32[7072>>2]|0;
 return ($56|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7096>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7096|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[12152>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((12152|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((11864|0),0,288)|0;
      (___cxa_atexit((644|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((12152|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(639,(11864|0),(12160|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(639,(((11864 + 12|0))|0),(12168|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[7088>>2] = 11864;
      ___cxa_guard_release((7096|0));
      break;
     }
    }
    $13 = ___cxa_find_matching_catch()|0;
    $14 = tempRet0;
    ___cxa_guard_abort((7096|0));
    ___resumeException($13|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = HEAP32[7088>>2]|0;
 return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7112>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7112|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    $4 = HEAP8[11824>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $6 = (___cxa_guard_acquire((11824|0))|0);
     $7 = ($6|0)==(0);
     if (!($7)) {
      _memset((11536|0),0,288)|0;
      (___cxa_atexit((645|0),(0|0),(___dso_handle|0))|0);
      ___cxa_guard_release((11824|0));
     }
    }
    __THREW__ = 0;
    (invoke_iii(641,(11536|0),(11832|0))|0);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     __THREW__ = 0;
     (invoke_iii(641,(((11536 + 12|0))|0),(11848|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      HEAP32[7104>>2] = 11536;
      ___cxa_guard_release((7112|0));
      break;
     }
    }
    $13 = ___cxa_find_matching_catch()|0;
    $14 = tempRet0;
    ___cxa_guard_abort((7112|0));
    ___resumeException($13|0);
    // unreachable;
   }
  }
 } while(0);
 $12 = HEAP32[7104>>2]|0;
 return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7136>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7136|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(411,(7120|0),(7144|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((7136|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((428|0),(7120|0),(___dso_handle|0))|0);
     ___cxa_guard_release((7136|0));
     break;
    }
   }
  }
 } while(0);
 return (7120|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7176>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7176|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(646,(7184|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(647,(7160|0),(7184|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((648|0),(7160|0),(___dso_handle|0))|0);
      ___cxa_guard_release((7176|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((7176|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (7160|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7240>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7240|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(411,(7224|0),(7248|0),8);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((7240|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((428|0),(7224|0),(___dso_handle|0))|0);
     ___cxa_guard_release((7240|0));
     break;
    }
   }
  }
 } while(0);
 return (7224|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7280>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7280|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(646,(7288|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(647,(7264|0),(7288|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((648|0),(7264|0),(___dso_handle|0))|0);
      ___cxa_guard_release((7280|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((7280|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (7264|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7344>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7344|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(411,(7328|0),(7352|0),20);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((7344|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((428|0),(7328|0),(___dso_handle|0))|0);
     ___cxa_guard_release((7344|0));
     break;
    }
   }
  }
 } while(0);
 return (7328|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7392>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7392|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(646,(7400|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(647,(7376|0),(7400|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((648|0),(7376|0),(___dso_handle|0))|0);
      ___cxa_guard_release((7392|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((7392|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (7376|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7504>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7504|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    invoke_viii(411,(7488|0),(7512|0),11);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $6 = ___cxa_find_matching_catch()|0;
     $7 = tempRet0;
     ___cxa_guard_abort((7504|0));
     ___resumeException($6|0);
     // unreachable;
    } else {
     (___cxa_atexit((428|0),(7488|0),(___dso_handle|0))|0);
     ___cxa_guard_release((7504|0));
     break;
    }
   }
  }
 } while(0);
 return (7488|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[7544>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((7544|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_ii(646,(7552|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if (!($6)) {
     __THREW__ = 0;
     invoke_viii(647,(7528|0),(7552|0),($4|0));
     $7 = __THREW__; __THREW__ = 0;
     $8 = $7&1;
     if (!($8)) {
      (___cxa_atexit((648|0),(7528|0),(___dso_handle|0))|0);
      ___cxa_guard_release((7544|0));
      break;
     }
    }
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    ___cxa_guard_abort((7544|0));
    ___resumeException($9|0);
    // unreachable;
   }
  }
 } while(0);
 return (7528|0);
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((6800 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(559)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if (!($4)) {
   $5 = ($1|0)==($2|0);
   if (!($5)) {
    $6 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi(572,($6|0));
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     break;
    }
   }
   return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __GLOBAL__sub_I_iostream_cpp() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((649|0),(2720|0),(___dso_handle|0))|0);
 return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((3448 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(84,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((3336 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(422,($0|0),(6784|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((3192 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(62,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((3080 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(422,($0|0),(6792|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
 } else {
  $15 = $__last;
  $16 = (($15) - ($0))|0;
  $$02 = $__first;$__p$01 = $__p$0$ph;
  while(1) {
   $17 = HEAP8[$$02>>0]|0;
   HEAP8[$__p$01>>0] = $17;
   $18 = (($$02) + 1|0);
   $19 = (($__p$01) + 1|0);
   $20 = ($18|0)==($__last|0);
   if ($20) {
    break;
   } else {
    $$02 = $18;$__p$01 = $19;
   }
  }
  $scevgep4 = (($__p$0$ph) + ($16)|0);
  $__p$0$lcssa = $scevgep4;
 }
 HEAP8[$__p$0$lcssa>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
 } else {
  $scevgep = (($__last) + -4|0);
  $17 = $scevgep;
  $18 = (($17) - ($0))|0;
  $19 = $18 >>> 2;
  $20 = (($19) + 1)|0;
  $$02 = $__first;$__p$01 = $__p$0$ph;
  while(1) {
   $21 = HEAP32[$$02>>2]|0;
   HEAP32[$__p$01>>2] = $21;
   $22 = (($$02) + 4|0);
   $23 = (($__p$01) + 4|0);
   $24 = ($22|0)==($__last|0);
   if ($24) {
    break;
   } else {
    $$02 = $22;$__p$01 = $23;
   }
  }
  $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$030 = 0, $$041 = 0, $$041$lcssa = 0, $$index = 0, $$index15 = 0, $$lcssa = 0, $$lcssa89 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $$pre$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off046 = 0, $__consume$1$off0 = 0, $__consume$1$off0$lcssa = 0, $__indx$0 = 0, $__indx$0$lcssa86 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$047 = 0, $__ky2$056 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$1$lcssa = 0, $__n_does_match$2$ph = 0;
 var $__n_does_match$2$ph$be = 0, $__n_does_match$343 = 0, $__n_does_match$4 = 0, $__n_does_match$4$lcssa = 0, $__n_does_match$554 = 0, $__n_does_match$6 = 0, $__n_does_match$6$lcssa = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$1$lcssa = 0, $__n_might_match$2$ph = 0, $__n_might_match$342 = 0, $__n_might_match$4 = 0, $__n_might_match$4$lcssa = 0, $__st$061 = 0, $__st$144 = 0, $__st$255 = 0, $__st$340 = 0, $__statbuf = 0;
 var $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $lpad$phi83$index = 0, $lpad$phi83$index2 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(565);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index15 = $10;
   } else {
    $20 = 0;$__status$0 = 0;
    label = 13;
   }
  } else {
   $20 = $5;$__status$0 = $5;
   label = 13;
  }
 } else {
  $20 = 0;$__status$0 = $__statbuf;
  label = 13;
 }
 if ((label|0) == 13) {
  $21 = ($__kb|0)==($__ke|0);
  if ($21) {
   $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
  } else {
   $__ky$062 = $__kb;$__n_does_match$060 = 0;$__n_might_match$059 = $3;$__st$061 = $__status$0;
   while(1) {
    $22 = HEAP8[$__ky$062>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $30 = $28;
    } else {
     $25 = (($__ky$062) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $30 = $26;
    }
    $29 = ($30|0)==(0);
    if ($29) {
     HEAP8[$__st$061>>0] = 2;
     $31 = (($__n_might_match$059) + -1)|0;
     $32 = (($__n_does_match$060) + 1)|0;
     $__n_does_match$1 = $32;$__n_might_match$1 = $31;
    } else {
     HEAP8[$__st$061>>0] = 1;
     $__n_does_match$1 = $__n_does_match$060;$__n_might_match$1 = $__n_might_match$059;
    }
    $33 = (($__ky$062) + 12|0);
    $34 = (($__st$061) + 1|0);
    $35 = ($33|0)==($__ke|0);
    if ($35) {
     $__n_does_match$1$lcssa = $__n_does_match$1;$__n_might_match$1$lcssa = $__n_might_match$1;
     break;
    } else {
     $__ky$062 = $33;$__n_does_match$060 = $__n_does_match$1;$__n_might_match$059 = $__n_might_match$1;$__st$061 = $34;
    }
   }
   $__n_does_match$0$lcssa = $__n_does_match$1$lcssa;$__n_might_match$0$lcssa = $__n_might_match$1$lcssa;
  }
  $__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
  L21: while(1) {
   $__indx$0 = $__indx$0$ph;
   while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $51 = 0;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = (($43) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 6;
        break L21;
       }
       $49 = ($46|0)==(-1);
       if ($49) {
        HEAP32[$__b>>2] = 0;
        $51 = 0;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $51 = $$pre$i$i$i;
        break;
       }
      } else {
       $51 = $36;
      }
     }
    } while(0);
    $50 = ($51|0)==(0|0);
    $52 = HEAP32[$__e>>2]|0;
    $53 = ($52|0)==(0|0);
    if ($53) {
     $$pre$i2$i$i16 = 0;
    } else {
     $54 = (($52) + 12|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($52) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($55|0)==($57|0);
     if ($58) {
      $59 = HEAP32[$52>>2]|0;
      $60 = (($59) + 36|0);
      $61 = HEAP32[$60>>2]|0;
      __THREW__ = 0;
      $62 = (invoke_ii($61|0,($52|0))|0);
      $63 = __THREW__; __THREW__ = 0;
      $64 = $63&1;
      if ($64) {
       label = 6;
       break L21;
      }
      $65 = ($62|0)==(-1);
      if ($65) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i16 = 0;
      } else {
       $$pre$i2$i$i16 = $52;
      }
     } else {
      $$pre$i2$i$i16 = $52;
     }
    }
    $66 = ($$pre$i2$i$i16|0)==(0|0);
    $tmp$i$i = $50 ^ $66;
    $67 = ($__n_might_match$2$ph|0)!=(0);
    $$ = $tmp$i$i & $67;
    $68 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $66;$$lcssa89 = $68;$$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
     label = 73;
     break L21;
    }
    $69 = (($68) + 12|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($68) + 16|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($70|0)==($72|0);
    if ($73) {
     $74 = HEAP32[$68>>2]|0;
     $75 = (($74) + 36|0);
     $76 = HEAP32[$75>>2]|0;
     __THREW__ = 0;
     $77 = (invoke_ii($76|0,($68|0))|0);
     $78 = __THREW__; __THREW__ = 0;
     $79 = $78&1;
     if ($79) {
      label = 6;
      break L21;
     } else {
      $$0$i$i = $77;
     }
    } else {
     $80 = HEAP8[$70>>0]|0;
     $81 = $80&255;
     $$0$i$i = $81;
    }
    $82 = $$0$i$i&255;
    if ($__case_sensitive) {
     $__c$0 = $82;
    } else {
     $83 = HEAP32[$__ct>>2]|0;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     __THREW__ = 0;
     $86 = (invoke_iii($85|0,($__ct|0),($82|0))|0);
     $87 = __THREW__; __THREW__ = 0;
     $88 = $87&1;
     if ($88) {
      label = 6;
      break L21;
     } else {
      $__c$0 = $86;
     }
    }
    $$pre = (($__indx$0) + 1)|0;
    if ($21) {
     $__indx$0 = $$pre;
    } else {
     $$pre$lcssa = $$pre;$__c$0$lcssa = $__c$0;$__indx$0$lcssa86 = $__indx$0;
     break;
    }
   }
   $__consume$0$off046 = 0;$__ky1$047 = $__kb;$__n_does_match$343 = $__n_does_match$2$ph;$__n_might_match$342 = $__n_might_match$2$ph;$__st$144 = $__status$0;
   while(1) {
    $89 = HEAP8[$__st$144>>0]|0;
    $90 = ($89<<24>>24)==(1);
    do {
     if ($90) {
      $91 = HEAP8[$__ky1$047>>0]|0;
      $92 = $91 & 1;
      $93 = ($92<<24>>24)==(0);
      if ($93) {
       $96 = (($__ky1$047) + 1|0);
       $98 = $96;
      } else {
       $94 = (($__ky1$047) + 8|0);
       $95 = HEAP32[$94>>2]|0;
       $98 = $95;
      }
      $97 = (($98) + ($__indx$0$lcssa86)|0);
      $99 = HEAP8[$97>>0]|0;
      if ($__case_sensitive) {
       $__kc$0 = $99;
      } else {
       $100 = HEAP32[$__ct>>2]|0;
       $101 = (($100) + 12|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_iii($102|0,($__ct|0),($99|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 5;
        break L21;
       } else {
        $__kc$0 = $103;
       }
      }
      $106 = ($__c$0$lcssa<<24>>24)==($__kc$0<<24>>24);
      if (!($106)) {
       HEAP8[$__st$144>>0] = 0;
       $118 = (($__n_might_match$342) + -1)|0;
       $__consume$1$off0 = $__consume$0$off046;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $118;
       break;
      }
      $107 = HEAP8[$__ky1$047>>0]|0;
      $108 = $107 & 1;
      $109 = ($108<<24>>24)==(0);
      if ($109) {
       $112 = $107&255;
       $113 = $112 >>> 1;
       $115 = $113;
      } else {
       $110 = (($__ky1$047) + 4|0);
       $111 = HEAP32[$110>>2]|0;
       $115 = $111;
      }
      $114 = ($115|0)==($$pre$lcssa|0);
      if ($114) {
       HEAP8[$__st$144>>0] = 2;
       $116 = (($__n_might_match$342) + -1)|0;
       $117 = (($__n_does_match$343) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $117;$__n_might_match$4 = $116;
      } else {
       $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $__n_might_match$342;
      }
     } else {
      $__consume$1$off0 = $__consume$0$off046;$__n_does_match$4 = $__n_does_match$343;$__n_might_match$4 = $__n_might_match$342;
     }
    } while(0);
    $119 = (($__ky1$047) + 12|0);
    $120 = (($__st$144) + 1|0);
    $121 = ($119|0)==($__ke|0);
    if ($121) {
     $__consume$1$off0$lcssa = $__consume$1$off0;$__n_does_match$4$lcssa = $__n_does_match$4;$__n_might_match$4$lcssa = $__n_might_match$4;
     break;
    } else {
     $__consume$0$off046 = $__consume$1$off0;$__ky1$047 = $119;$__n_does_match$343 = $__n_does_match$4;$__n_might_match$342 = $__n_might_match$4;$__st$144 = $120;
    }
   }
   if ($__consume$1$off0$lcssa) {
    $122 = HEAP32[$__b>>2]|0;
    $123 = (($122) + 12|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($122) + 16|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($124|0)==($126|0);
    if ($127) {
     $128 = HEAP32[$122>>2]|0;
     $129 = (($128) + 40|0);
     $130 = HEAP32[$129>>2]|0;
     __THREW__ = 0;
     (invoke_ii($130|0,($122|0))|0);
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     if ($132) {
      label = 7;
      break;
     }
    } else {
     $133 = (($124) + 1|0);
     HEAP32[$123>>2] = $133;
    }
    $134 = (($__n_does_match$4$lcssa) + ($__n_might_match$4$lcssa))|0;
    $$not = ($134>>>0)<(2);
    if ($$not) {
     $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
    } else {
     $__ky2$056 = $__kb;$__n_does_match$554 = $__n_does_match$4$lcssa;$__st$255 = $__status$0;
     while(1) {
      $135 = HEAP8[$__st$255>>0]|0;
      $136 = ($135<<24>>24)==(2);
      if ($136) {
       $137 = HEAP8[$__ky2$056>>0]|0;
       $138 = $137 & 1;
       $139 = ($138<<24>>24)==(0);
       if ($139) {
        $142 = $137&255;
        $143 = $142 >>> 1;
        $145 = $143;
       } else {
        $140 = (($__ky2$056) + 4|0);
        $141 = HEAP32[$140>>2]|0;
        $145 = $141;
       }
       $144 = ($145|0)==($$pre$lcssa|0);
       if ($144) {
        $__n_does_match$6 = $__n_does_match$554;
       } else {
        HEAP8[$__st$255>>0] = 0;
        $146 = (($__n_does_match$554) + -1)|0;
        $__n_does_match$6 = $146;
       }
      } else {
       $__n_does_match$6 = $__n_does_match$554;
      }
      $147 = (($__ky2$056) + 12|0);
      $148 = (($__st$255) + 1|0);
      $149 = ($147|0)==($__ke|0);
      if ($149) {
       $__n_does_match$6$lcssa = $__n_does_match$6;
       break;
      } else {
       $__ky2$056 = $147;$__n_does_match$554 = $__n_does_match$6;$__st$255 = $148;
      }
     }
     $__n_does_match$2$ph$be = $__n_does_match$6$lcssa;
    }
   } else {
    $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
   }
   $__indx$0$ph = $$pre$lcssa;$__n_does_match$2$ph = $__n_does_match$2$ph$be;$__n_might_match$2$ph = $__n_might_match$4$lcssa;
  }
  if ((label|0) == 5) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $lpad$phi$index = $11;$lpad$phi$index8 = $12;
  }
  else if ((label|0) == 6) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $lpad$phi83$index = $13;$lpad$phi83$index2 = $14;
   label = 8;
  }
  else if ((label|0) == 7) {
   $15 = ___cxa_find_matching_catch()|0;
   $16 = tempRet0;
   $lpad$phi83$index = $15;$lpad$phi83$index2 = $16;
   label = 8;
  }
  else if ((label|0) == 73) {
   $150 = ($$lcssa89|0)==(0|0);
   do {
    if ($150) {
     $164 = 0;
     label = 79;
    } else {
     $151 = (($$lcssa89) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (($$lcssa89) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($152|0)==($154|0);
     if ($155) {
      $156 = HEAP32[$$lcssa89>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($$lcssa89|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if (!($161)) {
       $162 = ($159|0)==(-1);
       if ($162) {
        HEAP32[$__b>>2] = 0;
        $164 = 0;
        label = 79;
        break;
       } else {
        $$pre$i$i$i12 = HEAP32[$__b>>2]|0;
        $164 = $$pre$i$i$i12;
        label = 79;
        break;
       }
      }
     } else {
      $164 = $$lcssa89;
      label = 79;
     }
    }
   } while(0);
   L100: do {
    if ((label|0) == 79) {
     $163 = ($164|0)==(0|0);
     do {
      if ($$lcssa) {
       label = 85;
      } else {
       $165 = (($$pre$i2$i$i16$lcssa) + 12|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = (($$pre$i2$i$i16$lcssa) + 16|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($166|0)==($168|0);
       if (!($169)) {
        if ($163) {
         break;
        } else {
         label = 87;
         break;
        }
       }
       $170 = HEAP32[$$pre$i2$i$i16$lcssa>>2]|0;
       $171 = (($170) + 36|0);
       $172 = HEAP32[$171>>2]|0;
       __THREW__ = 0;
       $173 = (invoke_ii($172|0,($$pre$i2$i$i16$lcssa|0))|0);
       $174 = __THREW__; __THREW__ = 0;
       $175 = $174&1;
       if ($175) {
        break L100;
       }
       $176 = ($173|0)==(-1);
       if ($176) {
        HEAP32[$__e>>2] = 0;
        label = 85;
        break;
       } else {
        if ($163) {
         break;
        } else {
         label = 87;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 85) {
      if ($163) {
       label = 87;
      }
     }
     if ((label|0) == 87) {
      $177 = HEAP32[$__err>>2]|0;
      $178 = $177 | 2;
      HEAP32[$__err>>2] = $178;
     }
     do {
      if ($21) {
       label = 93;
      } else {
       $$041 = $__kb;$__st$340 = $__status$0;
       while(1) {
        $179 = HEAP8[$__st$340>>0]|0;
        $180 = ($179<<24>>24)==(2);
        if ($180) {
         $$041$lcssa = $$041;
         label = 94;
         break;
        }
        $181 = (($$041) + 12|0);
        $182 = (($__st$340) + 1|0);
        $183 = ($181|0)==($__ke|0);
        if ($183) {
         label = 92;
         break;
        } else {
         $$041 = $181;$__st$340 = $182;
        }
       }
       if ((label|0) == 92) {
        label = 93;
        break;
       }
       else if ((label|0) == 94) {
        $$030 = $$041$lcssa;
        break;
       }
      }
     } while(0);
     if ((label|0) == 93) {
      $184 = HEAP32[$__err>>2]|0;
      $185 = $184 | 4;
      HEAP32[$__err>>2] = $185;
      $$030 = $__ke;
     }
     $186 = ($20|0)==(0|0);
     if (!($186)) {
      _free($20);
     }
     STACKTOP = sp;return ($$030|0);
    }
   } while(0);
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $lpad$phi$index = $17;$lpad$phi$index8 = $18;
  }
  if ((label|0) == 8) {
   $lpad$phi$index = $lpad$phi83$index;$lpad$phi$index8 = $lpad$phi83$index2;
  }
  $19 = ($20|0)==(0|0);
  if ($19) {
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  } else {
   _free($20);
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  }
 }
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(650,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$lcssa;
      }
     } else {
      $139 = $$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($138) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $138 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($138) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(651,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 34;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$lcssa|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($$lcssa) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($$lcssa) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$lcssa>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 34;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $$lcssa;
      }
     } else {
      $144 = $$lcssa;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 62;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if ($143) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 34;
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $158 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $143 ^ $158;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($143) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(652,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$lcssa;
      }
     } else {
      $139 = $$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($138) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $138 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($138) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(653,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$lcssa;
      }
     } else {
      $139 = $$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($138) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $138 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($138) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(654,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 34;
   } else {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($$lcssa|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($$lcssa) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($$lcssa) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$$lcssa>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($$lcssa|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       label = 34;
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $$lcssa;
      }
     } else {
      $139 = $$lcssa;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 62;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if ($138) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       label = 34;
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $153 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $138 ^ $153;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($138) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 34;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(655,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 34;
   } else {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($$lcssa|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($$lcssa) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($$lcssa) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$$lcssa>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($$lcssa|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       label = 34;
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $$lcssa;
      }
     } else {
      $144 = $$lcssa;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 62;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if ($143) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 34;
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $158 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $143 ^ $158;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($143) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $159 = HEAP32[$__err>>2]|0;
     $160 = $159 | 2;
     HEAP32[$__err>>2] = $160;
    }
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(656,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$lcssa;
      }
     } else {
      $141 = $$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($140) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $140 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($140) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(657,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$lcssa;
      }
     } else {
      $141 = $$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($140) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $140 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($140) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__decimal_point = sp + 199|0;
 $__thousands_sep = sp + 198|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 197|0;
 $__exp = sp + 196|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 34;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$lcssa = $26;$$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$lcssa = $26;$$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$lcssa = $26;$$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
    }
    $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(658,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if ($125) {
    label = 34;
   } else {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($$lcssa|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($$lcssa) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($$lcssa) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$$lcssa>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($$lcssa|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       label = 34;
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $$lcssa;
      }
     } else {
      $141 = $$lcssa;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 62;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if ($140) {
        break;
       } else {
        label = 64;
        break;
       }
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       label = 34;
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 62;
       break;
      } else {
       $155 = ($$pre$i2$i$i|0)==(0|0);
       $tmp$i$i = $140 ^ $155;
       if ($tmp$i$i) {
        break;
       } else {
        label = 64;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 62) {
     if ($140) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     $156 = HEAP32[$__err>>2]|0;
     $157 = $156 | 2;
     HEAP32[$__err>>2] = $157;
    }
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(574,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$034 = 0, $$045 = 0, $$045$lcssa = 0, $$index = 0, $$index15 = 0, $$lcssa = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $$pre$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off050 = 0, $__consume$1$off0 = 0, $__consume$1$off0$lcssa = 0, $__indx$0 = 0, $__indx$0$lcssa85 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$051 = 0, $__ky2$060 = 0, $__n_does_match$0$lcssa = 0;
 var $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$1$lcssa = 0, $__n_does_match$2$ph = 0, $__n_does_match$2$ph$be = 0, $__n_does_match$347 = 0, $__n_does_match$4 = 0, $__n_does_match$4$lcssa = 0, $__n_does_match$558 = 0, $__n_does_match$6 = 0, $__n_does_match$6$lcssa = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$1$lcssa = 0, $__n_might_match$2$ph = 0, $__n_might_match$346 = 0, $__n_might_match$4 = 0, $__n_might_match$4$lcssa = 0, $__st$065 = 0;
 var $__st$148 = 0, $__st$259 = 0, $__st$344 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $lpad$phi82$index = 0, $lpad$phi82$index2 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(565);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index15 = $10;
   } else {
    $20 = 0;$__status$0 = 0;
    label = 13;
   }
  } else {
   $20 = $5;$__status$0 = $5;
   label = 13;
  }
 } else {
  $20 = 0;$__status$0 = $__statbuf;
  label = 13;
 }
 if ((label|0) == 13) {
  $21 = ($__kb|0)==($__ke|0);
  if ($21) {
   $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
  } else {
   $__ky$066 = $__kb;$__n_does_match$064 = 0;$__n_might_match$063 = $3;$__st$065 = $__status$0;
   while(1) {
    $22 = HEAP8[$__ky$066>>0]|0;
    $23 = $22 & 1;
    $24 = ($23<<24>>24)==(0);
    if ($24) {
     $27 = $22&255;
     $28 = $27 >>> 1;
     $30 = $28;
    } else {
     $25 = (($__ky$066) + 4|0);
     $26 = HEAP32[$25>>2]|0;
     $30 = $26;
    }
    $29 = ($30|0)==(0);
    if ($29) {
     HEAP8[$__st$065>>0] = 2;
     $31 = (($__n_might_match$063) + -1)|0;
     $32 = (($__n_does_match$064) + 1)|0;
     $__n_does_match$1 = $32;$__n_might_match$1 = $31;
    } else {
     HEAP8[$__st$065>>0] = 1;
     $__n_does_match$1 = $__n_does_match$064;$__n_might_match$1 = $__n_might_match$063;
    }
    $33 = (($__ky$066) + 12|0);
    $34 = (($__st$065) + 1|0);
    $35 = ($33|0)==($__ke|0);
    if ($35) {
     $__n_does_match$1$lcssa = $__n_does_match$1;$__n_might_match$1$lcssa = $__n_might_match$1;
     break;
    } else {
     $__ky$066 = $33;$__n_does_match$064 = $__n_does_match$1;$__n_might_match$063 = $__n_might_match$1;$__st$065 = $34;
    }
   }
   $__n_does_match$0$lcssa = $__n_does_match$1$lcssa;$__n_might_match$0$lcssa = $__n_might_match$1$lcssa;
  }
  $__indx$0$ph = 0;$__n_does_match$2$ph = $__n_does_match$0$lcssa;$__n_might_match$2$ph = $__n_might_match$0$lcssa;
  L21: while(1) {
   $__indx$0 = $__indx$0$ph;
   while(1) {
    $36 = HEAP32[$__b>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      $66 = 1;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if ($42) {
       $43 = HEAP32[$36>>2]|0;
       $44 = (($43) + 36|0);
       $45 = HEAP32[$44>>2]|0;
       __THREW__ = 0;
       $46 = (invoke_ii($45|0,($36|0))|0);
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 6;
        break L21;
       } else {
        $$0$i$i$i$i = $46;
       }
      } else {
       $49 = HEAP32[$39>>2]|0;
       $$0$i$i$i$i = $49;
      }
      $50 = ($$0$i$i$i$i|0)==(-1);
      if ($50) {
       HEAP32[$__b>>2] = 0;
       $66 = 1;
       break;
      } else {
       $$pre$i$i$i = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
       $66 = $phitmp$i$i$i;
       break;
      }
     }
    } while(0);
    $51 = HEAP32[$__e>>2]|0;
    $52 = ($51|0)==(0|0);
    if ($52) {
     $$pre$i3$i$i19 = 0;$67 = 1;
    } else {
     $53 = (($51) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($51) + 16|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($54|0)==($56|0);
     if ($57) {
      $58 = HEAP32[$51>>2]|0;
      $59 = (($58) + 36|0);
      $60 = HEAP32[$59>>2]|0;
      __THREW__ = 0;
      $61 = (invoke_ii($60|0,($51|0))|0);
      $62 = __THREW__; __THREW__ = 0;
      $63 = $62&1;
      if ($63) {
       label = 6;
       break L21;
      } else {
       $$0$i$i1$i$i = $61;
      }
     } else {
      $64 = HEAP32[$54>>2]|0;
      $$0$i$i1$i$i = $64;
     }
     $65 = ($$0$i$i1$i$i|0)==(-1);
     if ($65) {
      HEAP32[$__e>>2] = 0;
      $$pre$i3$i$i19 = 0;$67 = 1;
     } else {
      $$pre$i3$i$i19 = $51;$67 = 0;
     }
    }
    $tmp$i$i = $66 ^ $67;
    $68 = ($__n_might_match$2$ph|0)!=(0);
    $$ = $tmp$i$i & $68;
    $69 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $69;$$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
     label = 75;
     break L21;
    }
    $70 = (($69) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($69) + 16|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($71|0)==($73|0);
    if ($74) {
     $75 = HEAP32[$69>>2]|0;
     $76 = (($75) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     __THREW__ = 0;
     $78 = (invoke_ii($77|0,($69|0))|0);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 6;
      break L21;
     } else {
      $$0$i$i = $78;
     }
    } else {
     $81 = HEAP32[$71>>2]|0;
     $$0$i$i = $81;
    }
    if ($__case_sensitive) {
     $__c$0 = $$0$i$i;
    } else {
     $82 = HEAP32[$__ct>>2]|0;
     $83 = (($82) + 28|0);
     $84 = HEAP32[$83>>2]|0;
     __THREW__ = 0;
     $85 = (invoke_iii($84|0,($__ct|0),($$0$i$i|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      label = 6;
      break L21;
     } else {
      $__c$0 = $85;
     }
    }
    $$pre = (($__indx$0) + 1)|0;
    if ($21) {
     $__indx$0 = $$pre;
    } else {
     $$pre$lcssa = $$pre;$__c$0$lcssa = $__c$0;$__indx$0$lcssa85 = $__indx$0;
     break;
    }
   }
   $__consume$0$off050 = 0;$__ky1$051 = $__kb;$__n_does_match$347 = $__n_does_match$2$ph;$__n_might_match$346 = $__n_might_match$2$ph;$__st$148 = $__status$0;
   while(1) {
    $88 = HEAP8[$__st$148>>0]|0;
    $89 = ($88<<24>>24)==(1);
    do {
     if ($89) {
      $90 = HEAP8[$__ky1$051>>0]|0;
      $91 = $90 & 1;
      $92 = ($91<<24>>24)==(0);
      if ($92) {
       $95 = (($__ky1$051) + 4|0);
       $97 = $95;
      } else {
       $93 = (($__ky1$051) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $97 = $94;
      }
      $96 = (($97) + ($__indx$0$lcssa85<<2)|0);
      $98 = HEAP32[$96>>2]|0;
      if ($__case_sensitive) {
       $__kc$0 = $98;
      } else {
       $99 = HEAP32[$__ct>>2]|0;
       $100 = (($99) + 28|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_iii($101|0,($__ct|0),($98|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 5;
        break L21;
       } else {
        $__kc$0 = $102;
       }
      }
      $105 = ($__c$0$lcssa|0)==($__kc$0|0);
      if (!($105)) {
       HEAP8[$__st$148>>0] = 0;
       $117 = (($__n_might_match$346) + -1)|0;
       $__consume$1$off0 = $__consume$0$off050;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $117;
       break;
      }
      $106 = HEAP8[$__ky1$051>>0]|0;
      $107 = $106 & 1;
      $108 = ($107<<24>>24)==(0);
      if ($108) {
       $111 = $106&255;
       $112 = $111 >>> 1;
       $114 = $112;
      } else {
       $109 = (($__ky1$051) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $114 = $110;
      }
      $113 = ($114|0)==($$pre$lcssa|0);
      if ($113) {
       HEAP8[$__st$148>>0] = 2;
       $115 = (($__n_might_match$346) + -1)|0;
       $116 = (($__n_does_match$347) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $116;$__n_might_match$4 = $115;
      } else {
       $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $__n_might_match$346;
      }
     } else {
      $__consume$1$off0 = $__consume$0$off050;$__n_does_match$4 = $__n_does_match$347;$__n_might_match$4 = $__n_might_match$346;
     }
    } while(0);
    $118 = (($__ky1$051) + 12|0);
    $119 = (($__st$148) + 1|0);
    $120 = ($118|0)==($__ke|0);
    if ($120) {
     $__consume$1$off0$lcssa = $__consume$1$off0;$__n_does_match$4$lcssa = $__n_does_match$4;$__n_might_match$4$lcssa = $__n_might_match$4;
     break;
    } else {
     $__consume$0$off050 = $__consume$1$off0;$__ky1$051 = $118;$__n_does_match$347 = $__n_does_match$4;$__n_might_match$346 = $__n_might_match$4;$__st$148 = $119;
    }
   }
   if ($__consume$1$off0$lcssa) {
    $121 = HEAP32[$__b>>2]|0;
    $122 = (($121) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = (($121) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($123|0)==($125|0);
    if ($126) {
     $127 = HEAP32[$121>>2]|0;
     $128 = (($127) + 40|0);
     $129 = HEAP32[$128>>2]|0;
     __THREW__ = 0;
     (invoke_ii($129|0,($121|0))|0);
     $130 = __THREW__; __THREW__ = 0;
     $131 = $130&1;
     if ($131) {
      label = 7;
      break;
     }
    } else {
     $132 = (($123) + 4|0);
     HEAP32[$122>>2] = $132;
    }
    $133 = (($__n_does_match$4$lcssa) + ($__n_might_match$4$lcssa))|0;
    $$not = ($133>>>0)<(2);
    if ($$not) {
     $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
    } else {
     $__ky2$060 = $__kb;$__n_does_match$558 = $__n_does_match$4$lcssa;$__st$259 = $__status$0;
     while(1) {
      $134 = HEAP8[$__st$259>>0]|0;
      $135 = ($134<<24>>24)==(2);
      if ($135) {
       $136 = HEAP8[$__ky2$060>>0]|0;
       $137 = $136 & 1;
       $138 = ($137<<24>>24)==(0);
       if ($138) {
        $141 = $136&255;
        $142 = $141 >>> 1;
        $144 = $142;
       } else {
        $139 = (($__ky2$060) + 4|0);
        $140 = HEAP32[$139>>2]|0;
        $144 = $140;
       }
       $143 = ($144|0)==($$pre$lcssa|0);
       if ($143) {
        $__n_does_match$6 = $__n_does_match$558;
       } else {
        HEAP8[$__st$259>>0] = 0;
        $145 = (($__n_does_match$558) + -1)|0;
        $__n_does_match$6 = $145;
       }
      } else {
       $__n_does_match$6 = $__n_does_match$558;
      }
      $146 = (($__ky2$060) + 12|0);
      $147 = (($__st$259) + 1|0);
      $148 = ($146|0)==($__ke|0);
      if ($148) {
       $__n_does_match$6$lcssa = $__n_does_match$6;
       break;
      } else {
       $__ky2$060 = $146;$__n_does_match$558 = $__n_does_match$6;$__st$259 = $147;
      }
     }
     $__n_does_match$2$ph$be = $__n_does_match$6$lcssa;
    }
   } else {
    $__n_does_match$2$ph$be = $__n_does_match$4$lcssa;
   }
   $__indx$0$ph = $$pre$lcssa;$__n_does_match$2$ph = $__n_does_match$2$ph$be;$__n_might_match$2$ph = $__n_might_match$4$lcssa;
  }
  if ((label|0) == 5) {
   $11 = ___cxa_find_matching_catch()|0;
   $12 = tempRet0;
   $lpad$phi$index = $11;$lpad$phi$index8 = $12;
  }
  else if ((label|0) == 6) {
   $13 = ___cxa_find_matching_catch()|0;
   $14 = tempRet0;
   $lpad$phi82$index = $13;$lpad$phi82$index2 = $14;
   label = 8;
  }
  else if ((label|0) == 7) {
   $15 = ___cxa_find_matching_catch()|0;
   $16 = tempRet0;
   $lpad$phi82$index = $15;$lpad$phi82$index2 = $16;
   label = 8;
  }
  else if ((label|0) == 75) {
   $149 = ($$lcssa|0)==(0|0);
   do {
    if ($149) {
     $187 = 1;
     label = 82;
    } else {
     $150 = (($$lcssa) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($$lcssa) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     if ($154) {
      $155 = HEAP32[$$lcssa>>2]|0;
      $156 = (($155) + 36|0);
      $157 = HEAP32[$156>>2]|0;
      __THREW__ = 0;
      $158 = (invoke_ii($157|0,($$lcssa|0))|0);
      $159 = __THREW__; __THREW__ = 0;
      $160 = $159&1;
      if ($160) {
       break;
      } else {
       $$0$i$i$i$i11 = $158;
      }
     } else {
      $161 = HEAP32[$151>>2]|0;
      $$0$i$i$i$i11 = $161;
     }
     $162 = ($$0$i$i$i$i11|0)==(-1);
     if ($162) {
      HEAP32[$__b>>2] = 0;
      $187 = 1;
      label = 82;
      break;
     } else {
      $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
      $187 = $phitmp$i$i$i14;
      label = 82;
      break;
     }
    }
   } while(0);
   L106: do {
    if ((label|0) == 82) {
     $163 = ($$pre$i3$i$i19$lcssa|0)==(0|0);
     do {
      if ($163) {
       label = 88;
      } else {
       $164 = (($$pre$i3$i$i19$lcssa) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($$pre$i3$i$i19$lcssa) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$$pre$i3$i$i19$lcssa>>2]|0;
        $170 = (($169) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($$pre$i3$i$i19$lcssa|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         break L106;
        } else {
         $$0$i$i1$i$i17 = $172;
        }
       } else {
        $175 = HEAP32[$165>>2]|0;
        $$0$i$i1$i$i17 = $175;
       }
       $176 = ($$0$i$i1$i$i17|0)==(-1);
       if ($176) {
        HEAP32[$__e>>2] = 0;
        label = 88;
        break;
       } else {
        if ($187) {
         break;
        } else {
         label = 90;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 88) {
      if ($187) {
       label = 90;
      }
     }
     if ((label|0) == 90) {
      $177 = HEAP32[$__err>>2]|0;
      $178 = $177 | 2;
      HEAP32[$__err>>2] = $178;
     }
     do {
      if ($21) {
       label = 96;
      } else {
       $$045 = $__kb;$__st$344 = $__status$0;
       while(1) {
        $179 = HEAP8[$__st$344>>0]|0;
        $180 = ($179<<24>>24)==(2);
        if ($180) {
         $$045$lcssa = $$045;
         label = 97;
         break;
        }
        $181 = (($$045) + 12|0);
        $182 = (($__st$344) + 1|0);
        $183 = ($181|0)==($__ke|0);
        if ($183) {
         label = 95;
         break;
        } else {
         $$045 = $181;$__st$344 = $182;
        }
       }
       if ((label|0) == 95) {
        label = 96;
        break;
       }
       else if ((label|0) == 97) {
        $$034 = $$045$lcssa;
        break;
       }
      }
     } while(0);
     if ((label|0) == 96) {
      $184 = HEAP32[$__err>>2]|0;
      $185 = $184 | 4;
      HEAP32[$__err>>2] = $185;
      $$034 = $__ke;
     }
     $186 = ($20|0)==(0|0);
     if (!($186)) {
      _free($20);
     }
     STACKTOP = sp;return ($$034|0);
    }
   } while(0);
   $17 = ___cxa_find_matching_catch()|0;
   $18 = tempRet0;
   $lpad$phi$index = $17;$lpad$phi$index8 = $18;
  }
  if ((label|0) == 8) {
   $lpad$phi$index = $lpad$phi82$index;$lpad$phi$index8 = $lpad$phi82$index2;
  }
  $19 = ($20|0)==(0|0);
  if ($19) {
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  } else {
   _free($20);
   $$index = $lpad$phi$index;$$index15 = $lpad$phi$index8;
  }
 }
 ___resumeException($$index|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(650,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(651,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 35;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$lcssa|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($$lcssa) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($$lcssa) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$lcssa>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $$lcssa;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 64;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($162) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(652,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(653,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(654,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    label = 35;
   } else {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($$lcssa|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($$lcssa) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($$lcssa) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$$lcssa>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($$lcssa|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $$lcssa;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 64;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($157) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($157) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $152 = HEAP32[$__err>>2]|0;
     $153 = $152 | 2;
     HEAP32[$__err>>2] = $153;
    }
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0;
 var $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if ($2) {
   label = 35;
  } else {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(655,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if ($123) {
    label = 35;
   } else {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($$lcssa|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($$lcssa) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($$lcssa) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$$lcssa>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($$lcssa|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $$lcssa;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 64;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($162) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($162) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $157 = HEAP32[$__err>>2]|0;
     $158 = $157 | 2;
     HEAP32[$__err>>2] = $158;
    }
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(656,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(657,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0;
 var $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 184|0;
 $__buf = sp + 172|0;
 $__a_end = sp + 168|0;
 $__g = sp + 8|0;
 $__g_end = sp + 4|0;
 $__dc = sp;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(553,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   label = 35;
  } else {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$lcssa = $80;$$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$lcssa = $80;$$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(553,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$lcssa = $80;$$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
    }
    $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    break;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(658,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    label = 35;
   } else {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($$lcssa|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($$lcssa) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($$lcssa) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$$lcssa>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($$lcssa|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 35;
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $$lcssa;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 64;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        label = 35;
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 64;
       break;
      } else {
       if ($159) {
        break;
       } else {
        label = 66;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 64) {
     if ($159) {
      label = 66;
     }
    }
    if ((label|0) == 66) {
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
    }
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $77 = ___cxa_find_matching_catch()|0;
  $78 = tempRet0;
  $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  __THREW__ = 0;
  (invoke_ii(574,($0|0))|0);
  $3 = __THREW__; __THREW__ = 0;
  $4 = $3&1;
  if ($4) {
   $5 = ___cxa_find_matching_catch(0|0)|0;
   $6 = tempRet0;
   ___clang_call_terminate($5);
   // unreachable;
  }
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(659,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(574,($0|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    $14 = ___cxa_find_matching_catch(0|0)|0;
    $15 = tempRet0;
    ___clang_call_terminate($14);
    // unreachable;
   }
  }
  ___resumeException($9|0);
  // unreachable;
 } else {
  $4 = ($0|0)==(0|0);
  if (!($4)) {
   __THREW__ = 0;
   (invoke_ii(574,($0|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    $7 = ___cxa_find_matching_catch(0|0)|0;
    $8 = tempRet0;
    ___clang_call_terminate($7);
    // unreachable;
   }
  }
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   HEAP32[$agg$result>>2] = 0;
  } else {
   $2 = $__oe;
   $3 = $__ob;
   $4 = (($2) - ($3))|0;
   $5 = $4 >> 2;
   $6 = (($__iob) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>($5|0);
   $9 = (($7) - ($5))|0;
   $__ns$0 = $8 ? $9 : 0;
   $10 = $__op;
   $11 = (($10) - ($3))|0;
   $12 = $11 >> 2;
   $13 = ($11|0)>(0);
   if ($13) {
    $14 = HEAP32[$0>>2]|0;
    $15 = (($14) + 48|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
    $18 = ($17|0)==($12|0);
    if (!($18)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   $19 = ($__ns$0|0)>(0);
   do {
    if ($19) {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
     $20 = HEAP8[$__sp>>0]|0;
     $21 = $20 & 1;
     $22 = ($21<<24>>24)==(0);
     if ($22) {
      $25 = (($__sp) + 4|0);
      $29 = $25;
     } else {
      $23 = (($__sp) + 8|0);
      $24 = HEAP32[$23>>2]|0;
      $29 = $24;
     }
     $26 = HEAP32[$0>>2]|0;
     $27 = (($26) + 48|0);
     $28 = HEAP32[$27>>2]|0;
     __THREW__ = 0;
     $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if ($32) {
      $34 = ___cxa_find_matching_catch()|0;
      $35 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      ___resumeException($34|0);
      // unreachable;
     }
     $33 = ($30|0)==($__ns$0|0);
     if ($33) {
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      break;
     } else {
      HEAP32[$__s>>2] = 0;
      HEAP32[$agg$result>>2] = 0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
      break L1;
     }
    }
   } while(0);
   $36 = (($2) - ($10))|0;
   $37 = $36 >> 2;
   $38 = ($36|0)>(0);
   if ($38) {
    $39 = HEAP32[$0>>2]|0;
    $40 = (($39) + 48|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
    $43 = ($42|0)==($37|0);
    if (!($43)) {
     HEAP32[$__s>>2] = 0;
     HEAP32[$agg$result>>2] = 0;
     break;
    }
   }
   HEAP32[$6>>2] = 0;
   HEAP32[$agg$result>>2] = $0;
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$0$lcssa31 = 0, $__r$032 = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
    label = 13;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
   label = 13;
  }
 }
 L16: do {
  if ((label|0) == 12) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 13) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP8[$30>>0]|0;
    $39 = $38&255;
    $$0$i$i = $39;
   }
   $40 = $$0$i$i&255;
   $isascii1$i = ($40<<24>>24)>(-1);
   if ($isascii1$i) {
    $sext = $$0$i$i << 24;
    $41 = $sext >> 24;
    $42 = (($__ct) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($41<<1)|0);
    $45 = HEAP16[$44>>1]|0;
    $46 = $45 & 2048;
    $47 = ($46<<16>>16)==(0);
    if (!($47)) {
     $50 = HEAP32[$__ct>>2]|0;
     $51 = (($50) + 36|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
     $54 = $53 << 24 >> 24;
     $55 = HEAP32[$__b>>2]|0;
     $56 = (($55) + 12|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = (($55) + 16|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($57|0)==($59|0);
     if ($60) {
      $61 = HEAP32[$55>>2]|0;
      $62 = (($61) + 40|0);
      $63 = HEAP32[$62>>2]|0;
      (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
     } else {
      $64 = (($57) + 1|0);
      HEAP32[$56>>2] = $64;
     }
     $$0$in = $__n;$$pre$i2$i$i7 = $156;$80 = $156;$__r$0$in = $54;
     while(1) {
      $__r$0 = (($__r$0$in) + -48)|0;
      $$0 = (($$0$in) + -1)|0;
      $65 = HEAP32[$__b>>2]|0;
      $66 = ($65|0)==(0|0);
      do {
       if ($66) {
        $78 = 0;
       } else {
        $67 = (($65) + 12|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = (($65) + 16|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($68|0)==($70|0);
        if ($71) {
         $72 = HEAP32[$65>>2]|0;
         $73 = (($72) + 36|0);
         $74 = HEAP32[$73>>2]|0;
         $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
         $76 = ($75|0)==(-1);
         if ($76) {
          HEAP32[$__b>>2] = 0;
          $78 = 0;
          break;
         } else {
          $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
          $78 = $$pre$i$i$i3;
          break;
         }
        } else {
         $78 = $65;
        }
       }
      } while(0);
      $77 = ($78|0)==(0|0);
      $79 = ($80|0)==(0|0);
      if ($79) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = 0;
      } else {
       $81 = (($80) + 12|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (($80) + 16|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = ($82|0)==($84|0);
       if ($85) {
        $86 = HEAP32[$80>>2]|0;
        $87 = (($86) + 36|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
        $90 = ($89|0)==(-1);
        if ($90) {
         HEAP32[$__e>>2] = 0;
         $$pre$i2$i$i20 = 0;$92 = 0;
        } else {
         $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $$pre$i2$i$i7;
        }
       } else {
        $$pre$i2$i$i20 = $$pre$i2$i$i7;$92 = $80;
       }
      }
      $91 = ($92|0)==(0|0);
      $tmp$i$i9 = $77 ^ $91;
      $93 = ($$0|0)>(0);
      $$ = $tmp$i$i9 & $93;
      $94 = HEAP32[$__b>>2]|0;
      if (!($$)) {
       $$lcssa = $94;$$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;$__r$0$lcssa = $__r$0;
       break;
      }
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
       $$0$i$i10 = $103;
      } else {
       $104 = HEAP8[$96>>0]|0;
       $105 = $104&255;
       $$0$i$i10 = $105;
      }
      $106 = $$0$i$i10&255;
      $isascii1$i12 = ($106<<24>>24)>(-1);
      if (!($isascii1$i12)) {
       $__r$0$lcssa31 = $__r$0;
       label = 54;
       break;
      }
      $sext24 = $$0$i$i10 << 24;
      $107 = $sext24 >> 24;
      $108 = HEAP32[$42>>2]|0;
      $109 = (($108) + ($107<<1)|0);
      $110 = HEAP16[$109>>1]|0;
      $111 = $110 & 2048;
      $112 = ($111<<16>>16)==(0);
      if ($112) {
       $__r$0$lcssa31 = $__r$0;
       label = 54;
       break;
      }
      $113 = ($__r$0*10)|0;
      $114 = HEAP32[$__ct>>2]|0;
      $115 = (($114) + 36|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
      $118 = $117 << 24 >> 24;
      $119 = (($118) + ($113))|0;
      $120 = HEAP32[$__b>>2]|0;
      $121 = (($120) + 12|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($122|0)==($124|0);
      if ($125) {
       $126 = HEAP32[$120>>2]|0;
       $127 = (($126) + 40|0);
       $128 = HEAP32[$127>>2]|0;
       (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
      } else {
       $129 = (($122) + 1|0);
       HEAP32[$121>>2] = $129;
      }
      $$0$in = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$80 = $92;$__r$0$in = $119;
     }
     if ((label|0) == 54) {
      $$01 = $__r$0$lcssa31;
      break;
     }
     $130 = ($$lcssa|0)==(0|0);
     do {
      if ($130) {
       $142 = 0;
      } else {
       $131 = (($$lcssa) + 12|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($$lcssa) + 16|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($132|0)==($134|0);
       if ($135) {
        $136 = HEAP32[$$lcssa>>2]|0;
        $137 = (($136) + 36|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (FUNCTION_TABLE_ii[$138 & 1023]($$lcssa)|0);
        $140 = ($139|0)==(-1);
        if ($140) {
         HEAP32[$__b>>2] = 0;
         $142 = 0;
         break;
        } else {
         $$pre$i$i$i16 = HEAP32[$__b>>2]|0;
         $142 = $$pre$i$i$i16;
         break;
        }
       } else {
        $142 = $$lcssa;
       }
      }
     } while(0);
     $141 = ($142|0)==(0|0);
     $143 = ($$pre$i2$i$i20$lcssa|0)==(0|0);
     do {
      if ($143) {
       label = 52;
      } else {
       $144 = (($$pre$i2$i$i20$lcssa) + 12|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($$pre$i2$i$i20$lcssa) + 16|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = ($145|0)==($147|0);
       if ($148) {
        $149 = HEAP32[$$pre$i2$i$i20$lcssa>>2]|0;
        $150 = (($149) + 36|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i20$lcssa)|0);
        $153 = ($152|0)==(-1);
        if ($153) {
         HEAP32[$__e>>2] = 0;
         label = 52;
         break;
        }
       }
       if ($141) {
        $$01 = $__r$0$lcssa;
        break L16;
       } else {
        $__r$032 = $__r$0$lcssa;
       }
      }
     } while(0);
     if ((label|0) == 52) {
      if ($141) {
       $__r$032 = $__r$0$lcssa;
      } else {
       $$01 = $__r$0$lcssa;
       break;
      }
     }
     $154 = HEAP32[$__err>>2]|0;
     $155 = $154 | 2;
     HEAP32[$__err>>2] = $155;
     $$01 = $__r$032;
     break;
    }
   }
   $48 = HEAP32[$__err>>2]|0;
   $49 = $48 | 4;
   HEAP32[$__err>>2] = $49;
   $$01 = 0;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$0$lcssa36 = 0, $__r$037 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     label = 17;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
   label = 17;
  }
 }
 L22: do {
  if ((label|0) == 16) {
   $26 = HEAP32[$__err>>2]|0;
   $27 = $26 | 6;
   HEAP32[$__err>>2] = $27;
   $$01 = 0;
  }
  else if ((label|0) == 17) {
   $28 = HEAP32[$__b>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($30|0)==($32|0);
   if ($33) {
    $34 = HEAP32[$28>>2]|0;
    $35 = (($34) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
    $$0$i$i = $37;
   } else {
    $38 = HEAP32[$30>>2]|0;
    $$0$i$i = $38;
   }
   $39 = HEAP32[$__ct>>2]|0;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
   if (!($42)) {
    $43 = HEAP32[$__err>>2]|0;
    $44 = $43 | 4;
    HEAP32[$__err>>2] = $44;
    $$01 = 0;
    break;
   }
   $45 = HEAP32[$__ct>>2]|0;
   $46 = (($45) + 52|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
   $49 = $48 << 24 >> 24;
   $50 = HEAP32[$__b>>2]|0;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($50) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($52|0)==($54|0);
   if ($55) {
    $56 = HEAP32[$50>>2]|0;
    $57 = (($56) + 40|0);
    $58 = HEAP32[$57>>2]|0;
    (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
   } else {
    $59 = (($52) + 4|0);
    HEAP32[$51>>2] = $59;
   }
   $$0$in = $__n;$$pre$i3$i$i10 = $148;$74 = $148;$__r$0$in = $49;
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $60 = HEAP32[$__b>>2]|0;
    $61 = ($60|0)==(0|0);
    do {
     if ($61) {
      $86 = 1;
     } else {
      $62 = (($60) + 12|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = (($60) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($63|0)==($65|0);
      if ($66) {
       $67 = HEAP32[$60>>2]|0;
       $68 = (($67) + 36|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
       $$0$i$i$i$i2 = $70;
      } else {
       $71 = HEAP32[$63>>2]|0;
       $$0$i$i$i$i2 = $71;
      }
      $72 = ($$0$i$i$i$i2|0)==(-1);
      if ($72) {
       HEAP32[$__b>>2] = 0;
       $86 = 1;
       break;
      } else {
       $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
       $86 = $phitmp$i$i$i5;
       break;
      }
     }
    } while(0);
    $73 = ($74|0)==(0|0);
    do {
     if ($73) {
      $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = 0;$87 = 1;
     } else {
      $75 = (($74) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (($74) + 16|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($76|0)==($78|0);
      if ($79) {
       $80 = HEAP32[$74>>2]|0;
       $81 = (($80) + 36|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
       $$0$i$i1$i$i8 = $83;
      } else {
       $84 = HEAP32[$76>>2]|0;
       $$0$i$i1$i$i8 = $84;
      }
      $85 = ($$0$i$i1$i$i8|0)==(-1);
      if ($85) {
       HEAP32[$__e>>2] = 0;
       $$pre$i3$i$i25 = 0;$149 = 0;$87 = 1;
       break;
      } else {
       $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
       $$pre$i3$i$i25 = $$pre$i3$i$i10;$149 = $$pre$i3$i$i10;$87 = $phitmp$i4$i$i11;
       break;
      }
     }
    } while(0);
    $tmp$i$i13 = $86 ^ $87;
    $88 = ($$0|0)>(0);
    $$ = $tmp$i$i13 & $88;
    $89 = HEAP32[$__b>>2]|0;
    if (!($$)) {
     $$lcssa = $89;$$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;$__r$0$lcssa = $__r$0;
     break;
    }
    $90 = (($89) + 12|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($89) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($91|0)==($93|0);
    if ($94) {
     $95 = HEAP32[$89>>2]|0;
     $96 = (($95) + 36|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
     $$0$i$i14 = $98;
    } else {
     $99 = HEAP32[$91>>2]|0;
     $$0$i$i14 = $99;
    }
    $100 = HEAP32[$__ct>>2]|0;
    $101 = (($100) + 12|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i14)|0);
    if (!($103)) {
     $__r$0$lcssa36 = $__r$0;
     label = 65;
     break;
    }
    $104 = ($__r$0*10)|0;
    $105 = HEAP32[$__ct>>2]|0;
    $106 = (($105) + 52|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i14,0)|0);
    $109 = $108 << 24 >> 24;
    $110 = (($109) + ($104))|0;
    $111 = HEAP32[$__b>>2]|0;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (($111) + 16|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($113|0)==($115|0);
    if ($116) {
     $117 = HEAP32[$111>>2]|0;
     $118 = (($117) + 40|0);
     $119 = HEAP32[$118>>2]|0;
     (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
    } else {
     $120 = (($113) + 4|0);
     HEAP32[$112>>2] = $120;
    }
    $$0$in = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$74 = $149;$__r$0$in = $110;
   }
   if ((label|0) == 65) {
    $$01 = $__r$0$lcssa36;
    break;
   }
   $121 = ($$lcssa|0)==(0|0);
   do {
    if ($121) {
     $150 = 1;
    } else {
     $122 = (($$lcssa) + 12|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (($$lcssa) + 16|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ($123|0)==($125|0);
     if ($126) {
      $127 = HEAP32[$$lcssa>>2]|0;
      $128 = (($127) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (FUNCTION_TABLE_ii[$129 & 1023]($$lcssa)|0);
      $$0$i$i$i$i17 = $130;
     } else {
      $131 = HEAP32[$123>>2]|0;
      $$0$i$i$i$i17 = $131;
     }
     $132 = ($$0$i$i$i$i17|0)==(-1);
     if ($132) {
      HEAP32[$__b>>2] = 0;
      $150 = 1;
      break;
     } else {
      $$pre$i$i$i19 = HEAP32[$__b>>2]|0;
      $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
      $150 = $phitmp$i$i$i20;
      break;
     }
    }
   } while(0);
   $133 = ($$pre$i3$i$i25$lcssa|0)==(0|0);
   do {
    if ($133) {
     label = 62;
    } else {
     $134 = (($$pre$i3$i$i25$lcssa) + 12|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($$pre$i3$i$i25$lcssa) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($135|0)==($137|0);
     if ($138) {
      $139 = HEAP32[$$pre$i3$i$i25$lcssa>>2]|0;
      $140 = (($139) + 36|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i25$lcssa)|0);
      $$0$i$i1$i$i23 = $142;
     } else {
      $143 = HEAP32[$135>>2]|0;
      $$0$i$i1$i$i23 = $143;
     }
     $144 = ($$0$i$i1$i$i23|0)==(-1);
     if ($144) {
      HEAP32[$__e>>2] = 0;
      label = 62;
      break;
     } else {
      if ($150) {
       $$01 = $__r$0$lcssa;
       break L22;
      } else {
       $__r$037 = $__r$0$lcssa;
       break;
      }
     }
    }
   } while(0);
   if ((label|0) == 62) {
    if ($150) {
     $__r$037 = $__r$0$lcssa;
    } else {
     $$01 = $__r$0$lcssa;
     break;
    }
   }
   $145 = HEAP32[$__err>>2]|0;
   $146 = $145 | 2;
   HEAP32[$__err>>2] = $146;
   $$01 = $__r$037;
  }
 } while(0);
 return ($$01|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(575|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 660;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(575|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 660;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 do {
  if (!($13)) {
   $14 = (($15) - ($16))|0;
   $17 = ($14>>>0)<($12>>>0);
   if ($17) {
    $18 = (($16) + ($12))|0;
    $19 = (($18) - ($15))|0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $21 = $$pre;
   } else {
    $21 = $40;
   }
   $20 = $21 & 1;
   $22 = ($20<<24>>24)==(0);
   if ($22) {
    $25 = (($this) + 1|0);
    $27 = $25;
   } else {
    $23 = (($this) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $27 = $24;
   }
   $26 = (($27) + ($16)|0);
   $28 = (($16) - ($0))|0;
   $scevgep = (($__last) + ($28)|0);
   $scevgep3 = $scevgep;
   $$01 = $__first;$__p$02 = $26;
   while(1) {
    $29 = HEAP8[$$01>>0]|0;
    HEAP8[$__p$02>>0] = $29;
    $30 = (($__p$02) + 1|0);
    $31 = (($$01) + 1|0);
    $32 = ($31|0)==($__last|0);
    if ($32) {
     break;
    } else {
     $$01 = $31;$__p$02 = $30;
    }
   }
   $scevgep4 = (($27) + ($scevgep3)|0);
   HEAP8[$scevgep4>>0] = 0;
   $33 = (($16) + ($12))|0;
   $34 = HEAP8[$this>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $33 << 1;
    $39 = $38&255;
    HEAP8[$this>>0] = $39;
    break;
   } else {
    $37 = (($this) + 4|0);
    HEAP32[$37>>2] = $33;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(575|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 $14 = $2 ? $4 : 0;
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 660;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$46 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$46 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 do {
  if (!($14)) {
   $15 = (($16) - ($17))|0;
   $18 = ($15>>>0)<($13>>>0);
   if ($18) {
    $19 = (($17) + ($13))|0;
    $20 = (($19) - ($16))|0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
    $$pre = HEAP8[$this>>0]|0;
    $22 = $$pre;
   } else {
    $22 = $46;
   }
   $21 = $22 & 1;
   $23 = ($21<<24>>24)==(0);
   if ($23) {
    $26 = (($this) + 4|0);
    $28 = $26;
   } else {
    $24 = (($this) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $28 = $25;
   }
   $27 = (($28) + ($17<<2)|0);
   $29 = ($__first|0)==($__last|0);
   if ($29) {
    $__p$0$lcssa = $27;
   } else {
    $scevgep = (($__last) + -4|0);
    $30 = $scevgep;
    $31 = (($30) - ($0))|0;
    $32 = $31 >>> 2;
    $33 = (($17) + ($32))|0;
    $34 = (($33) + 1)|0;
    $$01 = $__first;$__p$02 = $27;
    while(1) {
     $35 = HEAP32[$$01>>2]|0;
     HEAP32[$__p$02>>2] = $35;
     $36 = (($__p$02) + 4|0);
     $37 = (($$01) + 4|0);
     $38 = ($37|0)==($__last|0);
     if ($38) {
      break;
     } else {
      $$01 = $37;$__p$02 = $36;
     }
    }
    $scevgep5 = (($28) + ($34<<2)|0);
    $__p$0$lcssa = $scevgep5;
   }
   HEAP32[$__p$0$lcssa>>2] = 0;
   $39 = (($17) + ($13))|0;
   $40 = HEAP8[$this>>0]|0;
   $41 = $40 & 1;
   $42 = ($41<<24>>24)==(0);
   if ($42) {
    $44 = $39 << 1;
    $45 = $44&255;
    HEAP8[$this>>0] = $45;
    break;
   } else {
    $43 = (($this) + 4|0);
    HEAP32[$43>>2] = $39;
    break;
   }
  }
 } while(0);
 return ($this|0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 do {
  if (!($3)) {
   __THREW__ = 0;
   invoke_vii(661,($this|0),($__n|0));
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $6 = ___cxa_find_matching_catch()|0;
    $7 = tempRet0;
    __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
    ___resumeException($6|0);
    // unreachable;
   } else {
    __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5112)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5152)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6720)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6712)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6784)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6792)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6848)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6864)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6872)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5224)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5344)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5504)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6096)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6160)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6224)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6288)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6328)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6464)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6512)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5616)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(5768)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6000)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6032)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6552)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(6592)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if (!($1)) {
   $2 = (($this) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($0|0);
   if (!($4)) {
    $__new_last2$i$i = $0;
    $scevgep$i$i = (($3) + -4|0);
    $5 = $scevgep$i$i;
    $6 = (($5) - ($__new_last2$i$i))|0;
    $7 = $6 >>> 2;
    $8 = $7 ^ -1;
    $scevgep4$i$i = (($3) + ($8<<2)|0);
    HEAP32[$2>>2] = $scevgep4$i$i;
   }
   $9 = (($this) + 16|0);
   $10 = ($9|0)==($0|0);
   if ($10) {
    $11 = (($this) + 128|0);
    HEAP8[$11>>0] = 0;
    break;
   } else {
    __ZdlPv($0);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
 } else {
  $9 = ($6>>>0)>($__sz>>>0);
  if ($9) {
   $10 = (($2) + ($__sz<<2)|0);
   $11 = ($1|0)==($10|0);
   if (!($11)) {
    $__new_last2$i$i = $10;
    $scevgep$i$i = (($1) + -4|0);
    $12 = $scevgep$i$i;
    $13 = (($12) - ($__new_last2$i$i))|0;
    $14 = $13 >>> 2;
    $15 = $14 ^ -1;
    $scevgep4$i$i = (($1) + ($15<<2)|0);
    HEAP32[$0>>2] = $scevgep4$i$i;
   }
  }
 }
 return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if ($8) {
  $9 = (($3) + ($id<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $11;
 } else {
  $12 = 0;
 }
 return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 FUNCTION_TABLE_vi[$10 & 1023]($3);
 return;
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = $to_end;
  $3 = $to;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)<(3);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $6;
   HEAP8[$to>>0] = -17;
   $7 = HEAP32[$to_nxt>>2]|0;
   $8 = (($7) + 1|0);
   HEAP32[$to_nxt>>2] = $8;
   HEAP8[$7>>0] = -69;
   $9 = HEAP32[$to_nxt>>2]|0;
   $10 = (($9) + 1|0);
   HEAP32[$to_nxt>>2] = $10;
   HEAP8[$9>>0] = -65;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $11 = $frm_end;
  $12 = HEAP32[$frm_nxt>>2]|0;
  $13 = ($12>>>0)<($frm_end>>>0);
  if ($13) {
   $14 = $to_end;
   $16 = $12;
   L7: while(1) {
    $15 = HEAP16[$16>>1]|0;
    $17 = $15&65535;
    $18 = ($17>>>0)>($Maxcode>>>0);
    if ($18) {
     $$0$ph = 2;
     break;
    }
    $19 = ($15&65535)<(128);
    do {
     if ($19) {
      $20 = HEAP32[$to_nxt>>2]|0;
      $21 = $20;
      $22 = (($14) - ($21))|0;
      $23 = ($22|0)<(1);
      if ($23) {
       $$0$ph = 1;
       break L7;
      }
      $24 = $15&255;
      $25 = (($20) + 1|0);
      HEAP32[$to_nxt>>2] = $25;
      HEAP8[$20>>0] = $24;
     } else {
      $26 = ($15&65535)<(2048);
      if ($26) {
       $27 = HEAP32[$to_nxt>>2]|0;
       $28 = $27;
       $29 = (($14) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        break L7;
       }
       $31 = $17 >>> 6;
       $32 = $31 | 192;
       $33 = $32&255;
       $34 = (($27) + 1|0);
       HEAP32[$to_nxt>>2] = $34;
       HEAP8[$27>>0] = $33;
       $35 = $17 & 63;
       $36 = $35 | 128;
       $37 = $36&255;
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $39;
       HEAP8[$38>>0] = $37;
       break;
      }
      $40 = ($15&65535)<(55296);
      if ($40) {
       $41 = HEAP32[$to_nxt>>2]|0;
       $42 = $41;
       $43 = (($14) - ($42))|0;
       $44 = ($43|0)<(3);
       if ($44) {
        $$0$ph = 1;
        break L7;
       }
       $45 = $17 >>> 12;
       $46 = $45 | 224;
       $47 = $46&255;
       $48 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $48;
       HEAP8[$41>>0] = $47;
       $49 = $17 >>> 6;
       $50 = $49 & 63;
       $51 = $50 | 128;
       $52 = $51&255;
       $53 = HEAP32[$to_nxt>>2]|0;
       $54 = (($53) + 1|0);
       HEAP32[$to_nxt>>2] = $54;
       HEAP8[$53>>0] = $52;
       $55 = $17 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$to_nxt>>2]|0;
       $59 = (($58) + 1|0);
       HEAP32[$to_nxt>>2] = $59;
       HEAP8[$58>>0] = $57;
       break;
      }
      $60 = ($15&65535)<(56320);
      if (!($60)) {
       $112 = ($15&65535)<(57344);
       if ($112) {
        $$0$ph = 2;
        break L7;
       }
       $113 = HEAP32[$to_nxt>>2]|0;
       $114 = $113;
       $115 = (($14) - ($114))|0;
       $116 = ($115|0)<(3);
       if ($116) {
        $$0$ph = 1;
        break L7;
       }
       $117 = $17 >>> 12;
       $118 = $117 | 224;
       $119 = $118&255;
       $120 = (($113) + 1|0);
       HEAP32[$to_nxt>>2] = $120;
       HEAP8[$113>>0] = $119;
       $121 = $17 >>> 6;
       $122 = $121 & 63;
       $123 = $122 | 128;
       $124 = $123&255;
       $125 = HEAP32[$to_nxt>>2]|0;
       $126 = (($125) + 1|0);
       HEAP32[$to_nxt>>2] = $126;
       HEAP8[$125>>0] = $124;
       $127 = $17 & 63;
       $128 = $127 | 128;
       $129 = $128&255;
       $130 = HEAP32[$to_nxt>>2]|0;
       $131 = (($130) + 1|0);
       HEAP32[$to_nxt>>2] = $131;
       HEAP8[$130>>0] = $129;
       break;
      }
      $61 = $16;
      $62 = (($11) - ($61))|0;
      $63 = ($62|0)<(4);
      if ($63) {
       $$0$ph = 1;
       break L7;
      }
      $64 = (($16) + 2|0);
      $65 = HEAP16[$64>>1]|0;
      $66 = $65&65535;
      $67 = $66 & 64512;
      $68 = ($67|0)==(56320);
      if (!($68)) {
       $$0$ph = 2;
       break L7;
      }
      $69 = HEAP32[$to_nxt>>2]|0;
      $70 = $69;
      $71 = (($14) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0$ph = 1;
       break L7;
      }
      $73 = $17 & 960;
      $74 = $73 << 10;
      $75 = (($74) + 65536)|0;
      $76 = $17 << 10;
      $77 = $76 & 64512;
      $78 = $75 | $77;
      $79 = $66 & 1023;
      $80 = $78 | $79;
      $81 = ($80>>>0)>($Maxcode>>>0);
      if ($81) {
       $$0$ph = 2;
       break L7;
      }
      HEAP32[$frm_nxt>>2] = $64;
      $82 = $73 >>> 6;
      $83 = (($82) + 1)|0;
      $84 = $83 >>> 2;
      $85 = $84 | 240;
      $86 = $85&255;
      $87 = HEAP32[$to_nxt>>2]|0;
      $88 = (($87) + 1|0);
      HEAP32[$to_nxt>>2] = $88;
      HEAP8[$87>>0] = $86;
      $89 = $83 << 4;
      $90 = $89 & 48;
      $91 = $17 >>> 2;
      $92 = $91 & 15;
      $93 = $92 | $90;
      $94 = $93 | 128;
      $95 = $94&255;
      $96 = HEAP32[$to_nxt>>2]|0;
      $97 = (($96) + 1|0);
      HEAP32[$to_nxt>>2] = $97;
      HEAP8[$96>>0] = $95;
      $98 = $17 << 4;
      $99 = $98 & 48;
      $100 = $66 >>> 6;
      $101 = $100 & 15;
      $102 = $99 | $101;
      $103 = $102 | 128;
      $104 = $103&255;
      $105 = HEAP32[$to_nxt>>2]|0;
      $106 = (($105) + 1|0);
      HEAP32[$to_nxt>>2] = $106;
      HEAP8[$105>>0] = $104;
      $107 = $66 & 63;
      $108 = $107 | 128;
      $109 = $108&255;
      $110 = HEAP32[$to_nxt>>2]|0;
      $111 = (($110) + 1|0);
      HEAP32[$to_nxt>>2] = $111;
      HEAP8[$110>>0] = $109;
     }
    } while(0);
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = (($132) + 2|0);
    HEAP32[$frm_nxt>>2] = $133;
    $134 = ($133>>>0)<($frm_end>>>0);
    if ($134) {
     $16 = $133;
    } else {
     $$0$ph = 0;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $$off = 0, $$ph = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre5 = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre5;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $$ph = $22;
     label = 40;
     break;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0$ph = 2;
     label = 42;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0$ph = 1;
        label = 42;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0$ph = 1;
        label = 42;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       } else if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0$ph = 2;
         label = 42;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0$ph = 1;
       label = 42;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0$ph = 2;
        label = 42;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0$ph = 1;
       label = 42;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0$ph = 2;
       label = 42;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $$ph = $132;
     label = 40;
     break;
    }
   }
   if ((label|0) == 40) {
    $135 = $$ph;
    label = 41;
    break;
   }
   else if ((label|0) == 42) {
    $$0 = $$0$ph;
    break;
   }
  } else {
   $135 = $16;
   label = 41;
  }
 } while(0);
 if ((label|0) == 41) {
  $134 = ($135>>>0)<($frm_end>>>0);
  $136 = $134&1;
  $$0 = $136;
 }
 return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$lcssa78 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa$ph = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond15 = $15 & $16;
 do {
  if ($or$cond15) {
   $17 = $frm_end;
   $frm_nxt$117 = $frm_nxt$1$ph;$nchar16_t$016 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$117>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa$ph = $frm_nxt$117;
     label = 43;
     break;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$117) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$016;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$117;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $28 = (($frm_nxt$117) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $38 = (($frm_nxt$117) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$117;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $43 = (($frm_nxt$117) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$117) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         $$lcssa77 = $40;
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         $$lcssa76 = $40;
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$lcssa78 = $40;
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$117;
        label = 43;
        break L9;
       }
       $71 = (($frm_nxt$117) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $73 = $frm_nxt$117;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      $76 = (($mx) - ($nchar16_t$016))|0;
      $77 = ($76>>>0)<(2);
      $or$cond2 = $75 | $77;
      if ($or$cond2) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $78 = (($frm_nxt$117) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$117) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$117) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$lcssa74 = $73;
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$lcssa = $73;
        label = 35;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        $$lcssa75 = $73;
        label = 37;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$117;
       label = 43;
       break L9;
      }
      $113 = (($nchar16_t$016) + 1)|0;
      $114 = (($frm_nxt$117) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$117 = $frm_nxt$2;$nchar16_t$016 = $115;
    } else {
     $frm_nxt$1$lcssa$ph = $frm_nxt$2;
     label = 43;
     break;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($$lcssa77) - ($49))|0;
    $$0 = $50;
    break;
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($$lcssa76) - ($53))|0;
    $$0 = $54;
    break;
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($$lcssa78) - ($57))|0;
    $$0 = $58;
    break;
   }
   else if ((label|0) == 33) {
    $85 = $frm;
    $86 = (($$lcssa74) - ($85))|0;
    $$0 = $86;
    break;
   }
   else if ((label|0) == 35) {
    $89 = $frm;
    $90 = (($$lcssa) - ($89))|0;
    $$0 = $90;
    break;
   }
   else if ((label|0) == 37) {
    $93 = $frm;
    $94 = (($$lcssa75) - ($93))|0;
    $$0 = $94;
    break;
   }
   else if ((label|0) == 43) {
    $frm_nxt$1$lcssa = $frm_nxt$1$lcssa$ph;
    label = 44;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $118 = $frm_nxt$1$lcssa;
  $119 = $frm;
  $120 = (($118) - ($119))|0;
  $$0 = $120;
 }
 return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = $to_end;
  $3 = $to;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)<(3);
  if ($5) {
   $$0 = 1;
  } else {
   $6 = (($to) + 1|0);
   HEAP32[$to_nxt>>2] = $6;
   HEAP8[$to>>0] = -17;
   $7 = HEAP32[$to_nxt>>2]|0;
   $8 = (($7) + 1|0);
   HEAP32[$to_nxt>>2] = $8;
   HEAP8[$7>>0] = -69;
   $9 = HEAP32[$to_nxt>>2]|0;
   $10 = (($9) + 1|0);
   HEAP32[$to_nxt>>2] = $10;
   HEAP8[$9>>0] = -65;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[$frm_nxt>>2]|0;
  $12 = ($11>>>0)<($frm_end>>>0);
  if ($12) {
   $13 = $to_end;
   $15 = $11;
   L7: while(1) {
    $14 = HEAP32[$15>>2]|0;
    $16 = $14 & -2048;
    $17 = ($16|0)==(55296);
    $18 = ($14>>>0)>($Maxcode>>>0);
    $or$cond = $17 | $18;
    if ($or$cond) {
     $$0$ph = 2;
     break;
    }
    $19 = ($14>>>0)<(128);
    do {
     if ($19) {
      $20 = HEAP32[$to_nxt>>2]|0;
      $21 = $20;
      $22 = (($13) - ($21))|0;
      $23 = ($22|0)<(1);
      if ($23) {
       $$0$ph = 1;
       break L7;
      }
      $24 = $14&255;
      $25 = (($20) + 1|0);
      HEAP32[$to_nxt>>2] = $25;
      HEAP8[$20>>0] = $24;
     } else {
      $26 = ($14>>>0)<(2048);
      if ($26) {
       $27 = HEAP32[$to_nxt>>2]|0;
       $28 = $27;
       $29 = (($13) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        break L7;
       }
       $31 = $14 >>> 6;
       $32 = $31 | 192;
       $33 = $32&255;
       $34 = (($27) + 1|0);
       HEAP32[$to_nxt>>2] = $34;
       HEAP8[$27>>0] = $33;
       $35 = $14 & 63;
       $36 = $35 | 128;
       $37 = $36&255;
       $38 = HEAP32[$to_nxt>>2]|0;
       $39 = (($38) + 1|0);
       HEAP32[$to_nxt>>2] = $39;
       HEAP8[$38>>0] = $37;
       break;
      }
      $40 = ($14>>>0)<(65536);
      $41 = HEAP32[$to_nxt>>2]|0;
      $42 = $41;
      $43 = (($13) - ($42))|0;
      if ($40) {
       $44 = ($43|0)<(3);
       if ($44) {
        $$0$ph = 1;
        break L7;
       }
       $45 = $14 >>> 12;
       $46 = $45 | 224;
       $47 = $46&255;
       $48 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $48;
       HEAP8[$41>>0] = $47;
       $49 = $14 >>> 6;
       $50 = $49 & 63;
       $51 = $50 | 128;
       $52 = $51&255;
       $53 = HEAP32[$to_nxt>>2]|0;
       $54 = (($53) + 1|0);
       HEAP32[$to_nxt>>2] = $54;
       HEAP8[$53>>0] = $52;
       $55 = $14 & 63;
       $56 = $55 | 128;
       $57 = $56&255;
       $58 = HEAP32[$to_nxt>>2]|0;
       $59 = (($58) + 1|0);
       HEAP32[$to_nxt>>2] = $59;
       HEAP8[$58>>0] = $57;
       break;
      } else {
       $60 = ($43|0)<(4);
       if ($60) {
        $$0$ph = 1;
        break L7;
       }
       $61 = $14 >>> 18;
       $62 = $61 | 240;
       $63 = $62&255;
       $64 = (($41) + 1|0);
       HEAP32[$to_nxt>>2] = $64;
       HEAP8[$41>>0] = $63;
       $65 = $14 >>> 12;
       $66 = $65 & 63;
       $67 = $66 | 128;
       $68 = $67&255;
       $69 = HEAP32[$to_nxt>>2]|0;
       $70 = (($69) + 1|0);
       HEAP32[$to_nxt>>2] = $70;
       HEAP8[$69>>0] = $68;
       $71 = $14 >>> 6;
       $72 = $71 & 63;
       $73 = $72 | 128;
       $74 = $73&255;
       $75 = HEAP32[$to_nxt>>2]|0;
       $76 = (($75) + 1|0);
       HEAP32[$to_nxt>>2] = $76;
       HEAP8[$75>>0] = $74;
       $77 = $14 & 63;
       $78 = $77 | 128;
       $79 = $78&255;
       $80 = HEAP32[$to_nxt>>2]|0;
       $81 = (($80) + 1|0);
       HEAP32[$to_nxt>>2] = $81;
       HEAP8[$80>>0] = $79;
       break;
      }
     }
    } while(0);
    $82 = HEAP32[$frm_nxt>>2]|0;
    $83 = (($82) + 4|0);
    HEAP32[$frm_nxt>>2] = $83;
    $84 = ($83>>>0)<($frm_end>>>0);
    if ($84) {
     $15 = $83;
    } else {
     $$0$ph = 0;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$0$ph = 0, $$off = 0, $$ph = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 do {
  if ($15) {
   $17 = $frm_end;
   $$pre5 = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre5;$21 = $16;
   L10: while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $$ph = $21;
     label = 39;
     break;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0$ph = 1;
        label = 41;
        break L10;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0$ph = 1;
        label = 41;
        break L10;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0$ph = 2;
         label = 41;
         break L10;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0$ph = 1;
       label = 41;
       break L10;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0$ph = 2;
        label = 41;
        break L10;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0$ph = 2;
       label = 41;
       break L10;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $$ph = $105;
     label = 39;
     break;
    }
   }
   if ((label|0) == 39) {
    $108 = $$ph;
    label = 40;
    break;
   }
   else if ((label|0) == 41) {
    $$0 = $$0$ph;
    break;
   }
  } else {
   $108 = $16;
   label = 40;
  }
 } while(0);
 if ((label|0) == 40) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$lcssa = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$lcssa$ph = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         $$lcssa74 = $40;
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         $$lcssa75 = $40;
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$lcssa76 = $40;
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa$ph = $frm_nxt$115;
        label = 43;
        break L9;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        $$lcssa72 = $73;
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$lcssa = $73;
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        $$lcssa73 = $73;
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa$ph = $frm_nxt$115;
       label = 43;
       break L9;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = (($nchar32_t$014) + 1)|0;
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($112>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $112;
    } else {
     $frm_nxt$1$lcssa$ph = $frm_nxt$2;
     label = 43;
     break;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($$lcssa75) - ($49))|0;
    $$0 = $50;
    break;
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($$lcssa74) - ($53))|0;
    $$0 = $54;
    break;
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($$lcssa76) - ($57))|0;
    $$0 = $58;
    break;
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($$lcssa72) - ($83))|0;
    $$0 = $84;
    break;
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($$lcssa) - ($87))|0;
    $$0 = $88;
    break;
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($$lcssa73) - ($91))|0;
    $$0 = $92;
    break;
   }
   else if ((label|0) == 43) {
    $frm_nxt$1$lcssa = $frm_nxt$1$lcssa$ph;
    label = 44;
    break;
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
   label = 44;
  }
 } while(0);
 if ((label|0) == 44) {
  $115 = $frm_nxt$1$lcssa;
  $116 = $frm;
  $117 = (($115) - ($116))|0;
  $$0 = $117;
 }
 return ($$0|0);
}
function ___cxx_global_array_dtor108($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14064 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(14064);
 return;
}
function ___cxx_global_array_dtor93($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13528 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(13528);
 return;
}
function ___cxx_global_array_dtor69($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((13016 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(13016);
 return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((12176 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(12176);
 return;
}
function ___cxx_global_array_dtor42($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((11864 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11864);
 return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((11536 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11536);
 return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6792)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 else if ((label|0) == 5) {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$ph = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ($__n|0)>(0);
  if ($3) {
   $$012 = $__s;$__i$03 = 0;
   while(1) {
    $7 = HEAP32[$this>>2]|0;
    $8 = (($7) + 52|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$$012>>2]|0;
    $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     $$0$ph = $__i$03;
     break;
    }
    $13 = (($__i$03) + 1)|0;
    $14 = (($$012) + 4|0);
    $15 = ($13|0)<($__n|0);
    if ($15) {
     $$012 = $14;$__i$03 = $13;
    } else {
     $$0$ph = $13;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 } else {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
 }
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 do {
  if ($0) {
   label = 12;
  } else {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     label = 13;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     $pbase$0$lcssa6 = $pbase$0;
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     label = 13;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     label = 13;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0$lcssa6|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   else if ((label|0) == 11) {
    label = 12;
    break;
   }
   else if ((label|0) == 13) {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6792)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(3296);
 }
 return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = (($this) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = (($this) + 48|0);
   do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     HEAP32[$__ci>>2] = $9;
     $10 = (($this) + 36|0);
     $11 = HEAP32[$10>>2]|0;
     $12 = (($this) + 40|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = (($__ci) + 4|0);
     $15 = (($__extbuf) + 8|0);
     $16 = HEAP32[$11>>2]|0;
     $17 = (($16) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
     if ((($19|0) == 3)) {
      $20 = HEAP32[$8>>2]|0;
      $21 = $20&255;
      HEAP8[$__extbuf>>0] = $21;
      $22 = (($__extbuf) + 1|0);
      HEAP32[$__enxt>>2] = $22;
     } else if ((($19|0) == 1) | (($19|0) == 2)) {
      $$01 = -1;
      break L1;
     }
     $23 = (($this) + 32|0);
     while(1) {
      $24 = HEAP32[$__enxt>>2]|0;
      $25 = ($24>>>0)>($__extbuf>>>0);
      if (!($25)) {
       label = 10;
       break;
      }
      $26 = (($24) + -1|0);
      HEAP32[$__enxt>>2] = $26;
      $27 = HEAP8[$26>>0]|0;
      $28 = $27 << 24 >> 24;
      $29 = HEAP32[$23>>2]|0;
      $30 = (_ungetc(($28|0),($29|0))|0);
      $31 = ($30|0)==(-1);
      if ($31) {
       label = 12;
       break;
      }
     }
     if ((label|0) == 10) {
      break;
     }
     else if ((label|0) == 12) {
      $$01 = -1;
      break L1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6784)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
 }
 else if ((label|0) == 5) {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$ph = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $3 = ($__n|0)>(0);
  if ($3) {
   $$012 = $__s;$__i$03 = 0;
   while(1) {
    $7 = HEAP32[$this>>2]|0;
    $8 = (($7) + 52|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP8[$$012>>0]|0;
    $11 = $10&255;
    $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0$ph = $__i$03;
     break;
    }
    $14 = (($__i$03) + 1)|0;
    $15 = (($$012) + 1|0);
    $16 = ($14|0)<($__n|0);
    if ($16) {
     $$012 = $15;$__i$03 = $14;
    } else {
     $$0$ph = $14;
     break;
    }
   }
   $$0 = $$0$ph;
  } else {
   $$0 = 0;
  }
 } else {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
 }
 return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 do {
  if ($0) {
   label = 12;
  } else {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     label = 13;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     $pbase$0$lcssa6 = $pbase$0;
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     label = 13;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     label = 13;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     label = 11;
     break;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0$lcssa6|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     label = 12;
     break;
    } else {
     $$0 = -1;
     break;
    }
   }
   else if ((label|0) == 11) {
    label = 12;
    break;
   }
   else if ((label|0) == 13) {
    $$0 = -1;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $$__c$i = $0 ? 0 : $__c;
  $$0 = $$__c$i;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,6784)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if ($15) {
  __ZNSt3__121__throw_runtime_errorEPKc(3296);
 }
 return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 L1: do {
  if ($0) {
   if ($3) {
    $$01 = -1;
   } else {
    $4 = (($this) + 48|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)!=(-1);
    $7 = $6&1;
    HEAP8[$1>>0] = $7;
    $$01 = $5;
   }
  } else {
   $8 = (($this) + 48|0);
   do {
    if ($3) {
     $9 = HEAP32[$8>>2]|0;
     $10 = $9&255;
     HEAP8[$__ci>>0] = $10;
     $11 = (($this) + 36|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($this) + 40|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($__ci) + 1|0);
     $16 = (($__extbuf) + 8|0);
     $17 = HEAP32[$12>>2]|0;
     $18 = (($17) + 12|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
     if ((($20|0) == 3)) {
      $21 = HEAP32[$8>>2]|0;
      $22 = $21&255;
      HEAP8[$__extbuf>>0] = $22;
      $23 = (($__extbuf) + 1|0);
      HEAP32[$__enxt>>2] = $23;
     } else if ((($20|0) == 1) | (($20|0) == 2)) {
      $$01 = -1;
      break L1;
     }
     $24 = (($this) + 32|0);
     while(1) {
      $25 = HEAP32[$__enxt>>2]|0;
      $26 = ($25>>>0)>($__extbuf>>>0);
      if (!($26)) {
       label = 10;
       break;
      }
      $27 = (($25) + -1|0);
      HEAP32[$__enxt>>2] = $27;
      $28 = HEAP8[$27>>0]|0;
      $29 = $28 << 24 >> 24;
      $30 = HEAP32[$24>>2]|0;
      $31 = (_ungetc(($29|0),($30|0))|0);
      $32 = ($31|0)==(-1);
      if ($32) {
       label = 12;
       break;
      }
     }
     if ((label|0) == 10) {
      break;
     }
     else if ((label|0) == 12) {
      $$01 = -1;
      break L1;
     }
    }
   } while(0);
   HEAP32[$8>>2] = $__c;
   HEAP8[$1>>0] = 1;
   $$01 = $__c;
  }
 } while(0);
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 L1: do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   do {
    if ($10) {
     HEAP32[$__err>>2] = 4;
     $21 = ($5|0)>(0);
     $22 = ($4>>>0)>(0);
     $23 = ($5|0)==(0);
     $24 = $23 & $22;
     $25 = $21 | $24;
     if ($25) {
      $$0 = 2147483647;
      break L1;
     }
    } else {
     $11 = ($5|0)<(-1);
     $12 = ($4>>>0)<(2147483648);
     $13 = ($5|0)==(-1);
     $14 = $13 & $12;
     $15 = $11 | $14;
     if ($15) {
      HEAP32[$__err>>2] = 4;
      break;
     }
     $16 = ($5|0)>(0);
     $17 = ($4>>>0)>(2147483647);
     $18 = ($5|0)==(0);
     $19 = $18 & $17;
     $20 = $16 | $19;
     if ($20) {
      HEAP32[$__err>>2] = 4;
      $$0 = 2147483647;
      break L1;
     } else {
      $$0 = $4;
      break L1;
     }
    }
   } while(0);
   $$0 = -2147483648;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $18 = 0;$19 = 0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
   $5 = tempRet0;
   $6 = HEAP32[$1>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    HEAP32[$1>>2] = $2;
   }
   $8 = HEAP32[$__p2>>2]|0;
   $9 = ($8|0)==($__a_end|0);
   if (!($9)) {
    HEAP32[$__err>>2] = 4;
    $18 = 0;$19 = 0;
    break;
   }
   $10 = ($6|0)==(34);
   if ($10) {
    HEAP32[$__err>>2] = 4;
    $11 = ($5|0)>(0);
    $12 = ($4>>>0)>(0);
    $13 = ($5|0)==(0);
    $14 = $13 & $12;
    $15 = $11 | $14;
    $16 = $15 ? -1 : 0;
    $17 = $15 ? 2147483647 : -2147483648;
    tempRet0 = $17;
    STACKTOP = sp;return ($16|0);
   } else {
    $18 = $5;$19 = $4;
   }
  }
 } while(0);
 tempRet0 = $18;
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(65535);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $18 = $6&65535;
    $$0 = $18;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   $13 = ($7>>>0)>(0);
   $14 = ($6>>>0)>(4294967295);
   $15 = ($7|0)==(0);
   $16 = $15 & $14;
   $17 = $13 | $16;
   $or$cond = $12 | $17;
   if ($or$cond) {
    HEAP32[$__err>>2] = 4;
    $$0 = -1;
    break;
   } else {
    $$0 = $6;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
   }
   $10 = $4;
   $$0 = $10;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if ($8) {
  $9 = (($this) + 16|0);
  $10 = HEAP32[$this>>2]|0;
  $11 = $10;
  $12 = (($5) - ($11))|0;
  $13 = $12 >> 2;
  $14 = (($13) + ($__n))|0;
  $15 = ($14>>>0)>(1073741823);
  if ($15) {
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
   // unreachable;
  }
  $16 = (($4) - ($11))|0;
  $17 = $16 >> 2;
  $18 = ($17>>>0)<(536870911);
  if ($18) {
   $19 = $16 >> 1;
   $20 = ($19>>>0)<($14>>>0);
   $21 = $20 ? $14 : $19;
   $$0$i = $21;
  } else {
   $$0$i = 1073741823;
  }
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = (($this) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ($8|0)>(0);
   do {
    if ($9) {
     $10 = (($this) + 32|0);
     $__i$09 = 0;
     while(1) {
      $11 = HEAP32[$10>>2]|0;
      $12 = (_getc(($11|0))|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       label = 26;
       break;
      }
      $14 = $12&255;
      $15 = (($__extbuf) + ($__i$09)|0);
      HEAP8[$15>>0] = $14;
      $16 = (($__i$09) + 1)|0;
      $17 = ($16|0)<($8|0);
      if ($17) {
       $__i$09 = $16;
      } else {
       label = 8;
       break;
      }
     }
     if ((label|0) == 8) {
      break;
     }
     else if ((label|0) == 26) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $18 = (($this) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   do {
    if ($20) {
     $21 = (($this) + 40|0);
     $22 = (($this) + 36|0);
     $23 = (($__1buf) + 4|0);
     $24 = (($this) + 32|0);
     $__nread$0 = $8;
     while(1) {
      $27 = HEAP32[$21>>2]|0;
      $28 = $27;
      $29 = $28;
      $30 = HEAP32[$29>>2]|0;
      $31 = (($28) + 4)|0;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = HEAP32[$22>>2]|0;
      $35 = (($__extbuf) + ($__nread$0)|0);
      $36 = HEAP32[$34>>2]|0;
      $37 = (($36) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
      if ((($39|0) == 3)) {
       $__nread$0$lcssa14 = $__nread$0;
       label = 15;
       break;
      } else if ((($39|0) == 2)) {
       label = 25;
       break;
      } else if (!((($39|0) == 1))) {
       $__nread$0$lcssa = $__nread$0;
       label = 17;
       break;
      }
      $40 = HEAP32[$21>>2]|0;
      $41 = $40;
      $42 = $41;
      HEAP32[$42>>2] = $30;
      $43 = (($41) + 4)|0;
      $44 = $43;
      HEAP32[$44>>2] = $33;
      $45 = ($__nread$0|0)==(8);
      if ($45) {
       label = 25;
       break;
      }
      $46 = HEAP32[$24>>2]|0;
      $47 = (_getc(($46|0))|0);
      $48 = ($47|0)==(-1);
      if ($48) {
       label = 25;
       break;
      }
      $51 = $47&255;
      HEAP8[$35>>0] = $51;
      $52 = (($__nread$0) + 1)|0;
      $__nread$0 = $52;
     }
     if ((label|0) == 15) {
      $49 = HEAP8[$__extbuf>>0]|0;
      $50 = $49 << 24 >> 24;
      HEAP32[$__1buf>>2] = $50;
      $__nread$2 = $__nread$0$lcssa14;
      break;
     }
     else if ((label|0) == 17) {
      $__nread$2 = $__nread$0$lcssa;
      break;
     }
     else if ((label|0) == 25) {
      $$0 = -1;
      break L1;
     }
    } else {
     $25 = HEAP8[$__extbuf>>0]|0;
     $26 = $25 << 24 >> 24;
     HEAP32[$__1buf>>2] = $26;
     $__nread$2 = $8;
    }
   } while(0);
   if ($__consume) {
    $62 = HEAP32[$__1buf>>2]|0;
    $63 = (($this) + 48|0);
    HEAP32[$63>>2] = $62;
    $$0 = $62;
    break;
   }
   $53 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $54 = ($__i2$0|0)>(0);
    if (!($54)) {
     label = 23;
     break;
    }
    $55 = (($__i2$0) + -1)|0;
    $56 = (($__extbuf) + ($55)|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57 << 24 >> 24;
    $59 = HEAP32[$53>>2]|0;
    $60 = (_ungetc(($58|0),($59|0))|0);
    $61 = ($60|0)==(-1);
    if ($61) {
     label = 24;
     break;
    } else {
     $__i2$0 = $55;
    }
   }
   if ((label|0) == 23) {
    $$pre = HEAP32[$__1buf>>2]|0;
    $$0 = $$pre;
    break;
   }
   else if ((label|0) == 24) {
    $$0 = -1;
    break;
   }
  } else {
   $3 = (($this) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L1: do {
  if ($2) {
   $5 = (($this) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(1);
   $8 = $7 ? $6 : 1;
   $9 = ($8|0)>(0);
   do {
    if ($9) {
     $10 = (($this) + 32|0);
     $__i$09 = 0;
     while(1) {
      $11 = HEAP32[$10>>2]|0;
      $12 = (_getc(($11|0))|0);
      $13 = ($12|0)==(-1);
      if ($13) {
       label = 27;
       break;
      }
      $14 = $12&255;
      $15 = (($__extbuf) + ($__i$09)|0);
      HEAP8[$15>>0] = $14;
      $16 = (($__i$09) + 1)|0;
      $17 = ($16|0)<($8|0);
      if ($17) {
       $__i$09 = $16;
      } else {
       label = 8;
       break;
      }
     }
     if ((label|0) == 8) {
      break;
     }
     else if ((label|0) == 27) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $18 = (($this) + 53|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)==(0);
   do {
    if ($20) {
     $21 = (($this) + 40|0);
     $22 = (($this) + 36|0);
     $23 = (($__1buf) + 1|0);
     $24 = (($this) + 32|0);
     $__nread$0 = $8;
     while(1) {
      $26 = HEAP32[$21>>2]|0;
      $27 = $26;
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($27) + 4)|0;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = HEAP32[$22>>2]|0;
      $34 = (($__extbuf) + ($__nread$0)|0);
      $35 = HEAP32[$33>>2]|0;
      $36 = (($35) + 16|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
      if ((($38|0) == 3)) {
       $__nread$0$lcssa14 = $__nread$0;
       label = 15;
       break;
      } else if ((($38|0) == 2)) {
       label = 26;
       break;
      } else if (!((($38|0) == 1))) {
       $__nread$0$lcssa = $__nread$0;
       label = 17;
       break;
      }
      $39 = HEAP32[$21>>2]|0;
      $40 = $39;
      $41 = $40;
      HEAP32[$41>>2] = $29;
      $42 = (($40) + 4)|0;
      $43 = $42;
      HEAP32[$43>>2] = $32;
      $44 = ($__nread$0|0)==(8);
      if ($44) {
       label = 26;
       break;
      }
      $45 = HEAP32[$24>>2]|0;
      $46 = (_getc(($45|0))|0);
      $47 = ($46|0)==(-1);
      if ($47) {
       label = 26;
       break;
      }
      $49 = $46&255;
      HEAP8[$34>>0] = $49;
      $50 = (($__nread$0) + 1)|0;
      $__nread$0 = $50;
     }
     if ((label|0) == 15) {
      $48 = HEAP8[$__extbuf>>0]|0;
      HEAP8[$__1buf>>0] = $48;
      $__nread$2 = $__nread$0$lcssa14;
      break;
     }
     else if ((label|0) == 17) {
      $__nread$2 = $__nread$0$lcssa;
      break;
     }
     else if ((label|0) == 26) {
      $$0 = -1;
      break L1;
     }
    } else {
     $25 = HEAP8[$__extbuf>>0]|0;
     HEAP8[$__1buf>>0] = $25;
     $__nread$2 = $8;
    }
   } while(0);
   do {
    if ($__consume) {
     $60 = HEAP8[$__1buf>>0]|0;
     $61 = $60&255;
     $62 = (($this) + 48|0);
     HEAP32[$62>>2] = $61;
     $64 = $60;
    } else {
     $51 = (($this) + 32|0);
     $__i2$0 = $__nread$2;
     while(1) {
      $52 = ($__i2$0|0)>(0);
      if (!($52)) {
       label = 23;
       break;
      }
      $53 = (($__i2$0) + -1)|0;
      $54 = (($__extbuf) + ($53)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55&255;
      $57 = HEAP32[$51>>2]|0;
      $58 = (_ungetc(($56|0),($57|0))|0);
      $59 = ($58|0)==(-1);
      if ($59) {
       label = 25;
       break;
      } else {
       $__i2$0 = $53;
      }
     }
     if ((label|0) == 23) {
      $$pre = HEAP8[$__1buf>>0]|0;
      $64 = $$pre;
      break;
     }
     else if ((label|0) == 25) {
      $$0 = -1;
      break L1;
     }
    }
   } while(0);
   $63 = $64&255;
   $$0 = $63;
  } else {
   $3 = (($this) + 48|0);
   $4 = HEAP32[$3>>2]|0;
   if ($__consume) {
    HEAP32[$3>>2] = -1;
    HEAP8[$0>>0] = 0;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $$not$i$i & $5;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = (($this) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($9|0);
   if ($13) {
    $14 = (($12) + 112|0);
    HEAP8[$14>>0] = 0;
    break;
   } else {
    __ZdlPv($9);
    break;
   }
  }
 } while(0);
 return;
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 14584;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa14 = 0, $$lcssa16 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$st = $1 ? 14592 : $st;
 $2 = HEAP32[$$st>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (14376 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     }
     $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       $$lcssa = $34;$$lcssa16 = $35;
       label = 15;
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $$lcssa14 = $34;
       label = 18;
       break;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       label = 20;
       break;
      }
     }
     if ((label|0) == 15) {
      HEAP32[$$st>>2] = 0;
      HEAP32[$11>>2] = $$lcssa;
      $37 = (($n) - ($$lcssa16))|0;
      $$0 = $37;
      STACKTOP = sp;return ($$0|0);
     }
     else if ((label|0) == 18) {
      $c$2 = $$lcssa14;
      break;
     }
     else if ((label|0) == 20) {
      break L1;
     }
    }
   } while(0);
   HEAP32[$$st>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$st>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014$ = 0, $$014$lcssa = 0, $$014$lcssa$ph = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa57 = 0, $$old4 = 0, $$old7 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$0$lcssa$ph = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0;
 var $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$0$lcssa$ph = 0, $ws$030 = 0, $ws$1 = 0, $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $2 & $3;
 do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $5 | $6;
    if (!($or$cond13)) {
     $$0$lcssa$ph = $$031;$$014$lcssa$ph = $$01428;$$ph = $32;$cnt$0$lcssa$ph = $cnt$029;$ws$0$lcssa$ph = $ws$030;
     label = 8;
     break;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     label = 17;
     break;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $15 & $16;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa$ph = $7;$$014$lcssa$ph = $$115;$$ph = $14;$cnt$0$lcssa$ph = $13;$ws$0$lcssa$ph = $ws$1;
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $$0$lcssa = $$0$lcssa$ph;$$014$lcssa = $$014$lcssa$ph;$18 = $$ph;$cnt$0$lcssa = $cnt$0$lcssa$ph;$ws$0$lcssa = $ws$0$lcssa$ph;
    label = 9;
    break;
   }
   else if ((label|0) == 17) {
    $cnt$3 = -1;
    break;
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$18 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 9;
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $17 = ($18|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $17 & $19;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $20;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $18;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $$lcssa57 = $30;
      label = 16;
      break;
     }
    }
    if ((label|0) == 16) {
     $cnt$3 = $$lcssa57;
     break;
    }
    if ((($$lcssa|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    } else if ((($$lcssa|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$03$ph = 0, $$1 = 0, $$1$lcssa = 0, $$14$lcssa = 0, $$1413 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0;
 var $$5 = 0, $$5$lcssa = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$830 = 0, $$in = 0, $$lcssa = 0, $$lcssa35 = 0, $$lcssa36 = 0, $$lcssa37 = 0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa49 = 0, $$lcssa51 = 0, $$old1 = 0, $$pre$pre = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$0$ph = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1033 = 0, $s$1034 = 0, $s$114 = 0;
 var $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$6$lcssa = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 20;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 43;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03$ph = $wn;$s$0$ph = $0;
   label = 6;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 7;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $$03 = $$03$ph;$s$0 = $s$0$ph;
   while(1) {
    $7 = HEAP8[$s$0>>0]|0;
    $8 = $7&255;
    $9 = (($8) + -1)|0;
    $10 = ($9>>>0)<(127);
    if ($10) {
     $11 = $s$0;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $14 = HEAP32[$s$0>>2]|0;
      $15 = (($14) + -16843009)|0;
      $16 = $15 | $14;
      $17 = $16 & -2139062144;
      $18 = ($17|0)==(0);
      if ($18) {
       $$1413 = $$03;$s$114 = $s$0;
       while(1) {
        $19 = (($s$114) + 4|0);
        $20 = (($$1413) + -4)|0;
        $21 = HEAP32[$19>>2]|0;
        $22 = (($21) + -16843009)|0;
        $23 = $22 | $21;
        $24 = $23 & -2139062144;
        $25 = ($24|0)==(0);
        if ($25) {
         $$1413 = $20;$s$114 = $19;
        } else {
         $$lcssa = $19;$$lcssa35 = $20;$$lcssa36 = $21;
         break;
        }
       }
       $$14$lcssa = $$lcssa35;$$in = $$lcssa36;$s$1$lcssa = $$lcssa;
      } else {
       $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
      }
      $26 = $$in&255;
      $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
     } else {
      $$25 = $$03;$28 = $7;$s$2 = $s$0;
     }
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
    $27 = $28&255;
    $29 = (($27) + -1)|0;
    $30 = ($29>>>0)<(127);
    if (!($30)) {
     $$25$lcssa = $$25;$$lcssa37 = $27;$s$2$lcssa = $s$2;
     break;
    }
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
   }
   $33 = (($$lcssa37) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$432 = $ws;$$830 = $$25$lcssa;$s$1034 = $s$2$lcssa;
    label = 54;
    break;
   }
   $35 = (($s$2$lcssa) + 1|0);
   $36 = (14376 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25$lcssa;$c$2 = $37;$s$3 = $35;
   label = 20;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 31;
    break;
   }
   $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   while(1) {
    $63 = HEAP8[$s$518>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    do {
     if ($66) {
      $67 = $s$518;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4716>>>0)>(4);
      $or$cond = $69 & $70;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        $76 = $71&255;
        if (!($75)) {
         $$1$lcssa = $$1;$$5$lcssa = $$5;$$lcssa41 = $76;$s$6$lcssa = $s$6;
         label = 38;
         break;
        }
        $77 = (($s$6) + 1|0);
        $78 = $71 & 255;
        $79 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = (($s$6) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = (($$1) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = (($s$6) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = (($$1) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = (($s$6) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = (($$1) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         $$lcssa43 = $88;$$lcssa44 = $91;$$lcssa45 = $92;
         label = 37;
         break;
        }
       }
       if ((label|0) == 37) {
        label = 0;
        $$pre$pre = HEAP8[$$lcssa43>>0]|0;
        $$2 = $$lcssa44;$$6 = $$lcssa45;$94 = $$pre$pre;$s$7 = $$lcssa43;
        break;
       }
       else if ((label|0) == 38) {
        label = 0;
        $$2 = $$1$lcssa;$$6 = $$5$lcssa;$94 = $$lcssa41;$s$7 = $s$6$lcssa;
        break;
       }
      } else {
       $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     $$2$lcssa = $$2;$$6$lcssa = $$6;$$lcssa49 = $93;$s$7$lcssa = $s$7;
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $$lcssa51 = $97;
     label = 30;
     break L7;
    } else {
     $$0217 = $98;$$4716 = $99;$s$518 = $97;
    }
   }
   $101 = (($$lcssa49) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$432 = $$2$lcssa;$$830 = $$6$lcssa;$s$1034 = $s$7$lcssa;
    label = 54;
    break;
   }
   $103 = (($s$7$lcssa) + 1|0);
   $104 = (14376 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2$lcssa;$$7 = $$6$lcssa;$c$4 = $105;$s$8 = $103;
   label = 43;
   continue;
  }
  else if ((label|0) == 20) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 21;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 24;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 27;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03$ph = $62;$s$0$ph = $s$4;
   label = 6;
   continue;
  }
  else if ((label|0) == 43) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 44;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 47;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 50;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 7;
   continue;
  }
 }
 if ((label|0) == 21) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 53;
 }
 else if ((label|0) == 24) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 53;
 }
 else if ((label|0) == 27) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 53;
 }
 else if ((label|0) == 30) {
  $s$5$lcssa = $$lcssa51;
  label = 31;
 }
 else if ((label|0) == 44) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 53;
 }
 else if ((label|0) == 47) {
  $124 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $118;$s$10 = $124;
  label = 53;
 }
 else if ((label|0) == 50) {
  $134 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $128;$s$10 = $134;
  label = 53;
 }
 if ((label|0) == 31) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  return ($$0|0);
 }
 else if ((label|0) == 53) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$432 = $$4;$$830 = $$8;$s$1034 = $s$10;
   label = 54;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 54) {
  $142 = HEAP8[$s$1034>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$432|0)==(0|0);
   if (!($144)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$830))|0;
   $$0 = $145;
   return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$431|0)==(0|0);
 if ($147) {
  $$0 = -1;
  return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (14376 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$0$lcssa$ph = 0, $$014$$0 = 0, $$014$lcssa = 0, $$014$lcssa$ph = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$lcssa57 = 0, $$old4 = 0, $$old7 = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$0$lcssa$ph = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0;
 var $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0, $s$0$lcssa$ph = 0, $s$030 = 0, $s$1 = 0, $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $2 & $3;
 do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa$ph = $$031;$$014$lcssa$ph = $$01428;$$ph = $33;$cnt$0$lcssa$ph = $cnt$029;$s$0$lcssa$ph = $s$030;
     label = 8;
     break;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     label = 16;
     break;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $14 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa$ph = $6;$$014$lcssa$ph = $$115;$$ph = $13;$cnt$0$lcssa$ph = $12;$s$0$lcssa$ph = $s$1;
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
    $$0$lcssa = $$0$lcssa$ph;$$014$lcssa = $$014$lcssa$ph;$17 = $$ph;$cnt$0$lcssa = $cnt$0$lcssa$ph;$s$0$lcssa = $s$0$lcssa$ph;
    label = 9;
    break;
   }
   else if ((label|0) == 16) {
    $cnt$3 = -1;
    break;
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$17 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 9;
  }
 } while(0);
 do {
  if ((label|0) == 9) {
   $16 = ($17|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $16 & $18;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $19;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      $$lcssa = $22;$cnt$2$lcssa = $cnt$2;
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $$lcssa57 = $31;
      label = 15;
      break;
     }
    }
    if ((label|0) == 15) {
     $cnt$3 = $$lcssa57;
     break;
    }
    $25 = ($$lcssa|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2$lcssa;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$0$ph = 0, $$0$ph47 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$1$lcssa = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$35$lcssa = 0, $$422 = 0, $$422$lcssa = 0;
 var $$422$lcssa52 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $$0218 = 0;$6 = $3;$ws2$019 = $2;
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0$ph = -1;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$0218))|0;
   $9 = (($ws2$019) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0$ph = $$13;
    break;
   } else {
    $$0218 = $$13;$6 = $10;$ws2$019 = $9;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($n>>>0)>(3);
 do {
  if ($1) {
   $$pre = HEAP32[$ws>>2]|0;
   $$0129 = $s;$$2428 = $n;$14 = $$pre;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      $$0129$lcssa = $$0129;$$2428$lcssa = $$2428;
      label = 14;
      break;
     }
     $19 = (_wcrtomb($$0129,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      label = 30;
      break;
     }
     $21 = (($$0129) + ($19)|0);
     $22 = (($$2428) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0129) + 1|0);
     HEAP8[$$0129>>0] = $23;
     $25 = (($$2428) + -1)|0;
     $$pre43 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre43;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0129 = $$1;$$2428 = $$35;$14 = $26;
    } else {
     $$1$lcssa = $$1;$$35$lcssa = $$35;
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    $$01$lcssa = $$1$lcssa;$$24$lcssa = $$35$lcssa;
    break;
   }
   else if ((label|0) == 14) {
    HEAP8[$$0129$lcssa>>0] = 0;
    HEAP32[$ws>>2] = 0;
    $18 = (($n) - ($$2428$lcssa))|0;
    $$0 = $18;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 30) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre44 = HEAP32[$ws>>2]|0;
 $$223 = $$01$lcssa;$$422 = $$24$lcssa;$30 = $$pre44;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    $$223$lcssa = $$223;$$422$lcssa = $$422;
    label = 21;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0$ph47 = -1;
    label = 29;
    break;
   }
   $37 = ($$422>>>0)<($35>>>0);
   if ($37) {
    $$422$lcssa52 = $$422;
    label = 24;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$223,$39,0)|0);
   $40 = (($$223) + ($35)|0);
   $41 = (($$422) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$223) + 1|0);
   HEAP8[$$223>>0] = $42;
   $44 = (($$422) + -1)|0;
   $$pre45 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre45;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0$ph47 = $n;
   label = 29;
   break;
  } else {
   $$223 = $$3;$$422 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 21) {
  HEAP8[$$223$lcssa>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$422$lcssa))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 24) {
  $38 = (($n) - ($$422$lcssa52))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 29) {
  $$0 = $$0$ph47;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa = 0, $$lcssa231 = 0, $$lcssa232 = 0, $$lcssa233 = 0, $$lcssa234 = 0, $$lcssa280 = 0, $$lcssa39 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi219Z2D = 0, $$pre205 = 0, $$pre207 = 0, $$pre211 = 0;
 var $$pre213 = 0, $$pre214 = 0, $$pre216 = 0, $$pre217 = 0, $$pre218 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0.0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0$lcssa = 0, $alloc$0$lcssa295 = 0, $alloc$0$lcssa296 = 0, $alloc$0$lcssa297 = 0;
 var $alloc$0$lcssa299 = 0, $alloc$0$lcssa300 = 0, $alloc$0$lcssa301 = 0, $alloc$0200 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph$lcssa247 = 0;
 var $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$lcssa250 = 0, $i$0$ph21$us106 = 0, $i$0$ph21$us106$lcssa = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$lcssa = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$3$lcssa = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit796 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp695 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111$lcssa252 = 0, $matches$0111$lcssa253 = 0, $matches$0111$lcssa254 = 0, $matches$0111$lcssa255 = 0, $matches$0111$lcssa256 = 0, $matches$0111$lcssa257 = 0, $matches$0111$lcssa258 = 0, $matches$0111$lcssa259 = 0, $matches$0111261 = 0, $matches$1 = 0, $matches$1$lcssa = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$lcssa = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0;
 var $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0, $s$1 = 0, $s$1$lcssa282 = 0, $s$2$ph = 0, $s$2$ph$lcssa = 0, $s$2$ph$lcssa237 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$6$ph = 0, $s$7 = 0, $s$8 = 0, $s$8$ph = 0, $scanset = 0, $size$0 = 0, $st = 0;
 var $vacopy_currentptr = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$1$lcssa289 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph$lcssa$lcssa = 0, $wcs$3$ph$lcssa240 = 0, $wcs$3$ph$lcssa241 = 0, $wcs$3$ph$lcssa244 = 0, $wcs$3$ph141 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$7$ph = 0, $wcs$8 = 0;
 var $wcs$9 = 0, $wcs$9$ph = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0111 = 0;$p$0117 = $fmt;$pos$0116 = 0;$s$0109 = 0;$wcs$0110 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0117>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L8: do {
     if ($43) {
      $44 = (($p$0117) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0117) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L8;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0117) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            $$lcssa = $72;
            break;
           }
          }
          $74 = (($p$0117) + 3|0);
          $dest$0 = $$lcssa;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp695 = (($77) + -48)|0;
      $isdigit796 = ($isdigittmp695>>>0)<(10);
      if ($isdigit796) {
       $81 = $77;$p$397 = $p$2;$width$098 = 0;
       while(1) {
        $78 = ($width$098*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$397) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$397 = $82;$width$098 = $80;
        } else {
         $$lcssa231 = $80;$$lcssa232 = $82;$$lcssa233 = $83;
         break;
        }
       }
       $$lcssa39 = $$lcssa233;$p$3$lcssa = $$lcssa232;$width$0$lcssa = $$lcssa231;
      } else {
       $$lcssa39 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa39<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa39;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0109;$wcs$1 = $wcs$0110;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      default: {
       $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
       label = 188;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 91)) {
       $pos$1 = $pos$0116;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0116;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0116|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $107 = $pos$0116&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0116&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0116;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0116;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0111;$p$11 = $p$5;$pos$2 = $pos$0116;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre205 = HEAP32[$3>>2]|0;
       if ($124) {
        $129 = $$pre205;
       } else {
        $125 = (($$pre205) + -1|0);
        HEAP32[$3>>2] = $125;
        $129 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $128 = $129;
       $130 = $127;
       $131 = (($126) + ($pos$0116))|0;
       $132 = (($131) + ($128))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $141 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = $s$1;$wcs$7$ph = $wcs$1;
        label = 188;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $141 = $$pre207;
      }
      $140 = ($141|0)==(0|0);
      if (!($140)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L67: do {
       switch ($$|0) {
       case 111:  {
        $base$0 = 8;
        label = 164;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 164;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 164;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $325 = (+___floatscan($f,$$size$0,0));
        $326 = HEAP32[$5>>2]|0;
        $327 = HEAP32[$3>>2]|0;
        $328 = HEAP32[$6>>2]|0;
        $329 = $327;
        $330 = $328;
        $331 = (($330) - ($329))|0;
        $332 = ($326|0)==($331|0);
        if ($332) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $333 = ($dest$0|0)==(0|0);
        if ($333) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $325;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else if ((($$size$0|0) == 0)) {
          $334 = $325;
          HEAPF32[$dest$0>>2] = $334;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L67;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 164;
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        if ($146) {
         $147 = ($$|0)==(115);
         _memset(($scanset|0),-1,257)|0;
         HEAP8[$scanset>>0] = 0;
         if ($147) {
          HEAP8[$8>>0] = 0;
          ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
          $p$9 = $p$5;
         } else {
          $p$9 = $p$5;
         }
        } else {
         $148 = (($p$5) + 1|0);
         $149 = HEAP8[$148>>0]|0;
         $150 = ($149<<24>>24)==(94);
         $151 = (($p$5) + 2|0);
         $invert$0 = $150&1;
         $152 = $150 ? $148 : $p$5;
         $p$6 = $150 ? $151 : $148;
         $153 = $150&1;
         _memset(($scanset|0),($153|0),257)|0;
         HEAP8[$scanset>>0] = 0;
         $154 = HEAP8[$p$6>>0]|0;
         if ((($154<<24>>24) == 45)) {
          $155 = (($152) + 2|0);
          $156 = $invert$0 ^ 1;
          $157 = $156&255;
          HEAP8[$10>>0] = $157;
          $$pre$phi219Z2D = $157;$p$7$ph = $155;
         } else if ((($154<<24>>24) == 93)) {
          $158 = (($152) + 2|0);
          $159 = $invert$0 ^ 1;
          $160 = $159&255;
          HEAP8[$11>>0] = $160;
          $$pre$phi219Z2D = $160;$p$7$ph = $158;
         } else {
          $$pre217 = $invert$0 ^ 1;
          $$pre218 = $$pre217&255;
          $$pre$phi219Z2D = $$pre218;$p$7$ph = $p$6;
         }
         $p$7 = $p$7$ph;
         while(1) {
          $161 = HEAP8[$p$7>>0]|0;
          if ((($161<<24>>24) == 0)) {
           $alloc$0$lcssa296 = $alloc$0;$matches$0111$lcssa254 = $matches$0111;$s$1$lcssa282 = $s$1;$wcs$1$lcssa289 = $wcs$1;
           label = 187;
           break L4;
          } else if ((($161<<24>>24) == 45)) {
           $162 = (($p$7) + 1|0);
           $163 = HEAP8[$162>>0]|0;
           if ((($163<<24>>24) == 93) | (($163<<24>>24) == 0)) {
            $174 = 45;$p$8 = $p$7;
           } else {
            $164 = (($p$7) + -1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165&255)<($163&255);
            if ($166) {
             $167 = $165&255;
             $c$0101 = $167;
             while(1) {
              $168 = (($c$0101) + 1)|0;
              $169 = (($scanset) + ($168)|0);
              HEAP8[$169>>0] = $$pre$phi219Z2D;
              $170 = HEAP8[$162>>0]|0;
              $171 = $170&255;
              $172 = ($168|0)<($171|0);
              if ($172) {
               $c$0101 = $168;
              } else {
               $$lcssa234 = $170;
               break;
              }
             }
             $174 = $$lcssa234;$p$8 = $162;
            } else {
             $174 = $163;$p$8 = $162;
            }
           }
          } else if ((($161<<24>>24) == 93)) {
           $p$7$lcssa = $p$7;
           break;
          } else {
           $174 = $161;$p$8 = $p$7;
          }
          $173 = $174&255;
          $175 = (($173) + 1)|0;
          $176 = (($scanset) + ($175)|0);
          HEAP8[$176>>0] = $$pre$phi219Z2D;
          $177 = (($p$8) + 1|0);
          $p$7 = $177;
         }
         $p$9 = $p$7$lcssa;
        }
        $178 = (($width$1) + 1)|0;
        $$8 = $144 ? $178 : 31;
        $179 = ($$size$0|0)==(1);
        $180 = ($alloc$0|0)!=(0);
        do {
         if ($179) {
          if ($180) {
           $181 = $$8 << 2;
           $182 = (_malloc($181)|0);
           $183 = ($182|0)==(0|0);
           if ($183) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $182;
            label = 188;
            break L4;
           } else {
            $wcs$2 = $182;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L141: while(1) {
           $184 = ($wcs$3$ph|0)==(0|0);
           if ($184) {
            while(1) {
             $187 = HEAP32[$3>>2]|0;
             $198 = HEAP32[$4>>2]|0;
             $199 = ($187>>>0)<($198>>>0);
             if ($199) {
              $186 = (($187) + 1|0);
              HEAP32[$3>>2] = $186;
              $188 = HEAP8[$187>>0]|0;
              $189 = $188&255;
              $191 = $189;
             } else {
              $185 = (___shgetc($f)|0);
              $191 = $185;
             }
             $190 = (($191) + 1)|0;
             $192 = (($scanset) + ($190)|0);
             $193 = HEAP8[$192>>0]|0;
             $194 = ($193<<24>>24)==(0);
             if ($194) {
              $i$0$ph$lcssa247 = $i$0$ph;
              label = 120;
              break L141;
             }
             $195 = $191&255;
             HEAP8[$0>>0] = $195;
             $196 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($196|0) == -1)) {
              $alloc$0$lcssa300 = $alloc$0;$matches$0111$lcssa258 = $matches$0111;
              label = 184;
              break L4;
             } else if (!((($196|0) == -2))) {
              $197 = ($i$0$ph|0)==($k$0$ph|0);
              $or$cond$us = $180 & $197;
              if ($or$cond$us) {
               break;
              }
             }
            }
            $i$1$lcssa = $i$0$ph;
           } else {
            if (!($180)) {
             $i$0$ph$lcssa = $i$0$ph;$wcs$3$ph$lcssa = $wcs$3$ph;
             label = 91;
             break;
            }
            $i$0$ph21$us106 = $i$0$ph;
            while(1) {
             while(1) {
              $202 = HEAP32[$3>>2]|0;
              $216 = HEAP32[$4>>2]|0;
              $217 = ($202>>>0)<($216>>>0);
              if ($217) {
               $201 = (($202) + 1|0);
               HEAP32[$3>>2] = $201;
               $203 = HEAP8[$202>>0]|0;
               $204 = $203&255;
               $206 = $204;
              } else {
               $200 = (___shgetc($f)|0);
               $206 = $200;
              }
              $205 = (($206) + 1)|0;
              $207 = (($scanset) + ($205)|0);
              $208 = HEAP8[$207>>0]|0;
              $209 = ($208<<24>>24)==(0);
              if ($209) {
               $i$0$ph21$us106$lcssa = $i$0$ph21$us106;$wcs$3$ph$lcssa240 = $wcs$3$ph;
               label = 118;
               break L141;
              }
              $210 = $206&255;
              HEAP8[$0>>0] = $210;
              $211 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($211|0) == -1)) {
               $alloc$0$lcssa299 = $alloc$0;$matches$0111$lcssa257 = $matches$0111;$wcs$3$ph$lcssa241 = $wcs$3$ph;
               label = 182;
               break L4;
              } else if (!((($211|0) == -2))) {
               break;
              }
             }
             $212 = HEAP32[$wc>>2]|0;
             $213 = (($i$0$ph21$us106) + 1)|0;
             $214 = (($wcs$3$ph) + ($i$0$ph21$us106<<2)|0);
             HEAP32[$214>>2] = $212;
             $215 = ($213|0)==($k$0$ph|0);
             if ($215) {
              break;
             } else {
              $i$0$ph21$us106 = $213;
             }
            }
            $i$1$lcssa = $k$0$ph;
           }
           $factor = $k$0$ph << 1;
           $235 = $factor | 1;
           $236 = $235 << 2;
           $237 = (_realloc($wcs$3$ph,$236)|0);
           $238 = ($237|0)==(0|0);
           if ($238) {
            $alloc$0$lcssa301 = $alloc$0;$matches$0111$lcssa259 = $matches$0111;$wcs$3$ph$lcssa244 = $wcs$3$ph;
            label = 185;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $235;$wcs$3$ph = $237;
          }
          if ((label|0) == 91) {
           label = 0;
           $i$0$ph21 = $i$0$ph$lcssa;
           L175: while(1) {
            while(1) {
             $218 = HEAP32[$3>>2]|0;
             $219 = HEAP32[$4>>2]|0;
             $220 = ($218>>>0)<($219>>>0);
             if ($220) {
              $221 = (($218) + 1|0);
              HEAP32[$3>>2] = $221;
              $222 = HEAP8[$218>>0]|0;
              $223 = $222&255;
              $226 = $223;
             } else {
              $224 = (___shgetc($f)|0);
              $226 = $224;
             }
             $225 = (($226) + 1)|0;
             $227 = (($scanset) + ($225)|0);
             $228 = HEAP8[$227>>0]|0;
             $229 = ($228<<24>>24)==(0);
             if ($229) {
              $i$0$ph21$lcssa250 = $i$0$ph21;
              break L175;
             }
             $230 = $226&255;
             HEAP8[$0>>0] = $230;
             $231 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($231|0) == -1)) {
              $matches$0111$lcssa256 = $matches$0111;$wcs$3$ph$lcssa$lcssa = $wcs$3$ph$lcssa;
              label = 183;
              break L4;
             } else if (!((($231|0) == -2))) {
              break;
             }
            }
            $232 = HEAP32[$wc>>2]|0;
            $233 = (($i$0$ph21) + 1)|0;
            $234 = (($wcs$3$ph$lcssa) + ($i$0$ph21<<2)|0);
            HEAP32[$234>>2] = $232;
            $i$0$ph21 = $233;
           }
           $i$0$ph21$lcssa = $i$0$ph21$lcssa250;$wcs$3$ph141 = $wcs$3$ph$lcssa;
          }
          else if ((label|0) == 118) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph21$us106$lcssa;$wcs$3$ph141 = $wcs$3$ph$lcssa240;
          }
          else if ((label|0) == 120) {
           label = 0;
           $i$0$ph21$lcssa = $i$0$ph$lcssa247;$wcs$3$ph141 = 0;
          }
          $239 = (_mbsinit($st)|0);
          $240 = ($239|0)==(0);
          if ($240) {
           $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = $wcs$3$ph141;
           label = 188;
           break L4;
          } else {
           $i$4 = $i$0$ph21$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph141;
          }
         } else {
          if ($180) {
           $241 = (_malloc($$8)|0);
           $242 = ($241|0)==(0|0);
           if ($242) {
            $alloc$0$lcssa = $alloc$0;$matches$0111$lcssa252 = $matches$0111;$s$6$ph = 0;$wcs$7$ph = 0;
            label = 188;
            break L4;
           }
           $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $241;
           L105: while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $243 = HEAP32[$3>>2]|0;
             $244 = HEAP32[$4>>2]|0;
             $245 = ($243>>>0)<($244>>>0);
             if ($245) {
              $246 = (($243) + 1|0);
              HEAP32[$3>>2] = $246;
              $247 = HEAP8[$243>>0]|0;
              $248 = $247&255;
              $251 = $248;
             } else {
              $249 = (___shgetc($f)|0);
              $251 = $249;
             }
             $250 = (($251) + 1)|0;
             $252 = (($scanset) + ($250)|0);
             $253 = HEAP8[$252>>0]|0;
             $254 = ($253<<24>>24)==(0);
             if ($254) {
              $i$2$lcssa = $i$2;$s$2$ph$lcssa = $s$2$ph;
              break L105;
             }
             $255 = $251&255;
             $256 = (($i$2) + 1)|0;
             $257 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$257>>0] = $255;
             $258 = ($256|0)==($k$1$ph|0);
             if ($258) {
              break;
             } else {
              $i$2 = $256;
             }
            }
            $factor17 = $k$1$ph << 1;
            $259 = $factor17 | 1;
            $260 = (_realloc($s$2$ph,$259)|0);
            $261 = ($260|0)==(0|0);
            if ($261) {
             $alloc$0$lcssa297 = $alloc$0;$matches$0111$lcssa255 = $matches$0111;$s$2$ph$lcssa237 = $s$2$ph;
             label = 186;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $259;$s$2$ph = $260;$i$2$ph = $i$2$ph$phi;
            }
           }
           $i$4 = $i$2$lcssa;$s$3 = $s$2$ph$lcssa;$wcs$4 = 0;
           break;
          }
          $262 = ($dest$0|0)==(0|0);
          if ($262) {
           $280 = $141;
           while(1) {
            $278 = HEAP32[$3>>2]|0;
            $279 = ($278>>>0)<($280>>>0);
            if ($279) {
             $281 = (($278) + 1|0);
             HEAP32[$3>>2] = $281;
             $282 = HEAP8[$278>>0]|0;
             $283 = $282&255;
             $286 = $283;
            } else {
             $284 = (___shgetc($f)|0);
             $286 = $284;
            }
            $285 = (($286) + 1)|0;
            $287 = (($scanset) + ($285)|0);
            $288 = HEAP8[$287>>0]|0;
            $289 = ($288<<24>>24)==(0);
            if ($289) {
             break;
            }
            $$pre213 = HEAP32[$4>>2]|0;
            $280 = $$pre213;
           }
           $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
           break;
          } else {
           $265 = $141;$i$3 = 0;
           while(1) {
            $263 = HEAP32[$3>>2]|0;
            $264 = ($263>>>0)<($265>>>0);
            if ($264) {
             $266 = (($263) + 1|0);
             HEAP32[$3>>2] = $266;
             $267 = HEAP8[$263>>0]|0;
             $268 = $267&255;
             $271 = $268;
            } else {
             $269 = (___shgetc($f)|0);
             $271 = $269;
            }
            $270 = (($271) + 1)|0;
            $272 = (($scanset) + ($270)|0);
            $273 = HEAP8[$272>>0]|0;
            $274 = ($273<<24>>24)==(0);
            if ($274) {
             $i$3$lcssa = $i$3;
             break;
            }
            $275 = $271&255;
            $276 = (($i$3) + 1)|0;
            $277 = (($dest$0) + ($i$3)|0);
            HEAP8[$277>>0] = $275;
            $$pre214 = HEAP32[$4>>2]|0;
            $265 = $$pre214;$i$3 = $276;
           }
           $i$4 = $i$3$lcssa;$s$3 = $dest$0;$wcs$4 = 0;
           break;
          }
         }
        } while(0);
        $290 = HEAP32[$4>>2]|0;
        $291 = ($290|0)==(0|0);
        $$pre211 = HEAP32[$3>>2]|0;
        if ($291) {
         $296 = $$pre211;
        } else {
         $292 = (($$pre211) + -1|0);
         HEAP32[$3>>2] = $292;
         $296 = $292;
        }
        $293 = HEAP32[$5>>2]|0;
        $294 = HEAP32[$6>>2]|0;
        $295 = $296;
        $297 = $294;
        $298 = (($295) - ($297))|0;
        $299 = (($298) + ($293))|0;
        $300 = ($299|0)==(0);
        if ($300) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        $$not = $144 ^ 1;
        $301 = ($299|0)==($width$1|0);
        $or$cond9 = $301 | $$not;
        if (!($or$cond9)) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$3;$wcs$9$ph = $wcs$4;
         label = 191;
         break L4;
        }
        do {
         if ($180) {
          if ($179) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $302 = ($wcs$4|0)==(0|0);
         if (!($302)) {
          $303 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$303>>2] = 0;
         }
         $304 = ($s$3|0)==(0|0);
         if ($304) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $305 = (($s$3) + ($i$4)|0);
          HEAP8[$305>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L204: do {
       if ((label|0) == 164) {
        label = 0;
        $306 = (___intscan($f,$base$0,0,-1,-1)|0);
        $307 = tempRet0;
        $308 = HEAP32[$5>>2]|0;
        $309 = HEAP32[$3>>2]|0;
        $310 = HEAP32[$6>>2]|0;
        $311 = $309;
        $312 = $310;
        $313 = (($312) - ($311))|0;
        $314 = ($308|0)==($313|0);
        if ($314) {
         $alloc$0$lcssa295 = $alloc$0;$matches$0111$lcssa253 = $matches$0111;$s$8$ph = $s$1;$wcs$9$ph = $wcs$1;
         label = 191;
         break L4;
        }
        $315 = ($$|0)==(112);
        $316 = ($dest$0|0)!=(0|0);
        $or$cond3 = $315 & $316;
        if ($or$cond3) {
         $317 = $306;
         HEAP32[$dest$0>>2] = $317;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $318 = ($dest$0|0)==(0|0);
        if ($318) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $319 = $306&255;
          HEAP8[$dest$0>>0] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case -1:  {
          $320 = $306&65535;
          HEAP16[$dest$0>>1] = $320;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         case 3:  {
          $321 = $dest$0;
          $322 = $321;
          HEAP32[$322>>2] = $306;
          $323 = (($321) + 4)|0;
          $324 = $323;
          HEAP32[$324>>2] = $307;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L204;
         }
         }
        }
       }
      } while(0);
      $335 = HEAP32[$5>>2]|0;
      $336 = HEAP32[$3>>2]|0;
      $337 = HEAP32[$6>>2]|0;
      $338 = $336;
      $339 = $337;
      $340 = (($335) + ($pos$1))|0;
      $341 = (($340) + ($338))|0;
      $342 = (($341) - ($339))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $343 = $not$&1;
      $matches$0$ = (($343) + ($matches$0111))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $342;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0117) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     $$lcssa280 = $58;$matches$0111$lcssa = $matches$0111;$s$0109$lcssa = $s$0109;$wcs$0110$lcssa = $wcs$0110;
     label = 20;
     break L4;
    }
    $65 = (($pos$0116) + 1)|0;
    $matches$1 = $matches$0111;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   } else {
    $p$1 = $p$0117;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      $p$1$lcssa = $p$1;
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre216 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre216;
    } else {
     $33 = (($$pre216) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0116))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0111;$p$11 = $p$1$lcssa;$pos$2 = $41;$s$5 = $s$0109;$wcs$6 = $wcs$0110;
   }
  } while(0);
  $344 = (($p$11) + 1|0);
  $345 = HEAP8[$344>>0]|0;
  $346 = ($345<<24>>24)==(0);
  if ($346) {
   $matches$1$lcssa = $matches$1;
   label = 194;
   break;
  } else {
   $13 = $345;$matches$0111 = $matches$1;$p$0117 = $344;$pos$0116 = $pos$2;$s$0109 = $s$5;$wcs$0110 = $wcs$6;
  }
 }
 switch (label|0) {
  case 20: {
   $59 = HEAP32[$4>>2]|0;
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = HEAP32[$3>>2]|0;
    $62 = (($61) + -1|0);
    HEAP32[$3>>2] = $62;
   }
   $63 = ($$lcssa280|0)>(-1);
   $64 = ($matches$0111$lcssa|0)!=(0);
   $or$cond5 = $63 | $64;
   if ($or$cond5) {
    $matches$3 = $matches$0111$lcssa;
    STACKTOP = sp;return ($matches$3|0);
   } else {
    $alloc$1 = 0;$s$7 = $s$0109$lcssa;$wcs$8 = $wcs$0110$lcssa;
    label = 190;
   }
   break;
  }
  case 182: {
   $alloc$0200 = $alloc$0$lcssa299;$matches$0111261 = $matches$0111$lcssa257;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa241;
   label = 189;
   break;
  }
  case 183: {
   $alloc$0200 = 0;$matches$0111261 = $matches$0111$lcssa256;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa$lcssa;
   label = 189;
   break;
  }
  case 184: {
   $alloc$0200 = $alloc$0$lcssa300;$matches$0111261 = $matches$0111$lcssa258;$s$6 = 0;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 185: {
   $alloc$0200 = $alloc$0$lcssa301;$matches$0111261 = $matches$0111$lcssa259;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa244;
   label = 189;
   break;
  }
  case 186: {
   $alloc$0200 = $alloc$0$lcssa297;$matches$0111261 = $matches$0111$lcssa255;$s$6 = $s$2$ph$lcssa237;$wcs$7 = 0;
   label = 189;
   break;
  }
  case 187: {
   $alloc$0200 = $alloc$0$lcssa296;$matches$0111261 = $matches$0111$lcssa254;$s$6 = $s$1$lcssa282;$wcs$7 = $wcs$1$lcssa289;
   label = 189;
   break;
  }
  case 188: {
   $alloc$0200 = $alloc$0$lcssa;$matches$0111261 = $matches$0111$lcssa252;$s$6 = $s$6$ph;$wcs$7 = $wcs$7$ph;
   label = 189;
   break;
  }
  case 191: {
   $alloc$2 = $alloc$0$lcssa295;$matches$2 = $matches$0111$lcssa253;$s$8 = $s$8$ph;$wcs$9 = $wcs$9$ph;
   break;
  }
  case 194: {
   $matches$3 = $matches$1$lcssa;
   STACKTOP = sp;return ($matches$3|0);
   break;
  }
 }
 if ((label|0) == 189) {
  $$old4 = ($matches$0111261|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0200;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 190;
  } else {
   $alloc$2 = $alloc$0200;$matches$2 = $matches$0111261;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 if ((label|0) == 190) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $347 = ($alloc$2|0)==(0);
 if ($347) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 662;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   $$0$lcssa = $$0;
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0$lcssa;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 }
 $$014 = $n;$$023 = $s;$$05 = $d;
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if ($5) {
   return ($d|0);
  }
  $$in = $n;
  while(1) {
   $6 = (($$in) + -1)|0;
   $7 = (($s) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($d) + ($6<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)==(0);
   if ($10) {
    break;
   } else {
    $$in = $6;
   }
  }
  return ($d|0);
 } else {
  if ($5) {
   return ($d|0);
  }
  $$025 = $s;$$07 = $d;$$16 = $n;
  while(1) {
   $11 = (($$16) + -1)|0;
   $12 = (($$025) + 4|0);
   $13 = HEAP32[$$025>>2]|0;
   $14 = (($$07) + 4|0);
   HEAP32[$$07>>2] = $13;
   $15 = ($11|0)==(0);
   if ($15) {
    break;
   } else {
    $$025 = $12;$$07 = $14;$$16 = $11;
   }
  }
  return ($d|0);
 }
 return (0)|0;
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  return ($d|0);
 }
 $$012 = $n;$$03 = $d;
 while(1) {
  $1 = (($$012) + -1)|0;
  $2 = (($$03) + 4|0);
  HEAP32[$$03>>2] = $c;
  $3 = ($1|0)==(0);
  if ($3) {
   break;
  } else {
   $$012 = $1;$$03 = $2;
  }
 }
 return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((14792|0),(663|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[14784>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(14800,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$lcssa3 = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   while(1) {
    $3 = (__ZSt15get_new_handlerv()|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     label = 5;
     break;
    }
    FUNCTION_TABLE_v[$3 & 1023]();
    $5 = (_malloc($$size)|0);
    $6 = ($5|0)==(0|0);
    if (!($6)) {
     $$lcssa3 = $5;
     label = 6;
     break;
    }
   }
   if ((label|0) == 5) {
    $7 = (___cxa_allocate_exception(4)|0);
    HEAP32[$7>>2] = ((14968 + 8|0));
    ___cxa_throw(($7|0),(15024|0),(372|0));
    // unreachable;
   }
   else if ((label|0) == 6) {
    $$lcssa = $$lcssa3;
    break;
   }
  } else {
   $$lcssa = $1;
  }
 } while(0);
 return ($$lcssa|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((14968 + 8|0));
 return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (14992|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(664,(15040|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(664,(15080|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(480);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(665)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[3650]|0;HEAP32[3650] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[15136>>2]|0;HEAP32[15136>>2] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9exception4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15144|0);
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15208 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15232 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((15520 + 8|0));
 return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (15544|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$1 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,15656,15712,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$1 = 0;
   } else {
    dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = (($info) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = (($info) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = (($info) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = (($7) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
    $11 = (($info) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = (($info) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$1 = 1;
    } else {
     $$1 = 0;
    }
   }
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = (($info) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = (($info) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = (($info) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = (($info) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = (($info) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = (($info) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = (($this) + 16|0);
  $4 = (($this) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($this) + ($5<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
  $7 = ($5|0)>(1);
  if ($7) {
   $8 = (($this) + 24|0);
   $9 = (($info) + 54|0);
   $p$0 = $8;
   while(1) {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if (!($11)) {
     break;
    }
    $12 = (($p$0) + 8|0);
    $13 = ($12>>>0)<($6>>>0);
    if ($13) {
     $p$0 = $12;
    } else {
     break;
    }
   }
  }
 }
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 do {
  if ($16) {
   $17 = (($info) + 48|0);
   HEAP32[$17>>2] = 1;
   $18 = HEAP32[$6>>2]|0;
   $19 = (($18) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
   $21 = HEAP32[$12>>2]|0;
   $22 = ($21|0)==(1);
   $$ = $22 ? $4 : 0;
   $dst_ptr$0 = $$;
  } else {
   $23 = (($info) + 36|0);
   $24 = HEAP32[$6>>2]|0;
   $25 = (($24) + 24|0);
   $26 = HEAP32[$25>>2]|0;
   FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
   $27 = HEAP32[$23>>2]|0;
   if ((($27|0) == 0)) {
    $28 = HEAP32[$15>>2]|0;
    $29 = ($28|0)==(1);
    $30 = HEAP32[$13>>2]|0;
    $31 = ($30|0)==(1);
    $or$cond = $29 & $31;
    $32 = HEAP32[$14>>2]|0;
    $33 = ($32|0)==(1);
    $or$cond3 = $or$cond & $33;
    $34 = HEAP32[$11>>2]|0;
    $$8 = $or$cond3 ? $34 : 0;
    $dst_ptr$0 = $$8;
    break;
   } else if (!((($27|0) == 1))) {
    $dst_ptr$0 = 0;
    break;
   }
   $35 = HEAP32[$12>>2]|0;
   $36 = ($35|0)==(1);
   if (!($36)) {
    $37 = HEAP32[$15>>2]|0;
    $38 = ($37|0)==(0);
    $39 = HEAP32[$13>>2]|0;
    $40 = ($39|0)==(1);
    $or$cond5 = $38 & $40;
    $41 = HEAP32[$14>>2]|0;
    $42 = ($41|0)==(1);
    $or$cond7 = $or$cond5 & $42;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $43 = HEAP32[$10>>2]|0;
   $dst_ptr$0 = $43;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = (($info) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = (($info) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = (($info) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = (($info) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = (($info) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = (($info) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = (($info) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = (($info) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = (($info) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $23 = $path_below;
   } else {
    $23 = $17;
   }
   $19 = (($info) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $22 = ($23|0)==(1);
   $or$cond1 = $21 & $22;
   if ($or$cond1) {
    $24 = (($info) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off016 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off018 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off032 = 0, $is_dst_type_derived_from_static_type$2$off033 = 0, $p$017 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $59 = (($this) + 16|0);
    $60 = (($this) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ((($this) + ($61<<3)|0) + 16|0);
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
    $63 = (($this) + 24|0);
    $64 = ($61|0)>(1);
    if (!($64)) {
     break;
    }
    $65 = (($this) + 8|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66 & 2;
    $68 = ($67|0)==(0);
    if ($68) {
     $69 = (($info) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(1);
     if (!($71)) {
      $77 = $66 & 1;
      $78 = ($77|0)==(0);
      if ($78) {
       $81 = (($info) + 54|0);
       $p2$2 = $63;
       while(1) {
        $90 = HEAP8[$81>>0]|0;
        $91 = ($90<<24>>24)==(0);
        if (!($91)) {
         break;
        }
        $92 = HEAP32[$69>>2]|0;
        $93 = ($92|0)==(1);
        if ($93) {
         break;
        }
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
        $94 = (($p2$2) + 8|0);
        $95 = ($94>>>0)<($62>>>0);
        if ($95) {
         $p2$2 = $94;
        } else {
         break;
        }
       }
       break;
      }
      $79 = (($info) + 24|0);
      $80 = (($info) + 54|0);
      $p2$1 = $63;
      while(1) {
       $82 = HEAP8[$80>>0]|0;
       $83 = ($82<<24>>24)==(0);
       if (!($83)) {
        break;
       }
       $84 = HEAP32[$69>>2]|0;
       $85 = ($84|0)==(1);
       if ($85) {
        $86 = HEAP32[$79>>2]|0;
        $87 = ($86|0)==(1);
        if ($87) {
         break;
        }
       }
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
       $88 = (($p2$1) + 8|0);
       $89 = ($88>>>0)<($62>>>0);
       if ($89) {
        $p2$1 = $88;
       } else {
        break;
       }
      }
      break;
     }
    }
    $72 = (($info) + 54|0);
    $p2$0 = $63;
    while(1) {
     $73 = HEAP8[$72>>0]|0;
     $74 = ($73<<24>>24)==(0);
     if (!($74)) {
      break;
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
     $75 = (($p2$0) + 8|0);
     $76 = ($75>>>0)<($62>>>0);
     if ($76) {
      $p2$0 = $75;
     } else {
      break;
     }
    }
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($this) + 12|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ((($this) + ($24<<3)|0) + 16|0);
     $26 = ($24|0)>(0);
     do {
      if ($26) {
       $27 = (($this) + 16|0);
       $28 = (($info) + 52|0);
       $29 = (($info) + 53|0);
       $30 = (($info) + 54|0);
       $31 = (($this) + 8|0);
       $32 = (($info) + 24|0);
       $does_dst_type_point_to_our_static_type$0$off016 = 0;$is_dst_type_derived_from_static_type$0$off018 = 0;$p$017 = $27;
       L36: while(1) {
        HEAP8[$28>>0] = 0;
        HEAP8[$29>>0] = 0;
        __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$017,$info,$current_ptr,$current_ptr,1,$use_strcmp);
        $33 = HEAP8[$30>>0]|0;
        $34 = ($33<<24>>24)==(0);
        if (!($34)) {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off018;
         label = 20;
         break;
        }
        $35 = HEAP8[$29>>0]|0;
        $36 = ($35<<24>>24)==(0);
        do {
         if ($36) {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off018;
         } else {
          $37 = HEAP8[$28>>0]|0;
          $38 = ($37<<24>>24)==(0);
          if ($38) {
           $44 = HEAP32[$31>>2]|0;
           $45 = $44 & 1;
           $46 = ($45|0)==(0);
           if ($46) {
            $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$2$off0 = 1;
            label = 20;
            break L36;
           } else {
            $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;$is_dst_type_derived_from_static_type$1$off0 = 1;
            break;
           }
          }
          $39 = HEAP32[$32>>2]|0;
          $40 = ($39|0)==(1);
          if ($40) {
           label = 25;
           break L36;
          }
          $41 = HEAP32[$31>>2]|0;
          $42 = $41 & 2;
          $43 = ($42|0)==(0);
          if ($43) {
           label = 25;
           break L36;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
          }
         }
        } while(0);
        $47 = (($p$017) + 8|0);
        $48 = ($47>>>0)<($25>>>0);
        if ($48) {
         $does_dst_type_point_to_our_static_type$0$off016 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off018 = $is_dst_type_derived_from_static_type$1$off0;$p$017 = $47;
        } else {
         $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
         label = 20;
         break;
        }
       }
       if ((label|0) == 20) {
        if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
         $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off0;
         label = 24;
         break;
        } else {
         $is_dst_type_derived_from_static_type$2$off032 = $is_dst_type_derived_from_static_type$2$off0;
         label = 21;
         break;
        }
       }
       else if ((label|0) == 25) {
        label = 26;
        break;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off032 = 0;
       label = 21;
      }
     } while(0);
     if ((label|0) == 21) {
      HEAP32[$14>>2] = $current_ptr;
      $49 = (($info) + 40|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (($50) + 1)|0;
      HEAP32[$49>>2] = $51;
      $52 = (($info) + 36|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(1);
      if ($54) {
       $55 = (($info) + 24|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(2);
       if ($57) {
        $58 = (($info) + 54|0);
        HEAP8[$58>>0] = 1;
        if ($is_dst_type_derived_from_static_type$2$off032) {
         label = 26;
        } else {
         label = 27;
        }
       } else {
        $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
        label = 24;
       }
      } else {
       $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
       label = 24;
      }
     }
     if ((label|0) == 24) {
      if ($is_dst_type_derived_from_static_type$2$off033) {
       label = 26;
      } else {
       label = 27;
      }
     }
     if ((label|0) == 26) {
      HEAP32[$20>>2] = 3;
      break;
     }
     else if ((label|0) == 27) {
      HEAP32[$20>>2] = 4;
      break;
     }
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 L1: do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $43 = (($this) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 24|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = (($info) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = (($info) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = (($info) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = (($info) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = (($info) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = (($info) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = (($this) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off01 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off01 = 1;
       label = 13;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = (($info) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = (($info) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = (($info) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = (($info) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off01) {
          break;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
       if ((label|0) == 16) {
        if ($is_dst_type_derived_from_static_type$0$off01) {
         break;
        }
       }
       HEAP32[$20>>2] = 4;
       break L1;
      }
     } while(0);
     HEAP32[$20>>2] = 3;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = (($info) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 do {
  if ($2) {
   $3 = (($info) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = (($info) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($9|0)==($this|0);
   if ($10) {
    $11 = (($info) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = (($info) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = (($info) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = (($info) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = (($info) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = (($info) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = (($info) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = (($info) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = (($info) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($info) + 52|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = (($info) + 53|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = (($this) + 16|0);
  $8 = (($this) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($this) + ($9<<3)|0) + 16|0);
  HEAP8[$3>>0] = 0;
  HEAP8[$5>>0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  $11 = ($9|0)>(1);
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
  HEAP8[$3>>0] = $4;
  HEAP8[$5>>0] = $6;
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,15656,15824,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(15024|0),(372|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($2) + 80|0);
   $5 = (($2) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[14608>>2]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(14728,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = (($2) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[15200>>2]|0;
   $26 = (($25) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 1023](15200,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[14608>>2]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = (($31) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = (($vararg_buffer) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(14632,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[14608>>2]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(14680,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(14768,$vararg_buffer10);
 // unreachable;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((14784|0),(666|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14856,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = (($5) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[14784>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(14912,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$lcssa = 0, $$lcssa110 = 0, $$lcssa112 = 0, $$lcssa115 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$lcssa137 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0;
 var $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$rsize$3$i$lcssa = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0, $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0;
 var $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0;
 var $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0;
 var $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0;
 var $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0;
 var $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0;
 var $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0;
 var $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$be = 0, $R$0$i$i = 0, $R$0$i$i$be = 0;
 var $R$0$i$i$lcssa = 0, $R$0$i$i$ph = 0, $R$0$i$lcssa = 0, $R$0$i$ph = 0, $R$0$i18 = 0, $R$0$i18$be = 0, $R$0$i18$lcssa = 0, $R$0$i18$ph = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$be = 0, $RP$0$i$i = 0, $RP$0$i$i$be = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$i$ph = 0, $RP$0$i$lcssa = 0, $RP$0$i$ph = 0, $RP$0$i17 = 0;
 var $RP$0$i17$be = 0, $RP$0$i17$lcssa = 0, $RP$0$i17$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0;
 var $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0;
 var $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$2$i$ph = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0;
 var $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$1$i$ph = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$2$v$3$i$lcssa = 0, $t$230$i = 0, $t$230$i$be = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$2$i$ph = 0, $v$3$lcssa$i = 0;
 var $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[16072>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((16072 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((16072 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[16072>>2] = $22;
     } else {
      $23 = HEAP32[((16072 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[((16072 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((16072 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((16072 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[16072>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((16072 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((16072 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((16072 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((16072 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[16072>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[16072>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((16072 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((16072 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((16072 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((16072 + 8|0))>>2] = $81;
     HEAP32[((16072 + 20|0))>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[((16072 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((16072 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((16072 + 16|0))>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($5)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i$lcssa) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i$lcssa) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = (($v$0$i$lcssa) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i$lcssa) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i$ph = $171;$RP$0$i$ph = $170;
        }
       } else {
        $R$0$i$ph = $168;$RP$0$i$ph = $167;
       }
       $R$0$i = $R$0$i$ph;$RP$0$i = $RP$0$i$ph;
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if ($175) {
         $176 = (($R$0$i) + 16|0);
         $177 = HEAP32[$176>>2]|0;
         $178 = ($177|0)==(0|0);
         if ($178) {
          $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
          break;
         } else {
          $R$0$i$be = $177;$RP$0$i$be = $176;
         }
        } else {
         $R$0$i$be = $174;$RP$0$i$be = $173;
        }
        $R$0$i = $R$0$i$be;$RP$0$i = $RP$0$i$be;
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = (($v$0$i$lcssa) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i$lcssa) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((16072 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((16072 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((16072 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((16072 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((16072 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i$lcssa) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i$lcssa) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((16072 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i$lcssa) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($5))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[((16072 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((16072 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((16072 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[16072>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[16072>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((16072 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((16072 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((16072 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((16072 + 8|0))>>2] = $rsize$0$i$lcssa;
      HEAP32[((16072 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i$lcssa) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((16072 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((16072 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     if ($277) {
      $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
     } else {
      $278 = ($idx$0$i|0)==(31);
      if ($278) {
       $282 = 0;
      } else {
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $282 = $280;
      }
      $281 = $246 << $282;
      $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
      while(1) {
       $283 = (($t$0$i14) + 4|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = $284 & -8;
       $286 = (($285) - ($246))|0;
       $287 = ($286>>>0)<($rsize$0$i15>>>0);
       if ($287) {
        $288 = ($285|0)==($246|0);
        if ($288) {
         $rsize$2$i$ph = $286;$t$1$i$ph = $t$0$i14;$v$2$i$ph = $t$0$i14;
         break;
        } else {
         $rsize$1$i = $286;$v$1$i = $t$0$i14;
        }
       } else {
        $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
       }
       $289 = (($t$0$i14) + 20|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = $sizebits$0$i >>> 31;
       $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
       $293 = HEAP32[$292>>2]|0;
       $294 = ($290|0)==(0|0);
       $295 = ($290|0)==($293|0);
       $or$cond19$i = $294 | $295;
       $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
       $296 = ($293|0)==(0|0);
       $297 = $sizebits$0$i << 1;
       if ($296) {
        $rsize$2$i$ph = $rsize$1$i;$t$1$i$ph = $rst$1$i;$v$2$i$ph = $v$1$i;
        break;
       } else {
        $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
       }
      }
      $rsize$2$i = $rsize$2$i$ph;$t$1$i = $t$1$i$ph;$v$2$i = $v$2$i$ph;
     }
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((16072 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if ($338) {
        $339 = (($t$230$i) + 20|0);
        $340 = HEAP32[$339>>2]|0;
        $341 = ($340|0)==(0|0);
        if ($341) {
         $$rsize$3$i$lcssa = $$rsize$3$i;$t$2$v$3$i$lcssa = $t$2$v$3$i;
         break;
        } else {
         $t$230$i$be = $340;
        }
       } else {
        $t$230$i$be = $337;
       }
       $rsize$331$i = $$rsize$3$i;$t$230$i = $t$230$i$be;$v$332$i = $t$2$v$3$i;
      }
      $rsize$3$lcssa$i = $$rsize$3$i$lcssa;$v$3$lcssa$i = $t$2$v$3$i$lcssa;
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((16072 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((16072 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18$ph = $368;$RP$0$i17$ph = $367;
          }
         } else {
          $R$0$i18$ph = $365;$RP$0$i17$ph = $364;
         }
         $R$0$i18 = $R$0$i18$ph;$RP$0$i17 = $RP$0$i17$ph;
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $373 = (($R$0$i18) + 16|0);
           $374 = HEAP32[$373>>2]|0;
           $375 = ($374|0)==(0|0);
           if ($375) {
            $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
            break;
           } else {
            $R$0$i18$be = $374;$RP$0$i17$be = $373;
           }
          } else {
           $R$0$i18$be = $371;$RP$0$i17$be = $370;
          }
          $R$0$i18 = $R$0$i18$be;$RP$0$i17 = $RP$0$i17$be;
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((16072 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((16072 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((16072 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((16072 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((16072 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((16072 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L215: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((16072 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[16072>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[16072>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((16072 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((16072 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((16072 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((16072 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((16072 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((16072 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$029$i = $483;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = ((($T$028$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa134 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $$lcssa137 = $487;
             label = 163;
             break;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           if ((label|0) == 163) {
            $T$0$lcssa$i = $$lcssa137;
            break;
           }
           $494 = HEAP32[((16072 + 16|0))>>2]|0;
           $495 = ($$lcssa134>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa134>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L215;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((16072 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((16072 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((16072 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((16072 + 20|0))>>2] = $514;
   HEAP32[((16072 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((16072 + 8|0))>>2] = 0;
   HEAP32[((16072 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[((16072 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((16072 + 12|0))>>2] = $528;
  $529 = HEAP32[((16072 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((16072 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[16544>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((16544 + 8|0))>>2] = $538;
    HEAP32[((16544 + 4|0))>>2] = $538;
    HEAP32[((16544 + 12|0))>>2] = -1;
    HEAP32[((16544 + 16|0))>>2] = -1;
    HEAP32[((16544 + 20|0))>>2] = 0;
    HEAP32[((16072 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[16544>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((16544 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[((16072 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((16072 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[((16072 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L279: do {
  if ($560) {
   $561 = HEAP32[((16072 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   do {
    if ($562) {
     label = 191;
    } else {
     $sp$0$i$i = ((16072 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa130 = $sp$0$i$i;$$lcssa132 = $565;$sp$0$i$i$lcssa = $sp$0$i$i;
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 190;
       break;
      } else {
       $sp$0$i$i = $570;
      }
     }
     if ((label|0) == 190) {
      label = 191;
      break;
     }
     $572 = ($sp$0$i$i$lcssa|0)==(0|0);
     if ($572) {
      label = 191;
     } else {
      $595 = HEAP32[((16072 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$$lcssa130>>2]|0;
       $601 = HEAP32[$$lcssa132>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 200;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 191) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((16544 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((16072 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((16072 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 200;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 201;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L303: do {
    if ((label|0) == 200) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 211;
      break L279;
     }
    }
    else if ((label|0) == 201) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((16544 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L303;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 211;
      break L279;
     }
    }
   } while(0);
   $619 = HEAP32[((16072 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((16072 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 208;
  } else {
   $tsize$1$i = 0;
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 211;
    }
   }
  }
 }
 if ((label|0) == 211) {
  $632 = HEAP32[((16072 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((16072 + 432|0))>>2] = $633;
  $634 = HEAP32[((16072 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((16072 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((16072 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L323: do {
   if ($637) {
    $638 = HEAP32[((16072 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((16072 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((16072 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((16072 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((16072 + 460|0))>>2] = 0;
    $641 = HEAP32[16544>>2]|0;
    HEAP32[((16072 + 36|0))>>2] = $641;
    HEAP32[((16072 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((16072 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((16072 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((16072 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((16072 + 24|0))>>2] = $654;
    HEAP32[((16072 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((16544 + 16|0))>>2]|0;
    HEAP32[((16072 + 28|0))>>2] = $660;
   } else {
    $sp$074$i = ((16072 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$074$i>>2]|0;
     $662 = (($sp$074$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      $$lcssa123 = $661;$$lcssa125 = $662;$$lcssa127 = $663;$sp$074$i$lcssa = $sp$074$i;
      label = 224;
      break;
     }
     $666 = (($sp$074$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      label = 229;
      break;
     } else {
      $sp$074$i = $667;
     }
    }
    if ((label|0) == 224) {
     $669 = (($sp$074$i$lcssa) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($$lcssa123>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($$lcssa127) + ($tsize$244$i))|0;
       HEAP32[$$lcssa125>>2] = $675;
       $676 = HEAP32[((16072 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((16072 + 24|0))>>2] = $684;
       HEAP32[((16072 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((16544 + 16|0))>>2]|0;
       HEAP32[((16072 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    else if ((label|0) == 229) {
    }
    $691 = HEAP32[((16072 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((16072 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$173$i = ((16072 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$173$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      $$lcssa120 = $sp$173$i;$sp$173$i$lcssa = $sp$173$i;
      label = 235;
      break;
     }
     $696 = (($sp$173$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      label = 319;
      break;
     } else {
      $sp$173$i = $697;
     }
    }
    if ((label|0) == 235) {
     $699 = (($sp$173$i$lcssa) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$$lcssa120>>2] = $tbase$245$i;
      $703 = (($sp$173$i$lcssa) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L352: do {
       if ($729) {
        $730 = HEAP32[((16072 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((16072 + 12|0))>>2] = $731;
        HEAP32[((16072 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((16072 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((16072 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((16072 + 8|0))>>2] = $737;
         HEAP32[((16072 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L360: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((16072 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[16072>>2]|0;
            $764 = $763 & $762;
            HEAP32[16072>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i$ph = $789;$RP$0$i$i$ph = $788;
              }
             } else {
              $R$0$i$i$ph = $786;$RP$0$i$i$ph = $785;
             }
             $R$0$i$i = $R$0$i$i$ph;$RP$0$i$i = $RP$0$i$i$ph;
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $794 = (($R$0$i$i) + 16|0);
               $795 = HEAP32[$794>>2]|0;
               $796 = ($795|0)==(0|0);
               if ($796) {
                $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
                break;
               } else {
                $R$0$i$i$be = $795;$RP$0$i$i$be = $794;
               }
              } else {
               $R$0$i$i$be = $792;$RP$0$i$i$be = $791;
              }
              $R$0$i$i = $R$0$i$i$be;$RP$0$i$i = $RP$0$i$i$be;
             }
             $797 = ($RP$0$i$i$lcssa>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((16072 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((16072 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((16072 + 4|0))>>2] = $807;
             break L360;
            } else {
             $808 = HEAP32[((16072 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L360;
             }
            }
           } while(0);
           $815 = HEAP32[((16072 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((16072 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((16072 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[16072>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[16072>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((16072 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((16072 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((16072 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((16072 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((16072 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((16072 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            $$lcssa = $909;$T$052$i$i$lcssa = $T$052$i$i;
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $$lcssa110 = $904;
            label = 314;
            break;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          if ((label|0) == 314) {
           $T$0$lcssa$i26$i = $$lcssa110;
           break;
          }
          $911 = HEAP32[((16072 + 16|0))>>2]|0;
          $912 = ($$lcssa>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L352;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((16072 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      return ($mem$0|0);
     }
    }
    else if ((label|0) == 319) {
    }
    $sp$0$i$i$i = ((16072 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       $$lcssa116 = $926;$$lcssa117 = $929;$$lcssa118 = $930;
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($$lcssa117) + -47)|0;
    $$sum1$i14$i = (($$lcssa117) + -39)|0;
    $934 = (($$lcssa116) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($$lcssa116) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((16072 + 24|0))>>2] = $953;
    HEAP32[((16072 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((16544 + 16|0))>>2]|0;
    HEAP32[((16072 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((16072 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((16072 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((16072 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((16072 + 448|0))+12>>2]|0;
    HEAP32[((16072 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((16072 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((16072 + 460|0))>>2] = 0;
    HEAP32[((16072 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($$lcssa118>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($$lcssa118>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((16072 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[16072>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[16072>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((16072 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((16072 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((16072 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((16072 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((16072 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((16072 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         $$lcssa112 = $1048;$T$014$i$i$lcssa = $T$014$i$i;
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $$lcssa115 = $1043;
         label = 353;
         break;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       if ((label|0) == 353) {
        $T$0$lcssa$i$i = $$lcssa115;
        break;
       }
       $1050 = HEAP32[((16072 + 16|0))>>2]|0;
       $1051 = ($$lcssa112>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa112>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i$lcssa;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L323;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((16072 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((16072 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((16072 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((16072 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((16072 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$lcssa73 = 0, $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$060 = 0, $R$0 = 0;
 var $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0;
 var $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((16072 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((16072 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((16072 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((16072 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[16072>>2]|0;
     $36 = $35 & $34;
     HEAP32[16072>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $61;$RP$0$ph = $60;
      }
     } else {
      $R$0$ph = $58;$RP$0$ph = $57;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if ($65) {
       $66 = (($R$0) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)==(0|0);
       if ($68) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $67;$RP$0$be = $66;
       }
      } else {
       $R$0$be = $64;$RP$0$be = $63;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((16072 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((16072 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((16072 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((16072 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((16072 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((16072 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((16072 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((16072 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((16072 + 12|0))>>2] = $120;
   HEAP32[((16072 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((16072 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[((16072 + 20|0))>>2] = 0;
   HEAP32[((16072 + 8|0))>>2] = 0;
   return;
  }
  $125 = HEAP32[((16072 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((16072 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((16072 + 8|0))>>2] = $128;
   HEAP32[((16072 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((16072 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((16072 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[16072>>2]|0;
     $152 = $151 & $150;
     HEAP32[16072>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((16072 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $179;$RP9$0$ph = $178;
       }
      } else {
       $R7$0$ph = $176;$RP9$0$ph = $175;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $184 = (($R7$0) + 16|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if ($186) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $185;$RP9$0$be = $184;
        }
       } else {
        $R7$0$be = $182;$RP9$0$be = $181;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $187 = HEAP32[((16072 + 16|0))>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((16072 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((16072 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((16072 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((16072 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((16072 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((16072 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((16072 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((16072 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((16072 + 8|0))>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((16072 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[16072>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[16072>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((16072 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((16072 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((16072 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((16072 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((16072 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L205: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((16072 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$060 = $292;$T$059 = $284;
     while(1) {
      $300 = $K19$060 >>> 31;
      $301 = ((($T$059) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$059$lcssa = $T$059;
       break;
      }
      $294 = $K19$060 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $$lcssa73 = $296;
       label = 137;
       break;
      } else {
       $K19$060 = $294;$T$059 = $296;
      }
     }
     if ((label|0) == 137) {
      $T$0$lcssa = $$lcssa73;
      break;
     }
     $303 = HEAP32[((16072 + 16|0))>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$059$lcssa;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L205;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((16072 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((16072 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((16072 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if (!($319)) {
  return;
 }
 $sp$0$in$i = ((16072 + 456|0));
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((16072 + 32|0))>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 if ($4) {
  $8 = 16;
 } else {
  $5 = (($bytes) + 11)|0;
  $6 = $5 & -8;
  $8 = $6;
 }
 $7 = (($oldmem) + -8|0);
 $9 = (_try_realloc_chunk($7,$8)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = (($9) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = (($oldmem) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
  $3 = $4&1;
  return ($3|0);
 }
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(6);
 $4 = $2;
 $3 = $4&1;
 return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$124 = 0, $$125 = 0, $$22 = 0, $$23 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$sum = 0, $$sum14 = 0, $$sum1447 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum1867 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$5$be$lcssa = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$8$ph = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond42 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$lcssa114 = $13;
   break;
  }
 }
 $16 = ($$lcssa114|0)==(45);
 do {
  if ((($$lcssa114|0) == 43) | (($$lcssa114|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $$lcssa114;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$125 = 8;$c$126 = $37;
     label = 48;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum20 = (($46) + 1)|0;
   $47 = (16568 + ($$sum20)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   } else {
    $$125 = 16;$c$126 = $46;
    label = 48;
   }
  } else {
   $$base21 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (16568 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base21>>>0);
   if ($60) {
    $$1 = $$base21;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$084 = 0;
    while(1) {
     $69 = ($x$084*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $$ = $80 & $81;
     if ($$) {
      $71 = $79;$x$084 = $70;
     } else {
      $$lcssa113 = $70;$c$2$be$lcssa = $c$2$be;
      break;
     }
    }
    $281 = $$lcssa113;$282 = 0;$c$2$lcssa = $c$2$be$lcssa;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$89 = $82;$c$373 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $88 = ($89|0)<(0);
     $90 = $88 << 31 >> 31;
     $91 = $89 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $89;$283 = $84;$284 = $85;$c$3$lcssa = $c$373;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($89|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond7 = $108 & $113;
     if ($or$cond7) {
      $84 = $98;$85 = $99;$89 = $107;$c$373 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $253 = $284;$255 = $283;
    } else {
     $$124 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 79;
    }
   } else {
    $253 = $282;$255 = $281;
   }
  } else {
   $$125 = $$1;$c$126 = $c$1;
   label = 48;
  }
 }
 do {
  if ((label|0) == 48) {
   $115 = (($$125) + -1)|0;
   $116 = $115 & $$125;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$125*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (16832 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1447 = (($c$126) + 1)|0;
    $128 = (16568 + ($$sum1447)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$125>>>0);
    if ($131) {
     $134 = $130;$x$148 = 0;
     while(1) {
      $132 = $x$148 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum14 = (($c$4$be) + 1)|0;
      $142 = (16568 + ($$sum14)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$125>>>0);
      $146 = ($133>>>0)<(134217728);
      $$22 = $145 & $146;
      if ($$22) {
       $134 = $144;$x$148 = $133;
      } else {
       $$lcssa109 = $133;$$lcssa110 = $143;$c$4$be$lcssa = $c$4$be;
       break;
      }
     }
     $150 = $$lcssa110;$153 = 0;$155 = $$lcssa109;$c$4$lcssa = $c$4$be$lcssa;
    } else {
     $150 = $129;$153 = 0;$155 = 0;$c$4$lcssa = $c$126;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$125>>>0);
    $152 = ($153>>>0)>($148>>>0);
    $154 = ($155>>>0)>($147>>>0);
    $156 = ($153|0)==($148|0);
    $157 = $156 & $154;
    $158 = $152 | $157;
    $or$cond42 = $151 | $158;
    if ($or$cond42) {
     $$124 = $$125;$285 = $155;$286 = $153;$c$8 = $c$4$lcssa;
     label = 79;
     break;
    }
    $159 = $155;$160 = $153;$164 = $150;
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum15 = (($c$5$be) + 1)|0;
     $173 = (16568 + ($$sum15)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$125>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $289 = $165;$290 = $162;$c$5$be$lcssa = $c$5$be;
      break;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
    $$124 = $$125;$285 = $289;$286 = $290;$c$8 = $c$5$be$lcssa;
    label = 79;
    break;
   }
   $$sum1867 = (($c$126) + 1)|0;
   $118 = (16568 + ($$sum1867)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$125>>>0);
   if ($121) {
    $184 = $120;$x$268 = 0;
    while(1) {
     $182 = Math_imul($x$268, $$125)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum18 = (($c$6$be) + 1)|0;
     $192 = (16568 + ($$sum18)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$125>>>0);
     $196 = ($183>>>0)<(119304647);
     $$23 = $195 & $196;
     if ($$23) {
      $184 = $194;$x$268 = $183;
     } else {
      $$lcssa111 = $183;$$lcssa112 = $193;$c$6$be$lcssa = $c$6$be;
      break;
     }
    }
    $198 = $$lcssa112;$287 = $$lcssa111;$288 = 0;$c$6$lcssa = $c$6$be$lcssa;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$126;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$125>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$125|0),0)|0);
    $201 = tempRet0;
    $203 = $288;$205 = $287;$212 = $198;$c$755 = $c$6$lcssa;
    while(1) {
     $202 = ($203>>>0)>($201>>>0);
     $204 = ($205>>>0)>($200>>>0);
     $206 = ($203|0)==($201|0);
     $207 = $206 & $204;
     $208 = $202 | $207;
     if ($208) {
      $291 = $205;$292 = $203;$c$8$ph = $c$755;
      break;
     }
     $209 = (___muldi3(($205|0),($203|0),($$125|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $291 = $205;$292 = $203;$c$8$ph = $c$755;
      break;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum19 = (($c$7$be) + 1)|0;
     $228 = (16568 + ($$sum19)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$125>>>0);
     if ($231) {
      $203 = $220;$205 = $219;$212 = $229;$c$755 = $c$7$be;
     } else {
      $291 = $219;$292 = $220;$c$8$ph = $c$7$be;
      break;
     }
    }
    $$124 = $$125;$285 = $291;$286 = $292;$c$8 = $c$8$ph;
    label = 79;
   } else {
    $$124 = $$125;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 79;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  $$sum16 = (($c$8) + 1)|0;
  $232 = (16568 + ($$sum16)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$124>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum17 = (($c$9$be) + 1)|0;
    $243 = (16568 + ($$sum17)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$124>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $253 = $1;$255 = $0;
  } else {
   $253 = $286;$255 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $252 = ($253>>>0)<($1>>>0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = ($253|0)==($1|0);
 $257 = $256 & $254;
 $258 = $252 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond12 = $262 | $263;
  if (!($or$cond12)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   return ($280|0);
  }
  $267 = ($253>>>0)>($1>>>0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = ($253|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $255 ^ $neg$0;
 $276 = $253 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$012$i = 0, $$012$i$be = 0, $$012$i$lcssa = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$be$i$lcssa = 0, $$1$ph$i = 0, $$14$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$be$i$lcssa = 0, $$3$lcssa$i = 0;
 var $$3127$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa113 = 0, $$lcssa114 = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa125 = 0, $$lcssa126 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$lnz$0$i = 0, $$neg38$i = 0, $$old8 = 0;
 var $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0.0;
 var $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0;
 var $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0.0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0.0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0.0, $451 = 0.0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0.0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0;
 var $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0.0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0, $655 = 0.0, $656 = 0.0, $657 = 0.0, $658 = 0.0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0.0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0.0, $681 = 0.0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0.0;
 var $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0.0, $694 = 0, $695 = 0, $696 = 0, $697 = 0.0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0.0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0.0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$2$ph44$i$lcssa = 0, $a$2$ph44$i$lcssa130 = 0, $a$2$ph44$i$ph = 0, $a$2$ph44$i131 = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0;
 var $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$0$i$be = 0, $c$0$i$lcssa = 0, $c$0$i$ph = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$i$be = 0, $c$2$i$ph = 0, $c$2$lcssa$i = 0;
 var $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$5$ph = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us$i$lcssa$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry1$1$us99$i$lcssa$lcssa = 0, $carry3$086$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0;
 var $denormal$031$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$ph$i$lcssa = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$0$us89$i$lcssa = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$1$ph$i$ph = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i$lcssa = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i$ph = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotdig$4$i$lcssa = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i$ph = 0, $gotrad$0$i14 = 0;
 var $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gotrad$2$i$lcssa = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$3$ph = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0;
 var $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$2$i$lcssa = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$2$i$lcssa = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0;
 var $k$5$us95$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us101$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $lnz$2$i$lcssa = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i17 = 0, $or$cond11$i = 0, $or$cond11119$i = 0, $or$cond16$i = 0;
 var $or$cond18$i = 0, $or$cond185$i = 0, $or$cond19$i = 0, $or$cond20$us$i = 0, $or$cond20$us100$i = 0, $or$cond22$i = 0, $or$cond23$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $or$cond9$i26 = 0, $or$cond9$not = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0;
 var $rp$2$ph42$i = 0, $rp$2$ph42$i$lcssa = 0, $rp$2$ph42$i$ph = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$3$ph40$i$ph = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0;
 var $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$5$i$lcssa = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $y$4$i$lcssa = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph43$i = 0, $z$1$ph43$i$lcssa = 0, $z$1$ph43$i$ph = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$1$us90$i$lcssa = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us$i$lcssa$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$3$us102$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$5$ph$i$ph = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$lcssa143 = $9;
   break;
  }
 }
 $12 = ($$lcssa143|0)==(45);
 do {
  if ((($$lcssa143|0) == 43) | (($$lcssa143|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $$lcssa143;$sign$0 = 1;
  }
 } while(0);
 $c$174 = $c$0;$i$073 = 0;
 while(1) {
  $23 = $c$174 | 32;
  $24 = (16848 + ($i$073)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$174;$i$0$lcssa = $i$073;
   break;
  }
  $28 = ($i$073>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$174;
   }
  } while(0);
  $36 = (($i$073) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$174 = $c$2;$i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   if ($51) {
    $c$372 = $c$1$lcssa;$i$271 = 0;
    while(1) {
     $52 = $c$372 | 32;
     $53 = (17432 + ($i$271)|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = ($52|0)==($55|0);
     if (!($56)) {
      $c$5$ph = $c$372;$i$3$ph = $i$271;
      break;
     }
     $57 = ($i$271>>>0)<(2);
     do {
      if ($57) {
       $58 = HEAP32[$0>>2]|0;
       $59 = HEAP32[$1>>2]|0;
       $60 = ($58>>>0)<($59>>>0);
       if ($60) {
        $61 = (($58) + 1|0);
        HEAP32[$0>>2] = $61;
        $62 = HEAP8[$58>>0]|0;
        $63 = $62&255;
        $c$4 = $63;
        break;
       } else {
        $64 = (___shgetc($f)|0);
        $c$4 = $64;
        break;
       }
      } else {
       $c$4 = $c$372;
      }
     } while(0);
     $65 = (($i$271) + 1)|0;
     $66 = ($65>>>0)<(3);
     if ($66) {
      $c$372 = $c$4;$i$271 = $65;
     } else {
      $c$5$ph = $c$4;$i$3$ph = $65;
      break;
     }
    }
    $c$5 = $c$5$ph;$i$3 = $i$3$ph;
   } else {
    $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
   }
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $75 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $75 = $73;
    }
    $74 = ($75|0)==(40);
    if (!($74)) {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $i$4 = 1;
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       $$lcssa = $88;$i$4$lcssa = $i$4;
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($$lcssa|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4$lcssa|0)==(0);
    $brmerge107 = $100 | $97;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $$in = $i$4$lcssa;
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      break;
     } else {
      $$in = $102;
     }
    }
    $$0 = nan;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $324 = HEAP32[$1>>2]|0;
       $325 = ($324|0)==(0|0);
       if ($325) {
        $c$6 = 48;
        break;
       }
       $326 = HEAP32[$0>>2]|0;
       $327 = (($326) + -1|0);
       HEAP32[$0>>2] = $327;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i$ph = $128;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i$ph = $129;
      }
      $c$0$i = $c$0$i$ph;$gotdig$0$i = 0;
      while(1) {
       if ((($c$0$i|0) == 46)) {
        $gotdig$0$i$lcssa116 = $gotdig$0$i;
        label = 78;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $c$0$i$lcssa = $c$0$i;$gotdig$0$i$lcssa = $gotdig$0$i;
        label = 88;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i$be = $135;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i$be = $136;
       }
       $c$0$i = $c$0$i$be;$gotdig$0$i = 1;
      }
      if ((label|0) == 78) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $157 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $157 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $156 = ($157|0)==(48);
         if ($156) {
          $152 = $154;$153 = $155;
         } else {
          $$lcssa114 = $157;$717 = $154;$718 = $155;
          break;
         }
        }
        $715 = $717;$716 = $718;$c$2$i$ph = $$lcssa114;$gotdig$2$i$ph = 1;$gotrad$0$i$ph = 1;
       } else {
        $715 = 0;$716 = 0;$c$2$i$ph = $c$1$ph$i;$gotdig$2$i$ph = $gotdig$0$i$lcssa116;$gotrad$0$i$ph = 1;
       }
      }
      else if ((label|0) == 88) {
       $715 = 0;$716 = 0;$c$2$i$ph = $c$0$i$lcssa;$gotdig$2$i$ph = $gotdig$0$i$lcssa;$gotrad$0$i$ph = 0;
      }
      $168 = 0;$170 = 0;$719 = $715;$720 = $716;$c$2$i = $c$2$i$ph;$gotdig$2$i = $gotdig$2$i$ph;$gotrad$0$i = $gotrad$0$i$ph;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
      L130: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 95;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond6$i = $162 | $163;
         if (!($or$cond6$i)) {
          $212 = $170;$213 = $719;$215 = $168;$216 = $720;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
          break L130;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $721 = $170;$722 = $168;$723 = $170;$724 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $212 = $170;$213 = $719;$215 = $168;$216 = $720;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break L130;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 95;
          break;
         }
        }
       } while(0);
       if ((label|0) == 95) {
        label = 0;
        $167 = ($168|0)<(0);
        $169 = ($170>>>0)<(8);
        $171 = ($168|0)==(0);
        $172 = $171 & $169;
        $173 = $167 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($168|0)<(0);
          $177 = ($170>>>0)<(14);
          $178 = ($168|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond$i = $185 | $186;
          if ($or$cond$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($170|0),($168|0),1,0)|0);
        $190 = tempRet0;
        $721 = $719;$722 = $720;$723 = $189;$724 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $c$2$i$be = $196;
       } else {
        $197 = (___shgetc($f)|0);
        $c$2$i$be = $197;
       }
       $168 = $724;$170 = $723;$719 = $721;$720 = $722;$c$2$i = $c$2$i$be;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
      }
      $198 = ($gotdig$2$i$lcssa|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i$lcssa|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i$lcssa|0)==(0);
      $211 = $210 ? $212 : $213;
      $214 = $210 ? $215 : $216;
      $217 = ($215|0)<(0);
      $218 = ($212>>>0)<(8);
      $219 = ($215|0)==(0);
      $220 = $219 & $218;
      $221 = $217 | $220;
      if ($221) {
       $223 = $212;$224 = $215;$x$325$i = $x$0$i$lcssa;
       while(1) {
        $222 = $x$325$i << 4;
        $225 = (_i64Add(($223|0),($224|0),1,0)|0);
        $226 = tempRet0;
        $227 = ($226|0)<(0);
        $228 = ($225>>>0)<(8);
        $229 = ($226|0)==(0);
        $230 = $229 & $228;
        $231 = $227 | $230;
        if ($231) {
         $223 = $225;$224 = $226;$x$325$i = $222;
        } else {
         $$lcssa113 = $222;
         break;
        }
       }
       $x$3$lcssa$i = $$lcssa113;
      } else {
       $x$3$lcssa$i = $x$0$i$lcssa;
      }
      $232 = $c$2$lcssa$i | 32;
      $233 = ($232|0)==(112);
      do {
       if ($233) {
        $234 = (_scanexp($f,$pok)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(-2147483648);
        $238 = $236 & $237;
        if ($238) {
         $239 = ($pok|0)==(0);
         if ($239) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $240 = HEAP32[$1>>2]|0;
          $241 = ($240|0)==(0|0);
          if ($241) {
           $252 = 0;$253 = 0;
           break;
          }
          $242 = HEAP32[$0>>2]|0;
          $243 = (($242) + -1|0);
          HEAP32[$0>>2] = $243;
          $252 = 0;$253 = 0;
          break;
         }
        } else {
         $252 = $234;$253 = $235;
        }
       } else {
        $244 = HEAP32[$1>>2]|0;
        $245 = ($244|0)==(0|0);
        if ($245) {
         $252 = 0;$253 = 0;
        } else {
         $246 = HEAP32[$0>>2]|0;
         $247 = (($246) + -1|0);
         HEAP32[$0>>2] = $247;
         $252 = 0;$253 = 0;
        }
       }
      } while(0);
      $248 = (_bitshift64Shl(($211|0),($214|0),2)|0);
      $249 = tempRet0;
      $250 = (_i64Add(($248|0),($249|0),-32,-1)|0);
      $251 = tempRet0;
      $254 = (_i64Add(($250|0),($251|0),($252|0),($253|0))|0);
      $255 = tempRet0;
      $256 = ($x$3$lcssa$i|0)==(0);
      if ($256) {
       $257 = (+($sign$0|0));
       $258 = $257 * 0.0;
       $$0 = $258;
       STACKTOP = sp;return (+$$0);
      }
      $259 = (0 - ($emin$0$ph))|0;
      $260 = ($255|0)>(0);
      $261 = ($254>>>0)>($259>>>0);
      $262 = ($255|0)==(0);
      $263 = $262 & $261;
      $264 = $260 | $263;
      if ($264) {
       $265 = (___errno_location()|0);
       HEAP32[$265>>2] = 34;
       $266 = (+($sign$0|0));
       $267 = $266 * 1.7976931348623157E+308;
       $268 = $267 * 1.7976931348623157E+308;
       $$0 = $268;
       STACKTOP = sp;return (+$$0);
      }
      $269 = (($emin$0$ph) + -106)|0;
      $270 = ($269|0)<(0);
      $271 = $270 << 31 >> 31;
      $272 = ($255|0)<($271|0);
      $273 = ($254>>>0)<($269>>>0);
      $274 = ($255|0)==($271|0);
      $275 = $274 & $273;
      $276 = $272 | $275;
      if ($276) {
       $278 = (___errno_location()|0);
       HEAP32[$278>>2] = 34;
       $279 = (+($sign$0|0));
       $280 = $279 * 2.2250738585072014E-308;
       $281 = $280 * 2.2250738585072014E-308;
       $$0 = $281;
       STACKTOP = sp;return (+$$0);
      }
      $277 = ($x$3$lcssa$i|0)>(-1);
      if ($277) {
       $286 = $254;$287 = $255;$x$420$i = $x$3$lcssa$i;$y$321$i = $y$0$i$lcssa;
       while(1) {
        $282 = !($y$321$i >= 0.5);
        $283 = $x$420$i << 1;
        if ($282) {
         $$pn$i = $y$321$i;$x$5$i = $283;
        } else {
         $284 = $283 | 1;
         $285 = $y$321$i + -1.0;
         $$pn$i = $285;$x$5$i = $284;
        }
        $y$4$i = $y$321$i + $$pn$i;
        $288 = (_i64Add(($286|0),($287|0),-1,-1)|0);
        $289 = tempRet0;
        $290 = ($x$5$i|0)>(-1);
        if ($290) {
         $286 = $288;$287 = $289;$x$420$i = $x$5$i;$y$321$i = $y$4$i;
        } else {
         $725 = $288;$726 = $289;$x$5$i$lcssa = $x$5$i;$y$4$i$lcssa = $y$4$i;
         break;
        }
       }
       $295 = $725;$296 = $726;$x$4$lcssa$i = $x$5$i$lcssa;$y$3$lcssa$i = $y$4$i$lcssa;
      } else {
       $295 = $254;$296 = $255;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
      }
      $291 = ($emin$0$ph|0)<(0);
      $292 = $291 << 31 >> 31;
      $293 = (_i64Subtract(32,0,($emin$0$ph|0),($292|0))|0);
      $294 = tempRet0;
      $297 = (_i64Add(($295|0),($296|0),($293|0),($294|0))|0);
      $298 = tempRet0;
      $299 = (0)>($298|0);
      $300 = ($bits$0$ph>>>0)>($297>>>0);
      $301 = (0)==($298|0);
      $302 = $301 & $300;
      $303 = $299 | $302;
      if ($303) {
       $304 = ($297|0)<(0);
       if ($304) {
        $$0711$i = 0;
        label = 143;
       } else {
        $$07$i = $297;
        label = 141;
       }
      } else {
       $$07$i = $bits$0$ph;
       label = 141;
      }
      if ((label|0) == 141) {
       $305 = ($$07$i|0)<(53);
       if ($305) {
        $$0711$i = $$07$i;
        label = 143;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0712$i = $$07$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 143) {
       $306 = (84 - ($$0711$i))|0;
       $307 = (+_scalbn(1.0,$306));
       $308 = (+($sign$0|0));
       $309 = (+_copysignl($307,$308));
       $$0712$i = $$0711$i;$$pre$phi$iZ2D = $308;$bias$0$i = $309;
      }
      $310 = ($$0712$i|0)<(32);
      $311 = $y$3$lcssa$i != 0.0;
      $or$cond4$i = $310 & $311;
      $312 = $x$4$lcssa$i & 1;
      $313 = ($312|0)==(0);
      $or$cond9$i = $or$cond4$i & $313;
      $314 = $or$cond9$i&1;
      $x$6$i = (($314) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
      $315 = (+($x$6$i>>>0));
      $316 = $$pre$phi$iZ2D * $315;
      $317 = $bias$0$i + $316;
      $318 = $$pre$phi$iZ2D * $y$5$i;
      $319 = $318 + $317;
      $320 = $319 - $bias$0$i;
      $321 = $320 != 0.0;
      if (!($321)) {
       $322 = (___errno_location()|0);
       HEAP32[$322>>2] = 34;
      }
      $323 = (+_scalbnl($320,$295));
      $$0 = $323;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $328 = (0 - ($sum$i))|0;
    $$012$i = $c$6;$gotdig$0$i12 = 0;
    while(1) {
     if ((($$012$i|0) == 46)) {
      $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
      label = 155;
      break;
     } else if (!((($$012$i|0) == 48))) {
      $$012$i$lcssa = $$012$i;$gotdig$0$i12$lcssa = $gotdig$0$i12;
      label = 165;
      break;
     }
     $329 = HEAP32[$0>>2]|0;
     $330 = HEAP32[$1>>2]|0;
     $331 = ($329>>>0)<($330>>>0);
     if ($331) {
      $332 = (($329) + 1|0);
      HEAP32[$0>>2] = $332;
      $333 = HEAP8[$329>>0]|0;
      $334 = $333&255;
      $$012$i$be = $334;
     } else {
      $335 = (___shgetc($f)|0);
      $$012$i$be = $335;
     }
     $$012$i = $$012$i$be;$gotdig$0$i12 = 1;
    }
    if ((label|0) == 155) {
     $336 = HEAP32[$0>>2]|0;
     $337 = HEAP32[$1>>2]|0;
     $338 = ($336>>>0)<($337>>>0);
     if ($338) {
      $339 = (($336) + 1|0);
      HEAP32[$0>>2] = $339;
      $340 = HEAP8[$336>>0]|0;
      $341 = $340&255;
      $$1$ph$i = $341;
     } else {
      $342 = (___shgetc($f)|0);
      $$1$ph$i = $342;
     }
     $343 = ($$1$ph$i|0)==(48);
     if ($343) {
      $344 = 0;$345 = 0;
      while(1) {
       $346 = (_i64Add(($344|0),($345|0),-1,-1)|0);
       $347 = tempRet0;
       $348 = HEAP32[$0>>2]|0;
       $349 = HEAP32[$1>>2]|0;
       $350 = ($348>>>0)<($349>>>0);
       if ($350) {
        $351 = (($348) + 1|0);
        HEAP32[$0>>2] = $351;
        $352 = HEAP8[$348>>0]|0;
        $353 = $352&255;
        $$1$be$i = $353;
       } else {
        $354 = (___shgetc($f)|0);
        $$1$be$i = $354;
       }
       $355 = ($$1$be$i|0)==(48);
       if ($355) {
        $344 = $346;$345 = $347;
       } else {
        $$1$be$i$lcssa = $$1$be$i;$729 = $346;$730 = $347;
        break;
       }
      }
      $$2$i = $$1$be$i$lcssa;$727 = $729;$728 = $730;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
     } else {
      $$2$i = $$1$ph$i;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa141;$gotrad$0$i14 = 1;
     }
    }
    else if ((label|0) == 165) {
     $$2$i = $$012$i$lcssa;$727 = 0;$728 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa;$gotrad$0$i14 = 0;
    }
    HEAP32[$x$i>>2] = 0;
    $356 = (($$2$i) + -48)|0;
    $357 = ($356>>>0)<(10);
    $358 = ($$2$i|0)==(46);
    $or$cond11119$i = $357 | $358;
    do {
     if ($or$cond11119$i) {
      $359 = (($x$i) + 496|0);
      $$3127$i = $$2$i;$362 = 0;$363 = 0;$731 = $358;$732 = $356;$733 = $727;$734 = $728;$gotdig$3123$i = $gotdig$2$i13;$gotrad$1124$i = $gotrad$0$i14;$j$0126$i = 0;$k$0125$i = 0;$lnz$0122$i = 0;
      L243: while(1) {
       do {
        if ($731) {
         $cond$i = ($gotrad$1124$i|0)==(0);
         if ($cond$i) {
          $735 = $362;$736 = $363;$737 = $362;$738 = $363;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = 1;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
         } else {
          $739 = $733;$740 = $734;$741 = $362;$742 = $363;$gotdig$3123$i$lcssa = $gotdig$3123$i;$j$0126$i$lcssa = $j$0126$i;$k$0125$i$lcssa = $k$0125$i;$lnz$0122$i$lcssa = $lnz$0122$i;
          label = 170;
          break L243;
         }
        } else {
         $361 = ($k$0125$i|0)<(125);
         $364 = (_i64Add(($362|0),($363|0),1,0)|0);
         $365 = tempRet0;
         $366 = ($$3127$i|0)!=(48);
         if (!($361)) {
          if (!($366)) {
           $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
           break;
          }
          $376 = HEAP32[$359>>2]|0;
          $377 = $376 | 1;
          HEAP32[$359>>2] = $377;
          $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = $gotdig$3123$i;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $j$0126$i;$k$2$i = $k$0125$i;$lnz$2$i = $lnz$0122$i;
          break;
         }
         $$lnz$0$i = $366 ? $364 : $lnz$0122$i;
         $367 = ($j$0126$i|0)==(0);
         $368 = (($x$i) + ($k$0125$i<<2)|0);
         if ($367) {
          $storemerge$i = $732;
         } else {
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369*10)|0;
          $371 = (($$3127$i) + -48)|0;
          $372 = (($371) + ($370))|0;
          $storemerge$i = $372;
         }
         HEAP32[$368>>2] = $storemerge$i;
         $373 = (($j$0126$i) + 1)|0;
         $374 = ($373|0)==(9);
         $375 = $374&1;
         $$k$0$i = (($375) + ($k$0125$i))|0;
         $$14$i = $374 ? 0 : $373;
         $735 = $733;$736 = $734;$737 = $364;$738 = $365;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1124$i;$j$2$i = $$14$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $378 = HEAP32[$0>>2]|0;
       $379 = HEAP32[$1>>2]|0;
       $380 = ($378>>>0)<($379>>>0);
       if ($380) {
        $381 = (($378) + 1|0);
        HEAP32[$0>>2] = $381;
        $382 = HEAP8[$378>>0]|0;
        $383 = $382&255;
        $$3$be$i = $383;
       } else {
        $384 = (___shgetc($f)|0);
        $$3$be$i = $384;
       }
       $385 = (($$3$be$i) + -48)|0;
       $386 = ($385>>>0)<(10);
       $387 = ($$3$be$i|0)==(46);
       $or$cond11$i = $386 | $387;
       if ($or$cond11$i) {
        $$3127$i = $$3$be$i;$362 = $737;$363 = $738;$731 = $387;$732 = $385;$733 = $735;$734 = $736;$gotdig$3123$i = $gotdig$4$i;$gotrad$1124$i = $gotrad$2$i;$j$0126$i = $j$2$i;$k$0125$i = $k$2$i;$lnz$0122$i = $lnz$2$i;
       } else {
        $$3$be$i$lcssa = $$3$be$i;$748 = $737;$749 = $738;$750 = $735;$751 = $736;$gotdig$4$i$lcssa = $gotdig$4$i;$gotrad$2$i$lcssa = $gotrad$2$i;$j$2$i$lcssa = $j$2$i;$k$2$i$lcssa = $k$2$i;$lnz$2$i$lcssa = $lnz$2$i;
        label = 181;
        break;
       }
      }
      if ((label|0) == 170) {
       $360 = ($gotdig$3123$i$lcssa|0)!=(0);
       $743 = $741;$744 = $742;$745 = $739;$746 = $740;$747 = $360;$j$074$i = $j$0126$i$lcssa;$k$070$i = $k$0125$i$lcssa;$lnz$064$i = $lnz$0122$i$lcssa;
       label = 190;
       break;
      }
      else if ((label|0) == 181) {
       $$3$lcssa$i = $$3$be$i$lcssa;$390 = $748;$391 = $750;$393 = $749;$394 = $751;$gotdig$3$lcssa$i = $gotdig$4$i$lcssa;$gotrad$1$lcssa$i = $gotrad$2$i$lcssa;$j$0$lcssa$i = $j$2$i$lcssa;$k$0$lcssa$i = $k$2$i$lcssa;$lnz$0$lcssa$i = $lnz$2$i$lcssa;
       label = 182;
       break;
      }
     } else {
      $$3$lcssa$i = $$2$i;$390 = 0;$391 = $727;$393 = 0;$394 = $728;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 182;
     }
    } while(0);
    do {
     if ((label|0) == 182) {
      $388 = ($gotrad$1$lcssa$i|0)==(0);
      $389 = $388 ? $390 : $391;
      $392 = $388 ? $393 : $394;
      $395 = ($gotdig$3$lcssa$i|0)!=(0);
      $396 = $$3$lcssa$i | 32;
      $397 = ($396|0)==(101);
      $or$cond16$i = $395 & $397;
      if (!($or$cond16$i)) {
       $412 = ($$3$lcssa$i|0)>(-1);
       if ($412) {
        $743 = $390;$744 = $393;$745 = $389;$746 = $392;$747 = $395;$j$074$i = $j$0$lcssa$i;$k$070$i = $k$0$lcssa$i;$lnz$064$i = $lnz$0$lcssa$i;
        label = 190;
        break;
       } else {
        $752 = $390;$753 = $393;$754 = $395;$755 = $389;$756 = $392;$j$073$i = $j$0$lcssa$i;$k$069$i = $k$0$lcssa$i;$lnz$063$i = $lnz$0$lcssa$i;
        label = 192;
        break;
       }
      }
      $398 = (_scanexp($f,$pok)|0);
      $399 = tempRet0;
      $400 = ($398|0)==(0);
      $401 = ($399|0)==(-2147483648);
      $402 = $400 & $401;
      do {
       if ($402) {
        $403 = ($pok|0)==(0);
        if ($403) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $404 = HEAP32[$1>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $408 = 0;$409 = 0;
          break;
         }
         $406 = HEAP32[$0>>2]|0;
         $407 = (($406) + -1|0);
         HEAP32[$0>>2] = $407;
         $408 = 0;$409 = 0;
         break;
        }
       } else {
        $408 = $398;$409 = $399;
       }
      } while(0);
      $410 = (_i64Add(($408|0),($409|0),($389|0),($392|0))|0);
      $411 = tempRet0;
      $423 = $410;$424 = $390;$426 = $411;$427 = $393;$j$072$i = $j$0$lcssa$i;$k$068$i = $k$0$lcssa$i;$lnz$062$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 190) {
     $413 = HEAP32[$1>>2]|0;
     $414 = ($413|0)==(0|0);
     if ($414) {
      $752 = $743;$753 = $744;$754 = $747;$755 = $745;$756 = $746;$j$073$i = $j$074$i;$k$069$i = $k$070$i;$lnz$063$i = $lnz$064$i;
      label = 192;
     } else {
      $415 = HEAP32[$0>>2]|0;
      $416 = (($415) + -1|0);
      HEAP32[$0>>2] = $416;
      if ($747) {
       $423 = $745;$424 = $743;$426 = $746;$427 = $744;$j$072$i = $j$074$i;$k$068$i = $k$070$i;$lnz$062$i = $lnz$064$i;
      } else {
       label = 193;
      }
     }
    }
    if ((label|0) == 192) {
     if ($754) {
      $423 = $755;$424 = $752;$426 = $756;$427 = $753;$j$072$i = $j$073$i;$k$068$i = $k$069$i;$lnz$062$i = $lnz$063$i;
     } else {
      label = 193;
     }
    }
    if ((label|0) == 193) {
     $417 = (___errno_location()|0);
     HEAP32[$417>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $418 = HEAP32[$x$i>>2]|0;
    $419 = ($418|0)==(0);
    if ($419) {
     $420 = (+($sign$0|0));
     $421 = $420 * 0.0;
     $$0 = $421;
     STACKTOP = sp;return (+$$0);
    }
    $422 = ($423|0)==($424|0);
    $425 = ($426|0)==($427|0);
    $428 = $422 & $425;
    $429 = ($427|0)<(0);
    $430 = ($424>>>0)<(10);
    $431 = ($427|0)==(0);
    $432 = $431 & $430;
    $433 = $429 | $432;
    $or$cond$i17 = $428 & $433;
    if ($or$cond$i17) {
     $434 = ($bits$0$ph>>>0)>(30);
     $435 = $418 >>> $bits$0$ph;
     $436 = ($435|0)==(0);
     $or$cond18$i = $434 | $436;
     if ($or$cond18$i) {
      $437 = (+($sign$0|0));
      $438 = (+($418>>>0));
      $439 = $437 * $438;
      $$0 = $439;
      STACKTOP = sp;return (+$$0);
     }
    }
    $440 = (($emin$0$ph|0) / -2)&-1;
    $441 = ($440|0)<(0);
    $442 = $441 << 31 >> 31;
    $443 = ($426|0)>($442|0);
    $444 = ($423>>>0)>($440>>>0);
    $445 = ($426|0)==($442|0);
    $446 = $445 & $444;
    $447 = $443 | $446;
    if ($447) {
     $448 = (___errno_location()|0);
     HEAP32[$448>>2] = 34;
     $449 = (+($sign$0|0));
     $450 = $449 * 1.7976931348623157E+308;
     $451 = $450 * 1.7976931348623157E+308;
     $$0 = $451;
     STACKTOP = sp;return (+$$0);
    }
    $452 = (($emin$0$ph) + -106)|0;
    $453 = ($452|0)<(0);
    $454 = $453 << 31 >> 31;
    $455 = ($426|0)<($454|0);
    $456 = ($423>>>0)<($452>>>0);
    $457 = ($426|0)==($454|0);
    $458 = $457 & $456;
    $459 = $455 | $458;
    if ($459) {
     $460 = (___errno_location()|0);
     HEAP32[$460>>2] = 34;
     $461 = (+($sign$0|0));
     $462 = $461 * 2.2250738585072014E-308;
     $463 = $462 * 2.2250738585072014E-308;
     $$0 = $463;
     STACKTOP = sp;return (+$$0);
    }
    $464 = ($j$072$i|0)==(0);
    if ($464) {
     $k$3$i = $k$068$i;
    } else {
     $465 = ($j$072$i|0)<(9);
     if ($465) {
      $466 = (($x$i) + ($k$068$i<<2)|0);
      $$promoted$i = HEAP32[$466>>2]|0;
      $468 = $$promoted$i;$j$3115$i = $j$072$i;
      while(1) {
       $467 = ($468*10)|0;
       $469 = (($j$3115$i) + 1)|0;
       $exitcond$i = ($469|0)==(9);
       if ($exitcond$i) {
        $$lcssa133 = $467;
        break;
       } else {
        $468 = $467;$j$3115$i = $469;
       }
      }
      HEAP32[$466>>2] = $$lcssa133;
     }
     $470 = (($k$068$i) + 1)|0;
     $k$3$i = $470;
    }
    $471 = ($lnz$062$i|0)<(9);
    if ($471) {
     $472 = ($lnz$062$i|0)<=($423|0);
     $473 = ($423|0)<(18);
     $or$cond3$i = $472 & $473;
     if ($or$cond3$i) {
      $474 = ($423|0)==(9);
      if ($474) {
       $475 = (+($sign$0|0));
       $476 = HEAP32[$x$i>>2]|0;
       $477 = (+($476>>>0));
       $478 = $475 * $477;
       $$0 = $478;
       STACKTOP = sp;return (+$$0);
      }
      $479 = ($423|0)<(9);
      if ($479) {
       $480 = (+($sign$0|0));
       $481 = HEAP32[$x$i>>2]|0;
       $482 = (+($481>>>0));
       $483 = $480 * $482;
       $484 = (8 - ($423))|0;
       $485 = (16872 + ($484<<2)|0);
       $486 = HEAP32[$485>>2]|0;
       $487 = (+($486|0));
       $488 = $483 / $487;
       $$0 = $488;
       STACKTOP = sp;return (+$$0);
      }
      $489 = Math_imul($423, -3)|0;
      $$neg38$i = (($bits$0$ph) + 27)|0;
      $490 = (($$neg38$i) + ($489))|0;
      $491 = ($490|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $492 = $$pre$i18 >>> $490;
      $493 = ($492|0)==(0);
      $or$cond185$i = $491 | $493;
      if ($or$cond185$i) {
       $494 = (+($sign$0|0));
       $495 = (+($$pre$i18>>>0));
       $496 = $494 * $495;
       $497 = (($423) + -10)|0;
       $498 = (16872 + ($497<<2)|0);
       $499 = HEAP32[$498>>2]|0;
       $500 = (+($499|0));
       $501 = $496 * $500;
       $$0 = $501;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $502 = (($423|0) % 9)&-1;
    $503 = ($502|0)==(0);
    if ($503) {
     $a$2$ph44$i$ph = 0;$rp$2$ph42$i$ph = $423;$z$1$ph43$i$ph = $k$3$i;
    } else {
     $504 = ($423|0)>(-1);
     $505 = (($502) + 9)|0;
     $506 = $504 ? $502 : $505;
     $507 = (8 - ($506))|0;
     $508 = (16872 + ($507<<2)|0);
     $509 = HEAP32[$508>>2]|0;
     $510 = ($k$3$i|0)==(0);
     if ($510) {
      $a$0$lcssa180$i = 0;$rp$0$lcssa181$i = $423;$z$0$i = 0;
     } else {
      $511 = (1000000000 / ($509|0))&-1;
      $a$0106$i = 0;$carry$0108$i = 0;$k$4107$i = 0;$rp$0105$i = $423;
      while(1) {
       $512 = (($x$i) + ($k$4107$i<<2)|0);
       $513 = HEAP32[$512>>2]|0;
       $514 = (($513>>>0) % ($509>>>0))&-1;
       $515 = (($513>>>0) / ($509>>>0))&-1;
       $516 = (($515) + ($carry$0108$i))|0;
       HEAP32[$512>>2] = $516;
       $517 = Math_imul($514, $511)|0;
       $518 = ($k$4107$i|0)==($a$0106$i|0);
       $519 = ($516|0)==(0);
       $or$cond19$i = $518 & $519;
       $520 = (($k$4107$i) + 1)|0;
       if ($or$cond19$i) {
        $521 = $520 & 127;
        $522 = (($rp$0105$i) + -9)|0;
        $a$1$i = $521;$rp$1$i19 = $522;
       } else {
        $a$1$i = $a$0106$i;$rp$1$i19 = $rp$0105$i;
       }
       $523 = ($520|0)==($k$3$i|0);
       if ($523) {
        $$lcssa132 = $517;$a$1$i$lcssa = $a$1$i;$rp$1$i19$lcssa = $rp$1$i19;
        break;
       } else {
        $a$0106$i = $a$1$i;$carry$0108$i = $517;$k$4107$i = $520;$rp$0105$i = $rp$1$i19;
       }
      }
      $524 = ($$lcssa132|0)==(0);
      if ($524) {
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $k$3$i;
      } else {
       $525 = (($k$3$i) + 1)|0;
       $526 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$526>>2] = $$lcssa132;
       $a$0$lcssa180$i = $a$1$i$lcssa;$rp$0$lcssa181$i = $rp$1$i19$lcssa;$z$0$i = $525;
      }
     }
     $527 = (9 - ($506))|0;
     $528 = (($527) + ($rp$0$lcssa181$i))|0;
     $a$2$ph44$i$ph = $a$0$lcssa180$i;$rp$2$ph42$i$ph = $528;$z$1$ph43$i$ph = $z$0$i;
    }
    $a$2$ph44$i = $a$2$ph44$i$ph;$e2$0$ph$i = 0;$rp$2$ph42$i = $rp$2$ph42$i$ph;$z$1$ph43$i = $z$1$ph43$i$ph;
    L338: while(1) {
     $529 = ($rp$2$ph42$i|0)<(18);
     $530 = (($x$i) + ($a$2$ph44$i<<2)|0);
     if ($529) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph43$i;
      while(1) {
       $532 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $532;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $533 = (($x$i) + ($k$5$us$i<<2)|0);
        $534 = HEAP32[$533>>2]|0;
        $535 = (_bitshift64Shl(($534|0),0,29)|0);
        $536 = tempRet0;
        $537 = (_i64Add(($535|0),($536|0),($carry1$0$us$i|0),0)|0);
        $538 = tempRet0;
        $539 = ($538>>>0)>(0);
        $540 = ($537>>>0)>(1000000000);
        $541 = ($538|0)==(0);
        $542 = $541 & $540;
        $543 = $539 | $542;
        if ($543) {
         $544 = (___udivdi3(($537|0),($538|0),1000000000,0)|0);
         $545 = tempRet0;
         $546 = (___uremdi3(($537|0),($538|0),1000000000,0)|0);
         $547 = tempRet0;
         $$sink$off0$us$i = $546;$carry1$1$us$i = $544;
        } else {
         $$sink$off0$us$i = $537;$carry1$1$us$i = 0;
        }
        HEAP32[$533>>2] = $$sink$off0$us$i;
        $548 = (($z$2$us$i) + 127)|0;
        $549 = $548 & 127;
        $550 = ($k$5$us$i|0)!=($549|0);
        $551 = ($k$5$us$i|0)==($a$2$ph44$i|0);
        $or$cond20$us$i = $550 | $551;
        if ($or$cond20$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $552 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $552 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $553 = (($k$5$us$i) + -1)|0;
        if ($551) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;$z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $553;$z$2$us$i = $z$3$us$i;
        }
       }
       $554 = (($e2$0$us$i) + -29)|0;
       $555 = ($carry1$1$us$i$lcssa|0)==(0);
       if ($555) {
        $e2$0$us$i = $554;$z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa126 = $554;$carry1$1$us$i$lcssa$lcssa = $carry1$1$us$i$lcssa;$z$3$us$i$lcssa$lcssa = $z$3$us$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa126;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us$i$lcssa$lcssa;
     } else {
      $531 = ($rp$2$ph42$i|0)==(18);
      if (!($531)) {
       $a$2$ph44$i$lcssa = $a$2$ph44$i;$e2$0$ph$i$lcssa = $e2$0$ph$i;$rp$2$ph42$i$lcssa = $rp$2$ph42$i;$z$1$ph43$i$lcssa = $z$1$ph43$i;
       label = 240;
       break;
      }
      $e2$0$us89$i = $e2$0$ph$i;$z$1$us90$i = $z$1$ph43$i;
      while(1) {
       $556 = HEAP32[$530>>2]|0;
       $557 = ($556>>>0)<(9007199);
       if (!($557)) {
        $a$2$ph44$i$lcssa130 = $a$2$ph44$i;$e2$0$us89$i$lcssa = $e2$0$us89$i;$z$1$us90$i$lcssa = $z$1$us90$i;
        label = 239;
        break L338;
       }
       $558 = (($z$1$us90$i) + 127)|0;
       $carry1$0$us94$i = 0;$k$5$in$us93$i = $558;$z$2$us92$i = $z$1$us90$i;
       while(1) {
        $k$5$us95$i = $k$5$in$us93$i & 127;
        $559 = (($x$i) + ($k$5$us95$i<<2)|0);
        $560 = HEAP32[$559>>2]|0;
        $561 = (_bitshift64Shl(($560|0),0,29)|0);
        $562 = tempRet0;
        $563 = (_i64Add(($561|0),($562|0),($carry1$0$us94$i|0),0)|0);
        $564 = tempRet0;
        $565 = ($564>>>0)>(0);
        $566 = ($563>>>0)>(1000000000);
        $567 = ($564|0)==(0);
        $568 = $567 & $566;
        $569 = $565 | $568;
        if ($569) {
         $570 = (___udivdi3(($563|0),($564|0),1000000000,0)|0);
         $571 = tempRet0;
         $572 = (___uremdi3(($563|0),($564|0),1000000000,0)|0);
         $573 = tempRet0;
         $$sink$off0$us98$i = $572;$carry1$1$us99$i = $570;
        } else {
         $$sink$off0$us98$i = $563;$carry1$1$us99$i = 0;
        }
        HEAP32[$559>>2] = $$sink$off0$us98$i;
        $574 = (($z$2$us92$i) + 127)|0;
        $575 = $574 & 127;
        $576 = ($k$5$us95$i|0)!=($575|0);
        $577 = ($k$5$us95$i|0)==($a$2$ph44$i|0);
        $or$cond20$us100$i = $576 | $577;
        if ($or$cond20$us100$i) {
         $z$3$us102$i = $z$2$us92$i;
        } else {
         $578 = ($$sink$off0$us98$i|0)==(0);
         $k$5$z$2$us101$i = $578 ? $k$5$us95$i : $z$2$us92$i;
         $z$3$us102$i = $k$5$z$2$us101$i;
        }
        $579 = (($k$5$us95$i) + -1)|0;
        if ($577) {
         $carry1$1$us99$i$lcssa = $carry1$1$us99$i;$z$3$us102$i$lcssa = $z$3$us102$i;
         break;
        } else {
         $carry1$0$us94$i = $carry1$1$us99$i;$k$5$in$us93$i = $579;$z$2$us92$i = $z$3$us102$i;
        }
       }
       $580 = (($e2$0$us89$i) + -29)|0;
       $581 = ($carry1$1$us99$i$lcssa|0)==(0);
       if ($581) {
        $e2$0$us89$i = $580;$z$1$us90$i = $z$3$us102$i$lcssa;
       } else {
        $$lcssa125 = $580;$carry1$1$us99$i$lcssa$lcssa = $carry1$1$us99$i$lcssa;$z$3$us102$i$lcssa$lcssa = $z$3$us102$i$lcssa;
        break;
       }
      }
      $$lcssa55$i = $$lcssa125;$carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa$lcssa;$z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa$lcssa;
     }
     $582 = (($rp$2$ph42$i) + 9)|0;
     $583 = (($a$2$ph44$i) + 127)|0;
     $584 = $583 & 127;
     $585 = ($584|0)==($z$3$lcssa$lcssa$i|0);
     if ($585) {
      $586 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $587 = $586 & 127;
      $588 = (($x$i) + ($587<<2)|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $591 = $590 & 127;
      $592 = (($x$i) + ($591<<2)|0);
      $593 = HEAP32[$592>>2]|0;
      $594 = $593 | $589;
      HEAP32[$592>>2] = $594;
      $z$4$i = $587;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $595 = (($x$i) + ($584<<2)|0);
     HEAP32[$595>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph44$i = $584;$e2$0$ph$i = $$lcssa55$i;$rp$2$ph42$i = $582;$z$1$ph43$i = $z$4$i;
    }
    if ((label|0) == 239) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa130;$e2$1$ph$i$ph = $e2$0$us89$i$lcssa;$rp$3$ph40$i$ph = 18;$z$5$ph$i$ph = $z$1$us90$i$lcssa;
    }
    else if ((label|0) == 240) {
     $a$2$ph44$i131 = $a$2$ph44$i$lcssa;$e2$1$ph$i$ph = $e2$0$ph$i$lcssa;$rp$3$ph40$i$ph = $rp$2$ph42$i$lcssa;$z$5$ph$i$ph = $z$1$ph43$i$lcssa;
    }
    $a$3$ph$i = $a$2$ph44$i131;$e2$1$ph$i = $e2$1$ph$i$ph;$rp$3$ph40$i = $rp$3$ph40$i$ph;$z$5$ph$i = $z$5$ph$i$ph;
    L377: while(1) {
     $632 = (($z$5$ph$i) + 1)|0;
     $630 = $632 & 127;
     $633 = (($z$5$ph$i) + 127)|0;
     $634 = $633 & 127;
     $635 = (($x$i) + ($634<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph40$i;
     while(1) {
      $608 = ($rp$3$i$ph|0)==(18);
      $636 = ($rp$3$i$ph|0)>(27);
      $$21$i = $636 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$081$i = 0;
       while(1) {
        $598 = (($i$081$i) + ($a$3$i))|0;
        $599 = $598 & 127;
        $600 = ($599|0)==($z$5$ph$i|0);
        if ($600) {
         $i$1$i = 2;
         break;
        }
        $601 = (($x$i) + ($599<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = (16864 + ($i$081$i<<2)|0);
        $604 = HEAP32[$603>>2]|0;
        $605 = ($602>>>0)<($604>>>0);
        if ($605) {
         $i$1$i = 2;
         break;
        }
        $606 = ($602>>>0)>($604>>>0);
        $597 = (($i$081$i) + 1)|0;
        if ($606) {
         $i$1$i = $i$081$i;
         break;
        }
        $596 = ($597|0)<(2);
        if ($596) {
         $i$081$i = $597;
        } else {
         $i$1$i = $597;
         break;
        }
       }
       $607 = ($i$1$i|0)==(2);
       $or$cond7$i = $607 & $608;
       if ($or$cond7$i) {
        $$lcssa122 = $630;$a$3$i$lcssa = $a$3$i;$e2$1$i$lcssa = $e2$1$i;$z$5$ph$i$lcssa = $z$5$ph$i;
        break L377;
       }
       $611 = (($$21$i) + ($e2$1$i))|0;
       $612 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($612) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $611;
       } else {
        $$lcssa120 = $611;$a$3$i$lcssa119 = $a$3$i;
        break;
       }
      }
      $613 = 1 << $$21$i;
      $614 = (($613) + -1)|0;
      $615 = 1000000000 >>> $$21$i;
      $a$483$i = $a$3$i$lcssa119;$carry3$086$i = 0;$k$684$i = $a$3$i$lcssa119;$rp$482$i = $rp$3$i$ph;
      while(1) {
       $616 = (($x$i) + ($k$684$i<<2)|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = $617 & $614;
       $619 = $617 >>> $$21$i;
       $620 = (($619) + ($carry3$086$i))|0;
       HEAP32[$616>>2] = $620;
       $621 = Math_imul($618, $615)|0;
       $622 = ($k$684$i|0)==($a$483$i|0);
       $623 = ($620|0)==(0);
       $or$cond22$i = $622 & $623;
       $624 = (($k$684$i) + 1)|0;
       $625 = $624 & 127;
       $626 = (($rp$482$i) + -9)|0;
       $rp$5$i = $or$cond22$i ? $626 : $rp$482$i;
       $a$5$i = $or$cond22$i ? $625 : $a$483$i;
       $627 = ($625|0)==($z$5$ph$i|0);
       if ($627) {
        $$lcssa121 = $621;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$483$i = $a$5$i;$carry3$086$i = $621;$k$684$i = $625;$rp$482$i = $rp$5$i;
       }
      }
      $628 = ($$lcssa121|0)==(0);
      if (!($628)) {
       $629 = ($630|0)==($a$5$i$lcssa|0);
       if (!($629)) {
        $$lcssa120$lcssa = $$lcssa120;$$lcssa121$lcssa = $$lcssa121;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
        break;
       }
       $637 = HEAP32[$635>>2]|0;
       $638 = $637 | 1;
       HEAP32[$635>>2] = $638;
      }
      $a$3$i$ph = $a$5$i$lcssa;$e2$1$i$ph = $$lcssa120;$rp$3$i$ph = $rp$5$i$lcssa;
     }
     $631 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$631>>2] = $$lcssa121$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa120$lcssa;$rp$3$ph40$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $630;
    }
    $609 = $a$3$i$lcssa & 127;
    $610 = ($609|0)==($z$5$ph$i$lcssa|0);
    if ($610) {
     $639 = (($$lcssa122) + -1)|0;
     $640 = (($x$i) + ($639<<2)|0);
     HEAP32[$640>>2] = 0;
     $z$7$i = $$lcssa122;
    } else {
     $z$7$i = $z$5$ph$i$lcssa;
    }
    $641 = (($x$i) + ($609<<2)|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = (+($642>>>0));
    $644 = (($a$3$i$lcssa) + 1)|0;
    $645 = $644 & 127;
    $646 = ($645|0)==($z$7$i|0);
    if ($646) {
     $705 = (($z$7$i) + 1)|0;
     $706 = $705 & 127;
     $707 = (($706) + -1)|0;
     $708 = (($x$i) + ($707<<2)|0);
     HEAP32[$708>>2] = 0;
     $z$7$1$i = $706;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $709 = $643 * 1.0E+9;
    $710 = (($x$i) + ($645<<2)|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (+($711>>>0));
    $713 = $709 + $712;
    $670 = (+($sign$0|0));
    $652 = $670 * $713;
    $690 = (($e2$1$i$lcssa) + 53)|0;
    $648 = (($690) - ($emin$0$ph))|0;
    $714 = ($648|0)<($bits$0$ph|0);
    if ($714) {
     $647 = ($648|0)<(0);
     if ($647) {
      $$01332$i = 0;$denormal$031$i = 1;
      label = 275;
     } else {
      $$013$i = $648;$denormal$0$i = 1;
      label = 274;
     }
    } else {
     $$013$i = $bits$0$ph;$denormal$0$i = 0;
     label = 274;
    }
    if ((label|0) == 274) {
     $649 = ($$013$i|0)<(53);
     if ($649) {
      $$01332$i = $$013$i;$denormal$031$i = $denormal$0$i;
      label = 275;
     } else {
      $$01333$i = $$013$i;$bias$0$i24 = 0.0;$denormal$030$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i23 = $652;
     }
    }
    if ((label|0) == 275) {
     $650 = (105 - ($$01332$i))|0;
     $651 = (+_scalbn(1.0,$650));
     $653 = (+_copysignl($651,$652));
     $654 = (53 - ($$01332$i))|0;
     $655 = (+_scalbn(1.0,$654));
     $656 = (+_fmodl($652,$655));
     $657 = $652 - $656;
     $658 = $653 + $657;
     $$01333$i = $$01332$i;$bias$0$i24 = $653;$denormal$030$i = $denormal$031$i;$frac$0$i = $656;$y$1$i23 = $658;
    }
    $659 = (($a$3$i$lcssa) + 2)|0;
    $660 = $659 & 127;
    $661 = ($660|0)==($z$7$1$i|0);
    do {
     if ($661) {
      $frac$2$i = $frac$0$i;
     } else {
      $662 = (($x$i) + ($660<<2)|0);
      $663 = HEAP32[$662>>2]|0;
      $664 = ($663>>>0)<(500000000);
      do {
       if ($664) {
        $665 = ($663|0)==(0);
        if ($665) {
         $666 = (($a$3$i$lcssa) + 3)|0;
         $667 = $666 & 127;
         $668 = ($667|0)==($z$7$1$i|0);
         if ($668) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $669 = $670 * 0.25;
        $671 = $669 + $frac$0$i;
        $frac$1$i = $671;
       } else {
        $672 = ($663>>>0)>(500000000);
        if ($672) {
         $673 = $670 * 0.75;
         $674 = $673 + $frac$0$i;
         $frac$1$i = $674;
         break;
        }
        $675 = (($a$3$i$lcssa) + 3)|0;
        $676 = $675 & 127;
        $677 = ($676|0)==($z$7$1$i|0);
        if ($677) {
         $678 = $670 * 0.5;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        } else {
         $680 = $670 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
       }
      } while(0);
      $682 = (53 - ($$01333$i))|0;
      $683 = ($682|0)>(1);
      if (!($683)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = (+_fmodl($frac$1$i,1.0));
      $685 = $684 != 0.0;
      if ($685) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $686 = $frac$1$i + 1.0;
      $frac$2$i = $686;
     }
    } while(0);
    $687 = $y$1$i23 + $frac$2$i;
    $688 = $687 - $bias$0$i24;
    $689 = $690 & 2147483647;
    $691 = (-2 - ($sum$i))|0;
    $692 = ($689|0)>($691|0);
    do {
     if ($692) {
      $693 = (+Math_abs((+$688)));
      $694 = !($693 >= 9007199254740992.0);
      if ($694) {
       $denormal$2$i = $denormal$030$i;$e2$2$i = $e2$1$i$lcssa;$y$2$i25 = $688;
      } else {
       $695 = ($denormal$030$i|0)!=(0);
       $696 = ($$01333$i|0)==($648|0);
       $or$cond23$i = $695 & $696;
       $denormal$1$i = $or$cond23$i ? 0 : $denormal$030$i;
       $697 = $688 * 0.5;
       $698 = (($e2$1$i$lcssa) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $698;$y$2$i25 = $697;
      }
      $699 = (($e2$2$i) + 50)|0;
      $700 = ($699|0)>($328|0);
      if (!($700)) {
       $701 = ($denormal$2$i|0)!=(0);
       $702 = $frac$2$i != 0.0;
       $or$cond9$i26 = $701 & $702;
       if (!($or$cond9$i26)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
        break;
       }
      }
      $703 = (___errno_location()|0);
      HEAP32[$703>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i25;
     } else {
      $e2$3$i = $e2$1$i$lcssa;$y$3$i = $688;
     }
    } while(0);
    $704 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $704;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if (!($or$cond)) {
  $$sink = $2;
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $$sink;
  return;
 }
 $11 = (($4) + ($lim)|0);
 $$sink = $11;
 $12 = (($f) + 100|0);
 HEAP32[$12>>2] = $$sink;
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa41 = 0, $$lcssa43 = 0, $$lcssa45 = 0, $$lcssa46 = 0, $$lcssa47 = 0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $$lcssa47 = $44;
       break;
      }
     }
     $ex$0$lcssa = $$lcssa47;
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $$lcssa46 = $67;
       break;
      }
     }
     $ey$0$lcssa = $$lcssa46;
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   do {
    if ($82) {
     $154 = $93;$155 = $87;$156 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($154) {
       $94 = ($95|0)==($85|0);
       $96 = ($97|0)==($86|0);
       $98 = $94 & $96;
       if ($98) {
        break;
       } else {
        $100 = $155;$101 = $156;
       }
      } else {
       $100 = $95;$101 = $97;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $154 = $112;$155 = $106;$156 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
      } else {
       $$lcssa43 = $104;$$lcssa45 = $112;$157 = $106;$158 = $107;$159 = $102;$160 = $103;
       label = 27;
       break;
      }
     }
     if ((label|0) == 27) {
      $$lcssa7 = $$lcssa45;$114 = $159;$116 = $160;$152 = $157;$153 = $158;$ex$2$lcssa = $$lcssa43;
      break;
     }
     $99 = $x * 0.0;
     $$0 = $99;
     return (+$$0);
    } else {
     $$lcssa7 = $93;$114 = $83;$116 = $84;$152 = $87;$153 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa7) {
    $113 = ($114|0)==($85|0);
    $115 = ($116|0)==($86|0);
    $117 = $113 & $115;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     return (+$$0);
    } else {
     $119 = $153;$121 = $152;
    }
   } else {
    $119 = $116;$121 = $114;
   }
   $118 = ($119>>>0)<(1048576);
   $120 = ($121>>>0)<(0);
   $122 = ($119|0)==(1048576);
   $123 = $122 & $120;
   $124 = $118 | $123;
   if ($124) {
    $126 = $121;$127 = $119;$ex$39 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$39) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$39 = $130;
     } else {
      $$lcssa41 = $130;$161 = $128;$162 = $129;
      break;
     }
    }
    $137 = $161;$138 = $162;$ex$3$lcssa = $$lcssa41;
   } else {
    $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$150 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$150 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $151;
   return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  return (+$$0);
 } else if ((($4|0) == 2047)) {
  $$0 = $x;
  return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _modf($x,$iptr) {
 $x = +$x;
 $iptr = $iptr|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 $5 = (($4) + -1023)|0;
 $6 = ($5|0)>(51);
 if ($6) {
  HEAPF64[$iptr>>3] = $x;
  $7 = ($5|0)!=(1024);
  $8 = $1 & 1048575;
  $9 = ($0|0)==(0);
  $10 = ($8|0)==(0);
  $11 = $9 & $10;
  $or$cond = $7 | $11;
  if (!($or$cond)) {
   $$0 = $x;
   return (+$$0);
  }
  $12 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  return (+$$0);
 }
 $14 = ($5|0)<(0);
 if ($14) {
  $15 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  HEAPF64[$iptr>>3] = $16;
  $$0 = $x;
  return (+$$0);
 }
 $17 = (_bitshift64Lshr(-1,1048575,($5|0))|0);
 $18 = tempRet0;
 $19 = $17 & $0;
 $20 = $18 & $1;
 $21 = ($19|0)==(0);
 $22 = ($20|0)==(0);
 $23 = $21 & $22;
 if ($23) {
  HEAPF64[$iptr>>3] = $x;
  $24 = $1 & -2147483648;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $24;$25 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $25;
  return (+$$0);
 } else {
  $26 = $17 ^ -1;
  $27 = $18 ^ -1;
  $28 = $0 & $26;
  $29 = $1 & $27;
  HEAP32[tempDoublePtr>>2] = $28;HEAP32[tempDoublePtr+4>>2] = $29;$30 = +HEAPF64[tempDoublePtr>>3];
  HEAPF64[$iptr>>3] = $30;
  $31 = $x - $30;
  $$0 = $31;
  return (+$$0);
 }
 return +(0.0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa7 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     label = 12;
     break;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     $i$0$lcssa7 = $i$0;
     break;
    } else {
     $i$0 = $19;
    }
   }
   if ((label|0) == 12) {
    $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    break;
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0$lcssa7)|0);
   $26 = ($25>>>0)<($i$0$lcssa7>>>0);
   if ($26) {
    $$0 = $i$0$lcssa7;
    return ($$0|0);
   } else {
    $27 = (($s) + ($i$0$lcssa7)|0);
    $28 = (($l) - ($i$0$lcssa7))|0;
    $$pre6 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa7;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=17472+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,-1,-1)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $$sink$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 $3 = (($s) + 2147483647|0);
 $$sink$i = $2 ? (-1) : $3;
 $4 = (($f$i) + 8|0);
 HEAP32[$4>>2] = $$sink$i;
 $5 = (($f$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i,0);
 $6 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $7 = tempRet0;
 $8 = ($p|0)==(0|0);
 if ($8) {
  tempRet0 = $7;
  STACKTOP = sp;return ($6|0);
 }
 $9 = (($f$i) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$4>>2]|0;
 $13 = $11;
 $14 = $12;
 $15 = (($13) + ($10))|0;
 $16 = (($15) - ($14))|0;
 $17 = (($s) + ($16)|0);
 HEAP32[$p>>2] = $17;
 tempRet0 = $7;
 STACKTOP = sp;return ($6|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$019$lcssa = 0, $$1$lcssa = 0, $$1$lcssa$ph = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$3$ph = 0, $$lcssa = 0, $$lcssa47 = 0, $$lcssa48 = 0, $$lcssa49 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$020$lcssa = 0, $s$15 = 0, $s$2 = 0, $s$2$ph = 0;
 var $w$0$lcssa = 0, $w$0$lcssa$ph = 0, $w$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $3 & $4;
 do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$019$lcssa = $$019;$s$020$lcssa = $s$020;
     label = 7;
     break;
    }
    $8 = (($s$020) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$lcssa47 = $8;$$lcssa48 = $9;$$lcssa49 = $13;
     label = 5;
     break;
    }
   }
   if ((label|0) == 5) {
    $$0$lcssa = $$lcssa48;$$lcssa = $$lcssa49;$s$0$lcssa = $$lcssa47;
    label = 6;
    break;
   }
   else if ((label|0) == 7) {
    $$0$lcssa44 = $$019$lcssa;$s$0$lcssa43 = $s$020$lcssa;
    break;
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
   $35 = ($$3|0)!=(0);
   $36 = $35 ? $s$2 : 0;
   return ($36|0);
  }
 }
 $14 = HEAP8[$s$0$lcssa43>>0]|0;
 $15 = $c&255;
 $16 = ($14<<24>>24)==($15<<24>>24);
 if ($16) {
  $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $17 = Math_imul($0, 16843009)|0;
 $18 = ($$0$lcssa44>>>0)>(3);
 if ($18) {
  $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
  while(1) {
   $19 = HEAP32[$w$011>>2]|0;
   $20 = $19 ^ $17;
   $21 = (($20) + -16843009)|0;
   $22 = $20 & -2139062144;
   $23 = $22 ^ -2139062144;
   $24 = $23 & $21;
   $25 = ($24|0)==(0);
   if (!($25)) {
    $$1$lcssa$ph = $$110;$w$0$lcssa$ph = $w$011;
    break;
   }
   $26 = (($w$011) + 4|0);
   $27 = (($$110) + -4)|0;
   $28 = ($27>>>0)>(3);
   if ($28) {
    $$110 = $27;$w$011 = $26;
   } else {
    $$1$lcssa$ph = $27;$w$0$lcssa$ph = $26;
    break;
   }
  }
  $$1$lcssa = $$1$lcssa$ph;$w$0$lcssa = $w$0$lcssa$ph;
 } else {
  $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
 }
 $29 = ($$1$lcssa|0)==(0);
 if ($29) {
  $$3 = 0;$s$2 = $w$0$lcssa;
  $35 = ($$3|0)!=(0);
  $36 = $35 ? $s$2 : 0;
  return ($36|0);
 }
 $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
 while(1) {
  $30 = HEAP8[$s$15>>0]|0;
  $31 = ($30<<24>>24)==($15<<24>>24);
  if ($31) {
   $$3$ph = $$24;$s$2$ph = $s$15;
   break;
  }
  $32 = (($s$15) + 1|0);
  $33 = (($$24) + -1)|0;
  $34 = ($33|0)==(0);
  if ($34) {
   $$3$ph = 0;$s$2$ph = $32;
   break;
  } else {
   $$24 = $33;$s$15 = $32;
  }
 }
 $$3 = $$3$ph;$s$2 = $s$2$ph;
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $11 = 0;
  return ($11|0);
 }
 $$03 = $n;$l$04 = $vl;$r$05 = $vr;
 while(1) {
  $1 = HEAP8[$l$04>>0]|0;
  $2 = HEAP8[$r$05>>0]|0;
  $3 = ($1<<24>>24)==($2<<24>>24);
  if (!($3)) {
   $$lcssa = $1;$$lcssa10 = $2;
   label = 5;
   break;
  }
  $4 = (($$03) + -1)|0;
  $5 = (($l$04) + 1|0);
  $6 = (($r$05) + 1|0);
  $7 = ($4|0)==(0);
  if ($7) {
   label = 6;
   break;
  } else {
   $$03 = $4;$l$04 = $5;$r$05 = $6;
  }
 }
 if ((label|0) == 5) {
  $8 = $$lcssa&255;
  $9 = $$lcssa10&255;
  $10 = (($8) - ($9))|0;
  $11 = $10;
  return ($11|0);
 }
 else if ((label|0) == 6) {
  $11 = 0;
  return ($11|0);
 }
 return (0)|0;
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa10 = 0, $$lcssa2 = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa10 = $7;$$lcssa9 = $6;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
  $$lcssa = $$lcssa9;$$lcssa2 = $$lcssa10;
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$0$lcssa$ph = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $13 = 0;$r$0$lcssa = $_r;
 } else {
  $$08$in = $n;$7 = $1;$l$06 = $_l;$r$07 = $_r;
  while(1) {
   $$08 = (($$08$in) + -1)|0;
   $3 = HEAP8[$r$07>>0]|0;
   $4 = ($3<<24>>24)!=(0);
   $5 = ($$08|0)!=(0);
   $or$cond = $4 & $5;
   $6 = ($7<<24>>24)==($3<<24>>24);
   $or$cond4 = $or$cond & $6;
   if (!($or$cond4)) {
    $$ph = $7;$r$0$lcssa$ph = $r$07;
    break;
   }
   $8 = (($l$06) + 1|0);
   $9 = (($r$07) + 1|0);
   $10 = HEAP8[$8>>0]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    $$ph = 0;$r$0$lcssa$ph = $9;
    break;
   } else {
    $$08$in = $$08;$7 = $10;$l$06 = $8;$r$07 = $9;
   }
  }
  $13 = $$ph;$r$0$lcssa = $r$0$lcssa$ph;
 }
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$03 = $16;
 return ($$03|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $RP$0 = 0, $RP$0$be = 0, $RP$0$lcssa = 0;
 var $RP$0$ph = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((16072 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((16544 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[((16072 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((16072 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((16072 + 24|0))>>2] = $36;
  HEAP32[((16072 + 12|0))>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[((16072 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((16072 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((16072 + 8|0))>>2] = $storemerge21;
  HEAP32[((16072 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((16072 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[16072>>2]|0;
    $88 = $87 & $86;
    HEAP32[16072>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $113;$RP$0$ph = $112;
      }
     } else {
      $R$0$ph = $110;$RP$0$ph = $109;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $118 = (($R$0) + 16|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(0|0);
       if ($120) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $119;$RP$0$be = $118;
       }
      } else {
       $R$0$be = $116;$RP$0$be = $115;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((16072 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((16072 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((16072 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((16072 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((16072 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((16072 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa64 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$051 = 0, $R$0 = 0, $R$0$be = 0, $R$0$lcssa = 0, $R$0$ph = 0, $R$1 = 0, $R7$0 = 0, $R7$0$be = 0, $R7$0$lcssa = 0, $R7$0$ph = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$be = 0;
 var $RP$0$lcssa = 0, $RP$0$ph = 0, $RP9$0 = 0, $RP9$0$be = 0, $RP9$0$lcssa = 0, $RP9$0$ph = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((16072 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((16072 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((16072 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((16072 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[16072>>2]|0;
     $32 = $31 & $30;
     HEAP32[16072>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0$ph = $57;$RP$0$ph = $56;
      }
     } else {
      $R$0$ph = $54;$RP$0$ph = $53;
     }
     $R$0 = $R$0$ph;$RP$0 = $RP$0$ph;
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = (($R$0) + 16|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
        break;
       } else {
        $R$0$be = $63;$RP$0$be = $62;
       }
      } else {
       $R$0$be = $60;$RP$0$be = $59;
      }
      $R$0 = $R$0$be;$RP$0 = $RP$0$be;
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((16072 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((16072 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((16072 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((16072 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((16072 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((16072 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((16072 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((16072 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((16072 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((16072 + 12|0))>>2] = $115;
   HEAP32[((16072 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((16072 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[((16072 + 20|0))>>2] = 0;
   HEAP32[((16072 + 8|0))>>2] = 0;
   return;
  }
  $120 = HEAP32[((16072 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((16072 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((16072 + 8|0))>>2] = $123;
   HEAP32[((16072 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((16072 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[16072>>2]|0;
     $146 = $145 & $144;
     HEAP32[16072>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0$ph = $171;$RP9$0$ph = $170;
       }
      } else {
       $R7$0$ph = $168;$RP9$0$ph = $167;
      }
      $R7$0 = $R7$0$ph;$RP9$0 = $RP9$0$ph;
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = (($R7$0) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
         break;
        } else {
         $R7$0$be = $177;$RP9$0$be = $176;
        }
       } else {
        $R7$0$be = $174;$RP9$0$be = $173;
       }
       $R7$0 = $R7$0$be;$RP9$0 = $RP9$0$be;
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((16072 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((16072 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((16072 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((16072 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((16072 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((16072 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((16072 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((16072 + 8|0))>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((16072 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[16072>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[16072>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((16072 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((16072 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((16072 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((16072 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((16072 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((16072 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$051 = $283;$T$050 = $275;
   while(1) {
    $291 = $K20$051 >>> 31;
    $292 = ((($T$050) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$050$lcssa = $T$050;
     break;
    }
    $285 = $K20$051 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $$lcssa64 = $287;
     label = 134;
     break;
    } else {
     $K20$051 = $285;$T$050 = $287;
    }
   }
   if ((label|0) == 134) {
    $T$0$lcssa = $$lcssa64;
    break;
   }
   $294 = HEAP32[((16072 + 16|0))>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$050$lcssa;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((16072 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $$lcssa17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $x$012 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  return ($97|0);
 }
 $c$111 = $c$0;$x$012 = 0;
 while(1) {
  $33 = ($x$012*10)|0;
  $34 = (($c$111) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if ($$) {
   $c$111 = $c$1$be;$x$012 = $35;
  } else {
   $$lcssa17 = $35;$c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $46 = ($$lcssa17|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be$lcssa) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $$lcssa17;$53 = $47;$c$27 = $c$1$be$lcssa;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$27|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$27|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond5 = $70 & $75;
   if ($or$cond5) {
    $52 = $60;$53 = $61;$c$27 = $c$2$be;
   } else {
    $98 = $60;$99 = $61;$c$2$be$lcssa = $c$2$be;
    break;
   }
  }
  $90 = $98;$91 = $99;$c$2$lcssa = $c$2$be$lcssa;
 } else {
  $90 = $$lcssa17;$91 = $47;$c$2$lcssa = $c$1$be$lcssa;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0;
 var $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$0$ph = 0, $$0$ph285 = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0;
 var $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0;
 var $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$21 = 0, $$216$$29$i = 0, $$216$$31$i = 0, $$216$i = 0, $$25 = 0, $$26 = 0, $$26$i = 0, $$26$us$i = 0, $$27$i = 0, $$28$i = 0.0, $$29$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us309$i = 0, $$a$3$us310$i = 0, $$a$3$us310$i$lcssa = 0, $$a$3311$i = 0, $$a$3312$i = 0, $$a$3312$i$lcssa = 0, $$be = 0, $$be286 = 0, $$be287 = 0;
 var $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa106 = 0, $$lcssa106$ph = 0, $$lcssa283$i = 0, $$lcssa289 = 0, $$lcssa290 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $$lcssa295 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa304 = 0, $$lcssa305 = 0;
 var $$lcssa306 = 0, $$lcssa307 = 0, $$lcssa308 = 0, $$lcssa309 = 0, $$lcssa310 = 0, $$lcssa311 = 0, $$lcssa312 = 0, $$lcssa314 = 0, $$lcssa315 = 0, $$lcssa316 = 0, $$lcssa317 = 0, $$lcssa318 = 0, $$lcssa319 = 0, $$lcssa320 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0.0, $$lcssa326 = 0;
 var $$lcssa328 = 0, $$lcssa329 = 0, $$lcssa331 = 0, $$lcssa332 = 0, $$lcssa333 = 0, $$mask$i = 0, $$mask$i39 = 0, $$mask1$i = 0, $$mask1$i38 = 0, $$neg159$i = 0, $$neg160$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$ph = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre = 0, $$pre$i = 0;
 var $$pre267 = 0, $$pre268 = 0, $$pre308$i = 0, $$sum$i = 0, $$sum21$i = 0, $$sum22$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $$z$4$us$i$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
 var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
 var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0.0, $1036 = 0.0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
 var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
 var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $128$phi = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0.0, $421 = 0.0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0.0, $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0.0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0.0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $584$phi = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0.0, $706 = 0.0, $707 = 0, $708 = 0.0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $884$phi = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0;
 var $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0, $a$1 = 0;
 var $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$2$ph$i$lcssa = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$6$i$lcssa = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0;
 var $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0;
 var $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0;
 var $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0;
 var $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0110 = 0, $fl$0110$ph = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0;
 var $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1230$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2217$i = 0, $i$3160 = 0, $i$3213$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i33 = 0, $isdigit10 = 0, $isdigit12 = 0;
 var $isdigit2$i = 0, $isdigit2$i29 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i32 = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$be = 0, $l$0$i = 0;
 var $l$1$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$be = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i108$i = 0, $or$cond$i43$i = 0, $or$cond$i50$i = 0, $or$cond$i58 = 0;
 var $or$cond$i60$i = 0, $or$cond$i65 = 0, $or$cond$i67$i = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i80$i = 0, $or$cond$i82 = 0, $or$cond10$i = 0, $or$cond10191$i = 0, $or$cond12$i = 0, $or$cond15 = 0, $or$cond19 = 0, $or$cond23 = 0, $or$cond277 = 0, $or$cond35$i = 0, $or$cond37$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0;
 var $p$2$ = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0;
 var $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$i$lcssa = 0, $s$1$us$us$i = 0, $s$1$us$us$i$lcssa = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s8$0188$i$ph = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0;
 var $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa296 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8108$ph = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $uglygep$i = 0, $uglygep296$i = 0, $uglygep300$i = 0, $uglygep300301$i = 0, $umax$i = 0, $umax297$i = 0, $umax297298299$i = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$25$i = 0, $w$38$i = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0$lcssa$ph = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0;
 var $z$2$i = 0, $z$2$i$lcssa = 0, $z$2$i$lcssa$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$5$i$lcssa = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1044 = 0;$1045 = 0;$23 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$23>>0]|0;
  $24 = ($22<<24>>24)==(0);
  if ($24) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 426;
   break;
  }
  $1046 = $22;$26 = $23;
  while(1) {
   if ((($1046<<24>>24) == 0)) {
    $$lcssa289 = $26;
    label = 14;
    break;
   } else if ((($1046<<24>>24) == 37)) {
    $$lcssa = $26;
    label = 9;
    break;
   }
   $25 = (($26) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $1046 = $$pre;$26 = $25;
  }
  if ((label|0) == 9) {
   label = 0;
   $28 = $$lcssa;$z$0163 = $$lcssa;
   while(1) {
    $27 = (($28) + 1|0);
    $29 = HEAP8[$27>>0]|0;
    $30 = ($29<<24>>24)==(37);
    if (!($30)) {
     $$lcssa106$ph = $28;$z$0$lcssa$ph = $z$0163;
     break;
    }
    $31 = (($z$0163) + 1|0);
    $32 = (($28) + 2|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = ($33<<24>>24)==(37);
    if ($34) {
     $28 = $32;$z$0163 = $31;
    } else {
     $$lcssa106$ph = $32;$z$0$lcssa$ph = $31;
     break;
    }
   }
   $$lcssa106 = $$lcssa106$ph;$z$0$lcssa = $z$0$lcssa$ph;
  }
  else if ((label|0) == 14) {
   label = 0;
   $$lcssa106 = $$lcssa289;$z$0$lcssa = $$lcssa289;
  }
  $35 = $z$0$lcssa;
  $36 = $23;
  $37 = (($35) - ($36))|0;
  if ($1) {
   (___fwritex($23,$37,$f)|0);
  }
  $38 = ($z$0$lcssa|0)==($23|0);
  L24: do {
   if ($38) {
    $39 = (($$lcssa106) + 1|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $isdigittmp = (($41) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if ($isdigit) {
     $42 = (($$lcssa106) + 2|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = ($43<<24>>24)==(36);
     $45 = (($$lcssa106) + 3|0);
     $$92 = $44 ? $45 : $39;
     $$l10n$0 = $44 ? 1 : $l10n$0;
     $isdigittmp$ = $44 ? $isdigittmp : -1;
     $$pre267 = HEAP8[$$92>>0]|0;
     $47 = $$pre267;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$92;
    } else {
     $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
    }
    $46 = $47 << 24 >> 24;
    $48 = $46 & -32;
    $49 = ($48|0)==(32);
    if ($49) {
     $51 = $46;$56 = $47;$fl$0170 = 0;$storemerge8169 = $storemerge;
     while(1) {
      $50 = (($51) + -32)|0;
      $52 = 1 << $50;
      $53 = $52 & 75913;
      $54 = ($53|0)==(0);
      if ($54) {
       $$ph = $56;$fl$0110$ph = $fl$0170;$storemerge8108$ph = $storemerge8169;
       break;
      }
      $55 = $56 << 24 >> 24;
      $57 = (($55) + -32)|0;
      $58 = 1 << $57;
      $59 = $58 | $fl$0170;
      $60 = (($storemerge8169) + 1|0);
      $61 = HEAP8[$60>>0]|0;
      $62 = $61 << 24 >> 24;
      $63 = $62 & -32;
      $64 = ($63|0)==(32);
      if ($64) {
       $51 = $62;$56 = $61;$fl$0170 = $59;$storemerge8169 = $60;
      } else {
       $$ph = $61;$fl$0110$ph = $59;$storemerge8108$ph = $60;
       break;
      }
     }
     $66 = $$ph;$fl$0110 = $fl$0110$ph;$storemerge8108 = $storemerge8108$ph;
    } else {
     $66 = $47;$fl$0110 = 0;$storemerge8108 = $storemerge;
    }
    $65 = ($66<<24>>24)==(42);
    do {
     if ($65) {
      $67 = (($storemerge8108) + 1|0);
      $68 = HEAP8[$67>>0]|0;
      $69 = $68 << 24 >> 24;
      $isdigittmp11 = (($69) + -48)|0;
      $isdigit12 = ($isdigittmp11>>>0)<(10);
      if ($isdigit12) {
       $70 = (($storemerge8108) + 2|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($71<<24>>24)==(36);
       if ($72) {
        $73 = (($nl_type) + ($isdigittmp11<<2)|0);
        HEAP32[$73>>2] = 10;
        $74 = HEAP8[$67>>0]|0;
        $75 = $74 << 24 >> 24;
        $76 = (($75) + -48)|0;
        $77 = (($nl_arg) + ($76<<3)|0);
        $78 = $77;
        $79 = $78;
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4)|0;
        $82 = $81;
        $83 = HEAP32[$82>>2]|0;
        $84 = (($storemerge8108) + 3|0);
        $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
       } else {
        label = 29;
       }
      } else {
       label = 29;
      }
      if ((label|0) == 29) {
       label = 0;
       $85 = ($l10n$1|0)==(0);
       if (!($85)) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       }
       if (!($1)) {
        $99 = $67;$fl$1 = $fl$0110;$l10n$3 = 0;$w$1 = 0;
        break;
       }
       $arglist_current = HEAP32[$ap>>2]|0;
       $86 = HEAP32[$arglist_current>>2]|0;
       $arglist_next = (($arglist_current) + 4|0);
       HEAP32[$ap>>2] = $arglist_next;
       $l10n$2 = 0;$storemerge13 = $67;$w$0 = $86;
      }
      $87 = ($w$0|0)<(0);
      if ($87) {
       $88 = $fl$0110 | 8192;
       $89 = (0 - ($w$0))|0;
       $99 = $storemerge13;$fl$1 = $88;$l10n$3 = $l10n$2;$w$1 = $89;
      } else {
       $99 = $storemerge13;$fl$1 = $fl$0110;$l10n$3 = $l10n$2;$w$1 = $w$0;
      }
     } else {
      $90 = $66 << 24 >> 24;
      $isdigittmp1$i = (($90) + -48)|0;
      $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
      if ($isdigit2$i) {
       $94 = $storemerge8108;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
       while(1) {
        $91 = ($i$03$i*10)|0;
        $92 = (($91) + ($isdigittmp4$i))|0;
        $93 = (($94) + 1|0);
        $95 = HEAP8[$93>>0]|0;
        $96 = $95 << 24 >> 24;
        $isdigittmp$i = (($96) + -48)|0;
        $isdigit$i = ($isdigittmp$i>>>0)<(10);
        if ($isdigit$i) {
         $94 = $93;$i$03$i = $92;$isdigittmp4$i = $isdigittmp$i;
        } else {
         $$lcssa290 = $92;$$lcssa291 = $93;
         break;
        }
       }
       $97 = ($$lcssa290|0)<(0);
       if ($97) {
        $$0$ph285 = -1;
        label = 449;
        break L1;
       } else {
        $99 = $$lcssa291;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = $$lcssa290;
       }
      } else {
       $99 = $storemerge8108;$fl$1 = $fl$0110;$l10n$3 = $l10n$1;$w$1 = 0;
      }
     }
    } while(0);
    $98 = HEAP8[$99>>0]|0;
    $100 = ($98<<24>>24)==(46);
    do {
     if ($100) {
      $101 = (($99) + 1|0);
      $102 = HEAP8[$101>>0]|0;
      $103 = ($102<<24>>24)==(42);
      if (!($103)) {
       $124 = $102 << 24 >> 24;
       $isdigittmp1$i28 = (($124) + -48)|0;
       $isdigit2$i29 = ($isdigittmp1$i28>>>0)<(10);
       if (!($isdigit2$i29)) {
        $1047 = $101;$p$0 = 0;
        break;
       }
       $1048 = $101;$128 = $99;$i$03$i31 = 0;$isdigittmp4$i30 = $isdigittmp1$i28;
       while(1) {
        $125 = ($i$03$i31*10)|0;
        $126 = (($125) + ($isdigittmp4$i30))|0;
        $127 = (($128) + 2|0);
        $129 = HEAP8[$127>>0]|0;
        $130 = $129 << 24 >> 24;
        $isdigittmp$i32 = (($130) + -48)|0;
        $isdigit$i33 = ($isdigittmp$i32>>>0)<(10);
        if ($isdigit$i33) {
         $128$phi = $1048;$1048 = $127;$i$03$i31 = $126;$isdigittmp4$i30 = $isdigittmp$i32;$128 = $128$phi;
        } else {
         $$lcssa292 = $126;$$lcssa293 = $127;
         break;
        }
       }
       $1047 = $$lcssa293;$p$0 = $$lcssa292;
       break;
      }
      $104 = (($99) + 2|0);
      $105 = HEAP8[$104>>0]|0;
      $106 = $105 << 24 >> 24;
      $isdigittmp9 = (($106) + -48)|0;
      $isdigit10 = ($isdigittmp9>>>0)<(10);
      if ($isdigit10) {
       $107 = (($99) + 3|0);
       $108 = HEAP8[$107>>0]|0;
       $109 = ($108<<24>>24)==(36);
       if ($109) {
        $110 = (($nl_type) + ($isdigittmp9<<2)|0);
        HEAP32[$110>>2] = 10;
        $111 = HEAP8[$104>>0]|0;
        $112 = $111 << 24 >> 24;
        $113 = (($112) + -48)|0;
        $114 = (($nl_arg) + ($113<<3)|0);
        $115 = $114;
        $116 = $115;
        $117 = HEAP32[$116>>2]|0;
        $118 = (($115) + 4)|0;
        $119 = $118;
        $120 = HEAP32[$119>>2]|0;
        $121 = (($99) + 4|0);
        $1047 = $121;$p$0 = $117;
        break;
       }
      }
      $122 = ($l10n$3|0)==(0);
      if (!($122)) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      }
      if ($1) {
       $arglist_current2 = HEAP32[$ap>>2]|0;
       $123 = HEAP32[$arglist_current2>>2]|0;
       $arglist_next3 = (($arglist_current2) + 4|0);
       HEAP32[$ap>>2] = $arglist_next3;
       $1047 = $104;$p$0 = $123;
      } else {
       $1047 = $104;$p$0 = 0;
      }
     } else {
      $1047 = $99;$p$0 = -1;
     }
    } while(0);
    $132 = $1047;$st$0 = 0;
    while(1) {
     $131 = HEAP8[$132>>0]|0;
     $133 = $131 << 24 >> 24;
     $134 = (($133) + -65)|0;
     $135 = ($134>>>0)>(57);
     if ($135) {
      label = 448;
      break L1;
     }
     $136 = (($132) + 1|0);
     $137 = ((16904 + (($st$0*58)|0)|0) + ($134)|0);
     $138 = HEAP8[$137>>0]|0;
     $139 = $138&255;
     $140 = (($139) + -1)|0;
     $141 = ($140>>>0)<(8);
     if ($141) {
      $132 = $136;$st$0 = $139;
     } else {
      $$lcssa295 = $132;$$lcssa298 = $131;$$lcssa299 = $136;$$lcssa300 = $138;$$lcssa301 = $139;$st$0$lcssa296 = $st$0;
      break;
     }
    }
    $142 = ($$lcssa300<<24>>24)==(0);
    if ($142) {
     $$0$ph285 = -1;
     label = 449;
     break L1;
    }
    $143 = ($$lcssa300<<24>>24)==(19);
    $144 = ($argpos$0|0)>(-1);
    L74: do {
     if ($143) {
      if ($144) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1049 = $1044;$1050 = $1045;
       label = 71;
      }
     } else {
      if ($144) {
       $145 = (($nl_type) + ($argpos$0<<2)|0);
       HEAP32[$145>>2] = $$lcssa301;
       $146 = (($nl_arg) + ($argpos$0<<3)|0);
       $147 = $146;
       $148 = $147;
       $149 = HEAP32[$148>>2]|0;
       $150 = (($147) + 4)|0;
       $151 = $150;
       $152 = HEAP32[$151>>2]|0;
       $1049 = $149;$1050 = $152;
       label = 71;
       break;
      }
      if (!($1)) {
       $$0$ph285 = 0;
       label = 449;
       break L1;
      }
      $153 = ($$lcssa300&255)>(20);
      if ($153) {
       $187 = $$lcssa298;$196 = $1044;$223 = $1045;
      } else {
       do {
        switch ($$lcssa301|0) {
        case 9:  {
         $arglist_current5 = HEAP32[$ap>>2]|0;
         $154 = HEAP32[$arglist_current5>>2]|0;
         $arglist_next6 = (($arglist_current5) + 4|0);
         HEAP32[$ap>>2] = $arglist_next6;
         $155 = $154;
         $1051 = $1045;$1052 = $155;
         label = 72;
         break L74;
         break;
        }
        case 14:  {
         $arglist_current20 = HEAP32[$ap>>2]|0;
         $172 = HEAP32[$arglist_current20>>2]|0;
         $arglist_next21 = (($arglist_current20) + 4|0);
         HEAP32[$ap>>2] = $arglist_next21;
         $$mask1$i38 = $172 & 65535;
         $1051 = 0;$1052 = $$mask1$i38;
         label = 72;
         break L74;
         break;
        }
        case 17:  {
         $arglist_current29 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$180 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next30 = (($arglist_current29) + 8|0);
         HEAP32[$ap>>2] = $arglist_next30;
         HEAPF64[tempDoublePtr>>3] = $180;$181 = HEAP32[tempDoublePtr>>2]|0;
         $182 = HEAP32[tempDoublePtr+4>>2]|0;
         $1051 = $182;$1052 = $181;
         label = 72;
         break L74;
         break;
        }
        case 15:  {
         $arglist_current23 = HEAP32[$ap>>2]|0;
         $173 = HEAP32[$arglist_current23>>2]|0;
         $arglist_next24 = (($arglist_current23) + 4|0);
         HEAP32[$ap>>2] = $arglist_next24;
         $174 = $173&255;
         $175 = $174 << 24 >> 24;
         $176 = ($175|0)<(0);
         $177 = $176 << 31 >> 31;
         $sext = $173 << 24;
         $178 = $sext >> 24;
         $1051 = $177;$1052 = $178;
         label = 72;
         break L74;
         break;
        }
        case 12:  {
         $arglist_current14 = HEAP32[$ap>>2]|0;
         $160 = $arglist_current14;
         $161 = $160;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($160) + 4)|0;
         $164 = $163;
         $165 = HEAP32[$164>>2]|0;
         $arglist_next15 = (($arglist_current14) + 8|0);
         HEAP32[$ap>>2] = $arglist_next15;
         $1051 = $165;$1052 = $162;
         label = 72;
         break L74;
         break;
        }
        case 13:  {
         $arglist_current17 = HEAP32[$ap>>2]|0;
         $166 = HEAP32[$arglist_current17>>2]|0;
         $arglist_next18 = (($arglist_current17) + 4|0);
         HEAP32[$ap>>2] = $arglist_next18;
         $167 = $166&65535;
         $168 = $167 << 16 >> 16;
         $169 = ($168|0)<(0);
         $170 = $169 << 31 >> 31;
         $sext93 = $166 << 16;
         $171 = $sext93 >> 16;
         $1051 = $170;$1052 = $171;
         label = 72;
         break L74;
         break;
        }
        case 16:  {
         $arglist_current26 = HEAP32[$ap>>2]|0;
         $179 = HEAP32[$arglist_current26>>2]|0;
         $arglist_next27 = (($arglist_current26) + 4|0);
         HEAP32[$ap>>2] = $arglist_next27;
         $$mask$i39 = $179 & 255;
         $1051 = 0;$1052 = $$mask$i39;
         label = 72;
         break L74;
         break;
        }
        case 11:  {
         $arglist_current11 = HEAP32[$ap>>2]|0;
         $159 = HEAP32[$arglist_current11>>2]|0;
         $arglist_next12 = (($arglist_current11) + 4|0);
         HEAP32[$ap>>2] = $arglist_next12;
         $1051 = 0;$1052 = $159;
         label = 72;
         break L74;
         break;
        }
        case 10:  {
         $arglist_current8 = HEAP32[$ap>>2]|0;
         $156 = HEAP32[$arglist_current8>>2]|0;
         $arglist_next9 = (($arglist_current8) + 4|0);
         HEAP32[$ap>>2] = $arglist_next9;
         $157 = ($156|0)<(0);
         $158 = $157 << 31 >> 31;
         $1051 = $158;$1052 = $156;
         label = 72;
         break L74;
         break;
        }
        case 18:  {
         $arglist_current32 = HEAP32[$ap>>2]|0;
         HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$183 = +HEAPF64[tempDoublePtr>>3];
         $arglist_next33 = (($arglist_current32) + 8|0);
         HEAP32[$ap>>2] = $arglist_next33;
         HEAPF64[tempDoublePtr>>3] = $183;$184 = HEAP32[tempDoublePtr>>2]|0;
         $185 = HEAP32[tempDoublePtr+4>>2]|0;
         $1049 = $184;$1050 = $185;
         label = 71;
         break L74;
         break;
        }
        default: {
         $1051 = $1045;$1052 = $1044;
         label = 72;
         break L74;
        }
        }
       } while(0);
      }
     }
    } while(0);
    if ((label|0) == 71) {
     label = 0;
     if ($1) {
      $1051 = $1050;$1052 = $1049;
      label = 72;
     } else {
      $$be = $$lcssa299;$$be286 = $1049;$$be287 = $1050;$l$0$be = $37;$l10n$0$be = $l10n$3;
      break;
     }
    }
    if ((label|0) == 72) {
     label = 0;
     $$pre268 = HEAP8[$$lcssa295>>0]|0;
     $187 = $$pre268;$196 = $1052;$223 = $1051;
    }
    $186 = $187 << 24 >> 24;
    $188 = ($st$0$lcssa296|0)!=(0);
    $189 = $186 & 15;
    $190 = ($189|0)==(3);
    $or$cond15 = $188 & $190;
    $191 = $186 & -33;
    $t$0 = $or$cond15 ? $191 : $186;
    $192 = $fl$1 & 8192;
    $193 = ($192|0)==(0);
    $194 = $fl$1 & -65537;
    $fl$1$ = $193 ? $fl$1 : $194;
    L98: do {
     switch ($t$0|0) {
     case 88: case 120:  {
      $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
      label = 83;
      break;
     }
     case 110:  {
      switch ($st$0$lcssa296|0) {
      case 2:  {
       $198 = ($cnt$1|0)<(0);
       $199 = $198 << 31 >> 31;
       $200 = $196;
       $201 = $200;
       $202 = $201;
       HEAP32[$202>>2] = $cnt$1;
       $203 = (($201) + 4)|0;
       $204 = $203;
       HEAP32[$204>>2] = $199;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 7:  {
       $210 = ($cnt$1|0)<(0);
       $211 = $210 << 31 >> 31;
       $212 = $196;
       $213 = $212;
       $214 = $213;
       HEAP32[$214>>2] = $cnt$1;
       $215 = (($213) + 4)|0;
       $216 = $215;
       HEAP32[$216>>2] = $211;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 0:  {
       $195 = $196;
       HEAP32[$195>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 1:  {
       $197 = $196;
       HEAP32[$197>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 3:  {
       $205 = $cnt$1&65535;
       $206 = $196;
       HEAP16[$206>>1] = $205;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 4:  {
       $207 = $cnt$1&255;
       $208 = $196;
       HEAP8[$208>>0] = $207;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      case 6:  {
       $209 = $196;
       HEAP32[$209>>2] = $cnt$1;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
       break;
      }
      default: {
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $37;$l10n$0$be = $l10n$3;
       break L24;
      }
      }
      break;
     }
     case 99:  {
      $309 = $196&255;
      HEAP8[$4>>0] = $309;
      $1053 = $196;$1054 = $223;$a$2 = $4;$fl$6 = $194;$p$5 = 1;$pl$2 = 0;$prefix$2 = 17368;$z$2 = $2;
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      HEAP32[tempDoublePtr>>2] = $196;HEAP32[tempDoublePtr+4>>2] = $223;$360 = +HEAPF64[tempDoublePtr>>3];
      HEAP32[$e2$i>>2] = 0;
      $361 = ($223|0)<(0);
      if ($361) {
       $362 = -$360;
       $$013$i = $362;$pl$0$i = 1;$prefix$0$i = 17392;
      } else {
       $363 = $fl$1$ & 2048;
       $364 = ($363|0)==(0);
       if ($364) {
        $365 = $fl$1$ & 1;
        $366 = ($365|0)==(0);
        $$$i = $366 ? ((17392 + 1|0)) : ((17392 + 6|0));
        $$013$i = $360;$pl$0$i = $365;$prefix$0$i = $$$i;
       } else {
        $$013$i = $360;$pl$0$i = 1;$prefix$0$i = ((17392 + 3|0));
       }
      }
      HEAPF64[tempDoublePtr>>3] = $$013$i;$367 = HEAP32[tempDoublePtr>>2]|0;
      $368 = HEAP32[tempDoublePtr+4>>2]|0;
      $369 = $368 & 2146435072;
      $370 = ($369>>>0)<(2146435072);
      $371 = (0)<(0);
      $372 = ($369|0)==(2146435072);
      $373 = $372 & $371;
      $374 = $370 | $373;
      if (!($374)) {
       $375 = $t$0 & 32;
       $376 = ($375|0)!=(0);
       $377 = $376 ? 17416 : 17424;
       $378 = ($$013$i != $$013$i) | (0.0 != 0.0);
       if ($378) {
        $379 = $376 ? 17432 : 17440;
        $pl$1$i = 0;$s1$0$i = $379;
       } else {
        $pl$1$i = $pl$0$i;$s1$0$i = $377;
       }
       $380 = (($pl$1$i) + 3)|0;
       $381 = $fl$1$ & 8192;
       $382 = ($381|0)==(0);
       $383 = ($w$1|0)>($380|0);
       $or$cond$i43$i = $382 & $383;
       if ($or$cond$i43$i) {
        $384 = (($w$1) - ($380))|0;
        $385 = ($384>>>0)>(256);
        $386 = $385 ? 256 : $384;
        _memset(($pad$i|0),32,($386|0))|0;
        $387 = ($384>>>0)>(255);
        if ($387) {
         $$01$i45$i = $384;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $388 = (($$01$i45$i) + -256)|0;
          $389 = ($388>>>0)>(255);
          if ($389) {
           $$01$i45$i = $388;
          } else {
           break;
          }
         }
         $390 = $384 & 255;
         $$0$lcssa$i47$i = $390;
        } else {
         $$0$lcssa$i47$i = $384;
        }
        (___fwritex($pad$i,$$0$lcssa$i47$i,$f)|0);
       }
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       (___fwritex($s1$0$i,3,$f)|0);
       $391 = $fl$1$ & 73728;
       $392 = ($391|0)==(8192);
       $or$cond$i50$i = $392 & $383;
       if ($or$cond$i50$i) {
        $393 = (($w$1) - ($380))|0;
        $394 = ($393>>>0)>(256);
        $395 = $394 ? 256 : $393;
        _memset(($pad$i|0),32,($395|0))|0;
        $396 = ($393>>>0)>(255);
        if ($396) {
         $$01$i52$i = $393;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $397 = (($$01$i52$i) + -256)|0;
          $398 = ($397>>>0)>(255);
          if ($398) {
           $$01$i52$i = $397;
          } else {
           break;
          }
         }
         $399 = $393 & 255;
         $$0$lcssa$i54$i = $399;
        } else {
         $$0$lcssa$i54$i = $393;
        }
        (___fwritex($pad$i,$$0$lcssa$i54$i,$f)|0);
       }
       $w$$i = $383 ? $w$1 : $380;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $w$$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $400 = (+_frexpl($$013$i,$e2$i));
      $401 = $400 * 2.0;
      $402 = $401 != 0.0;
      if ($402) {
       $403 = HEAP32[$e2$i>>2]|0;
       $404 = (($403) + -1)|0;
       HEAP32[$e2$i>>2] = $404;
      }
      $405 = $t$0 | 32;
      $406 = ($405|0)==(97);
      if ($406) {
       $407 = $t$0 & 32;
       $408 = ($407|0)==(0);
       $409 = (($prefix$0$i) + 9|0);
       $prefix$0$$i = $408 ? $prefix$0$i : $409;
       $410 = $pl$0$i | 2;
       $411 = ($p$0>>>0)>(11);
       $412 = (12 - ($p$0))|0;
       $re$0$i = $411 ? 0 : $412;
       $413 = ($re$0$i|0)==(0);
       do {
        if ($413) {
         $$1$i = $401;
        } else {
         $re$1187$i = $re$0$i;$round$0186$i = 8.0;
         while(1) {
          $414 = (($re$1187$i) + -1)|0;
          $415 = $round$0186$i * 16.0;
          $416 = ($414|0)==(0);
          if ($416) {
           $$lcssa325 = $415;
           break;
          } else {
           $re$1187$i = $414;$round$0186$i = $415;
          }
         }
         $417 = HEAP8[$prefix$0$$i>>0]|0;
         $418 = ($417<<24>>24)==(45);
         if ($418) {
          $419 = -$401;
          $420 = $419 - $$lcssa325;
          $421 = $$lcssa325 + $420;
          $422 = -$421;
          $$1$i = $422;
          break;
         } else {
          $423 = $401 + $$lcssa325;
          $424 = $423 - $$lcssa325;
          $$1$i = $424;
          break;
         }
        }
       } while(0);
       $425 = HEAP32[$e2$i>>2]|0;
       $426 = ($425|0)<(0);
       $427 = (0 - ($425))|0;
       $428 = $426 ? $427 : $425;
       $429 = ($428|0)<(0);
       if ($429) {
        $430 = ($428|0)<(0);
        $431 = $430 << 31 >> 31;
        $$05$i$i = $7;$432 = $428;$433 = $431;
        while(1) {
         $434 = (___uremdi3(($432|0),($433|0),10,0)|0);
         $435 = tempRet0;
         $436 = $434 | 48;
         $437 = $436&255;
         $438 = (($$05$i$i) + -1|0);
         HEAP8[$438>>0] = $437;
         $439 = (___udivdi3(($432|0),($433|0),10,0)|0);
         $440 = tempRet0;
         $441 = ($433>>>0)>(9);
         $442 = ($432>>>0)>(4294967295);
         $443 = ($433|0)==(9);
         $444 = $443 & $442;
         $445 = $441 | $444;
         if ($445) {
          $$05$i$i = $438;$432 = $439;$433 = $440;
         } else {
          $$lcssa326 = $438;$1061 = $439;$1062 = $440;
          break;
         }
        }
        $$0$lcssa$i56$i = $$lcssa326;$$01$lcssa$off0$i$i = $1061;
       } else {
        $$0$lcssa$i56$i = $7;$$01$lcssa$off0$i$i = $428;
       }
       $446 = ($$01$lcssa$off0$i$i|0)==(0);
       if ($446) {
        $$1$lcssa$i$i = $$0$lcssa$i56$i;
       } else {
        $$12$i$i = $$0$lcssa$i56$i;$y$03$i$i = $$01$lcssa$off0$i$i;
        while(1) {
         $447 = (($y$03$i$i>>>0) % 10)&-1;
         $448 = $447 | 48;
         $449 = $448&255;
         $450 = (($$12$i$i) + -1|0);
         HEAP8[$450>>0] = $449;
         $451 = (($y$03$i$i>>>0) / 10)&-1;
         $452 = ($y$03$i$i>>>0)<(10);
         if ($452) {
          $$lcssa328 = $450;
          break;
         } else {
          $$12$i$i = $450;$y$03$i$i = $451;
         }
        }
        $$1$lcssa$i$i = $$lcssa328;
       }
       $453 = ($$1$lcssa$i$i|0)==($7|0);
       if ($453) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $$1$lcssa$i$i;
       }
       $454 = HEAP32[$e2$i>>2]|0;
       $455 = $454 >> 31;
       $456 = $455 & 2;
       $457 = (($456) + 43)|0;
       $458 = $457&255;
       $459 = (($estr$0$i) + -1|0);
       HEAP8[$459>>0] = $458;
       $460 = (($t$0) + 15)|0;
       $461 = $460&255;
       $462 = (($estr$0$i) + -2|0);
       HEAP8[$462>>0] = $461;
       $notrhs$i = ($p$0|0)<(1);
       do {
        if ($notrhs$i) {
         $463 = $fl$1$ & 8;
         $464 = ($463|0)==(0);
         if ($464) {
          $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
          while(1) {
           $465 = (~~(($$2$us$us$i)));
           $466 = (17448 + ($465)|0);
           $467 = HEAP8[$466>>0]|0;
           $468 = $467&255;
           $469 = $468 | $407;
           $470 = $469&255;
           $471 = (($s$0$us$us$i) + 1|0);
           HEAP8[$s$0$us$us$i>>0] = $470;
           $472 = (+($465|0));
           $473 = $$2$us$us$i - $472;
           $474 = $473 * 16.0;
           $475 = $471;
           $476 = (($475) - ($0))|0;
           $477 = ($476|0)!=(1);
           $notlhs$us$us$i = $474 == 0.0;
           $or$cond$i80 = $477 | $notlhs$us$us$i;
           if ($or$cond$i80) {
            $s$1$us$us$i = $471;
           } else {
            $478 = (($s$0$us$us$i) + 2|0);
            HEAP8[$471>>0] = 46;
            $s$1$us$us$i = $478;
           }
           $479 = $474 != 0.0;
           if ($479) {
            $$2$us$us$i = $474;$s$0$us$us$i = $s$1$us$us$i;
           } else {
            $s$1$us$us$i$lcssa = $s$1$us$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$us$i$lcssa;
          break;
         } else {
          $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
          while(1) {
           $480 = (~~(($$2$us$i)));
           $481 = (17448 + ($480)|0);
           $482 = HEAP8[$481>>0]|0;
           $483 = $482&255;
           $484 = $483 | $407;
           $485 = $484&255;
           $486 = (($s$0$us$i) + 1|0);
           HEAP8[$s$0$us$i>>0] = $485;
           $487 = (+($480|0));
           $488 = $$2$us$i - $487;
           $489 = $488 * 16.0;
           $490 = $486;
           $491 = (($490) - ($0))|0;
           $492 = ($491|0)==(1);
           if ($492) {
            $493 = (($s$0$us$i) + 2|0);
            HEAP8[$486>>0] = 46;
            $s$1$us$i = $493;
           } else {
            $s$1$us$i = $486;
           }
           $494 = $489 != 0.0;
           if ($494) {
            $$2$us$i = $489;$s$0$us$i = $s$1$us$i;
           } else {
            $s$1$us$i$lcssa = $s$1$us$i;
            break;
           }
          }
          $s$1$lcssa$i = $s$1$us$i$lcssa;
          break;
         }
        } else {
         $$2$i = $$1$i;$s$0$i = $buf$i;
         while(1) {
          $495 = (~~(($$2$i)));
          $496 = (17448 + ($495)|0);
          $497 = HEAP8[$496>>0]|0;
          $498 = $497&255;
          $499 = $498 | $407;
          $500 = $499&255;
          $501 = (($s$0$i) + 1|0);
          HEAP8[$s$0$i>>0] = $500;
          $502 = (+($495|0));
          $503 = $$2$i - $502;
          $504 = $503 * 16.0;
          $505 = $501;
          $506 = (($505) - ($0))|0;
          $507 = ($506|0)==(1);
          if ($507) {
           $508 = (($s$0$i) + 2|0);
           HEAP8[$501>>0] = 46;
           $s$1$i = $508;
          } else {
           $s$1$i = $501;
          }
          $509 = $504 != 0.0;
          if ($509) {
           $$2$i = $504;$s$0$i = $s$1$i;
          } else {
           $s$1$i$lcssa = $s$1$i;
           break;
          }
         }
         $s$1$lcssa$i = $s$1$i$lcssa;
        }
       } while(0);
       $510 = ($p$0|0)!=(0);
       $$pre308$i = $s$1$lcssa$i;
       $511 = (($11) + ($$pre308$i))|0;
       $512 = ($511|0)<($p$0|0);
       $or$cond277 = $510 & $512;
       $513 = $462;
       if ($or$cond277) {
        $514 = (($12) + ($p$0))|0;
        $515 = (($514) - ($513))|0;
        $l$0$i = $515;
       } else {
        $516 = (($10) - ($513))|0;
        $517 = (($516) + ($$pre308$i))|0;
        $l$0$i = $517;
       }
       $518 = (($l$0$i) + ($410))|0;
       $519 = $fl$1$ & 73728;
       $520 = ($519|0)==(0);
       $521 = ($w$1|0)>($518|0);
       $or$cond$i60$i = $520 & $521;
       if ($or$cond$i60$i) {
        $522 = (($w$1) - ($518))|0;
        $523 = ($522>>>0)>(256);
        $524 = $523 ? 256 : $522;
        _memset(($pad$i|0),32,($524|0))|0;
        $525 = ($522>>>0)>(255);
        if ($525) {
         $$01$i62$i = $522;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $526 = (($$01$i62$i) + -256)|0;
          $527 = ($526>>>0)>(255);
          if ($527) {
           $$01$i62$i = $526;
          } else {
           break;
          }
         }
         $528 = $522 & 255;
         $$0$lcssa$i64$i = $528;
        } else {
         $$0$lcssa$i64$i = $522;
        }
        (___fwritex($pad$i,$$0$lcssa$i64$i,$f)|0);
       }
       (___fwritex($prefix$0$$i,$410,$f)|0);
       $529 = ($519|0)==(65536);
       $or$cond$i67$i = $529 & $521;
       if ($or$cond$i67$i) {
        $530 = (($w$1) - ($518))|0;
        $531 = ($530>>>0)>(256);
        $532 = $531 ? 256 : $530;
        _memset(($pad$i|0),48,($532|0))|0;
        $533 = ($530>>>0)>(255);
        if ($533) {
         $$01$i69$i = $530;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $534 = (($$01$i69$i) + -256)|0;
          $535 = ($534>>>0)>(255);
          if ($535) {
           $$01$i69$i = $534;
          } else {
           break;
          }
         }
         $536 = $530 & 255;
         $$0$lcssa$i71$i = $536;
        } else {
         $$0$lcssa$i71$i = $530;
        }
        (___fwritex($pad$i,$$0$lcssa$i71$i,$f)|0);
       }
       $537 = (($$pre308$i) - ($0))|0;
       (___fwritex($buf$i,$537,$f)|0);
       $538 = $462;
       $539 = (($9) - ($538))|0;
       $540 = (($l$0$i) - ($539))|0;
       $541 = (($540) - ($537))|0;
       $542 = ($541|0)>(0);
       if ($542) {
        $543 = ($541>>>0)>(256);
        $544 = $543 ? 256 : $541;
        _memset(($pad$i|0),48,($544|0))|0;
        $545 = ($541>>>0)>(255);
        if ($545) {
         $$01$i75$i = $541;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $546 = (($$01$i75$i) + -256)|0;
          $547 = ($546>>>0)>(255);
          if ($547) {
           $$01$i75$i = $546;
          } else {
           break;
          }
         }
         $548 = $541 & 255;
         $$0$lcssa$i77$i = $548;
        } else {
         $$0$lcssa$i77$i = $541;
        }
        (___fwritex($pad$i,$$0$lcssa$i77$i,$f)|0);
       }
       (___fwritex($462,$539,$f)|0);
       $549 = ($519|0)==(8192);
       $or$cond$i80$i = $549 & $521;
       if ($or$cond$i80$i) {
        $550 = (($w$1) - ($518))|0;
        $551 = ($550>>>0)>(256);
        $552 = $551 ? 256 : $550;
        _memset(($pad$i|0),32,($552|0))|0;
        $553 = ($550>>>0)>(255);
        if ($553) {
         $$01$i82$i = $550;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $554 = (($$01$i82$i) + -256)|0;
          $555 = ($554>>>0)>(255);
          if ($555) {
           $$01$i82$i = $554;
          } else {
           break;
          }
         }
         $556 = $550 & 255;
         $$0$lcssa$i84$i = $556;
        } else {
         $$0$lcssa$i84$i = $550;
        }
        (___fwritex($pad$i,$$0$lcssa$i84$i,$f)|0);
       }
       $w$25$i = $521 ? $w$1 : $518;
       $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $w$25$i;$l10n$0$be = $l10n$3;
       break L24;
      }
      $557 = ($p$0|0)<(0);
      $$p$i = $557 ? 6 : $p$0;
      if ($402) {
       $558 = $401 * 268435456.0;
       $559 = HEAP32[$e2$i>>2]|0;
       $560 = (($559) + -28)|0;
       HEAP32[$e2$i>>2] = $560;
       $$3$i = $558;$562 = $560;
      } else {
       $$pre$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $401;$562 = $$pre$i;
      }
      $561 = ($562|0)<(0);
      $$39$i = $561 ? $big$i : $13;
      $563 = $$39$i;
      $$4$i = $$3$i;$z$0$i = $$39$i;
      while(1) {
       $564 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $564;
       $565 = (($z$0$i) + 4|0);
       $566 = (+($564>>>0));
       $567 = $$4$i - $566;
       $568 = $567 * 1.0E+9;
       $569 = $568 != 0.0;
       if ($569) {
        $$4$i = $568;$z$0$i = $565;
       } else {
        $$lcssa302 = $565;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $570 = ($$pr$i|0)>(0);
      if ($570) {
       $572 = $$pr$i;$a$1261$i = $$39$i;$z$1260$i = $$lcssa302;
       while(1) {
        $571 = ($572|0)>(29);
        $573 = $571 ? 29 : $572;
        $d$0253$i = (($z$1260$i) + -4|0);
        $574 = ($d$0253$i>>>0)<($a$1261$i>>>0);
        do {
         if ($574) {
          $a$2$ph$i = $a$1261$i;
         } else {
          $584 = $z$1260$i;$carry$0254$i = 0;$d$0255$i = $d$0253$i;
          while(1) {
           $575 = HEAP32[$d$0255$i>>2]|0;
           $576 = (_bitshift64Shl(($575|0),0,($573|0))|0);
           $577 = tempRet0;
           $578 = (_i64Add(($576|0),($577|0),($carry$0254$i|0),0)|0);
           $579 = tempRet0;
           $580 = (___uremdi3(($578|0),($579|0),1000000000,0)|0);
           $581 = tempRet0;
           HEAP32[$d$0255$i>>2] = $580;
           $582 = (___udivdi3(($578|0),($579|0),1000000000,0)|0);
           $583 = tempRet0;
           $d$0$i = (($584) + -8|0);
           $585 = ($d$0$i>>>0)<($a$1261$i>>>0);
           if ($585) {
            $$lcssa303 = $582;
            break;
           } else {
            $584$phi = $d$0255$i;$carry$0254$i = $582;$d$0255$i = $d$0$i;$584 = $584$phi;
           }
          }
          $586 = ($$lcssa303|0)==(0);
          if ($586) {
           $a$2$ph$i = $a$1261$i;
           break;
          }
          $587 = (($a$1261$i) + -4|0);
          HEAP32[$587>>2] = $$lcssa303;
          $a$2$ph$i = $587;
         }
        } while(0);
        $z$2$i = $z$1260$i;
        while(1) {
         $588 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($588)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $589 = (($z$2$i) + -4|0);
         $590 = HEAP32[$589>>2]|0;
         $591 = ($590|0)==(0);
         if ($591) {
          $z$2$i = $589;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $592 = HEAP32[$e2$i>>2]|0;
        $593 = (($592) - ($573))|0;
        HEAP32[$e2$i>>2] = $593;
        $594 = ($593|0)>(0);
        if ($594) {
         $572 = $593;$a$1261$i = $a$2$ph$i;$z$1260$i = $z$2$i$lcssa;
        } else {
         $$lcssa304 = $593;$a$2$ph$i$lcssa = $a$2$ph$i;$z$2$i$lcssa$lcssa = $z$2$i$lcssa;
         break;
        }
       }
       $$pr154$i = $$lcssa304;$a$1$lcssa$i = $a$2$ph$i$lcssa;$z$1$lcssa$i = $z$2$i$lcssa$lcssa;
      } else {
       $$pr154$i = $$pr$i;$a$1$lcssa$i = $$39$i;$z$1$lcssa$i = $$lcssa302;
      }
      $595 = ($$pr154$i|0)<(0);
      do {
       if ($595) {
        $596 = (($$p$i) + 25)|0;
        $597 = (($596|0) / 9)&-1;
        $598 = (($597) + 1)|0;
        $599 = ($405|0)==(102);
        if ($599) {
         $600 = (($$39$i) + ($598<<2)|0);
         $602 = $$pr154$i;$a$3248$us$i = $a$1$lcssa$i;$z$3247$us$i = $z$1$lcssa$i;
         while(1) {
          $601 = ($602|0)<(-9);
          $603 = (0 - ($602))|0;
          $$26$us$i = $601 ? 9 : $603;
          $604 = ($a$3248$us$i>>>0)<($z$3247$us$i>>>0);
          do {
           if ($604) {
            $629 = 1 << $$26$us$i;
            $622 = (($629) + -1)|0;
            $626 = 1000000000 >>> $$26$us$i;
            $carry3$0242$us$i = 0;$d$1241$us$i = $a$3248$us$i;
            while(1) {
             $620 = HEAP32[$d$1241$us$i>>2]|0;
             $621 = $620 & $622;
             $623 = $620 >>> $$26$us$i;
             $624 = (($623) + ($carry3$0242$us$i))|0;
             HEAP32[$d$1241$us$i>>2] = $624;
             $625 = Math_imul($621, $626)|0;
             $627 = (($d$1241$us$i) + 4|0);
             $628 = ($627>>>0)<($z$3247$us$i>>>0);
             if ($628) {
              $carry3$0242$us$i = $625;$d$1241$us$i = $627;
             } else {
              $$lcssa306 = $625;
              break;
             }
            }
            $608 = HEAP32[$a$3248$us$i>>2]|0;
            $609 = ($608|0)==(0);
            $610 = (($a$3248$us$i) + 4|0);
            $$a$3$us$i = $609 ? $610 : $a$3248$us$i;
            $611 = ($$lcssa306|0)==(0);
            if ($611) {
             $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $z$3247$us$i;
             break;
            }
            $612 = (($z$3247$us$i) + 4|0);
            HEAP32[$z$3247$us$i>>2] = $$lcssa306;
            $$a$3$us310$i = $$a$3$us$i;$z$4$us$i = $612;
           } else {
            $605 = HEAP32[$a$3248$us$i>>2]|0;
            $606 = ($605|0)==(0);
            $607 = (($a$3248$us$i) + 4|0);
            $$a$3$us309$i = $606 ? $607 : $a$3248$us$i;
            $$a$3$us310$i = $$a$3$us309$i;$z$4$us$i = $z$3247$us$i;
           }
          } while(0);
          $613 = $z$4$us$i;
          $614 = (($613) - ($563))|0;
          $615 = $614 >> 2;
          $616 = ($615|0)>($598|0);
          $$z$4$us$i = $616 ? $600 : $z$4$us$i;
          $617 = HEAP32[$e2$i>>2]|0;
          $618 = (($617) + ($$26$us$i))|0;
          HEAP32[$e2$i>>2] = $618;
          $619 = ($618|0)<(0);
          if ($619) {
           $602 = $618;$a$3248$us$i = $$a$3$us310$i;$z$3247$us$i = $$z$4$us$i;
          } else {
           $$a$3$us310$i$lcssa = $$a$3$us310$i;$$z$4$us$i$lcssa = $$z$4$us$i;
           break;
          }
         }
         $a$3$lcssa$i = $$a$3$us310$i$lcssa;$z$3$lcssa$i = $$z$4$us$i$lcssa;
         break;
        }
        $631 = $$pr154$i;$a$3248$i = $a$1$lcssa$i;$z$3247$i = $z$1$lcssa$i;
        while(1) {
         $630 = ($631|0)<(-9);
         $632 = (0 - ($631))|0;
         $$26$i = $630 ? 9 : $632;
         $633 = ($a$3248$i>>>0)<($z$3247$i>>>0);
         do {
          if ($633) {
           $637 = 1 << $$26$i;
           $638 = (($637) + -1)|0;
           $639 = 1000000000 >>> $$26$i;
           $carry3$0242$i = 0;$d$1241$i = $a$3248$i;
           while(1) {
            $640 = HEAP32[$d$1241$i>>2]|0;
            $641 = $640 & $638;
            $642 = $640 >>> $$26$i;
            $643 = (($642) + ($carry3$0242$i))|0;
            HEAP32[$d$1241$i>>2] = $643;
            $644 = Math_imul($641, $639)|0;
            $645 = (($d$1241$i) + 4|0);
            $646 = ($645>>>0)<($z$3247$i>>>0);
            if ($646) {
             $carry3$0242$i = $644;$d$1241$i = $645;
            } else {
             $$lcssa305 = $644;
             break;
            }
           }
           $647 = HEAP32[$a$3248$i>>2]|0;
           $648 = ($647|0)==(0);
           $649 = (($a$3248$i) + 4|0);
           $$a$3$i = $648 ? $649 : $a$3248$i;
           $650 = ($$lcssa305|0)==(0);
           if ($650) {
            $$a$3312$i = $$a$3$i;$z$4$i = $z$3247$i;
            break;
           }
           $651 = (($z$3247$i) + 4|0);
           HEAP32[$z$3247$i>>2] = $$lcssa305;
           $$a$3312$i = $$a$3$i;$z$4$i = $651;
          } else {
           $634 = HEAP32[$a$3248$i>>2]|0;
           $635 = ($634|0)==(0);
           $636 = (($a$3248$i) + 4|0);
           $$a$3311$i = $635 ? $636 : $a$3248$i;
           $$a$3312$i = $$a$3311$i;$z$4$i = $z$3247$i;
          }
         } while(0);
         $652 = $z$4$i;
         $653 = $$a$3312$i;
         $654 = (($652) - ($653))|0;
         $655 = $654 >> 2;
         $656 = ($655|0)>($598|0);
         if ($656) {
          $657 = (($$a$3312$i) + ($598<<2)|0);
          $z$5$i = $657;
         } else {
          $z$5$i = $z$4$i;
         }
         $658 = HEAP32[$e2$i>>2]|0;
         $659 = (($658) + ($$26$i))|0;
         HEAP32[$e2$i>>2] = $659;
         $660 = ($659|0)<(0);
         if ($660) {
          $631 = $659;$a$3248$i = $$a$3312$i;$z$3247$i = $z$5$i;
         } else {
          $$a$3312$i$lcssa = $$a$3312$i;$z$5$i$lcssa = $z$5$i;
          break;
         }
        }
        $a$3$lcssa$i = $$a$3312$i$lcssa;$z$3$lcssa$i = $z$5$i$lcssa;
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
       }
      } while(0);
      $661 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($661) {
        $662 = $a$3$lcssa$i;
        $663 = (($563) - ($662))|0;
        $664 = $663 >> 2;
        $665 = ($664*9)|0;
        $666 = HEAP32[$a$3$lcssa$i>>2]|0;
        $667 = ($666>>>0)<(10);
        if ($667) {
         $e$1$i = $665;
         break;
        }
        $e$0237$i = $665;$i$0236$i = 10;
        while(1) {
         $668 = ($i$0236$i*10)|0;
         $669 = (($e$0237$i) + 1)|0;
         $670 = ($666>>>0)<($668>>>0);
         if ($670) {
          $$lcssa307 = $669;
          break;
         } else {
          $e$0237$i = $669;$i$0236$i = $668;
         }
        }
        $e$1$i = $$lcssa307;
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $671 = ($405|0)!=(102);
      $672 = $671 ? $e$1$i : 0;
      $673 = (($$p$i) - ($672))|0;
      $674 = ($405|0)==(103);
      $675 = ($$p$i|0)!=(0);
      $$27$i = $674 & $675;
      $$neg159$i = $$27$i << 31 >> 31;
      $676 = (($673) + ($$neg159$i))|0;
      $677 = $z$3$lcssa$i;
      $678 = (($677) - ($563))|0;
      $679 = $678 >> 2;
      $680 = ($679*9)|0;
      $681 = (($680) + -9)|0;
      $682 = ($676|0)<($681|0);
      if ($682) {
       $683 = (($676) + 9216)|0;
       $684 = (($683|0) / 9)&-1;
       $$sum$i = (($684) + -1023)|0;
       $685 = (($$39$i) + ($$sum$i<<2)|0);
       $686 = (($683|0) % 9)&-1;
       $j$0229$i = (($686) + 1)|0;
       $687 = ($j$0229$i|0)<(9);
       if ($687) {
        $i$1230$i = 10;$j$0231$i = $j$0229$i;
        while(1) {
         $688 = ($i$1230$i*10)|0;
         $j$0$i = (($j$0231$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $$lcssa308 = $688;
          break;
         } else {
          $i$1230$i = $688;$j$0231$i = $j$0$i;
         }
        }
        $i$1$lcssa$i = $$lcssa308;
       } else {
        $i$1$lcssa$i = 10;
       }
       $689 = HEAP32[$685>>2]|0;
       $690 = (($689>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $691 = ($690|0)==(0);
       if ($691) {
        $$sum21$i = (($684) + -1022)|0;
        $692 = (($$39$i) + ($$sum21$i<<2)|0);
        $693 = ($692|0)==($z$3$lcssa$i|0);
        if ($693) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
        } else {
         label = 275;
        }
       } else {
        label = 275;
       }
       do {
        if ((label|0) == 275) {
         label = 0;
         $694 = (($689>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $695 = $694 & 1;
         $696 = ($695|0)==(0);
         $$28$i = $696 ? 9007199254740992.0 : 9007199254740994.0;
         $697 = (($i$1$lcssa$i|0) / 2)&-1;
         $698 = ($690>>>0)<($697>>>0);
         do {
          if ($698) {
           $small$0$i = 0.5;
          } else {
           $699 = ($690|0)==($697|0);
           if ($699) {
            $$sum22$i = (($684) + -1022)|0;
            $700 = (($$39$i) + ($$sum22$i<<2)|0);
            $701 = ($700|0)==($z$3$lcssa$i|0);
            if ($701) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $702 = ($pl$0$i|0)==(0);
         do {
          if ($702) {
           $round6$1$i = $$28$i;$small$1$i = $small$0$i;
          } else {
           $703 = HEAP8[$prefix$0$i>>0]|0;
           $704 = ($703<<24>>24)==(45);
           if (!($704)) {
            $round6$1$i = $$28$i;$small$1$i = $small$0$i;
            break;
           }
           $705 = -$$28$i;
           $706 = -$small$0$i;
           $round6$1$i = $705;$small$1$i = $706;
          }
         } while(0);
         $707 = (($689) - ($690))|0;
         HEAP32[$685>>2] = $707;
         $708 = $round6$1$i + $small$1$i;
         $709 = $708 != $round6$1$i;
         if (!($709)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $685;$e$3$i = $e$1$i;
          break;
         }
         $710 = (($707) + ($i$1$lcssa$i))|0;
         HEAP32[$685>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5223$i = $a$3$lcssa$i;$d$2222$i = $685;
          while(1) {
           $712 = (($d$2222$i) + -4|0);
           HEAP32[$d$2222$i>>2] = 0;
           $713 = ($712>>>0)<($a$5223$i>>>0);
           if ($713) {
            $714 = (($a$5223$i) + -4|0);
            HEAP32[$714>>2] = 0;
            $a$6$i = $714;
           } else {
            $a$6$i = $a$5223$i;
           }
           $715 = HEAP32[$712>>2]|0;
           $716 = (($715) + 1)|0;
           HEAP32[$712>>2] = $716;
           $717 = ($716>>>0)>(999999999);
           if ($717) {
            $a$5223$i = $a$6$i;$d$2222$i = $712;
           } else {
            $$lcssa309 = $712;$a$6$i$lcssa = $a$6$i;
            break;
           }
          }
          $a$5$lcssa$i = $a$6$i$lcssa;$d$2$lcssa$i = $$lcssa309;
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $685;
         }
         $718 = $a$5$lcssa$i;
         $719 = (($563) - ($718))|0;
         $720 = $719 >> 2;
         $721 = ($720*9)|0;
         $722 = HEAP32[$a$5$lcssa$i>>2]|0;
         $723 = ($722>>>0)<(10);
         if ($723) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $721;
          break;
         }
         $e$2218$i = $721;$i$2217$i = 10;
         while(1) {
          $724 = ($i$2217$i*10)|0;
          $725 = (($e$2218$i) + 1)|0;
          $726 = ($722>>>0)<($724>>>0);
          if ($726) {
           $$lcssa310 = $725;
           break;
          } else {
           $e$2218$i = $725;$i$2217$i = $724;
          }
         }
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $$lcssa310;
        }
       } while(0);
       $727 = (($d$3$i) + 4|0);
       $728 = ($z$3$lcssa$i>>>0)>($727>>>0);
       $$z$3$i = $728 ? $727 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $a$8$ph294$i = $a$8$ph$i;
      $729 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $730 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($730)) {
        $$lcssa283$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $731 = (($z$6$i) + -4|0);
       $732 = HEAP32[$731>>2]|0;
       $733 = ($732|0)==(0);
       if ($733) {
        $z$6$i = $731;
       } else {
        $$lcssa283$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($674) {
        $734 = ($$p$i|0)==(0);
        $735 = $734&1;
        $$$p$i = (($735) + ($$p$i))|0;
        $736 = ($$$p$i|0)>($e$4$ph$i|0);
        $737 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $736 & $737;
        if ($or$cond6$i) {
         $738 = (($t$0) + -1)|0;
         $$neg160$i = (($$$p$i) + -1)|0;
         $739 = (($$neg160$i) - ($e$4$ph$i))|0;
         $$019$i = $738;$$216$i = $739;
        } else {
         $740 = (($t$0) + -2)|0;
         $741 = (($$$p$i) + -1)|0;
         $$019$i = $740;$$216$i = $741;
        }
        $742 = $fl$1$ & 8;
        $743 = ($742|0)==(0);
        if (!($743)) {
         $$120$i = $$019$i;$$317$i = $$216$i;
         break;
        }
        do {
         if ($$lcssa283$i) {
          $744 = (($z$6$i$lcssa) + -4|0);
          $745 = HEAP32[$744>>2]|0;
          $746 = ($745|0)==(0);
          if ($746) {
           $j$2$i = 9;
           break;
          }
          $747 = (($745>>>0) % 10)&-1;
          $748 = ($747|0)==(0);
          if (!($748)) {
           $j$2$i = 0;
           break;
          }
          $i$3213$i = 10;$j$1214$i = 0;
          while(1) {
           $749 = ($i$3213$i*10)|0;
           $750 = (($j$1214$i) + 1)|0;
           $751 = (($745>>>0) % ($749>>>0))&-1;
           $752 = ($751|0)==(0);
           if ($752) {
            $i$3213$i = $749;$j$1214$i = $750;
           } else {
            $$lcssa311 = $750;
            break;
           }
          }
          $j$2$i = $$lcssa311;
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $753 = $$019$i | 32;
        $754 = ($753|0)==(102);
        $755 = $z$6$i$lcssa;
        $756 = (($755) - ($563))|0;
        $757 = $756 >> 2;
        $758 = ($757*9)|0;
        $759 = (($758) + -9)|0;
        if ($754) {
         $760 = (($759) - ($j$2$i))|0;
         $761 = ($760|0)<(0);
         $$29$i = $761 ? 0 : $760;
         $762 = ($$216$i|0)<($$29$i|0);
         $$216$$29$i = $762 ? $$216$i : $$29$i;
         $$120$i = $$019$i;$$317$i = $$216$$29$i;
         break;
        } else {
         $763 = (($759) + ($e$4$ph$i))|0;
         $764 = (($763) - ($j$2$i))|0;
         $765 = ($764|0)<(0);
         $$31$i = $765 ? 0 : $764;
         $766 = ($$216$i|0)<($$31$i|0);
         $$216$$31$i = $766 ? $$216$i : $$31$i;
         $$120$i = $$019$i;$$317$i = $$216$$31$i;
         break;
        }
       } else {
        $$120$i = $t$0;$$317$i = $$p$i;
       }
      } while(0);
      $767 = ($$317$i|0)!=(0);
      if ($767) {
       $771 = 1;
      } else {
       $768 = $fl$1$ & 8;
       $769 = ($768|0)!=(0);
       $771 = $769;
      }
      $770 = $771&1;
      $772 = $$120$i | 32;
      $773 = ($772|0)==(102);
      if ($773) {
       $774 = ($e$4$ph$i|0)>(0);
       $775 = $774 ? $e$4$ph$i : 0;
       $$pn$i = $775;$estr$2$i = 0;
      } else {
       $776 = ($e$4$ph$i|0)<(0);
       $777 = $776 ? $729 : $e$4$ph$i;
       $778 = ($777|0)<(0);
       if ($778) {
        $779 = ($777|0)<(0);
        $780 = $779 << 31 >> 31;
        $$05$i87$i = $7;$781 = $777;$782 = $780;
        while(1) {
         $783 = (___uremdi3(($781|0),($782|0),10,0)|0);
         $784 = tempRet0;
         $785 = $783 | 48;
         $786 = $785&255;
         $787 = (($$05$i87$i) + -1|0);
         HEAP8[$787>>0] = $786;
         $788 = (___udivdi3(($781|0),($782|0),10,0)|0);
         $789 = tempRet0;
         $790 = ($782>>>0)>(9);
         $791 = ($781>>>0)>(4294967295);
         $792 = ($782|0)==(9);
         $793 = $792 & $791;
         $794 = $790 | $793;
         if ($794) {
          $$05$i87$i = $787;$781 = $788;$782 = $789;
         } else {
          $$lcssa312 = $787;$1063 = $788;$1064 = $789;
          break;
         }
        }
        $$0$lcssa$i92$i = $$lcssa312;$$01$lcssa$off0$i93$i = $1063;
       } else {
        $$0$lcssa$i92$i = $7;$$01$lcssa$off0$i93$i = $777;
       }
       $795 = ($$01$lcssa$off0$i93$i|0)==(0);
       if ($795) {
        $estr$1$ph$i = $$0$lcssa$i92$i;
       } else {
        $$12$i95$i = $$0$lcssa$i92$i;$y$03$i94$i = $$01$lcssa$off0$i93$i;
        while(1) {
         $796 = (($y$03$i94$i>>>0) % 10)&-1;
         $797 = $796 | 48;
         $798 = $797&255;
         $799 = (($$12$i95$i) + -1|0);
         HEAP8[$799>>0] = $798;
         $800 = (($y$03$i94$i>>>0) / 10)&-1;
         $801 = ($y$03$i94$i>>>0)<(10);
         if ($801) {
          $$lcssa314 = $799;
          break;
         } else {
          $$12$i95$i = $799;$y$03$i94$i = $800;
         }
        }
        $estr$1$ph$i = $$lcssa314;
       }
       $802 = $estr$1$ph$i;
       $803 = (($9) - ($802))|0;
       $804 = ($803|0)<(2);
       if ($804) {
        $estr$1209$i = $estr$1$ph$i;
        while(1) {
         $805 = (($estr$1209$i) + -1|0);
         HEAP8[$805>>0] = 48;
         $806 = $805;
         $807 = (($9) - ($806))|0;
         $808 = ($807|0)<(2);
         if ($808) {
          $estr$1209$i = $805;
         } else {
          $$lcssa315 = $805;
          break;
         }
        }
        $estr$1$lcssa$i = $$lcssa315;
       } else {
        $estr$1$lcssa$i = $estr$1$ph$i;
       }
       $809 = $e$4$ph$i >> 31;
       $810 = $809 & 2;
       $811 = (($810) + 43)|0;
       $812 = $811&255;
       $813 = (($estr$1$lcssa$i) + -1|0);
       HEAP8[$813>>0] = $812;
       $814 = $$120$i&255;
       $815 = (($estr$1$lcssa$i) + -2|0);
       HEAP8[$815>>0] = $814;
       $816 = $815;
       $817 = (($9) - ($816))|0;
       $$pn$i = $817;$estr$2$i = $815;
      }
      $818 = (($pl$0$i) + 1)|0;
      $819 = (($818) + ($$317$i))|0;
      $l$1$i = (($819) + ($770))|0;
      $820 = (($l$1$i) + ($$pn$i))|0;
      $821 = $fl$1$ & 73728;
      $822 = ($821|0)==(0);
      $823 = ($w$1|0)>($820|0);
      $or$cond$i101$i = $822 & $823;
      if ($or$cond$i101$i) {
       $824 = (($w$1) - ($820))|0;
       $825 = ($824>>>0)>(256);
       $826 = $825 ? 256 : $824;
       _memset(($pad$i|0),32,($826|0))|0;
       $827 = ($824>>>0)>(255);
       if ($827) {
        $$01$i103$i = $824;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $828 = (($$01$i103$i) + -256)|0;
         $829 = ($828>>>0)>(255);
         if ($829) {
          $$01$i103$i = $828;
         } else {
          break;
         }
        }
        $830 = $824 & 255;
        $$0$lcssa$i105$i = $830;
       } else {
        $$0$lcssa$i105$i = $824;
       }
       (___fwritex($pad$i,$$0$lcssa$i105$i,$f)|0);
      }
      (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      $831 = ($821|0)==(65536);
      $or$cond$i108$i = $831 & $823;
      if ($or$cond$i108$i) {
       $832 = (($w$1) - ($820))|0;
       $833 = ($832>>>0)>(256);
       $834 = $833 ? 256 : $832;
       _memset(($pad$i|0),48,($834|0))|0;
       $835 = ($832>>>0)>(255);
       if ($835) {
        $$01$i110$i = $832;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $836 = (($$01$i110$i) + -256)|0;
         $837 = ($836>>>0)>(255);
         if ($837) {
          $$01$i110$i = $836;
         } else {
          break;
         }
        }
        $838 = $832 & 255;
        $$0$lcssa$i112$i = $838;
       } else {
        $$0$lcssa$i112$i = $832;
       }
       (___fwritex($pad$i,$$0$lcssa$i112$i,$f)|0);
      }
      do {
       if ($773) {
        $839 = ($a$8$ph$i>>>0)>($$39$i>>>0);
        $r$0$a$8$i = $839 ? $$39$i : $a$8$ph$i;
        $840 = $563 ^ -1;
        $841 = $a$8$ph294$i ^ -1;
        $842 = ($840>>>0)>($841>>>0);
        $umax$i = $842 ? $840 : $841;
        $843 = (3 - ($umax$i))|0;
        $uglygep$i = (($$39$i) + 1|0);
        $uglygep296$i = $uglygep$i;
        $844 = ($843>>>0)>($uglygep296$i>>>0);
        $umax297$i = $844 ? $843 : $uglygep296$i;
        $umax297298299$i = $umax297$i;
        $uglygep300$i = (($umax297298299$i) + ($umax$i)|0);
        $uglygep300301$i = $uglygep300$i;
        $845 = $umax$i ^ -1;
        $d$4199$i = $r$0$a$8$i;
        while(1) {
         $846 = HEAP32[$d$4199$i>>2]|0;
         $847 = ($846|0)==(0);
         if ($847) {
          $$1$lcssa$i120$i = $14;
         } else {
          $$12$i118$i = $14;$y$03$i117$i = $846;
          while(1) {
           $848 = (($y$03$i117$i>>>0) % 10)&-1;
           $849 = $848 | 48;
           $850 = $849&255;
           $851 = (($$12$i118$i) + -1|0);
           HEAP8[$851>>0] = $850;
           $852 = (($y$03$i117$i>>>0) / 10)&-1;
           $853 = ($y$03$i117$i>>>0)<(10);
           if ($853) {
            $$lcssa319 = $851;
            break;
           } else {
            $$12$i118$i = $851;$y$03$i117$i = $852;
           }
          }
          $$1$lcssa$i120$i = $$lcssa319;
         }
         $854 = ($d$4199$i|0)==($r$0$a$8$i|0);
         do {
          if ($854) {
           $858 = ($$1$lcssa$i120$i|0)==($14|0);
           if (!($858)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $855 = ($$1$lcssa$i120$i>>>0)>($buf$i>>>0);
           if (!($855)) {
            $s7$1$i = $$1$lcssa$i120$i;
            break;
           }
           $s7$0196$i = $$1$lcssa$i120$i;
           while(1) {
            $856 = (($s7$0196$i) + -1|0);
            HEAP8[$856>>0] = 48;
            $857 = ($856>>>0)>($buf$i>>>0);
            if ($857) {
             $s7$0196$i = $856;
            } else {
             $$lcssa320 = $856;
             break;
            }
           }
           $s7$1$i = $$lcssa320;
          }
         } while(0);
         $859 = $s7$1$i;
         $860 = (($15) - ($859))|0;
         (___fwritex($s7$1$i,$860,$f)|0);
         $861 = (($d$4199$i) + 4|0);
         $862 = ($861>>>0)>($$39$i>>>0);
         if ($862) {
          $$lcssa321 = $861;
          break;
         } else {
          $d$4199$i = $861;
         }
        }
        $863 = $uglygep300301$i & -4;
        $864 = (($863) + ($845))|0;
        $865 = $864;
        $$not$i = $767 ^ 1;
        $866 = $fl$1$ & 8;
        $867 = ($866|0)==(0);
        $or$cond35$i = $867 & $$not$i;
        if (!($or$cond35$i)) {
         (___fwritex(17464,1,$f)|0);
        }
        $868 = ($$lcssa321>>>0)<($z$6$i$lcssa>>>0);
        $869 = ($$317$i|0)>(0);
        $or$cond10191$i = $868 & $869;
        if ($or$cond10191$i) {
         $$418193$i = $$317$i;$884 = $865;$d$5192$i = $$lcssa321;
         while(1) {
          $870 = HEAP32[$d$5192$i>>2]|0;
          $871 = ($870|0)==(0);
          if ($871) {
           $s8$0188$i$ph = $14;
           label = 362;
          } else {
           $$12$i127$i = $14;$y$03$i126$i = $870;
           while(1) {
            $872 = (($y$03$i126$i>>>0) % 10)&-1;
            $873 = $872 | 48;
            $874 = $873&255;
            $875 = (($$12$i127$i) + -1|0);
            HEAP8[$875>>0] = $874;
            $876 = (($y$03$i126$i>>>0) / 10)&-1;
            $877 = ($y$03$i126$i>>>0)<(10);
            if ($877) {
             $$lcssa322 = $875;
             break;
            } else {
             $$12$i127$i = $875;$y$03$i126$i = $876;
            }
           }
           $878 = ($$lcssa322>>>0)>($buf$i>>>0);
           if ($878) {
            $s8$0188$i$ph = $$lcssa322;
            label = 362;
           } else {
            $s8$0$lcssa$i = $$lcssa322;
           }
          }
          if ((label|0) == 362) {
           label = 0;
           $s8$0188$i = $s8$0188$i$ph;
           while(1) {
            $879 = (($s8$0188$i) + -1|0);
            HEAP8[$879>>0] = 48;
            $880 = ($879>>>0)>($buf$i>>>0);
            if ($880) {
             $s8$0188$i = $879;
            } else {
             $$lcssa323 = $879;
             break;
            }
           }
           $s8$0$lcssa$i = $$lcssa323;
          }
          $881 = ($$418193$i|0)>(9);
          $882 = $881 ? 9 : $$418193$i;
          (___fwritex($s8$0$lcssa$i,$882,$f)|0);
          $883 = (($884) + 8|0);
          $885 = (($$418193$i) + -9)|0;
          $886 = ($883>>>0)<($z$6$i$lcssa>>>0);
          $887 = ($885|0)>(0);
          $or$cond10$i = $886 & $887;
          if ($or$cond10$i) {
           $884$phi = $d$5192$i;$$418193$i = $885;$d$5192$i = $883;$884 = $884$phi;
          } else {
           $$lcssa324 = $885;
           break;
          }
         }
         $$418$lcssa$i = $$lcssa324;
        } else {
         $$418$lcssa$i = $$317$i;
        }
        $888 = ($$418$lcssa$i|0)>(0);
        if (!($888)) {
         break;
        }
        $889 = ($$418$lcssa$i>>>0)>(256);
        $890 = $889 ? 256 : $$418$lcssa$i;
        _memset(($pad$i|0),48,($890|0))|0;
        $891 = ($$418$lcssa$i>>>0)>(255);
        if ($891) {
         $$01$i134$i = $$418$lcssa$i;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $892 = (($$01$i134$i) + -256)|0;
          $893 = ($892>>>0)>(255);
          if ($893) {
           $$01$i134$i = $892;
          } else {
           break;
          }
         }
         $894 = $$418$lcssa$i & 255;
         $$0$lcssa$i136$i = $894;
        } else {
         $$0$lcssa$i136$i = $$418$lcssa$i;
        }
        (___fwritex($pad$i,$$0$lcssa$i136$i,$f)|0);
       } else {
        $895 = (($a$8$ph$i) + 4|0);
        $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $895;
        $896 = ($$317$i|0)>(-1);
        do {
         if ($896) {
          $897 = $fl$1$ & 8;
          $898 = ($897|0)==(0);
          $$5205$i = $$317$i;$d$6204$i = $a$8$ph$i;
          while(1) {
           $899 = HEAP32[$d$6204$i>>2]|0;
           $900 = ($899|0)==(0);
           if ($900) {
            label = 379;
           } else {
            $$12$i142$i = $14;$y$03$i141$i = $899;
            while(1) {
             $901 = (($y$03$i141$i>>>0) % 10)&-1;
             $902 = $901 | 48;
             $903 = $902&255;
             $904 = (($$12$i142$i) + -1|0);
             HEAP8[$904>>0] = $903;
             $905 = (($y$03$i141$i>>>0) / 10)&-1;
             $906 = ($y$03$i141$i>>>0)<(10);
             if ($906) {
              $$12$i142$i$lcssa = $$12$i142$i;$$lcssa316 = $904;
              break;
             } else {
              $$12$i142$i = $904;$y$03$i141$i = $905;
             }
            }
            $907 = ($$lcssa316|0)==($14|0);
            if ($907) {
             label = 379;
            } else {
             $1065 = $$12$i142$i$lcssa;$s9$0$i = $$lcssa316;
            }
           }
           if ((label|0) == 379) {
            label = 0;
            HEAP8[$16>>0] = 48;
            $1065 = $14;$s9$0$i = $16;
           }
           $908 = ($d$6204$i|0)==($a$8$ph$i|0);
           do {
            if ($908) {
             (___fwritex($s9$0$i,1,$f)|0);
             $912 = ($$5205$i|0)<(1);
             $or$cond37$i = $912 & $898;
             if ($or$cond37$i) {
              $s9$2$i = $1065;
              break;
             }
             (___fwritex(17464,1,$f)|0);
             $s9$2$i = $1065;
            } else {
             $909 = ($s9$0$i>>>0)>($buf$i>>>0);
             if (!($909)) {
              $s9$2$i = $s9$0$i;
              break;
             }
             $s9$1200$i = $s9$0$i;
             while(1) {
              $910 = (($s9$1200$i) + -1|0);
              HEAP8[$910>>0] = 48;
              $911 = ($910>>>0)>($buf$i>>>0);
              if ($911) {
               $s9$1200$i = $910;
              } else {
               $$lcssa317 = $910;
               break;
              }
             }
             $s9$2$i = $$lcssa317;
            }
           } while(0);
           $913 = $s9$2$i;
           $914 = (($15) - ($913))|0;
           $915 = ($$5205$i|0)>($914|0);
           $$$5$i = $915 ? $914 : $$5205$i;
           (___fwritex($s9$2$i,$$$5$i,$f)|0);
           $916 = (($$5205$i) - ($914))|0;
           $917 = (($d$6204$i) + 4|0);
           $918 = ($917>>>0)<($z$6$$i>>>0);
           $919 = ($916|0)>(-1);
           $or$cond12$i = $918 & $919;
           if ($or$cond12$i) {
            $$5205$i = $916;$d$6204$i = $917;
           } else {
            $$lcssa318 = $916;
            break;
           }
          }
          $920 = ($$lcssa318|0)>(0);
          if (!($920)) {
           break;
          }
          $921 = ($$lcssa318>>>0)>(256);
          $922 = $921 ? 256 : $$lcssa318;
          _memset(($pad$i|0),48,($922|0))|0;
          $923 = ($$lcssa318>>>0)>(255);
          if ($923) {
           $$01$i149$i = $$lcssa318;
           while(1) {
            (___fwritex($pad$i,256,$f)|0);
            $924 = (($$01$i149$i) + -256)|0;
            $925 = ($924>>>0)>(255);
            if ($925) {
             $$01$i149$i = $924;
            } else {
             break;
            }
           }
           $926 = $$lcssa318 & 255;
           $$0$lcssa$i151$i = $926;
          } else {
           $$0$lcssa$i151$i = $$lcssa318;
          }
          (___fwritex($pad$i,$$0$lcssa$i151$i,$f)|0);
         }
        } while(0);
        $927 = $estr$2$i;
        $928 = (($9) - ($927))|0;
        (___fwritex($estr$2$i,$928,$f)|0);
       }
      } while(0);
      $929 = ($821|0)==(8192);
      $or$cond$i$i = $929 & $823;
      if ($or$cond$i$i) {
       $930 = (($w$1) - ($820))|0;
       $931 = ($930>>>0)>(256);
       $932 = $931 ? 256 : $930;
       _memset(($pad$i|0),32,($932|0))|0;
       $933 = ($930>>>0)>(255);
       if ($933) {
        $$01$i$i = $930;
        while(1) {
         (___fwritex($pad$i,256,$f)|0);
         $934 = (($$01$i$i) + -256)|0;
         $935 = ($934>>>0)>(255);
         if ($935) {
          $$01$i$i = $934;
         } else {
          break;
         }
        }
        $936 = $930 & 255;
        $$0$lcssa$i$i = $936;
       } else {
        $$0$lcssa$i$i = $930;
       }
       (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
      }
      $w$38$i = $823 ? $w$1 : $820;
      $$be = $$lcssa299;$$be286 = $196;$$be287 = $223;$l$0$be = $w$38$i;$l10n$0$be = $l10n$3;
      break L24;
      break;
     }
     case 83:  {
      $321 = $196;
      $322 = ($p$0|0)==(0);
      if ($322) {
       $1059 = $196;$1060 = $321;$i$0$lcssa273 = 0;
       label = 120;
      } else {
       $1057 = $321;$1058 = $196;$p$4272 = $p$0;
       label = 115;
      }
      break;
     }
     case 105: case 100:  {
      $260 = ($223|0)<(0);
      if ($260) {
       $261 = (_i64Subtract(0,0,($196|0),($223|0))|0);
       $262 = tempRet0;
       $268 = $262;$270 = $261;$pl$0 = 1;$prefix$0 = 17368;
       label = 97;
       break L98;
      }
      $263 = $fl$1$ & 2048;
      $264 = ($263|0)==(0);
      if ($264) {
       $265 = $fl$1$ & 1;
       $266 = ($265|0)==(0);
       $$ = $266 ? 17368 : ((17368 + 2|0));
       $268 = $223;$270 = $196;$pl$0 = $265;$prefix$0 = $$;
       label = 97;
      } else {
       $268 = $223;$270 = $196;$pl$0 = 1;$prefix$0 = ((17368 + 1|0));
       label = 97;
      }
      break;
     }
     case 111:  {
      $243 = ($196|0)==(0);
      $244 = ($223|0)==(0);
      $245 = $243 & $244;
      if ($245) {
       $$0$lcssa$i52 = $2;
      } else {
       $$03$i49 = $2;$247 = $196;$251 = $223;
       while(1) {
        $246 = $247 & 7;
        $248 = $246 | 48;
        $249 = $248&255;
        $250 = (($$03$i49) + -1|0);
        HEAP8[$250>>0] = $249;
        $252 = (_bitshift64Lshr(($247|0),($251|0),3)|0);
        $253 = tempRet0;
        $254 = ($252|0)==(0);
        $255 = ($253|0)==(0);
        $256 = $254 & $255;
        if ($256) {
         $$lcssa332 = $250;
         break;
        } else {
         $$03$i49 = $250;$247 = $252;$251 = $253;
        }
       }
       $$0$lcssa$i52 = $$lcssa332;
      }
      $257 = $fl$1$ & 8;
      $258 = ($257|0)==(0);
      $or$cond19 = $258 | $245;
      $$25 = $or$cond19 ? 17368 : ((17368 + 5|0));
      $259 = $or$cond19&1;
      $$26 = $259 ^ 1;
      $298 = $196;$300 = $223;$a$0 = $$0$lcssa$i52;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$26;$prefix$1 = $$25;
      label = 105;
      break;
     }
     case 117:  {
      $268 = $223;$270 = $196;$pl$0 = 0;$prefix$0 = 17368;
      label = 97;
      break;
     }
     case 109:  {
      $310 = (___errno_location()|0);
      $311 = HEAP32[$310>>2]|0;
      $312 = (_strerror(($311|0))|0);
      $a$1 = $312;
      label = 110;
      break;
     }
     case 115:  {
      $313 = $196;
      $314 = ($196|0)==(0);
      $$21 = $314 ? 17384 : $313;
      $a$1 = $$21;
      label = 110;
      break;
     }
     case 67:  {
      HEAP32[$wc>>2] = $196;
      HEAP32[$5>>2] = 0;
      $1057 = $wc;$1058 = $6;$p$4272 = -1;
      label = 115;
      break;
     }
     case 112:  {
      $217 = ($p$0>>>0)>(8);
      $218 = $217 ? $p$0 : 8;
      $219 = $fl$1$ | 8;
      $fl$3 = $219;$p$1 = $218;$t$1 = 120;
      label = 83;
      break;
     }
     default: {
      $1053 = $196;$1054 = $223;$a$2 = $23;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17368;$z$2 = $2;
     }
     }
    } while(0);
    do {
     if ((label|0) == 83) {
      label = 0;
      $220 = $t$1 & 32;
      $221 = ($196|0)==(0);
      $222 = ($223|0)==(0);
      $224 = $221 & $222;
      if ($224) {
       $298 = $196;$300 = $223;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17368;
       label = 105;
      } else {
       $$012$i = $2;$226 = $196;$233 = $223;
       while(1) {
        $225 = $226 & 15;
        $227 = (17448 + ($225)|0);
        $228 = HEAP8[$227>>0]|0;
        $229 = $228&255;
        $230 = $229 | $220;
        $231 = $230&255;
        $232 = (($$012$i) + -1|0);
        HEAP8[$232>>0] = $231;
        $234 = (_bitshift64Lshr(($226|0),($233|0),4)|0);
        $235 = tempRet0;
        $236 = ($234|0)==(0);
        $237 = ($235|0)==(0);
        $238 = $236 & $237;
        if ($238) {
         $$lcssa333 = $232;
         break;
        } else {
         $$012$i = $232;$226 = $234;$233 = $235;
        }
       }
       $239 = $fl$3 & 8;
       $240 = ($239|0)==(0);
       if ($240) {
        $298 = $196;$300 = $223;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 17368;
        label = 105;
       } else {
        $241 = $t$1 >> 4;
        $242 = (17368 + ($241)|0);
        $298 = $196;$300 = $223;$a$0 = $$lcssa333;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
        label = 105;
       }
      }
     }
     else if ((label|0) == 97) {
      label = 0;
      $267 = ($268>>>0)>(0);
      $269 = ($270>>>0)>(4294967295);
      $271 = ($268|0)==(0);
      $272 = $271 & $269;
      $273 = $267 | $272;
      if ($273) {
       $$05$i = $2;$274 = $270;$275 = $268;
       while(1) {
        $276 = (___uremdi3(($274|0),($275|0),10,0)|0);
        $277 = tempRet0;
        $278 = $276 | 48;
        $279 = $278&255;
        $280 = (($$05$i) + -1|0);
        HEAP8[$280>>0] = $279;
        $281 = (___udivdi3(($274|0),($275|0),10,0)|0);
        $282 = tempRet0;
        $283 = ($275>>>0)>(9);
        $284 = ($274>>>0)>(4294967295);
        $285 = ($275|0)==(9);
        $286 = $285 & $284;
        $287 = $283 | $286;
        if ($287) {
         $$05$i = $280;$274 = $281;$275 = $282;
        } else {
         $$lcssa329 = $280;$1055 = $281;$1056 = $282;
         break;
        }
       }
       $$0$lcssa$i54 = $$lcssa329;$$01$lcssa$off0$i = $1055;
      } else {
       $$0$lcssa$i54 = $2;$$01$lcssa$off0$i = $270;
      }
      $288 = ($$01$lcssa$off0$i|0)==(0);
      if ($288) {
       $298 = $270;$300 = $268;$a$0 = $$0$lcssa$i54;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      } else {
       $$12$i = $$0$lcssa$i54;$y$03$i = $$01$lcssa$off0$i;
       while(1) {
        $289 = (($y$03$i>>>0) % 10)&-1;
        $290 = $289 | 48;
        $291 = $290&255;
        $292 = (($$12$i) + -1|0);
        HEAP8[$292>>0] = $291;
        $293 = (($y$03$i>>>0) / 10)&-1;
        $294 = ($y$03$i>>>0)<(10);
        if ($294) {
         $$lcssa331 = $292;
         break;
        } else {
         $$12$i = $292;$y$03$i = $293;
        }
       }
       $298 = $270;$300 = $268;$a$0 = $$lcssa331;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 105;
      }
     }
     else if ((label|0) == 110) {
      label = 0;
      $315 = (_memchr($a$1,0,$p$0)|0);
      $316 = ($315|0)==(0|0);
      if ($316) {
       $317 = (($a$1) + ($p$0)|0);
       $1053 = $196;$1054 = $223;$a$2 = $a$1;$fl$6 = $194;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 17368;$z$2 = $317;
       break;
      } else {
       $318 = $315;
       $319 = $a$1;
       $320 = (($318) - ($319))|0;
       $1053 = $196;$1054 = $223;$a$2 = $a$1;$fl$6 = $194;$p$5 = $320;$pl$2 = 0;$prefix$2 = 17368;$z$2 = $315;
       break;
      }
     }
     else if ((label|0) == 115) {
      label = 0;
      $i$0175 = 0;$l$1174 = 0;$ws$0176 = $1057;
      while(1) {
       $323 = HEAP32[$ws$0176>>2]|0;
       $324 = ($323|0)==(0);
       if ($324) {
        $i$0$lcssa = $i$0175;$l$2 = $l$1174;
        break;
       }
       $325 = (_wctomb($mb,$323)|0);
       $326 = ($325|0)<(0);
       $327 = (($p$4272) - ($i$0175))|0;
       $328 = ($325>>>0)>($327>>>0);
       $or$cond23 = $326 | $328;
       if ($or$cond23) {
        $i$0$lcssa = $i$0175;$l$2 = $325;
        break;
       }
       $329 = (($ws$0176) + 4|0);
       $330 = (($325) + ($i$0175))|0;
       $331 = ($p$4272>>>0)>($330>>>0);
       if ($331) {
        $i$0175 = $330;$l$1174 = $325;$ws$0176 = $329;
       } else {
        $i$0$lcssa = $330;$l$2 = $325;
        break;
       }
      }
      $332 = ($l$2|0)<(0);
      if ($332) {
       $$0$ph285 = -1;
       label = 449;
       break L1;
      } else {
       $1059 = $1058;$1060 = $1057;$i$0$lcssa273 = $i$0$lcssa;
       label = 120;
      }
     }
    } while(0);
    if ((label|0) == 105) {
     label = 0;
     $295 = ($p$2|0)>(-1);
     $296 = $fl$4 & -65537;
     $$fl$4 = $295 ? $296 : $fl$4;
     $297 = ($298|0)!=(0);
     $299 = ($300|0)!=(0);
     $301 = $297 | $299;
     $302 = ($p$2|0)!=(0);
     $or$cond = $301 | $302;
     if ($or$cond) {
      $303 = $a$0;
      $304 = (($3) - ($303))|0;
      $305 = $301&1;
      $306 = $305 ^ 1;
      $307 = (($306) + ($304))|0;
      $308 = ($p$2|0)>($307|0);
      $p$2$ = $308 ? $p$2 : $307;
      $1053 = $298;$1054 = $300;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     } else {
      $1053 = $298;$1054 = $300;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
     }
    }
    else if ((label|0) == 120) {
     label = 0;
     $333 = $fl$1$ & 73728;
     $334 = ($333|0)==(0);
     $335 = ($w$1|0)>($i$0$lcssa273|0);
     $or$cond$i65 = $334 & $335;
     if ($or$cond$i65) {
      $336 = (($w$1) - ($i$0$lcssa273))|0;
      $337 = ($336>>>0)>(256);
      $338 = $337 ? 256 : $336;
      _memset(($pad$i|0),32,($338|0))|0;
      $339 = ($336>>>0)>(255);
      if ($339) {
       $$01$i67 = $336;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $340 = (($$01$i67) + -256)|0;
        $341 = ($340>>>0)>(255);
        if ($341) {
         $$01$i67 = $340;
        } else {
         break;
        }
       }
       $342 = $336 & 255;
       $$0$lcssa$i69 = $342;
      } else {
       $$0$lcssa$i69 = $336;
      }
      (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
     }
     $343 = ($i$0$lcssa273|0)==(0);
     if (!($343)) {
      $i$1186 = 0;$ws$1187 = $1060;
      while(1) {
       $344 = HEAP32[$ws$1187>>2]|0;
       $345 = ($344|0)==(0);
       if ($345) {
        break;
       }
       $346 = (_wctomb($mb,$344)|0);
       $347 = (($346) + ($i$1186))|0;
       $348 = ($347|0)>($i$0$lcssa273|0);
       if ($348) {
        break;
       }
       $349 = (($ws$1187) + 4|0);
       (___fwritex($mb,$346,$f)|0);
       $350 = ($347>>>0)<($i$0$lcssa273>>>0);
       if ($350) {
        $i$1186 = $347;$ws$1187 = $349;
       } else {
        break;
       }
      }
     }
     $351 = ($333|0)==(8192);
     $or$cond$i72 = $351 & $335;
     if ($or$cond$i72) {
      $352 = (($w$1) - ($i$0$lcssa273))|0;
      $353 = ($352>>>0)>(256);
      $354 = $353 ? 256 : $352;
      _memset(($pad$i|0),32,($354|0))|0;
      $355 = ($352>>>0)>(255);
      if ($355) {
       $$01$i74 = $352;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $356 = (($$01$i74) + -256)|0;
        $357 = ($356>>>0)>(255);
        if ($357) {
         $$01$i74 = $356;
        } else {
         break;
        }
       }
       $358 = $352 & 255;
       $$0$lcssa$i76 = $358;
      } else {
       $$0$lcssa$i76 = $352;
      }
      (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
     }
     $359 = $335 ? $w$1 : $i$0$lcssa273;
     $$be = $$lcssa299;$$be286 = $1059;$$be287 = $223;$l$0$be = $359;$l10n$0$be = $l10n$3;
     break;
    }
    $937 = $z$2;
    $938 = $a$2;
    $939 = (($937) - ($938))|0;
    $940 = ($p$5|0)<($939|0);
    $$p$5 = $940 ? $939 : $p$5;
    $941 = (($pl$2) + ($$p$5))|0;
    $942 = ($w$1|0)<($941|0);
    $w$2 = $942 ? $941 : $w$1;
    $943 = $fl$6 & 73728;
    $944 = ($943|0)==(0);
    $945 = ($w$2|0)>($941|0);
    $or$cond$i82 = $944 & $945;
    if ($or$cond$i82) {
     $946 = (($w$2) - ($941))|0;
     $947 = ($946>>>0)>(256);
     $948 = $947 ? 256 : $946;
     _memset(($pad$i|0),32,($948|0))|0;
     $949 = ($946>>>0)>(255);
     if ($949) {
      $$01$i84 = $946;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $950 = (($$01$i84) + -256)|0;
       $951 = ($950>>>0)>(255);
       if ($951) {
        $$01$i84 = $950;
       } else {
        break;
       }
      }
      $952 = $946 & 255;
      $$0$lcssa$i86 = $952;
     } else {
      $$0$lcssa$i86 = $946;
     }
     (___fwritex($pad$i,$$0$lcssa$i86,$f)|0);
    }
    (___fwritex($prefix$2,$pl$2,$f)|0);
    $953 = ($943|0)==(65536);
    $or$cond$i58 = $953 & $945;
    if ($or$cond$i58) {
     $954 = (($w$2) - ($941))|0;
     $955 = ($954>>>0)>(256);
     $956 = $955 ? 256 : $954;
     _memset(($pad$i|0),48,($956|0))|0;
     $957 = ($954>>>0)>(255);
     if ($957) {
      $$01$i60 = $954;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $958 = (($$01$i60) + -256)|0;
       $959 = ($958>>>0)>(255);
       if ($959) {
        $$01$i60 = $958;
       } else {
        break;
       }
      }
      $960 = $954 & 255;
      $$0$lcssa$i62 = $960;
     } else {
      $$0$lcssa$i62 = $954;
     }
     (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
    }
    $961 = ($$p$5|0)>($939|0);
    if ($961) {
     $962 = (($$p$5) - ($939))|0;
     $963 = ($962>>>0)>(256);
     $964 = $963 ? 256 : $962;
     _memset(($pad$i|0),48,($964|0))|0;
     $965 = ($962>>>0)>(255);
     if ($965) {
      $$01$i45 = $962;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $966 = (($$01$i45) + -256)|0;
       $967 = ($966>>>0)>(255);
       if ($967) {
        $$01$i45 = $966;
       } else {
        break;
       }
      }
      $968 = $962 & 255;
      $$0$lcssa$i47 = $968;
     } else {
      $$0$lcssa$i47 = $962;
     }
     (___fwritex($pad$i,$$0$lcssa$i47,$f)|0);
    }
    (___fwritex($a$2,$939,$f)|0);
    $969 = ($943|0)==(8192);
    $or$cond$i = $969 & $945;
    if ($or$cond$i) {
     $970 = (($w$2) - ($941))|0;
     $971 = ($970>>>0)>(256);
     $972 = $971 ? 256 : $970;
     _memset(($pad$i|0),32,($972|0))|0;
     $973 = ($970>>>0)>(255);
     if ($973) {
      $$01$i = $970;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $974 = (($$01$i) + -256)|0;
       $975 = ($974>>>0)>(255);
       if ($975) {
        $$01$i = $974;
       } else {
        break;
       }
      }
      $976 = $970 & 255;
      $$0$lcssa$i = $976;
     } else {
      $$0$lcssa$i = $970;
     }
     (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    } else {
     $$be = $$lcssa299;$$be286 = $1053;$$be287 = $1054;$l$0$be = $w$2;$l10n$0$be = $l10n$3;
    }
   } else {
    $$be = $$lcssa106;$$be286 = $1044;$$be287 = $1045;$l$0$be = $37;$l10n$0$be = $l10n$0;
   }
  } while(0);
  $1044 = $$be286;$1045 = $$be287;$23 = $$be;$cnt$0 = $cnt$1;$l$0 = $l$0$be;$l10n$0 = $l10n$0$be;
 }
 if ((label|0) == 426) {
  $977 = ($f|0)==(0|0);
  if (!($977)) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;return ($$0|0);
  }
  $978 = ($l10n$0$lcssa|0)==(0);
  if ($978) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $i$2162 = 1;
  while(1) {
   $979 = (($nl_type) + ($i$2162<<2)|0);
   $980 = HEAP32[$979>>2]|0;
   $981 = ($980|0)==(0);
   if ($981) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $982 = (($nl_arg) + ($i$2162<<3)|0);
   $983 = ($980>>>0)>(20);
   L610: do {
    if (!($983)) {
     do {
      switch ($980|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $984 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$982>>2] = $984;
       break L610;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $986 = ($985|0)<(0);
       $987 = $986 << 31 >> 31;
       $988 = $982;
       $989 = $988;
       HEAP32[$989>>2] = $985;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L610;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $993 = $982;
       $994 = $993;
       HEAP32[$994>>2] = $992;
       $995 = (($993) + 4)|0;
       $996 = $995;
       HEAP32[$996>>2] = 0;
       break L610;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $997 = $arglist_current44;
       $998 = $997;
       $999 = HEAP32[$998>>2]|0;
       $1000 = (($997) + 4)|0;
       $1001 = $1000;
       $1002 = HEAP32[$1001>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1003 = $982;
       $1004 = $1003;
       HEAP32[$1004>>2] = $999;
       $1005 = (($1003) + 4)|0;
       $1006 = $1005;
       HEAP32[$1006>>2] = $1002;
       break L610;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1007 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1008 = $1007&65535;
       $1009 = $1008 << 16 >> 16;
       $1010 = ($1009|0)<(0);
       $1011 = $1010 << 31 >> 31;
       $1012 = $982;
       $1013 = $1012;
       HEAP32[$1013>>2] = $1009;
       $1014 = (($1012) + 4)|0;
       $1015 = $1014;
       HEAP32[$1015>>2] = $1011;
       break L610;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1016 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1016 & 65535;
       $1017 = $982;
       $1018 = $1017;
       HEAP32[$1018>>2] = $$mask1$i;
       $1019 = (($1017) + 4)|0;
       $1020 = $1019;
       HEAP32[$1020>>2] = 0;
       break L610;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1021 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1022 = $1021&255;
       $1023 = $1022 << 24 >> 24;
       $1024 = ($1023|0)<(0);
       $1025 = $1024 << 31 >> 31;
       $1026 = $982;
       $1027 = $1026;
       HEAP32[$1027>>2] = $1023;
       $1028 = (($1026) + 4)|0;
       $1029 = $1028;
       HEAP32[$1029>>2] = $1025;
       break L610;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1030 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1030 & 255;
       $1031 = $982;
       $1032 = $1031;
       HEAP32[$1032>>2] = $$mask$i;
       $1033 = (($1031) + 4)|0;
       $1034 = $1033;
       HEAP32[$1034>>2] = 0;
       break L610;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1035 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$982>>3] = $1035;
       break L610;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$982>>3] = $1036;
       break L610;
       break;
      }
      default: {
       break L610;
      }
      }
     } while(0);
    }
   } while(0);
   $1037 = (($i$2162) + 1)|0;
   $1038 = ($1037|0)<(10);
   if ($1038) {
    $i$2162 = $1037;
   } else {
    label = 447;
    break;
   }
  }
  if ((label|0) == 447) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  $i$3160 = $i$2162$lcssa;
  while(1) {
   $1041 = (($nl_type) + ($i$3160<<2)|0);
   $1042 = HEAP32[$1041>>2]|0;
   $1043 = ($1042|0)==(0);
   $1040 = (($i$3160) + 1)|0;
   if (!($1043)) {
    $$0$ph = -1;
    break;
   }
   $1039 = ($1040|0)<(10);
   if ($1039) {
    $i$3160 = $1040;
   } else {
    $$0$ph = 1;
    break;
   }
  }
  $$0 = $$0$ph;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 448) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 449) {
  $$0 = $$0$ph285;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 return ($l|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&511](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&1023](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
}


function dynCall_id(index,a1) {
  index = index|0;
  a1=+a1;
  return FUNCTION_TABLE_id[index&511](+a1)|0;
}


function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
  return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
  FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
}


function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
  FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_di(index,a1) {
  index = index|0;
  a1=a1|0;
  return +FUNCTION_TABLE_di[index&511](a1|0);
}


function dynCall_iid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  return FUNCTION_TABLE_iid[index&1023](a1|0,+a2)|0;
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
  FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
  FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_diii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_dii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return +FUNCTION_TABLE_dii[index&1023](a1|0,a2|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&1023]()|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiid(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=+a4;
  FUNCTION_TABLE_viiid[index&511](a1|0,a2|0,a3|0,+a4);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&1023]();
}


function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
function b6(p0) { p0 = +p0; nullFunc_id(6);return 0; }
function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
function b8(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(8);return 0; }
function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
function b9(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(9); }
function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(10); }
function b11(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(11); }
function b12(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(12); }
function b13(p0) { p0 = p0|0; nullFunc_di(13);return +0; }
function b14(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_iid(14);return 0; }
function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(15); }
function b16(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(16); }
function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(17); }
function b18(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(18); }
function b19(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(19);return 0; }
function b20(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(20);return 0; }
function b21(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(21);return +0; }
function b22(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_dii(22);return +0; }
function b23() { ; nullFunc_i(23);return 0; }
function _localeconv__wrapper() { ; return _localeconv()|0; }
function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
function b24(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(24);return 0; }
function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
function b25(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = +p3; nullFunc_viiid(25); }
function b26(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(26); }
function b27() { ; nullFunc_v(27); }
function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
function b28(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(28);return 0; }
function b29(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(29); }

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZN7croutes20nearest_with_ret_algIdE10try_to_addENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEEPSC_RNS2_6vectorIiNSF_IiEEEERNSK_IbNSF_IbEEEE,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,__ZN7croutes11nearest_algIdE10try_to_addENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEEPSC_RNS2_6vectorIiNSF_IiEEEERNSK_IbNSF_IbEEEE,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,__ZN8picojson5parseINSt3__111__wrap_iterIPKcEEEET_RNS_5valueERKS6_SA_PNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNSt3__111__sift_downIRZN7croutes10little_algIdE6workerENS_10shared_ptrINS1_5ndataIdEEEES7_NS4_INS1_6answerIdEEEEPNS_5dequeIPKNS1_8net_bondIdEENS_9allocatorISF_EEEENS_6vectorIbNSG_IbEEEESM_EUlRKPSD_SP_E_NS_11__wrap_iterIPSN_EEEEvT0_SV_T_NS_15iterator_traitsISV_E15difference_typeESV_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN8picojson5valueC2Ed,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,__ZN7croutes20nearest_with_ret_algIdED2Ev,__ZN7croutes20nearest_with_ret_algIdED0Ev,b3,b3,b3,b3,b3,__ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEED2Ev,__ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEE16__on_zero_sharedEv,b3,__ZNSt3__120__shared_ptr_emplaceIN7croutes6answerIdEENS_9allocatorIS3_EEE21__on_zero_shared_weakEv,__ZN7croutes9algorithmIdED2Ev,__ZN7croutes9algorithmIdED0Ev,b3,__ZN7croutes11nearest_algIdED2Ev,__ZN7croutes11nearest_algIdED0Ev,b3,b3,b3,b3,__ZN7croutes10little_algIdED2Ev,__ZN7croutes10little_algIdED0Ev,b3,b3,b3,b3,__ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEED2Ev
,__ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEED0Ev,__ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEE16__on_zero_sharedEv,__ZNSt3__120__shared_ptr_emplaceIN7croutes5ndataIdEENS_9allocatorIS3_EEE21__on_zero_shared_weakEv,__ZN7croutes14prim_euler_algIdED2Ev,__ZN7croutes14prim_euler_algIdED0Ev,b3,b3,b3,b3,__ZN7croutes6nn_algIdED2Ev,__ZN7croutes6nn_algIdED0Ev,b3,b3,b3,b3,__ZN7croutes17data_inconsistentD2Ev,__ZN7croutes17data_inconsistentD0Ev,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__110__stdinbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__114__shared_countD2Ev,__ZNSt3__114__shared_countD0Ev,__ZNSt3__119__shared_weak_countD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev
,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3
,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3
,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt9exceptionD2Ev,__ZNSt9exceptionD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3
,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b3,b3,__ZN7croutes6nn_algIdEC2Ev,__ZN7croutes14prim_euler_algIdEC2Ev,__ZN7croutes10little_algIdEC2Ev,__ZN7croutes11nearest_algIdEC2Ev,__ZN7croutes20nearest_with_ret_algIdEC2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,__ZNSt3__15dequeIiNS_9allocatorIiEEE8pop_backEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6ungetcEv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,_freelocale__wrapper,b3,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv
,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor108,b3,___cxx_global_array_dtor93,b3,___cxx_global_array_dtor69,___cxx_global_array_dtor45,___cxx_global_array_dtor42,___cxx_global_array_dtor,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,_free,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4
,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv
,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEEC2ERKS5_,__ZNSt3__110shared_ptrIN7croutes5ndataIdEEE11make_sharedIJRjEEES4_DpOT_,b4,b4
,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,__ZNSt11logic_errorC2EPKc,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE8allocateEj,b4,b4,b4,__Z9read_jsonRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN8picojson5valueC2ERKNSt3__13mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES0_NS1_4lessIS8_EENS6_INS1_4pairIKS8_S0_EEEEEE,__ZN8picojson5valueC2ERKS0_,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE21__push_back_slow_pathIS2_EEvOT_,__ZN8picojson5valueC2ERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE,__ZN8picojson5valueC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4
,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,__ZN8picojson5value4swapERS0_,b4,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEEC2ERKSG_,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,b4,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b4,b4,b4,b4,__ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE7reserveEj,b4,__ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIS4_EEvOT_,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEEC2ERKS3_,__ZNSt3__16vectorIbNS_9allocatorIbEEEC2ERKS3_,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj,__ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS4_RS6_EE,b4,b4,b4,b4,__ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE9push_backEOS6_
,b4,b4,__ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE10push_frontERKS6_,b4,__ZNSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE26__swap_out_circular_bufferERNS_14__split_bufferISA_RSB_EE,b4,b4,b4,b4,b4,__ZNK7croutes5ndataIdE4copyEv,b4,b4,b4,b4,__ZNSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE21__push_back_slow_pathIRKS4_EEvOT_,b4,__ZNKSt3__16vectorIPN7croutes8net_bondIdEENS_9allocatorIS4_EEE17__annotate_shrinkEj,b4,__ZN7croutes6answerIdE13delete_bundleEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEE,__ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEEC2ERKS8_,__ZNKSt3__16vectorIPNS_5dequeIPKN7croutes8net_bondIdEENS_9allocatorIS6_EEEENS7_ISA_EEE17__annotate_shrinkEj,b4,__ZN7croutes5ndataIdEC2ERKS1_,b4,__ZNSt3__16vectorIPNS0_IPN7croutes8net_bondIdEENS_9allocatorIS4_EEEENS5_IS8_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS8_RS9_EE,b4,b4,b4,__ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE21__push_back_slow_pathIS5_EEvOT_
,__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIiEEvOT_,__ZNSt3__15dequeIiNS_9allocatorIiEEE9push_backEOi,__ZNKSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE17__annotate_shrinkEj,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_,__ZNSt3__16vectorIdNS_9allocatorIdEEE8allocateEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b4,__ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE9push_backEOS1_,__ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE10push_frontERKS1_,__ZNSt3__16vectorIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS5_RS7_EE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,b4,__ZNSt3__18ios_base5clearEj,b4,__ZNSt3__19to_stringEi,b4,b4,b4,__ZN7croutes5ndataIdEC2Ej,b4,__ZN8picojson4copyINSt3__120back_insert_iteratorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEEEvRKS8_T_,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,__ZNSt3__18ios_base4initEPv,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_
,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,b5,__ZN7croutes20nearest_with_ret_algIdE10short_nameEv,__ZN7croutes20nearest_with_ret_algIdE4nameEv,__ZN7croutes20nearest_with_ret_algIdE12russian_nameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7croutes11nearest_algIdE10short_nameEv,__ZN7croutes11nearest_algIdE4nameEv,__ZN7croutes11nearest_algIdE12russian_nameEv,b5,b5,b5,__ZN7croutes10little_algIdE10short_nameEv,__ZN7croutes10little_algIdE4nameEv,__ZN7croutes10little_algIdE12russian_nameEv,b5,b5
,b5,b5,b5,b5,b5,__ZN7croutes14prim_euler_algIdE10short_nameEv,__ZN7croutes14prim_euler_algIdE4nameEv,__ZN7croutes14prim_euler_algIdE12russian_nameEv,b5,b5,b5,__ZN7croutes6nn_algIdE10short_nameEv,__ZN7croutes6nn_algIdE4nameEv,__ZN7croutes6nn_algIdE12russian_nameEv,b5,b5,b5,__ZNK7croutes17data_inconsistent4whatEv,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b5
,b5,b5,b5,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b5
,b5,b5,b5,b5,b5,b5,b5,__ZNKSt13runtime_error4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,__ZNKSt3__119__iostream_category4nameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b5,b5,b5
,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv
,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b5,b5,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b5,b5,b5,b5,b5,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv
,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt9exception4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5,b5,b5,b5,b5,b5,__ZNKSt8bad_cast4whatEv
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,__ZN8picojson5value3getINSt3__13mapINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEES0_NS2_4lessIS9_EENS7_INS2_4pairIKS9_S0_EEEEEEEERT_v,__ZNSt3__111char_traitsIcE6lengthEPKc,b5,b5,__ZNK8picojson5value3getIdEERKT_v,__ZNK8picojson5value3getINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEERKT_v,b5,b5,b5,__ZN8picojson5value3getINSt3__16vectorIS0_NS2_9allocatorIS0_EEEEEERT_v
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Znwj,b5,b5,b5,b5,b5,__ZNK7croutes6answerIdE7bundlesEv,b5,__ZNK7croutes8net_bondIdE4fromEv,b5,b5,__ZNK7croutes8net_bondIdE2toEv,__ZNK7croutes8net_bondIdE8distanceEv,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN7croutes6answerIdE13create_bundleEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZZN7croutes20nearest_with_ret_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEbENKUlvE_clEv,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,__ZZN7croutes11nearest_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEbENKUlvE_clEv,b5,__ZNK7croutes5ndataIdE11nodes_countEv,b5,b5,__ZN7croutes8net_bondIdE8distanceEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN8picojson21default_parse_context8set_nullEv,b5,b5,b5,b5,b5
,b5,__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE4getcEv,b5,b5,b5,b5,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b5,b5,b5,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,_uselocale__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_wcslen,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_id = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__Z13__DOUBLE_BITSd,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6];
var FUNCTION_TABLE_iiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b7,b7,b7,b7,b7,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_iiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b8,b8,b8,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b8,b8,b8
,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b8,b8,b8,b8,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b8,b8,b8,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b8,b8,b8,b8,b8,b8,b8
,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b8,b8,b8,b8,b8,b8,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b8,b8,b8,b8,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b8,b8,b8,b8,b8,b8
,b8,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b8,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b8,b8,__ZNKSt3__15ctypeIcE9do_narrowEcc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE5do_isEtw,b8,b8,b8,b8,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b8,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b8,b8,__ZNKSt3__15ctypeIwE9do_narrowEwc,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_sn_write,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b8,b8,b8,b8,b8,b8,__ZN7croutes5ndataIdE2atEjj,b8,b8,b8,b8,b8,__ZN7croutes5ndataIdE2atEii,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK7croutes5ndataIdE2atEii,b8,b8,__ZZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEiENKUliiE_clEii,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEjPKc,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,__ZN8picojson21default_parse_context17parse_object_itemINSt3__111__wrap_iterIPKcEEEEbRNS_5inputIT_EERKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_newlocale__wrapper,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,_wcrtomb,b8,b8,_mbtowc,_mbrlen,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,_vasprintf,b8,b8,_do_read,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b9,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiid = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b10,b10,b10
,b10,b10,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b11,b11,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11];
var FUNCTION_TABLE_viiiiii = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b12,b12,b12,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b12,b12
,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b12,b12,b12,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b12,b12,b12,b12,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
,b12,b12,b12];
var FUNCTION_TABLE_di = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNK7croutes5ndataIdE3infEv,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
,b13,b13,b13];
var FUNCTION_TABLE_iid = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZN8picojson21default_parse_context10set_numberEd,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
,b14,b14,b14,b14,b14];
var FUNCTION_TABLE_viiiiiii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm
,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b15,b15,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b15,b15,b15,b15,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b15,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b15,b15,b15,b15,b15
,b15,b15,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b15,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b15,b15,b15,b15,b15,b15,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b15,b15,b15,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZN7croutes10little_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEES6_NS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEENS2_6vectorIbNSF_IbEEEESL_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b15,b15
,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
,b15,b15,b15,b15,b15];
var FUNCTION_TABLE_viiiiiid = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b16,b16,b16,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_viiiiiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17];
var FUNCTION_TABLE_viiiiiiiiii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN7croutes20nearest_with_ret_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEb,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,__ZN7croutes11nearest_algIdE6workerENSt3__110shared_ptrINS_5ndataIdEEEENS3_INS_6answerIdEEEEPNS2_5dequeIPKNS_8net_bondIdEENS2_9allocatorISE_EEEERKNS2_6vectorIPSC_NSF_ISK_EEEEiiNSJ_IiNSF_IiEEEENSJ_IbNSF_IbEEEEb,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b18,b18,b18,b18,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b18,b18,b18,b18,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b18,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
,b18,b18,b18,b18,b18];
var FUNCTION_TABLE_iii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj
,b19,__ZNSt3__111__stdoutbufIwE8overflowEj,b19,b19,b19,b19,b19,__ZNSt3__110__stdinbufIwE9pbackfailEj,b19,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b19,__ZNSt3__111__stdoutbufIcE8overflowEi,b19,b19,b19,b19,b19,__ZNSt3__110__stdinbufIcE9pbackfailEi
,b19,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,__ZNKSt3__15ctypeIcE10do_toupperEc,b19,__ZNKSt3__15ctypeIcE10do_tolowerEc,b19,__ZNKSt3__15ctypeIcE8do_widenEc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE10do_toupperEw,b19,__ZNKSt3__15ctypeIwE10do_tolowerEw,b19,__ZNKSt3__15ctypeIwE8do_widenEc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,b19,b19,b19,b19,__ZNKSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEE2atERSC_,b19,b19,b19,b19,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE2atEj,b19
,__ZNKSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE2atEj,b19,b19,__ZNKSt3__16locale9use_facetERNS0_2idE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixEOS6_,b19,b19,__ZN8picojson5valueaSERKS0_,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN7croutes6answerIdE11copy_bundleEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEE,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b19,b19,b19,b19,__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE5matchERKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b19,__ZN8picojson21default_parse_context8set_boolEb,b19,b19,__ZN8picojson5inputINSt3__111__wrap_iterIPKcEEE6expectEi,__ZN8picojson13_parse_stringINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_11__wrap_iterIPKcEEEEbRT_RNS_5inputIT0_EE
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_isxdigit_l,_isdigit_l
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b19,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
,b19,b19,b19,b19,b19];
var FUNCTION_TABLE_iiiiii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b20,b20,b20,b20,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b20,b20,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b20,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20
,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b20,b20,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,_wcsnrtombs,b20,_mbsnrtowcs,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
,b20,b20,b20,b20,b20];
var FUNCTION_TABLE_diii = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
,b21,b21,b21,b21,b21];
var FUNCTION_TABLE_dii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_strtod,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
,b22,b22,b22,b22,b22];
var FUNCTION_TABLE_i = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,_localeconv__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16__clocEv,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16locale5__imp12make_classicEv,b23,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b23,b23
,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,___cxa_get_globals_fast,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
,b23,b23,b23,b23,b23];
var FUNCTION_TABLE_iiiii = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b24,b24,b24,b24,b24,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b24,b24,b24,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b24,b24,b24,b24
,b24,b24,b24,b24,_mbsrtowcs,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,_catgets__wrapper,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,_mbrtowc,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
,b24,b24,b24,b24,b24];
var FUNCTION_TABLE_viiid = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,__ZN7croutes5ndataIdE8add_nodeEiid,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZN7croutes8net_bondIdEC2Eiid,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
,b25,b25,b25];
var FUNCTION_TABLE_viii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__114error_category23default_error_conditionEi,b26,b26,__ZNKSt3__119__iostream_category7messageEi,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN8picojson5parseERNS_5valueERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b26,b26,b26,b26,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16vectorIN8picojson5valueENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_,__ZN7croutes17data_inconsistentC2Eii,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,__ZNK8picojson5value9serializeEb,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16vectorIbNS_9allocatorIbEEEC2EjRKb,__ZNSt3__16vectorIiNS_9allocatorIiEEEC2EjRKi,b26,b26,b26,__ZNSt3__16__sortIRZN7croutes20nearest_with_ret_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_,b26,b26,b26,b26,__ZN7croutes6answerIdE8add_bondEPNSt3__15dequeIPKNS_8net_bondIdEENS2_9allocatorIS7_EEEES7_,b26,b26,b26,b26,__ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endIPiEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES7_S7_,__ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEE18__construct_at_endINS_13move_iteratorIPS6_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESG_SG_,b26
,b26,b26,b26,b26,b26,__ZNSt3__16__sortIRZN7croutes11nearest_algIdE8_computeENS_10shared_ptrINS1_5ndataIdEEEEiEUlRKPNS1_8net_bondIdEESC_E_PSA_EEvT0_SG_T_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16vectorIdNS_9allocatorIdEEEC2EjRKd,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__114__split_bufferIPiRNS_9allocatorIS1_EEE18__construct_at_endINS_13move_iteratorIPS1_EEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK8picojson5value10_serializeINSt3__120back_insert_iteratorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEEEvT_i,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b26,b26,b26,b26,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b26,b26,b26,b26,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
,b26,b26,b26,b26,b26];
var FUNCTION_TABLE_v = [b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,___cxa_pure_virtual__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZL25default_terminate_handlerv,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,___cxa_rethrow__wrapper,___cxa_end_catch__wrapper,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,__ZSt17__throw_bad_allocv,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27,b27
,b27,b27,b27,b27,b27];
var FUNCTION_TABLE_iiiiiiiii = [b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b28,b28,b28,b28,b28,b28,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b28,b28,b28
,b28,b28,b28,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28,b28
,b28,b28,b28];
var FUNCTION_TABLE_viiii = [b29,b29,b29,__ZN7croutes9algorithmIdE7computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29,b29,b29,__ZN7croutes20nearest_with_ret_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZN7croutes11nearest_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29,b29,b29,b29,b29,__ZN7croutes10little_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29
,b29,b29,b29,b29,b29,b29,b29,b29,__ZN7croutes14prim_euler_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29,b29,b29,b29,b29,__ZN7croutes6nn_algIdE8_computeENSt3__110shared_ptrINS_5ndataIdEEEEi,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b29,b29,b29,b29,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b29,b29,b29,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b29,b29,b29,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSK_SK_,b29,b29,b29,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE15__insert_uniqueIRKNS_4pairIKS7_S9_EEEENS_15__tree_iteratorISA_PNS_11__tree_nodeISA_PvEEiEENS_21__tree_const_iteratorISA_SR_iEEOT_,b29,b29,b29,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8picojson5valueEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE20__node_insert_uniqueENS_21__tree_const_iteratorISA_PNS_11__tree_nodeISA_PvEEiEESL_,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29,__ZNSt3__114__split_bufferIPPKN7croutes8net_bondIdEERNS_9allocatorIS6_EEEC2EjjS9_,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,b29,__ZNSt3__15dequeIPKN7croutes8net_bondIdEENS_9allocatorIS5_EEE8__appendINS_16__deque_iteratorIS5_PKS5_RSB_PKSC_iLi1024EEEEEvT_SH_PNS_9enable_ifIXsr21__is_forward_iteratorISH_EE5valueEvE4typeE,b29,b29,b29,b29,b29,b29,b29
,b29,b29,b29];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _memset: _memset, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _calculate: _calculate, _i64Subtract: _i64Subtract, _strlen: _strlen, _malloc: _malloc, _memcpy: _memcpy, _sum: _sum, _realloc: _realloc, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, ___cxx_global_var_init10: ___cxx_global_var_init10, __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_id: dynCall_id, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_iid: dynCall_iid, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_dii: dynCall_dii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viiid: dynCall_viiid, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__calculate = asm["_calculate"]; asm["_calculate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__calculate.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__sum = asm["_sum"]; asm["_sum"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sum.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____cxx_global_var_init10 = asm["___cxx_global_var_init10"]; asm["___cxx_global_var_init10"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxx_global_var_init10.apply(null, arguments);
};

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _calculate = Module["_calculate"] = asm["_calculate"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _sum = Module["_sum"] = asm["_sum"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___cxx_global_var_init10 = Module["___cxx_global_var_init10"] = asm["___cxx_global_var_init10"];
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_id = Module["dynCall_id"] = asm["dynCall_id"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_iid = Module["dynCall_iid"] = asm["dynCall_iid"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_dii = Module["dynCall_dii"] = asm["dynCall_dii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiid = Module["dynCall_viiid"] = asm["dynCall_viiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



